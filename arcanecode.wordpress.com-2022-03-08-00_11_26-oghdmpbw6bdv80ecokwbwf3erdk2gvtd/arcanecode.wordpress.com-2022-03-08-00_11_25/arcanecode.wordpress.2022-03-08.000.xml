<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2022-03-08 00:11"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Arcane Code</title>
<link>http://arcanecode.com</link>
<description/>
<pubDate>Tue, 08 Mar 2022 00:11:26 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://arcanecode.com</wp:base_blog_url>
<wp:author>
  <wp:author_id>344266</wp:author_id>
  <wp:author_login>arcanecode</wp:author_login>
  <wp:author_email>arcanecode@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[arcanecode]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[Robert]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[Cain]]></wp:author_last_name>
</wp:author>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://s0.wp.com/i/buttonw-com.png</url>
		<title>Arcane Code</title>
		<link>http://arcanecode.com</link>
	</image>
	<item>
  <title>No Fun with Slow Internet and Big Downloads</title>
  <link>http://arcanecode.com/2021/11/05/no-fun-with-slow-internet-and-big-downloads/</link>
  <pubDate>Fri, 05 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4227</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I'm taking this rare opportunity to post a bit of a rant.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I live in a rural part of the country. It's a beautiful area, lots of woods, nature, a very quiet area.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With that comes some downsides, including slow internet. My home speed is a blazing twelve megabits. I have a relative's house I work at in another part of the state, there the internet is a mere three megabits.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At the same time, software updates seem to be growing larger and larger. The most recent update to Apple's XCode was over twelve gig. There is a video editing package called DaVinci Resolve that regularly puts out two gig updates.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These take incredibly lengthy periods of time to download at my home, assuming the connection doesn't drop or reset mid-download. I wind up going to coffee shops or the library where there is faster internet that allows me to receive these large updates. Even in these locations the fastest speed is one hundred megabits, shared among all its users.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm not the only person in this situation. At conferences (back in the pre-COVID days when we had them) I often spoke with other attendees who lived under similar circumstances.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, the real solution is to get faster internet to our rural communities, both here in the US and worldwide. Much of our planet is dependent on the internet for communications, business, and more, to the point where it is becoming a necessity.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unfortunately, infrastructure is not cheap, nor is it quick to roll out. So, until that happens, I'd really like for software makers to remember those of us with slower connections.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead of multi-gigabyte updates, I'd love to see software makers create smaller patches for their software, instead of a basic complete reinstall of the applications. Yes, it would require more testing, but would result in lower demands on their corporate servers and bandwidth.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Perhaps if others across the planet joined our voices it may have a positive effect, both in reducing download sizes and in getting a meaningful truly high-speed internet infrastructure in place.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4227</wp:post_id>
  <wp:post_date>2021-11-05 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-05 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-04 17:36:36</wp:post_modified>
  <wp:post_modified_gmt>2021-11-04 23:36:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>no-fun-with-slow-internet-and-big-downloads</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="community"><![CDATA[Community]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65003983148]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1636128005]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1456652549675786245";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_331774298753489";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166149</wp:comment_id>
    <wp:comment_author><![CDATA[Michael]]></wp:comment_author>
    <wp:comment_author_email>mike@mrbendo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>165.225.10.117</wp:comment_author_IP>
    <wp:comment_date>2021-11-05 17:54:29</wp:comment_date>
    <wp:comment_date_gmt>2021-11-05 23:54:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow.  It's tough being you!  The particular location I live in although in a city was more than 10k feet from the NOC which apparently is a magic number and prevented decent speeds for many years.  12 megabits would have been a dream just a few years ago.  The real culprit in here are the malware makers and scammers.  It's because of them we must update all the time.  It's like taking shoes off in the airport.  Beyond the usual recommendations; starting updates before going to bed, download managers, satellite bandwidth, VDI, etc., perhaps you need to evaluate your entire situation.  The choice of hardware, software and location are all on you.  If you are willing to spend the money, there's a solution.  It's hard to be sympathetic.  Back in my day...;)]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636161549.062712;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636156469.936666;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Solved: CMD Key Combos Not Working with Logitech K850 and MacOS Monterrey</title>
  <link>http://arcanecode.com/2021/11/09/solved-cmd-key-combos-not-working-with-logitech-k850-and-macos-monterrey/</link>
  <pubDate>Tue, 09 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4234</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p id="earlier-this-year-i-did-a-blog-post-working-from-home-permanently-in-which-i-recommend-using-a-good-keyboard-especially-when-you-have-multiple-computers">Earlier this year I did a blog post, <a rel="noreferrer noopener" href="https://arcanecode.com/2021/03/22/working-from-home-permanently/" target="_blank">Working From Home - Permanently</a>, in which I recommend using a good keyboard especially when you have multiple computers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since upgrading to MacOS Monterrey I've had an issue where some of the basic command key combos, such as CMD+X, CMD+V, CMD+C, and more were not working from my Logitech K850 keyboard. However, when I press those keys directly on my MacBook Pro they worked fine.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For those unfamiliar with it, the Logitech K850 will let you bluetooth connect to three different computers. It has three buttons labeled 1, 2, and 3 that will switch the input to a different computer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This seemed to occur when I first powered up my MacBook. I'd go to do something and find my often used command key combos (CMD+C, etc) would not work.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The fix turned out to be fairly simple, what I needed to do is switch the input to another computer (using the 1, 2, 3 buttons). Once the keyboard was connected to another machine, I could return to my MacBook and find that the CMD keys worked like they were supposed to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm guessing the K850 must power up in some default state in which it doesn't realize it is in "Mac" mode. It isn't until you switch from some other computer to the MacBook that it realizes "oh, hey, I'm connected to a MacBook so I'll switch to Mac mode" and make the CMD key combos work right.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But that's just a guess on my part, the important thing is if you are having the same issue, just switch the keyboard input to a different computer then back to the MacBook via the 1, 2, 3 buttons and the CMD key combinations should start working.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note, in my testing I had to switch to an input that was active (i.e. to a computer that was powered up). When I switched to an unused input (not currently connected to a powered computer) and back it didn't always work right.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4234</wp:post_id>
  <wp:post_date>2021-11-09 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-09 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-08 17:56:52</wp:post_modified>
  <wp:post_modified_gmt>2021-11-08 23:56:52</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>solved-cmd-key-combos-not-working-with-logitech-k850-and-macos-monterrey</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="post_tag" nicename="k850"><![CDATA[K850]]></category>
  <category domain="post_tag" nicename="logitech"><![CDATA[Logitech]]></category>
  <category domain="post_tag" nicename="monterrey"><![CDATA[Monterrey]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3056]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1636473644]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65155511621]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1458102266972577796";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_334292001835052";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167260</wp:comment_id>
    <wp:comment_author><![CDATA[Thom]]></wp:comment_author>
    <wp:comment_author_email>thom@probationlabs.se</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>37.221.104.199</wp:comment_author_IP>
    <wp:comment_date>2022-02-22 23:48:07</wp:comment_date>
    <wp:comment_date_gmt>2022-02-23 05:48:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have the same problem. Thanks for the solution. Have you found any easier way to make it work?]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645595288.194801;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:17:{s:14:"comment_author";s:4:"Thom";s:20:"comment_author_email";s:21:"thom@probationlabs.se";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:96:"I have the same problem. Thanks for the solution. Have you found any easier way to make it work?";s:12:"comment_type";s:0:"";s:7:"user_ID";i:0;s:7:"user_id";i:0;s:17:"comment_author_IP";s:14:"37.221.104.199";s:13:"comment_agent";s:120:"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36";s:7:"user_ip";s:14:"37.221.104.199";s:10:"user_agent";s:120:"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:107:"https://arcanecode.com/2021/11/09/solved-cmd-key-combos-not-working-with-logitech-k850-and-macos-monterrey/";s:19:"POST_ak_hp_textarea";s:0:"";s:10:"POST_ak_js";s:13:"1645595003899";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645600231.882263;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun with PowerShell Enums</title>
  <link>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/</link>
  <pubDate>Mon, 15 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4244</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nThis post begins a series on using _Classes_ in PowerShell. As a first step, we will cover the use of an `Enum`, as enums are frequently used in combination with classes.\n\nAn Enum is a way to provide a set of predetermined values to the end user. This allows the user to pick from a finite list, and assure a value being passed into a function or class will be valid.\n\nWe'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Basic Enum Declaration\n\n`Enum` is short for _enumerated value_. As mentioned in the intro, it is a set of predetermined values that will ensure users of your script select a valid value required by your PowerShell code. Let's start by defining a basic `Enum`.\n\n```powershell\nEnum MyTwitters\n{\n  ArcaneCode\n  ArcaneTC\n  N4IXT\n}\n```\n\nAs you can see, the basic declaration is very simple. You simply use the keyword `Enum` followed by what you wish to name it. In the squiggly braces you list the valid values.\n\nHere I've listed three of my Twitter accounts. The first is the main one I use, _ArcaneCode_. The second is the one I use for my company _ArcaneTC_ (short for Arcane Training and Consulting). I use it primarily to announce new Pluralsight courses, so it doesn't see a huge amount of use.\n\nOne of my hobbies is amateur radio, also known as _ham radio_. _N4IXT_ is my FCC assigned amateur radio call sign I use to identify myself on the air. I don't post a lot, I use it mostly to read through the latest news in the ham radio world.\n\nNote that Enums cannot have spaces in their names, although you could use separators such as an underscore. *Arcane_Code* would be a valid value for an enum.\n\n## What are my valid Enum values?\n\nYou've now created an `Enum`, perhaps you've included it within a module you are providing to other programmers in your company. How can they retrieve a list of valid values?\n\nHopefully you've provided documentation, but it's also easy for a user to have PowerShell return a list of values. First, make sure you have executed the code above by highlighting it and using F8 (VSCode) or F5 (PowerShell IDE) to get the Enum into memory. Then you can run the line of code below. \n\n```powershell\n[MyTwitters].GetEnumNames()\n```\n\nResult:\n\n```\nArcaneCode\nArcaneTC\nN4IXT\n```\n\nAs you can see, it simply returns a list of the values that we declared in the Enum.\n\n## Assigning an Enum to a Variable\n\nNow we have our enum, and know what the values are. We're now ready to use our enum in our script. Here I'll just assign it to a variable, but we could also pass an enumerated value into a function.\n\nBegin typing out the following code sample, and note what happens when you hit the second colon.\n\n```powershell\n$tweet = [MyTwitters]::\n```\n\nWhen you have entered the second colon, you should see a list of the enumerated values in VSCode.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>This post begins a series on using <em>Classes</em> in PowerShell. As a first step, we will cover the use of an <code>Enum</code>, as enums are frequently used in combination with classes.</p>
<p>An Enum is a way to provide a set of predetermined values to the end user. This allows the user to pick from a finite list, and assure a value being passed into a function or class will be valid.</p>
<p>We'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Basic Enum Declaration</h2>
<p><code>Enum</code> is short for <em>enumerated value</em>. As mentioned in the intro, it is a set of predetermined values that will ensure users of your script select a valid value required by your PowerShell code. Let's start by defining a basic <code>Enum</code>.</p>
<pre><code class="language-powershell">Enum MyTwitters
{
  ArcaneCode
  ArcaneTC
  N4IXT
}
</code></pre>
<p>As you can see, the basic declaration is very simple. You simply use the keyword <code>Enum</code> followed by what you wish to name it. In the squiggly braces you list the valid values.</p>
<p>Here I've listed three of my Twitter accounts. The first is the main one I use, <em>ArcaneCode</em>. The second is the one I use for my company <em>ArcaneTC</em> (short for Arcane Training and Consulting). I use it primarily to announce new Pluralsight courses, so it doesn't see a huge amount of use.</p>
<p>One of my hobbies is amateur radio, also known as <em>ham radio</em>. <em>N4IXT</em> is my FCC assigned amateur radio call sign I use to identify myself on the air. I don't post a lot, I use it mostly to read through the latest news in the ham radio world.</p>
<p>Note that Enums cannot have spaces in their names, although you could use separators such as an underscore. <em>Arcane_Code</em> would be a valid value for an enum.</p>
<h2>What are my valid Enum values?</h2>
<p>You've now created an <code>Enum</code>, perhaps you've included it within a module you are providing to other programmers in your company. How can they retrieve a list of valid values?</p>
<p>Hopefully you've provided documentation, but it's also easy for a user to have PowerShell return a list of values. First, make sure you have executed the code above by highlighting it and using F8 (VSCode) or F5 (PowerShell IDE) to get the Enum into memory. Then you can run the line of code below.</p>
<pre><code class="language-powershell">[MyTwitters].GetEnumNames()
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
ArcaneTC
N4IXT
</code></pre>
<p>As you can see, it simply returns a list of the values that we declared in the Enum.</p>
<h2>Assigning an Enum to a Variable</h2>
<p>Now we have our enum, and know what the values are. We're now ready to use our enum in our script. Here I'll just assign it to a variable, but we could also pass an enumerated value into a function.</p>
<p>Begin typing out the following code sample, and note what happens when you hit the second colon.</p>
<pre><code class="language-powershell">$tweet = [MyTwitters]::
</code></pre>
<p>When you have entered the second colon, you should see a list of the enumerated values in VSCode.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"align":"center","id":4247,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-01-vscode.png"><img src="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-01-vscode.png?w=647" alt="" class="wp-image-4247" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"I say _should_ as sometimes I've had VSCode return enums that were declared in my script, and not for the specific enum I was working with.\n\nIn the PowerShell ISE though, I've had it work right every time.\n"} -->
<div class="wp-block-jetpack-markdown"><p>I say <em>should</em> as sometimes I've had VSCode return enums that were declared in my script, and not for the specific enum I was working with.</p>
<p>In the PowerShell ISE though, I've had it work right every time.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"align":"center","id":4248,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-02-ise.png"><img src="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-02-ise.png?w=393" alt="" class="wp-image-4248" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"When complete, your assignment should look like:\n\n```powershell\n$tweet = [MyTwitters]::ArcaneCode\n```\n\n## Is it Valid?\n\nSo you have a value from the enum copied into your variable, `$tweet`. How do we test it?\n\nIt's important to understand enums are objects. In addition to the values you provide they have a set of properties and methods you can use. In the previous example, you saw the `GetEnumNames` method being used.\n\nAnother useful method is `IsDefined`.\n\n```powershell\n[enum]::IsDefined(([MyTwitters]), $tweet)\n```\n\nResult:\n\n```\nTrue\n```\n\nInto the `IsDefined` method you pass in your enumeration, then the value you want to test. Here our value is in the variable `$tweet`. If the value is contained in the enum, the method returns `True`.\n\nWhat if the user passes in a value that is not contained in our enum?\n\n```powershell\n$tweet = 'Invalid'\n[enum]::IsDefined(([MyTwitters]), $tweet)\n```\n\nResult:\n\n```\nFalse\n```\n\nReturning `False` makes it easy to use an `if` statement and raise an error if the user tries to use an invalid value. For more on the `if` statement, see my post [Fun with PowerShell Logic Branching](https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/).\n\n## Conclusion\n\nFor these examples we used my Twitter accounts for our enum values, but there are many more uses some of them extremely common. You could load an enum with the days of the week, months of the year, colors, and other common values your scripts might use.\n\nIn the introduction I mentioned we are starting our series on classes with the enum as enums are frequently used with classes. However this is not a requirement. You can use enums with any PowerShell code you want to write.\n\nIn the my next post we'll continue exploring the enum. We'll look at a few more useful methods, as well as see how to assign values to our enum values.\n\nThe demos in this series of blog posts came from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><p>When complete, your assignment should look like:</p>
<pre><code class="language-powershell">$tweet = [MyTwitters]::ArcaneCode
</code></pre>
<h2>Is it Valid?</h2>
<p>So you have a value from the enum copied into your variable, <code>$tweet</code>. How do we test it?</p>
<p>It's important to understand enums are objects. In addition to the values you provide they have a set of properties and methods you can use. In the previous example, you saw the <code>GetEnumNames</code> method being used.</p>
<p>Another useful method is <code>IsDefined</code>.</p>
<pre><code class="language-powershell">[enum]::IsDefined(([MyTwitters]), $tweet)
</code></pre>
<p>Result:</p>
<pre><code>True
</code></pre>
<p>Into the <code>IsDefined</code> method you pass in your enumeration, then the value you want to test. Here our value is in the variable <code>$tweet</code>. If the value is contained in the enum, the method returns <code>True</code>.</p>
<p>What if the user passes in a value that is not contained in our enum?</p>
<pre><code class="language-powershell">$tweet = 'Invalid'
[enum]::IsDefined(([MyTwitters]), $tweet)
</code></pre>
<p>Result:</p>
<pre><code>False
</code></pre>
<p>Returning <code>False</code> makes it easy to use an <code>if</code> statement and raise an error if the user tries to use an invalid value. For more on the <code>if</code> statement, see my post <a href="https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/">Fun with PowerShell Logic Branching</a>.</p>
<h2>Conclusion</h2>
<p>For these examples we used my Twitter accounts for our enum values, but there are many more uses some of them extremely common. You could load an enum with the days of the week, months of the year, colors, and other common values your scripts might use.</p>
<p>In the introduction I mentioned we are starting our series on classes with the enum as enums are frequently used with classes. However this is not a requirement. You can use enums with any PowerShell code you want to write.</p>
<p>In the my next post we'll continue exploring the enum. We'll look at a few more useful methods, as well as see how to assign values to our enum values.</p>
<p>The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4244</wp:post_id>
  <wp:post_date>2021-11-15 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-15 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-14 22:57:21</wp:post_modified>
  <wp:post_modified_gmt>2021-11-15 04:57:21</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-enums</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="enum"><![CDATA[Enum]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4252]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65386392103]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1636992033]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1460276546506313728";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_338134988117420";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166261</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 46/2021 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19840-Die-KW-462021-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2021-11-21 16:59:09</wp:comment_date>
    <wp:comment_date_gmt>2021-11-21 22:59:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Klassen, ENums, PowerShell? Hier erhaltet ihr Informationen. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637535549.161509;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637539588.755115;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166374</wp:comment_id>
    <wp:comment_author><![CDATA[More Fun with PowerShell Enums | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.30</wp:comment_author_IP>
    <wp:comment_date>2021-11-29 10:00:59</wp:comment_date>
    <wp:comment_date_gmt>2021-11-29 16:00:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a previous post, Fun with PowerShell Enums I introduced the concept of [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638201659.676432;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638205800.507582;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166267</wp:comment_id>
    <wp:comment_author><![CDATA[Using Enums in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/11/22/using-enums-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-11-22 07:10:09</wp:comment_date>
    <wp:comment_date_gmt>2021-11-22 13:10:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain quietly tells us that Powershell is a real programming language, sysadmins who claim to &#8230;: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637591060.562544;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637586609.600626;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-enums-03-header</title>
  <link>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/fun-with-powershell-enums-03-header/</link>
  <pubDate>Mon, 15 Nov 2021 04:53:53 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header.png</guid>
  <description/>
  <content:encoded><![CDATA[How to declare an enum]]></content:encoded>
  <excerpt:encoded><![CDATA[Declaring an Enum]]></excerpt:encoded>
  <wp:post_id>4251</wp:post_id>
  <wp:post_date>2021-11-14 22:53:53</wp:post_date>
  <wp:post_date_gmt>2021-11-15 04:53:53</wp:post_date_gmt>
  <wp:post_modified>2021-11-14 22:54:20</wp:post_modified>
  <wp:post_modified_gmt>2021-11-15 04:54:20</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-enums-03-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Enum Declaration]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>fun-with-powershell-enums-03-header</title>
  <link>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/fun-with-powershell-enums-03-header-2/</link>
  <pubDate>Mon, 15 Nov 2021 04:56:07 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4252</wp:post_id>
  <wp:post_date>2021-11-14 22:56:07</wp:post_date>
  <wp:post_date_gmt>2021-11-15 04:56:07</wp:post_date_gmt>
  <wp:post_modified>2021-11-14 22:56:07</wp:post_modified>
  <wp:post_modified_gmt>2021-11-15 04:56:07</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-enums-03-header-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header-1.png</wp:attachment_url>
</item>
<item>
  <title>Security for Apartment Dwellers</title>
  <link>http://arcanecode.com/2021/11/22/security-for-apartment-dwellers/</link>
  <pubDate>Mon, 22 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4253</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nI'm at the stage in my life where my wife and I are becoming empty nesters. My youngest daughter Anna is moving several states away to start a new life and I couldn't be prouder of her.\n\nAs she's been packing I've shared some security advice she can use at her new apartment. I got to thinking \u0022hey, this is good stuff I should share it with others!\u0022 Next week I'll continue my series on PowerShell Enums, but for this week let's talk security.\n\nBy the way, this advice can apply to apartment dwellers, dorm rooms, or even rental houses. For simplicity I'll refer to these as your _home_ in this article, meaning any place you live in and rent.\n\n# The Need for Security\n\nWhenever you rent, you are in someone else's property. That means they too have keys to your dwelling.\n\nAnd they use them. Exterminators come in on a regular basis to spray for bugs. Folks from the maintenance crew come in to check smoke alarms, air conditioning filters, and more.\n\nNow let me be clear, I firmly believe that 99% of these people are good, hard working, and honest. But all it takes is that one bad egg to ruin your day, maybe even your year.\n\nSome places provide notification in advance that someone will be entering your place of residence. But not all places, back when I was a renter it wasn't unusual to come home and find a \u0022your friendly neighborhood exterminator was here today\u0022 note on my door.\n\nOr you may not know at all, one complex I lived in never told you, I only knew if a neighbor mentioned it.\n\nA quick disclaimer before we get started: I mention several products in this post. These are not ads, I'm not making any money from these endorsements. I just like them and paid my own hard earned cash for them.\n\nSo that said, let me get into the suggestions.\n\n## Computer Security\n\n### Desktops\n\nIf you have a desktop computer, you should always lock your screen before you leave home. By locking your computer you'll require the entry of a password or pin to use the computer. Most people keep all types of things on their computer.\n\nWeb browsers are often set to automatically login to email, financial, even gaming accounts. Family photos populate your drive. Important documents like tax returns are often scanned and stored on your hard drive.\n\nOn all operating systems there will be menu options to lock the screen, but there are also keystroke shortcuts that will allow you to quickly lock your computer.\n\nOn Windows, the Windows Key + L combination will lock the screen. This frequently works on many Linux distributions as well, although you should check your documentation to be sure.\n\nOn macOS, you can use the Ctrl + Command + Q key combination to lock the screen.\n\nIf you are on macOS, and have an iPhone, there's a nifty app called [NearLock](https://nearlock.me). Actually it is two apps, one runs on your Mac, the other on your iPhone.\n\nWhen your phone gets more than 3 feet away (you can change the distance in your configuration) it locks your Mac. It'll also unlock your Mac when you get back into range.\n\nI can't stress how important this one tip is, because this is the situation where someone could steal from you and you wouldn't know it. A bad guy could copy your personal info onto a USB key, and you'd be none with wiser.\n\n### Laptops - Cable Lock\n\nIf you leave your laptop turned on when you leave home, then follow the advice for desktops about locking your screen.\n\nI'd also suggest getting a _cable lock_. This [Kensington lock, found on Amazon](https://www.amazon.com/Kensington-Combination-Laptops-Devices-K64673AM/dp/B005J7Y99W/ref=sr_1_3?keywords=cable+lock+for+laptop\u0026amp;qid=1637170003\u0026amp;qsid=131-9238968-1212212\u0026amp;sr=8-3\u0026amp;sres=B005J7Y99W%2CB07CCJPWH7%2CB07CTXS87G%2CB086PNF98V%2CB00WJHQFLU%2CB088NJLBK7%2CB01K1JUO14%2CB07YWQGDGN%2CB07V4NJ85W%2CB008A4F8UA%2CB004BJ0ZHY%2CB000031XCM%2CB08JTXNZZ9%2CB0036RHAFM%2CB00DP5LTXO%2CB08ZS1XK4H\u0026amp;srpt=ELECTRONIC_CABLE) is a good choice that I use, but there are many options.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>I'm at the stage in my life where my wife and I are becoming empty nesters. My youngest daughter Anna is moving several states away to start a new life and I couldn't be prouder of her.</p>
<p>As she's been packing I've shared some security advice she can use at her new apartment. I got to thinking &quot;hey, this is good stuff I should share it with others!&quot; Next week I'll continue my series on PowerShell Enums, but for this week let's talk security.</p>
<p>By the way, this advice can apply to apartment dwellers, dorm rooms, or even rental houses. For simplicity I'll refer to these as your <em>home</em> in this article, meaning any place you live in and rent.</p>
<h1>The Need for Security</h1>
<p>Whenever you rent, you are in someone else's property. That means they too have keys to your dwelling.</p>
<p>And they use them. Exterminators come in on a regular basis to spray for bugs. Folks from the maintenance crew come in to check smoke alarms, air conditioning filters, and more.</p>
<p>Now let me be clear, I firmly believe that 99% of these people are good, hard working, and honest. But all it takes is that one bad egg to ruin your day, maybe even your year.</p>
<p>Some places provide notification in advance that someone will be entering your place of residence. But not all places, back when I was a renter it wasn't unusual to come home and find a &quot;your friendly neighborhood exterminator was here today&quot; note on my door.</p>
<p>Or you may not know at all, one complex I lived in never told you, I only knew if a neighbor mentioned it.</p>
<p>A quick disclaimer before we get started: I mention several products in this post. These are not ads, I'm not making any money from these endorsements. I just like them and paid my own hard earned cash for them.</p>
<p>So that said, let me get into the suggestions.</p>
<h2>Computer Security</h2>
<h3>Desktops</h3>
<p>If you have a desktop computer, you should always lock your screen before you leave home. By locking your computer you'll require the entry of a password or pin to use the computer. Most people keep all types of things on their computer.</p>
<p>Web browsers are often set to automatically login to email, financial, even gaming accounts. Family photos populate your drive. Important documents like tax returns are often scanned and stored on your hard drive.</p>
<p>On all operating systems there will be menu options to lock the screen, but there are also keystroke shortcuts that will allow you to quickly lock your computer.</p>
<p>On Windows, the Windows Key + L combination will lock the screen. This frequently works on many Linux distributions as well, although you should check your documentation to be sure.</p>
<p>On macOS, you can use the Ctrl + Command + Q key combination to lock the screen.</p>
<p>If you are on macOS, and have an iPhone, there's a nifty app called <a href="https://nearlock.me">NearLock</a>. Actually it is two apps, one runs on your Mac, the other on your iPhone.</p>
<p>When your phone gets more than 3 feet away (you can change the distance in your configuration) it locks your Mac. It'll also unlock your Mac when you get back into range.</p>
<p>I can't stress how important this one tip is, because this is the situation where someone could steal from you and you wouldn't know it. A bad guy could copy your personal info onto a USB key, and you'd be none with wiser.</p>
<h3>Laptops - Cable Lock</h3>
<p>If you leave your laptop turned on when you leave home, then follow the advice for desktops about locking your screen.</p>
<p>I'd also suggest getting a <em>cable lock</em>. This <a href="https://www.amazon.com/Kensington-Combination-Laptops-Devices-K64673AM/dp/B005J7Y99W/ref=sr_1_3?keywords=cable+lock+for+laptop&amp;qid=1637170003&amp;qsid=131-9238968-1212212&amp;sr=8-3&amp;sres=B005J7Y99W%2CB07CCJPWH7%2CB07CTXS87G%2CB086PNF98V%2CB00WJHQFLU%2CB088NJLBK7%2CB01K1JUO14%2CB07YWQGDGN%2CB07V4NJ85W%2CB008A4F8UA%2CB004BJ0ZHY%2CB000031XCM%2CB08JTXNZZ9%2CB0036RHAFM%2CB00DP5LTXO%2CB08ZS1XK4H&amp;srpt=ELECTRONIC_CABLE">Kensington lock, found on Amazon</a> is a good choice that I use, but there are many options.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"align":"center","id":4256,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/11/security-for-apartment-dwellers-01.png"><img src="https://arcanecode.files.wordpress.com/2021/11/security-for-apartment-dwellers-01.png?w=577" alt="" class="wp-image-4256" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"Almost all laptops have a small slot the end with the lock will fit into, with the possible exception of some of the very thin laptops such as some recent MacBooks. Check your laptop to be sure before ordering.\n\nMake sure you have a strong, secure spot to loop the cable through. A desk leg that you can just pick up and slip off the cable is a poor choice.\n\nSome locking cables come with an adhesive hook you can use, but I don't trust those. With just a little effort many can be easily ripped or pried off. But it is better than nothing.\n\nInstead of the adhesive hook I suggest going to your local hardware store and getting an eye bolt with the hole big enough to get the cable through, or perhaps a handle that would go on a chest or garage door. Screw it into your desk, or even better the wall (assuming that doesn't violate your lease).\n\nCable locks come in two types, a combination lock and one with a key. They key is faster to unlock, but if you are the kind of person who leaves their keys by the front door the combination may be more convenient.\n\nThe combination has another advantage if you share a laptop with your spouse or other family member. It's easy to share the combination with other trusted people.\n\nNote that many desktop computers these days also have the ability to have a cable lock. If not, you may be able to bolt a secure hook to yours. In addition to cable locks they also make cables with just loops on both ends such as [this one from Amazon](https://www.amazon.com/Master-Lock-Cable-Looped-72DPF/dp/B000BD8IQ4/ref=sr_1_1_sspa?keywords=cable+lock\u0026amp;qid=1637169986\u0026amp;sr=8-1-spons\u0026amp;psc=1\u0026amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyWEdXUVhOWllON1E4JmVuY3J5cHRlZElkPUEwMTQyMDY0MkpDVjJGNFlGWFJRMCZlbmNyeXB0ZWRBZElkPUEwMzIxOTY1V0taRDgzVUJRMElFJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==). Slip one end through the hook, then use a good heavy duty padlock to connect the loops.\n\n### Laptops - Lock it up\n\nAnother way to secure your laptop is to get a small, two (or more) drawer filing cabinet that has a lock on it. Plenty of space to store one or more laptops in.\n\nA nice bonus is the ability store other valuables in it. Perhaps you have some nice camera equipment, portable gaming gear like a Nintendo Switch, and iPads or Android tablets.\n\nAnything small but expensive could be placed in your file cabinet. I'll admit, a determined thief could just carry off the whole file cabinet, or your desktop.\n\nThe security tips in this article are more geared toward the opportunist thief, ones who didn't set out to take anything but when the opportunity arises they jump on it.\n\nIf you really wanted to carry it to an extreme, you could attach eye bolts or something similar to the file cabinet, desk, even the wall, then connect them using a steel cable with loops on either end like the one I suggested in the previous section. Use a heavy duty padlock to hook them all together. It will make the whole collection to big, heavy, and unwieldy to simply carry away.\n\n## Mail Call\n\nIf it wasn't for junk mail I wouldn't get any mail at all!\n\nWell not quite, in addition to the stack of junk mail I still get bills (despite my best efforts to go paperless). These bills often have account numbers or enough information for a crook to hijack your accounts.\n\nIn my pile of junk mail I get credit card offers or \u0022take out a loan with us with the low interest rate of 53%!\u0022 Of course this is annoying, but can also be dangerous as someone could take out a loan or credit card in your name, but changing the address to them.\n\nKeep these secured in your file cabinet (you did buy one for your laptops, tablets, and other expensive stuff didn't you?). One stack for junk, the other for bills and other info to retain.\n\nYou should always take time to shred junk mail with monetary offers, as well as bills when you are done with them. (Obviously you'll also want a shredder to go with this setup.) If you want to keep copies then you can get printer/copier/scanners at reasonable prices and store on your computer. You know, the one you lock everytime before you leave home.\n\nIf you don't want a scanner, just take pictures of these items with your phone. On my iPhone I use an app called [Scanner Pro](https://apps.apple.com/us/app/scanner-pro-ocr-scanning-fax/id333710667).\n\nNot only does it take the picture but it also handles things like skewed pics, making the document nice and square (well rectangular for pieces of paper). If I'm only scanning in one or two pages, I use Scanner Pro rather than going to my multi-function printer.\n\nI highly recommend getting an app like this for your phone. Feel free to post a comment with your favorite app, especially if you are an Android user.\n\n## Cold Hard Cash\n\nI believe it is useful to keep a bit of cash on hand. You might lose or have your credit/debit card stolen and have to wait for a replacement. Perhaps there is an extended power or internet outage, and cash is the only way to purchase supplies.\n\nNever leave cash laying around. Most crooks, even the casual opportunist, knows to check under the mattress or the underwear drawer in your dresser.\n\nUse the file cabinet, or get a small safe. If you carry a purse, but sometimes leave it at home, maybe to go jogging, swimming, or other exercises, secure it in your file cabinet or safe when you are gone.\n\nIf you normally carry a wallet, but leave it behind for exercise or other reasons, lock it up as well.\n\n## Conclusion\n\nAfter reading this you may think I'm a little paranoid. But remember, just because you're paranoid doesn't mean they're not out to get you!\n\nMost of these suggestions can be had for little cost, plus a few seconds of time, but can save you a lot of headaches and money in the long run. All it takes is one incident to ruin your credit, put you in debt, and deprive you of valuable, daily used tools like laptops and tablets.\n"} -->
<div class="wp-block-jetpack-markdown"><p>Almost all laptops have a small slot the end with the lock will fit into, with the possible exception of some of the very thin laptops such as some recent MacBooks. Check your laptop to be sure before ordering.</p>
<p>Make sure you have a strong, secure spot to loop the cable through. A desk leg that you can just pick up and slip off the cable is a poor choice.</p>
<p>Some locking cables come with an adhesive hook you can use, but I don't trust those. With just a little effort many can be easily ripped or pried off. But it is better than nothing.</p>
<p>Instead of the adhesive hook I suggest going to your local hardware store and getting an eye bolt with the hole big enough to get the cable through, or perhaps a handle that would go on a chest or garage door. Screw it into your desk, or even better the wall (assuming that doesn't violate your lease).</p>
<p>Cable locks come in two types, a combination lock and one with a key. They key is faster to unlock, but if you are the kind of person who leaves their keys by the front door the combination may be more convenient.</p>
<p>The combination has another advantage if you share a laptop with your spouse or other family member. It's easy to share the combination with other trusted people.</p>
<p>Note that many desktop computers these days also have the ability to have a cable lock. If not, you may be able to bolt a secure hook to yours. In addition to cable locks they also make cables with just loops on both ends such as <a href="https://www.amazon.com/Master-Lock-Cable-Looped-72DPF/dp/B000BD8IQ4/ref=sr_1_1_sspa?keywords=cable+lock&amp;qid=1637169986&amp;sr=8-1-spons&amp;psc=1&amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyWEdXUVhOWllON1E4JmVuY3J5cHRlZElkPUEwMTQyMDY0MkpDVjJGNFlGWFJRMCZlbmNyeXB0ZWRBZElkPUEwMzIxOTY1V0taRDgzVUJRMElFJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==">this one from Amazon</a>. Slip one end through the hook, then use a good heavy duty padlock to connect the loops.</p>
<h3>Laptops - Lock it up</h3>
<p>Another way to secure your laptop is to get a small, two (or more) drawer filing cabinet that has a lock on it. Plenty of space to store one or more laptops in.</p>
<p>A nice bonus is the ability store other valuables in it. Perhaps you have some nice camera equipment, portable gaming gear like a Nintendo Switch, and iPads or Android tablets.</p>
<p>Anything small but expensive could be placed in your file cabinet. I'll admit, a determined thief could just carry off the whole file cabinet, or your desktop.</p>
<p>The security tips in this article are more geared toward the opportunist thief, ones who didn't set out to take anything but when the opportunity arises they jump on it.</p>
<p>If you really wanted to carry it to an extreme, you could attach eye bolts or something similar to the file cabinet, desk, even the wall, then connect them using a steel cable with loops on either end like the one I suggested in the previous section. Use a heavy duty padlock to hook them all together. It will make the whole collection to big, heavy, and unwieldy to simply carry away.</p>
<h2>Mail Call</h2>
<p>If it wasn't for junk mail I wouldn't get any mail at all!</p>
<p>Well not quite, in addition to the stack of junk mail I still get bills (despite my best efforts to go paperless). These bills often have account numbers or enough information for a crook to hijack your accounts.</p>
<p>In my pile of junk mail I get credit card offers or &quot;take out a loan with us with the low interest rate of 53%!&quot; Of course this is annoying, but can also be dangerous as someone could take out a loan or credit card in your name, but changing the address to them.</p>
<p>Keep these secured in your file cabinet (you did buy one for your laptops, tablets, and other expensive stuff didn't you?). One stack for junk, the other for bills and other info to retain.</p>
<p>You should always take time to shred junk mail with monetary offers, as well as bills when you are done with them. (Obviously you'll also want a shredder to go with this setup.) If you want to keep copies then you can get printer/copier/scanners at reasonable prices and store on your computer. You know, the one you lock everytime before you leave home.</p>
<p>If you don't want a scanner, just take pictures of these items with your phone. On my iPhone I use an app called <a href="https://apps.apple.com/us/app/scanner-pro-ocr-scanning-fax/id333710667">Scanner Pro</a>.</p>
<p>Not only does it take the picture but it also handles things like skewed pics, making the document nice and square (well rectangular for pieces of paper). If I'm only scanning in one or two pages, I use Scanner Pro rather than going to my multi-function printer.</p>
<p>I highly recommend getting an app like this for your phone. Feel free to post a comment with your favorite app, especially if you are an Android user.</p>
<h2>Cold Hard Cash</h2>
<p>I believe it is useful to keep a bit of cash on hand. You might lose or have your credit/debit card stolen and have to wait for a replacement. Perhaps there is an extended power or internet outage, and cash is the only way to purchase supplies.</p>
<p>Never leave cash laying around. Most crooks, even the casual opportunist, knows to check under the mattress or the underwear drawer in your dresser.</p>
<p>Use the file cabinet, or get a small safe. If you carry a purse, but sometimes leave it at home, maybe to go jogging, swimming, or other exercises, secure it in your file cabinet or safe when you are gone.</p>
<p>If you normally carry a wallet, but leave it behind for exercise or other reasons, lock it up as well.</p>
<h2>Conclusion</h2>
<p>After reading this you may think I'm a little paranoid. But remember, just because you're paranoid doesn't mean they're not out to get you!</p>
<p>Most of these suggestions can be had for little cost, plus a few seconds of time, but can save you a lot of headaches and money in the long run. All it takes is one incident to ruin your credit, put you in debt, and deprive you of valuable, daily used tools like laptops and tablets.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4253</wp:post_id>
  <wp:post_date>2021-11-22 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-22 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-18 17:22:47</wp:post_modified>
  <wp:post_modified_gmt>2021-11-18 23:22:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>security-for-apartment-dwellers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apartment"><![CDATA[Apartment]]></category>
  <category domain="post_tag" nicename="rent"><![CDATA[Rent]]></category>
  <category domain="category" nicename="security"><![CDATA[Security]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4259]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65651241094]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1637596804]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1462813138542342149";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_342470834350502";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Security-for-Apartment-Dwellers-header</title>
  <link>http://arcanecode.com/2021/11/22/security-for-apartment-dwellers/security-for-apartment-dwellers-header/</link>
  <pubDate>Thu, 18 Nov 2021 23:21:23 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/security-for-apartment-dwellers-header.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4259</wp:post_id>
  <wp:post_date>2021-11-18 17:21:23</wp:post_date>
  <wp:post_date_gmt>2021-11-18 23:21:23</wp:post_date_gmt>
  <wp:post_modified>2021-11-18 17:21:23</wp:post_modified>
  <wp:post_modified_gmt>2021-11-18 23:21:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>security-for-apartment-dwellers-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4253</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/security-for-apartment-dwellers-header.png</wp:attachment_url>
</item>
<item>
  <title>More Fun with PowerShell Enums</title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/</link>
  <pubDate>Mon, 29 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4261</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn a previous post, [Fun with PowerShell Enums](https://arcanecode.com/2021/11/15/fun-with-powershell-enums/) I introduced the concept of _Enums_.\n\nIn this post we'll dive deeper into enums, taking a look at more of its properties a well as other ways to use enums.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Enums for Code Clarity\n\nOne major way enums can be used is to clarify your code. In my previous post on enums I mentioned I was a ham radio operator. The clubs I belong to meet on alternate Thursday nights. Let's say I wrote a small PowerShell function to let me know if tonight is a ham club meeting.\n\nInto that function I need to pass one parameter, a number that indicates the day of the week. If 0 is Sunday, and 6 Saturday, the number 4 represents a Thursday.\n\n```powershell\nfunction IsItHamClubNight($Day)\n{\n  if ($Day -eq 4)\n  { Write-Host \u0022Yay! It's ham club night\u0022 }\n  else \n  { Write-Host \u0022Sorry, just a boring night\u0022 }\n}\n```\n\nWhen I call this function, I have to know what number to use.\n\n```powershell\n$day = 4\nIsItHamClubNight $day\n```\n\nResult:\n```\nYay! It's ham club night\n```\n\nObviously it would be easier to pass in the name of the day of the week rather than a number. But this function is now heavily embedded in your organization, changing it would require a large effort.\n\nBy using an enum, we can provide the ability to use a human readable name, without the need to rewrite our function.\n\n```powershell\nEnum DaysOfWeek\n{\n  Sunday = 0\n  Monday = 1\n  Tuesday = 2\n  Wednesday = 3\n  Thursday = 4\n  Friday = 5\n  Saturday = 6\n}\n```\n\nEnums allow us to assign a value to each label. Here we made Sunday 0, and so on, but we can use any integer value. Now we can assign one of the enums to a variable and pass that into our function.\n\n```powershell\n$day = [DaysOfWeek]::Thursday\nIsItHamClubNight $day\n```\n\nResult:\n\n```\nYay! It's ham club night\n```\n\nEven better, we can skip the use of a variable.\n\n```powershell\nIsItHamClubNight ([DayOfWeek]::Thursday)\n```\n\nWhich gives the same result. Now users of your function don't have to remember which number represents Thursday, they can simply use the name of our enum followed by the day of the week. All of this without the need to modify our `IsItHamClubNight` function!\n\n## Getting the Enum Values\n\nLet's say you know the enum you want to use is `DaysOfWeek`, but you can't quite recall the various day names. Was it Monday, or the short abbreviation Mon? Or maybe you just want the full list so you can iterate over them.\n\nThe Enum type has a method, `GetEnumNames`. It can be used to retrieve the members of the enum.\n\n```powershell\n[DaysOfWeek].GetEnumNames()\n```\n\nResult:\n\n```\nSunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n```\n\nIt actually returns a collection so you can use it to iterate over the members, as in a foreach loop.\n\n```powershell\nforeach( $enumValue in [DaysOfWeek].GetEnumNames() )\n{\n  Write-Host \u0022Enum Value is $enumValue\u0022\n}\n```\n\nResult:\n\n```\nEnum Value is Sunday\nEnum Value is Monday\nEnum Value is Tuesday\nEnum Value is Wednesday\nEnum Value is Thursday\nEnum Value is Friday\nEnum Value is Saturday\n```\n\nAlternatively you can pipe it, for example into a `ForEach-Object`.\n\n```powershell\n[DaysOfWeek].GetEnumNames() |\n  ForEach-Object { \u0022{0} {1}\u0022 -f $_, [int]([DaysOfWeek]::$_) }\n```\n\nResult:\n\n```\nSunday 0\nMonday 1\nTuesday 2\nWednesday 3\nThursday 4\nFriday 5\nSaturday 6\n```\n\nThis looks a bit cryptic so let me break it down. The `\u0022{0} {1}\u0022 -f ` indicates we want to create a formatted string. The `{0}` and `{1}` are placeholders. After the `-f` is a list of values. The first value will go into the `{0}`, the second into the `{1}`.\n\nThe next thing you see is `$_`. This is simply a PowerShell shortcut for \u0022the current object coming through the pipeline\u0022. From the enum, Sunday will be first, then Monday, and so on.\n\nNext you see `[int]([DaysOfWeek]::$_)`. The `[int]` is used to convert what comes after it into an integer value. Next, we access the DayOfWeek enum, and give it the current object.\n\nAs a result, the output displays both the name from the enum, as well as the value associated with it.\n\nIf you want to learn more about string formatting, I'll refer you to my post [Fun With PowerShell String Formatting](https://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/).\n\n## Enums with Duplicate Values\n\nIt is possible to assign the same numeric value to multiple items in an enum. For each position in our radio club, we want to indicate their level. President and Vice President are at the top, with Secretary and Treasurer in the second tier. Finally there are some appointed positions that are important, but not the top of the chain.\n\nHere's how this might be expressed in an enum.\n\n```powershell\nEnum ClubPositions\n{\n  President = 1\n  VicePresident = 1\n  Secretary = 2\n  Treasurer = 2\n  Webmaster = 3\n  Greeter = 3\n  SnackBringer = 3\n}\n```\n\nWe can do comparisons between our various offices and their associated numeric value.\n\n```powershell\n[ClubPositions]::President -eq 1\n[ClubPositions]::VicePresident -eq 1\n```\n\nResult:\n\n```\nTrue\nTrue\n```\n\nYou can even compare two enums to each other.\n\n```powershell\n[ClubPositions]::President -eq [ClubPositions]::VicePresident\n```\n\nResult:\n\n```\nTrue\n```\n\nRemember the `GetEnumNames` method we looked at a moment ago? This works as well.\n\n```powershell\n[ClubPositions].GetEnumNames()\n```\n\nResult:\n\n```\nPresident\nVicePresident\nSecretary\nTreasurer\nWebmaster\nGreeter\nSnackBringer\n```\n\nThere is one other method very similar to `GetEnumNames`, `GetEnumValues`. It doesn't work quite like you'd think though.\n\nFirst, let's use it with our `DaysOfWeek` enum.\n\n```powershell\n[DaysOfWeek].GetEnumValues()\n```\n\nResult:\n\n```\nSunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n```\n\nAs you can see, there's no real difference compared to `GetEnumNames`. But now let's run it for the `ClubPositions` enum.\n\n```powershell\n[ClubPositions].GetEnumValues()\n```\n\nResult:\n\n```\nVicePresident\nVicePresident\nTreasurer\nTreasurer\nGreeter\nGreeter\nGreeter\n```\n\nIn the second example it went through the enum, and only returned one text value for each integer. This is why we only see one entry for each numeric value.\n\nIt actually does the same thing with the `DaysOfWeek` enum, but because we only used each integer value once, only one label for each value was returned.\n\n## Conclusion\n\nUsing enums to aid with code clarity was the first item in this blog post. We then saw how to assign values to the individual members of an enum, as well as how to iterate over the members of an enum.\n\nIn the next article in this series, we'll look at the concept of using enums as bit flags for when you need to save multiple states for a single item.\n\nThe demos in this series of blog posts were derived from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In a previous post, <a href="https://arcanecode.com/2021/11/15/fun-with-powershell-enums/">Fun with PowerShell Enums</a> I introduced the concept of <em>Enums</em>.</p>
<p>In this post we'll dive deeper into enums, taking a look at more of its properties a well as other ways to use enums.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Enums for Code Clarity</h2>
<p>One major way enums can be used is to clarify your code. In my previous post on enums I mentioned I was a ham radio operator. The clubs I belong to meet on alternate Thursday nights. Let's say I wrote a small PowerShell function to let me know if tonight is a ham club meeting.</p>
<p>Into that function I need to pass one parameter, a number that indicates the day of the week. If 0 is Sunday, and 6 Saturday, the number 4 represents a Thursday.</p>
<pre><code class="language-powershell">function IsItHamClubNight($Day)
{
  if ($Day -eq 4)
  { Write-Host &quot;Yay! It's ham club night&quot; }
  else 
  { Write-Host &quot;Sorry, just a boring night&quot; }
}
</code></pre>
<p>When I call this function, I have to know what number to use.</p>
<pre><code class="language-powershell">$day = 4
IsItHamClubNight $day
</code></pre>
<p>Result:</p>
<pre><code>Yay! It's ham club night
</code></pre>
<p>Obviously it would be easier to pass in the name of the day of the week rather than a number. But this function is now heavily embedded in your organization, changing it would require a large effort.</p>
<p>By using an enum, we can provide the ability to use a human readable name, without the need to rewrite our function.</p>
<pre><code class="language-powershell">Enum DaysOfWeek
{
  Sunday = 0
  Monday = 1
  Tuesday = 2
  Wednesday = 3
  Thursday = 4
  Friday = 5
  Saturday = 6
}
</code></pre>
<p>Enums allow us to assign a value to each label. Here we made Sunday 0, and so on, but we can use any integer value. Now we can assign one of the enums to a variable and pass that into our function.</p>
<pre><code class="language-powershell">$day = [DaysOfWeek]::Thursday
IsItHamClubNight $day
</code></pre>
<p>Result:</p>
<pre><code>Yay! It's ham club night
</code></pre>
<p>Even better, we can skip the use of a variable.</p>
<pre><code class="language-powershell">IsItHamClubNight ([DayOfWeek]::Thursday)
</code></pre>
<p>Which gives the same result. Now users of your function don't have to remember which number represents Thursday, they can simply use the name of our enum followed by the day of the week. All of this without the need to modify our <code>IsItHamClubNight</code> function!</p>
<h2>Getting the Enum Values</h2>
<p>Let's say you know the enum you want to use is <code>DaysOfWeek</code>, but you can't quite recall the various day names. Was it Monday, or the short abbreviation Mon? Or maybe you just want the full list so you can iterate over them.</p>
<p>The Enum type has a method, <code>GetEnumNames</code>. It can be used to retrieve the members of the enum.</p>
<pre><code class="language-powershell">[DaysOfWeek].GetEnumNames()
</code></pre>
<p>Result:</p>
<pre><code>Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
</code></pre>
<p>It actually returns a collection so you can use it to iterate over the members, as in a foreach loop.</p>
<pre><code class="language-powershell">foreach( $enumValue in [DaysOfWeek].GetEnumNames() )
{
  Write-Host &quot;Enum Value is $enumValue&quot;
}
</code></pre>
<p>Result:</p>
<pre><code>Enum Value is Sunday
Enum Value is Monday
Enum Value is Tuesday
Enum Value is Wednesday
Enum Value is Thursday
Enum Value is Friday
Enum Value is Saturday
</code></pre>
<p>Alternatively you can pipe it, for example into a <code>ForEach-Object</code>.</p>
<pre><code class="language-powershell">[DaysOfWeek].GetEnumNames() |
  ForEach-Object { &quot;{0} {1}&quot; -f $_, [int]([DaysOfWeek]::$_) }
</code></pre>
<p>Result:</p>
<pre><code>Sunday 0
Monday 1
Tuesday 2
Wednesday 3
Thursday 4
Friday 5
Saturday 6
</code></pre>
<p>This looks a bit cryptic so let me break it down. The <code>&quot;{0} {1}&quot; -f </code> indicates we want to create a formatted string. The <code>{0}</code> and <code>{1}</code> are placeholders. After the <code>-f</code> is a list of values. The first value will go into the <code>{0}</code>, the second into the <code>{1}</code>.</p>
<p>The next thing you see is <code>$_</code>. This is simply a PowerShell shortcut for &quot;the current object coming through the pipeline&quot;. From the enum, Sunday will be first, then Monday, and so on.</p>
<p>Next you see <code>[int]([DaysOfWeek]::$_)</code>. The <code>[int]</code> is used to convert what comes after it into an integer value. Next, we access the DayOfWeek enum, and give it the current object.</p>
<p>As a result, the output displays both the name from the enum, as well as the value associated with it.</p>
<p>If you want to learn more about string formatting, I'll refer you to my post <a href="https://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/">Fun With PowerShell String Formatting</a>.</p>
<h2>Enums with Duplicate Values</h2>
<p>It is possible to assign the same numeric value to multiple items in an enum. For each position in our radio club, we want to indicate their level. President and Vice President are at the top, with Secretary and Treasurer in the second tier. Finally there are some appointed positions that are important, but not the top of the chain.</p>
<p>Here's how this might be expressed in an enum.</p>
<pre><code class="language-powershell">Enum ClubPositions
{
  President = 1
  VicePresident = 1
  Secretary = 2
  Treasurer = 2
  Webmaster = 3
  Greeter = 3
  SnackBringer = 3
}
</code></pre>
<p>We can do comparisons between our various offices and their associated numeric value.</p>
<pre><code class="language-powershell">[ClubPositions]::President -eq 1
[ClubPositions]::VicePresident -eq 1
</code></pre>
<p>Result:</p>
<pre><code>True
True
</code></pre>
<p>You can even compare two enums to each other.</p>
<pre><code class="language-powershell">[ClubPositions]::President -eq [ClubPositions]::VicePresident
</code></pre>
<p>Result:</p>
<pre><code>True
</code></pre>
<p>Remember the <code>GetEnumNames</code> method we looked at a moment ago? This works as well.</p>
<pre><code class="language-powershell">[ClubPositions].GetEnumNames()
</code></pre>
<p>Result:</p>
<pre><code>President
VicePresident
Secretary
Treasurer
Webmaster
Greeter
SnackBringer
</code></pre>
<p>There is one other method very similar to <code>GetEnumNames</code>, <code>GetEnumValues</code>. It doesn't work quite like you'd think though.</p>
<p>First, let's use it with our <code>DaysOfWeek</code> enum.</p>
<pre><code class="language-powershell">[DaysOfWeek].GetEnumValues()
</code></pre>
<p>Result:</p>
<pre><code>Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
</code></pre>
<p>As you can see, there's no real difference compared to <code>GetEnumNames</code>. But now let's run it for the <code>ClubPositions</code> enum.</p>
<pre><code class="language-powershell">[ClubPositions].GetEnumValues()
</code></pre>
<p>Result:</p>
<pre><code>VicePresident
VicePresident
Treasurer
Treasurer
Greeter
Greeter
Greeter
</code></pre>
<p>In the second example it went through the enum, and only returned one text value for each integer. This is why we only see one entry for each numeric value.</p>
<p>It actually does the same thing with the <code>DaysOfWeek</code> enum, but because we only used each integer value once, only one label for each value was returned.</p>
<h2>Conclusion</h2>
<p>Using enums to aid with code clarity was the first item in this blog post. We then saw how to assign values to the individual members of an enum, as well as how to iterate over the members of an enum.</p>
<p>In the next article in this series, we'll look at the concept of using enums as bit flags for when you need to save multiple states for a single item.</p>
<p>The demos in this series of blog posts were derived from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4261</wp:post_id>
  <wp:post_date>2021-11-29 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-29 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 22:02:01</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 04:02:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="enum"><![CDATA[Enum]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4265]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65918115450]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1638201657]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1465350076600094721";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_346775573920028";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166414</wp:comment_id>
    <wp:comment_author><![CDATA[Beyond the Basics with Powershell Enums &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/12/01/beyond-the-basics-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-12-01 07:05:09</wp:comment_date>
    <wp:comment_date_gmt>2021-12-01 13:05:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain hits us again on the topic of enumerations in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638363909.735517;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638368124.655534;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>more-fun-with-powershell-enums-header</title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/more-fun-with-powershell-enums-header/</link>
  <pubDate>Sat, 27 Nov 2021 03:57:33 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header.png</guid>
  <description/>
  <content:encoded><![CDATA[More Fun with PowerShell Enums Post Header]]></content:encoded>
  <excerpt:encoded><![CDATA[More Fun with PowerShell Enums]]></excerpt:encoded>
  <wp:post_id>4263</wp:post_id>
  <wp:post_date>2021-11-26 21:57:33</wp:post_date>
  <wp:post_date_gmt>2021-11-27 03:57:33</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 21:58:01</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 03:58:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4261</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[More Fun with PowerShell Enums]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>more-fun-with-powershell-enums-header</title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/more-fun-with-powershell-enums-header-2/</link>
  <pubDate>Sat, 27 Nov 2021 03:59:33 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4264</wp:post_id>
  <wp:post_date>2021-11-26 21:59:33</wp:post_date>
  <wp:post_date_gmt>2021-11-27 03:59:33</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 21:59:33</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 03:59:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums-header-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4261</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-1.png</wp:attachment_url>
</item>
<item>
  <title>more-fun-with-powershell-enums-header</title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/more-fun-with-powershell-enums-header-3/</link>
  <pubDate>Sat, 27 Nov 2021 04:00:37 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4265</wp:post_id>
  <wp:post_date>2021-11-26 22:00:37</wp:post_date>
  <wp:post_date_gmt>2021-11-27 04:00:37</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 22:00:37</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 04:00:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums-header-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4261</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-2.png</wp:attachment_url>
</item>
<item>
  <title>Fun with PowerShell Enum Flags</title>
  <link>http://arcanecode.com/2021/12/06/fun-with-powershell-enum-flags/</link>
  <pubDate>Mon, 06 Dec 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4271</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn my last two posts, I introduced the concept of _Enums_ in PowerShell, then got into some of the more advanced uses. In this post we'll examine a special way to use an enum, known as a _Flag_.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## A Brief Refresher on Binary Math\n\nIn order to understand how flags work you need at least a basic understanding of binary math. In this section I'll see if I can't provide a short, simple refresher on the subject.\n\nIn my previous article, I mentioned that I am a ham radio operator, and am a member of multiple clubs. In a small club it's not unusual to hold multiple offices, for example I'm both the secretary and the webmaster for one of the clubs, as well as a paid member. We can denote this by using a single variable to hold this information through the use of an enum flag.\n\nA flag is a single variable that can be broken into its individual bits to indicate multiple values. In our example, we'll use a flag to indicate a member's paid status, their office, and if they hold more than one position in the club, all with a single variable.\n\nLet's say we have six people standing in a row. Each person has a sign, the first reads \u0022paid\u0022, the rest have the names of club offices.\n\nWhen a member walks into a room, people hold up signs that indicate the person's status in the club, while the others leave their signs face down. When the Vice President walks in, the paid sign is raised up, as is the Vice President sign. We then take a photograph to capture this information in a single place.\n\nI happen to be both Secretary and Webmaster of my club, as well as a paid member, so in my case three signs would go up and be captured in a photo. If we happen to have a visitor to the club, none of the signs will be raised, and a photo will record that.\n\nBit flags work the same way. Each sign is a bit, and the photo corresponds to the variable that holds all the bits.\n\nLet's say we have a 32 bit integer. If all 32 of the bits are set to a 0, then the value of that integer will be 0.\n\nIf the bit in position one is set to 1, and all of the other bits are 0, it indicates the value of the variable is 1.\n\nIn the second bit position, if the value is set to 1 and all other bits set to 0, the integer value is 2. If both bits one and two are set to 1, the integer value will be 3, and so on.\n\nThis chart of binary numbers and their decimal counterparts may help clarify.\n\n| Binary | Decimal |\n|\u002d\u002d\u002d\u002d\u002d\u002d-:|\u002d\u002d\u002d\u002d\u002d\u002d:|\n| 0000 | 0 |\n| 0001 | 1 |\n| 0010 | 2 |\n| 0011 | 3 |\n| 0100 | 4 |\n| 0101 | 5 |\n| 0110 | 6 |\n| 0111 | 7 |\n| 1000 | 8 |\n| 1001 | 9 |\n| 1010 | 10 |\n\nThese are just the first few as an example, you could continue this chart into the trillions of values if not higher.\n\nShould you need a further refresher on binary numbers, I'd suggest the [Binary Number article on Wikipedia](https://en.wikipedia.org/wiki/Binary_number) as a good guide. It's important to understand binary values in order to fully understand how flags work.\n\n## Enum Flags\n\nLet's create our own enum flag to hold the status of club members. You declare an enum as a flag by placing the `[Flags()]` modifier in front of the enum declaration, as you'll see below. Note that the values must correspond to the integer value if a bit is set. The Wikipedia article includes a nice chart that shows a decimal number and what that number looks like in binary.\n\n\n```powershell\n[Flags()] enum MemberStatus\n{\n  Paid = 1\n  President = 2\n  VicePresident = 4\n  Secretary = 8\n  Treasurer = 16\n  Webmaster = 32\n}\n```\n\nI could add more to this list if needed, using the value of 64 for the next member status, then 128, then 256, and so on.\n\nNow lets represent a member status in a variable to show a member is the Vice President, and is also a paid member. To do so, we simply add the various statuses together.\n\n```powershell\n$memStatus = [MemberStatus]::Paid + [MemberStatus]::VicePresident\n\n$memStatus\n```\n\nResult:\n\n```\nPaid, VicePresident\n```\n\nWhat's nice about using an enum flag is that when we display the variable PowerShell converts the flags back into the members from the enum.\n\nWe could also simply assign the total number. In this case, Paid (value of 1), plus Vice President (value 4), adds up to 5.\n\n```powershell\n$memStatus = [MemberStatus] 5\n$memStatus\n```\n\nResult:\n\n```\nPaid, VicePresident\n```\n\nFinally, if we want to display the numeric value behind our flag, we can cast it as an `int`.\n\n```powershell\n[int]$memStatus\n```\n\nResult:\n\n```\n5\n```\n\n## Is the Flag Set? HasFlag to the Rescue!\n\nOften you will want to see if a specific flag is set, for example we want to see if a member is paid. Now, if the paid status is the only flag set, it's easy, just use `$someVariable -eq [MemberStatus]::Paid`.\n\nIt gets much more complex if a variable has multiple flags set. Fortunately, enums have a method built in called `HasFlag` you can use to test with.\n\nFirst, let's load a variable with several flags from our `MemberStatus` enum.\n\n```powershell\n$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid\n\n$memStatus\n```\n\nResult:\n\n```\nPaid, Secretary, Webmaster\n```\n\nSo now we've got our `$memStatus` variable loaded with multiple statuses. Also note that even though we added the status in reverse order, they are always returned in ascending order from the enum declaration.\n\nNow we want to know if our secretary / webmaster has paid their dues for the year. To do so, we'll call the `HasFlag` method of our variable, and pass in the status we wish to check.\n\n```powershell\n$memStatus.HasFlag([MemberStatus]::Paid)\n```\n\nResult:\n\n```\nTrue\n```\n\n## The GetHashCode Method\n\nSo far, when we've wanted to see the value of our enum derived variable, we've used `[int]` to cast the variable in integer form.\n\n```powershell\n$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid\n\n[int]$memStatus\n```\n\nResult:\n\n```\n41\n```\n\nThis shortcut works, and is something I've seen in many blog posts and examples. However, there is a method that is more clear in terms of code self-documentation. Like using `[int]`, it will return an unsigned, 32 bit integer: `GetHashCode`.\n\n```powershell\n$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid\n\n$memStatus.GetHashCode()\n```\n\nResult:\n\n```\n41\n```\n\nBoth methods work, but in my opinion `GetHashCode` is clearer in terms of intention, especially to someone unfamiliar with enum flags. Whichever route you go I suggest being consistent throughout your code.\n\n## Conclusion\n\nThis article focused on the use of enums as flags. While it is not something I use frequently, enum flags can be extremely useful when an item can have multiple states simultaneously. Our club member status is one such example, another is file attributes. A file could have both the hidden and compressed attributes.\n\nEnum flags can reduce the size of your data for an item. Rather than having six individual variables for the six member statuses, a single variable can hold them all. This reduction in the size of your data can be even more valuable when that data is being stored in a database or file.\n\nThe demos in this series of blog posts were derived from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In my last two posts, I introduced the concept of <em>Enums</em> in PowerShell, then got into some of the more advanced uses. In this post we'll examine a special way to use an enum, known as a <em>Flag</em>.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>A Brief Refresher on Binary Math</h2>
<p>In order to understand how flags work you need at least a basic understanding of binary math. In this section I'll see if I can't provide a short, simple refresher on the subject.</p>
<p>In my previous article, I mentioned that I am a ham radio operator, and am a member of multiple clubs. In a small club it's not unusual to hold multiple offices, for example I'm both the secretary and the webmaster for one of the clubs, as well as a paid member. We can denote this by using a single variable to hold this information through the use of an enum flag.</p>
<p>A flag is a single variable that can be broken into its individual bits to indicate multiple values. In our example, we'll use a flag to indicate a member's paid status, their office, and if they hold more than one position in the club, all with a single variable.</p>
<p>Let's say we have six people standing in a row. Each person has a sign, the first reads &quot;paid&quot;, the rest have the names of club offices.</p>
<p>When a member walks into a room, people hold up signs that indicate the person's status in the club, while the others leave their signs face down. When the Vice President walks in, the paid sign is raised up, as is the Vice President sign. We then take a photograph to capture this information in a single place.</p>
<p>I happen to be both Secretary and Webmaster of my club, as well as a paid member, so in my case three signs would go up and be captured in a photo. If we happen to have a visitor to the club, none of the signs will be raised, and a photo will record that.</p>
<p>Bit flags work the same way. Each sign is a bit, and the photo corresponds to the variable that holds all the bits.</p>
<p>Let's say we have a 32 bit integer. If all 32 of the bits are set to a 0, then the value of that integer will be 0.</p>
<p>If the bit in position one is set to 1, and all of the other bits are 0, it indicates the value of the variable is 1.</p>
<p>In the second bit position, if the value is set to 1 and all other bits set to 0, the integer value is 2. If both bits one and two are set to 1, the integer value will be 3, and so on.</p>
<p>This chart of binary numbers and their decimal counterparts may help clarify.</p>
<table>
<thead>
<tr>
<th style="text-align:right;">Binary</th>
<th style="text-align:right;">Decimal</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">0000</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td style="text-align:right;">0001</td>
<td style="text-align:right;">1</td>
</tr>
<tr>
<td style="text-align:right;">0010</td>
<td style="text-align:right;">2</td>
</tr>
<tr>
<td style="text-align:right;">0011</td>
<td style="text-align:right;">3</td>
</tr>
<tr>
<td style="text-align:right;">0100</td>
<td style="text-align:right;">4</td>
</tr>
<tr>
<td style="text-align:right;">0101</td>
<td style="text-align:right;">5</td>
</tr>
<tr>
<td style="text-align:right;">0110</td>
<td style="text-align:right;">6</td>
</tr>
<tr>
<td style="text-align:right;">0111</td>
<td style="text-align:right;">7</td>
</tr>
<tr>
<td style="text-align:right;">1000</td>
<td style="text-align:right;">8</td>
</tr>
<tr>
<td style="text-align:right;">1001</td>
<td style="text-align:right;">9</td>
</tr>
<tr>
<td style="text-align:right;">1010</td>
<td style="text-align:right;">10</td>
</tr>
</tbody>
</table>
<p>These are just the first few as an example, you could continue this chart into the trillions of values if not higher.</p>
<p>Should you need a further refresher on binary numbers, I'd suggest the <a href="https://en.wikipedia.org/wiki/Binary_number">Binary Number article on Wikipedia</a> as a good guide. It's important to understand binary values in order to fully understand how flags work.</p>
<h2>Enum Flags</h2>
<p>Let's create our own enum flag to hold the status of club members. You declare an enum as a flag by placing the <code>[Flags()]</code> modifier in front of the enum declaration, as you'll see below. Note that the values must correspond to the integer value if a bit is set. The Wikipedia article includes a nice chart that shows a decimal number and what that number looks like in binary.</p>
<pre><code class="language-powershell">[Flags()] enum MemberStatus
{
  Paid = 1
  President = 2
  VicePresident = 4
  Secretary = 8
  Treasurer = 16
  Webmaster = 32
}
</code></pre>
<p>I could add more to this list if needed, using the value of 64 for the next member status, then 128, then 256, and so on.</p>
<p>Now lets represent a member status in a variable to show a member is the Vice President, and is also a paid member. To do so, we simply add the various statuses together.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Paid + [MemberStatus]::VicePresident

$memStatus
</code></pre>
<p>Result:</p>
<pre><code>Paid, VicePresident
</code></pre>
<p>What's nice about using an enum flag is that when we display the variable PowerShell converts the flags back into the members from the enum.</p>
<p>We could also simply assign the total number. In this case, Paid (value of 1), plus Vice President (value 4), adds up to 5.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus] 5
$memStatus
</code></pre>
<p>Result:</p>
<pre><code>Paid, VicePresident
</code></pre>
<p>Finally, if we want to display the numeric value behind our flag, we can cast it as an <code>int</code>.</p>
<pre><code class="language-powershell">[int]$memStatus
</code></pre>
<p>Result:</p>
<pre><code>5
</code></pre>
<h2>Is the Flag Set? HasFlag to the Rescue!</h2>
<p>Often you will want to see if a specific flag is set, for example we want to see if a member is paid. Now, if the paid status is the only flag set, it's easy, just use <code>$someVariable -eq [MemberStatus]::Paid</code>.</p>
<p>It gets much more complex if a variable has multiple flags set. Fortunately, enums have a method built in called <code>HasFlag</code> you can use to test with.</p>
<p>First, let's load a variable with several flags from our <code>MemberStatus</code> enum.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid

$memStatus
</code></pre>
<p>Result:</p>
<pre><code>Paid, Secretary, Webmaster
</code></pre>
<p>So now we've got our <code>$memStatus</code> variable loaded with multiple statuses. Also note that even though we added the status in reverse order, they are always returned in ascending order from the enum declaration.</p>
<p>Now we want to know if our secretary / webmaster has paid their dues for the year. To do so, we'll call the <code>HasFlag</code> method of our variable, and pass in the status we wish to check.</p>
<pre><code class="language-powershell">$memStatus.HasFlag([MemberStatus]::Paid)
</code></pre>
<p>Result:</p>
<pre><code>True
</code></pre>
<h2>The GetHashCode Method</h2>
<p>So far, when we've wanted to see the value of our enum derived variable, we've used <code>[int]</code> to cast the variable in integer form.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid

[int]$memStatus
</code></pre>
<p>Result:</p>
<pre><code>41
</code></pre>
<p>This shortcut works, and is something I've seen in many blog posts and examples. However, there is a method that is more clear in terms of code self-documentation. Like using <code>[int]</code>, it will return an unsigned, 32 bit integer: <code>GetHashCode</code>.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid

$memStatus.GetHashCode()
</code></pre>
<p>Result:</p>
<pre><code>41
</code></pre>
<p>Both methods work, but in my opinion <code>GetHashCode</code> is clearer in terms of intention, especially to someone unfamiliar with enum flags. Whichever route you go I suggest being consistent throughout your code.</p>
<h2>Conclusion</h2>
<p>This article focused on the use of enums as flags. While it is not something I use frequently, enum flags can be extremely useful when an item can have multiple states simultaneously. Our club member status is one such example, another is file attributes. A file could have both the hidden and compressed attributes.</p>
<p>Enum flags can reduce the size of your data for an item. Rather than having six individual variables for the six member statuses, a single variable can hold them all. This reduction in the size of your data can be even more valuable when that data is being stored in a database or file.</p>
<p>The demos in this series of blog posts were derived from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4271</wp:post_id>
  <wp:post_date>2021-12-06 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-06 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 22:11:54</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 04:11:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-enum-flags</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="enum"><![CDATA[Enum]]></category>
  <category domain="post_tag" nicename="flags"><![CDATA[Flags]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4268]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66194336568]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1638806415]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1467886617268469771";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_351001210164131";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166775</wp:comment_id>
    <wp:comment_author><![CDATA[Keith R]]></wp:comment_author>
    <wp:comment_author_email>kobe@kuler.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>108.227.70.59</wp:comment_author_IP>
    <wp:comment_date>2022-01-06 11:52:51</wp:comment_date>
    <wp:comment_date_gmt>2022-01-06 17:52:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice post, surely very helpful for non-programmer admins. However, for "want[ing] to see the value of our enum derived variable", I disagree that "GetHashCode is clearer in terms of intention". [int] correctly expresses the intention to see directly the value of the enum. GetHashCode() may _happen to_ return that same value for an int-based enum, but per _intention_, it doesn't have to; it merely needs to return a 32 bit integer corresponding to the object, suitable for hashing it into a hash table. You can see this using an Int64-based enum with a large value, e.g. 0x10FFFFEEEE; in this case the corresponding [long] gives you the enum's value, where GetHashCode() does not.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641496722.715902;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641491571.498135;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun With PowerShell Classes - The Basics</title>
  <link>http://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/</link>
  <pubDate>Tue, 14 Dec 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4276</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn the last few posts we looked at the use of Enums, a technique closely associated with classes. In this post we'll start looking at classes themselves. We'll open with some terminology, then look at our first class.\n\nFor the next post in this series I plan to do a history lesson on the use of `PSCustomObject`. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. From there we'll return to the modern area and get into some advanced class techniques.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Terminology\n\nIf you are familiar with _object oriented_ terminology, then this short overview will be familiar to you. However, many who come into PowerShell scripting do not come from a coding background. It's worth taking a few paragraphs, then, to explain some common terms that will be used in this and future articles.\n\nA _class_ is code that is used as a blueprint to create an _object_ variable in memory. In fact, all variables in PowerShell are objects, even built in ones like strings or integers. Their classes are already defined and ready to be used in the core PowerShell libraries.\n\nThe act of creating a new object from a class is called _instantiation_. You can _instantiate_ multiple variables from the same class.\n\nIn most object oriented discussions, the classic example compares a class to a blueprint for a house. From that single blueprint a home builder can create an entire neighborhood of houses.\n\nEach house has properties that can be set to make the houses different from each other, even though they are built from the same blueprint. House color, trim color, number of cars the garage will hold, are all properties that can be set on a per house basis.\n\nLikewise, a PowerShell class has _properties_. These are made available through variables, and may be things like first name, last name, address, birth date, number of pets, or any number of other items that would apply to this instance of an object built from your class.\n\nA house blueprint may also have tasks assigned to it. \u0022Get building permit from city\u0022, for example, or \u0022paint the trim\u0022. In the PowerShell world, a class can also have tasks assigned to it. These are created by using _functions_.\n\nIf you aren't familiar with functions yet, you need to brush up. You can start with my series [Fun With PowerShell Functions](https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/), then continue through the next few posts which move into advanced functions and pipelined functions.\n\nWhen it comes to classes, we call these built in functions _methods_. A method is designed to act on the data within the function itself.\n\nA simple example, you may have three properties, first name, middle name, and last name. You could create a method (in the form of a function) called full name, which concatenates the three parts of the name together, correctly formatting for times when a middle name is absent.\n\nMethods in a class can return a value, but do not have to. We'll see examples of both in this article.\n\nAlso be aware there are special types of properties and methods that are called _static properties_ and _static methods_. These are pieces of code that PowerShell can execute from the class itself, _without creating an object from that class_.\n\nWe'll see examples of how to create and use these in our future post on advanced classes, but I wanted to mention them as PowerShell classes have a static function we'll need to use in order to instantiate new objects.\n\nThis short intro just hits the tip of the iceberg when it comes to object oriented methodology, entire books have been written on the subject. Hopefully it provides enough information to get you started.\n\nSo now that we're all on the same page when it comes to terminology, let's go create a class.\n\n## A Very Simple Class\n\nThis first example will be very simple. Take a look, then we will go over its parts.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In the last few posts we looked at the use of Enums, a technique closely associated with classes. In this post we'll start looking at classes themselves. We'll open with some terminology, then look at our first class.</p>
<p>For the next post in this series I plan to do a history lesson on the use of <code>PSCustomObject</code>. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. From there we'll return to the modern area and get into some advanced class techniques.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Terminology</h2>
<p>If you are familiar with <em>object oriented</em> terminology, then this short overview will be familiar to you. However, many who come into PowerShell scripting do not come from a coding background. It's worth taking a few paragraphs, then, to explain some common terms that will be used in this and future articles.</p>
<p>A <em>class</em> is code that is used as a blueprint to create an <em>object</em> variable in memory. In fact, all variables in PowerShell are objects, even built in ones like strings or integers. Their classes are already defined and ready to be used in the core PowerShell libraries.</p>
<p>The act of creating a new object from a class is called <em>instantiation</em>. You can <em>instantiate</em> multiple variables from the same class.</p>
<p>In most object oriented discussions, the classic example compares a class to a blueprint for a house. From that single blueprint a home builder can create an entire neighborhood of houses.</p>
<p>Each house has properties that can be set to make the houses different from each other, even though they are built from the same blueprint. House color, trim color, number of cars the garage will hold, are all properties that can be set on a per house basis.</p>
<p>Likewise, a PowerShell class has <em>properties</em>. These are made available through variables, and may be things like first name, last name, address, birth date, number of pets, or any number of other items that would apply to this instance of an object built from your class.</p>
<p>A house blueprint may also have tasks assigned to it. &quot;Get building permit from city&quot;, for example, or &quot;paint the trim&quot;. In the PowerShell world, a class can also have tasks assigned to it. These are created by using <em>functions</em>.</p>
<p>If you aren't familiar with functions yet, you need to brush up. You can start with my series <a href="https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/">Fun With PowerShell Functions</a>, then continue through the next few posts which move into advanced functions and pipelined functions.</p>
<p>When it comes to classes, we call these built in functions <em>methods</em>. A method is designed to act on the data within the function itself.</p>
<p>A simple example, you may have three properties, first name, middle name, and last name. You could create a method (in the form of a function) called full name, which concatenates the three parts of the name together, correctly formatting for times when a middle name is absent.</p>
<p>Methods in a class can return a value, but do not have to. We'll see examples of both in this article.</p>
<p>Also be aware there are special types of properties and methods that are called <em>static properties</em> and <em>static methods</em>. These are pieces of code that PowerShell can execute from the class itself, <em>without creating an object from that class</em>.</p>
<p>We'll see examples of how to create and use these in our future post on advanced classes, but I wanted to mention them as PowerShell classes have a static function we'll need to use in order to instantiate new objects.</p>
<p>This short intro just hits the tip of the iceberg when it comes to object oriented methodology, entire books have been written on the subject. Hopefully it provides enough information to get you started.</p>
<p>So now that we're all on the same page when it comes to terminology, let's go create a class.</p>
<h2>A Very Simple Class</h2>
<p>This first example will be very simple. Take a look, then we will go over its parts.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":"```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n}\n```\n"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

}
</code></pre>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":"We begin the definition with the keyword `class`, followed by what we wish to name our class. In my previous articles on enums we used Twitter data as an example, so let's stick to that.\n\nAfter the name of the class we need an opening squiggly brace, and a closing one at the end. In PowerShell squiggly braces are used to define a _scrpt block_. You've seen these before, functions, `foreach`, `if` statements and more all use script blocks. Classes are no different, everything in the script block is the class definition.\n\nWith classes, as with most script blocks, it's not necessary to put the opening squiggly brace on the next line, many use `class Twitter {` on a single line. I just feel having the squiggly braces vertically aligned makes things easier to read.\n\nWithin the class I have defined a single property, `$TwitterHandle`. Before the name of the variable I have indicated the variable type in brackets, `[string]`. Unlike regular PowerShell, all properties must be _strongly typed_.\n\nLet's create, or _instantiate_, a new variable from our class (after highlighting the class definition and using F8 or F5 to get it into memory).\n\n```powershell\n$twit = [Twitterer]::new()\n```\n\nThis syntax may look a bit odd, so let me explain. When we created our class we defined a single property. Anytime we define a class, though, PowerShell adds extra properties and methods behind the scenes.\n\nOne of those methods is `new`. New is a _static method_ that can be called without the need to instantiate a new object, which is fortunate as it is the way we get new objects from our class.\n\nTo call a static method, we use the name of the class in brackets, followed by two colons, then the name of the static method. In PowerShell, to call a method you always have to use parenthesis after the name of the method even if it takes no parameters. This is unlike a regular function in PowerShell.\n\nFinally, we assign our newly instantiated object to the variable `$twit`.\n\nWe can now access the properties (and methods) in our object by using what is formally known as _dot notation_. If you've done any PowerShell coding then you've likely used it a million times by now without realizing it had a formal name.\n\nYou simply use the name of our object, a period, then the name of the property, as in `$twit.TwitterHandle`. Of course if we run this right now, we won't get anything back. This is because our variable is empty when the class is created. So let's assign it a value.\n\n```powershell\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterHandle\n```\n\nResult:\n\n```\nArcaneCode\n```\n\nIt's that easy, we can use it like any other variable. Note one thing, when we created the property we used the `$` in front of the variable. But outside the class when we reference it as a property the `$` is omitted.\n\n## Default Values for Properties\n\nThere will be many times when you write a class in which you want to have some, or perhaps all, of its properties already populated with values. This will make it easier for your end user, especially for properties where the majority of the time the user can get by with the default value.\n\nCreating a default value is simple, when you create the property you simply assign it a value.\n\n```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n}\n```\n\nHere a second property, `Name`, has been added. After its declaration I simply assigned it a name (mine in this case) just like I would assign any value to a variable.\n\nNow let's create a new instance and examine the value in our `Name` property.\n\n```powershell\n$twit = [Twitterer]::new()\n$twit.Name\n```\n\nResult:\n\n```\nRobert C. Cain\n```\n\nOf course just because we've provided a default value doesn't mean we can't change it.\n\n```powershell\n$twit.Name = 'Mr. Code'\n$twit.Name\n```\n\nResult:\n\n```\nMr. Code\n```\n\n## Our First Method\n\nNow that we've added properties, it's time to add a little functionality with our first _method_. A class method in PowerShell works just like a function, only without the need for the `function` keyword. For this example, we'll add a new method that takes the value in the `$TwitterHandle` property and return the URL to that handles Twitter page.\n\n```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n}\n```\n\nThe URL to a users Twitter account is simple, it is just twitter.com followed by the users twitter handle. Now, you might think you could just use `$TwitterHandle` to create this, but not so.\n\nWe need to let PowerShell know to use the TwitterHandle for this _particular_ object. That's where the `$this` variable comes into play.\n\n`$this` is a built in variable which simply means \u0022the current object I am running this code in\u0022. Using `$this`, I can reference any property or other method within _this_ instance of my class.\n\nI also want to point out that after the name of our method we added parenthesis. This is an indicator to PowerShell we are defining a method and not a property. In this case we are not passing in any values to our method, so they are empty. It is possible though to pass values in, which we'll see in a future post.\n\nFinally, note that my function, just like properties, is strongly typed. Since my URL is in the form of a string, I used `[string]` to indicate the data type being returned by this function.\n\n```powershell\n$twit = [Twitterer]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$myTwitter = $twit.TwitterURL()\n$myTwitter\n```\n\nResult:\n\n```\nhttps://twitter.com/ArcaneCode\n```\n\n## No Return\n\nIn my previous example, our method returned a value. There will be cases though when you simply want your method to do something, and not return any values. For those times, we can use the return type of `void`.\n\n```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n}\n```\n\nI've added a new method, `OpenTwitter`. Before it I used `[void]` to let Twitter know this particular method won't be returning any data.\n\nWithin the function I call the PowerShell cmdlet `Start-Process`. This cmdlet will take the value passed into it and attempt to run the application that corresponds to it. For example, if I had passed in the file name to an Excel spreadsheet, PowerShell would have attempted to launch Microsoft Excel and open that file.\n\nIn this case we're passing in a URL, so PowerShell will launch your default browser and open the Twitter webpage for that user.\n\nAlso note we used the `$this` built in variable to call the `TwitterURL` method for this current instance of our object, here `$twit`.\n\nTo run it we only need to call our method.\n\n```powershell\n$twit = [Twitterer]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.OpenTwitter()\n```\n\nIf all went well your web browser should open to the Twitter page for the associated user held in the `$TwitterHandle` variable.\n\n## Conclusion\n\nIn this opening article we covered some of the basics of using classes in PowerShell. Even with this limited information you should be able to start creating useful classes. In future articles we'll dive deeper into using classes in PowerShell.\n\nI want to mention, as I write this in December 2021, that my posts for the rest of the year will diverge as I want to give a little gift and share some of my favorite things I've found on the internet this year. I'll pick this series back up in January of 2022.\n\nThe demos in this series of blog posts came from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><p>We begin the definition with the keyword <code>class</code>, followed by what we wish to name our class. In my previous articles on enums we used Twitter data as an example, so let's stick to that.</p>
<p>After the name of the class we need an opening squiggly brace, and a closing one at the end. In PowerShell squiggly braces are used to define a <em>scrpt block</em>. You've seen these before, functions, <code>foreach</code>, <code>if</code> statements and more all use script blocks. Classes are no different, everything in the script block is the class definition.</p>
<p>With classes, as with most script blocks, it's not necessary to put the opening squiggly brace on the next line, many use <code>class Twitter {</code> on a single line. I just feel having the squiggly braces vertically aligned makes things easier to read.</p>
<p>Within the class I have defined a single property, <code>$TwitterHandle</code>. Before the name of the variable I have indicated the variable type in brackets, <code>[string]</code>. Unlike regular PowerShell, all properties must be <em>strongly typed</em>.</p>
<p>Let's create, or <em>instantiate</em>, a new variable from our class (after highlighting the class definition and using F8 or F5 to get it into memory).</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
</code></pre>
<p>This syntax may look a bit odd, so let me explain. When we created our class we defined a single property. Anytime we define a class, though, PowerShell adds extra properties and methods behind the scenes.</p>
<p>One of those methods is <code>new</code>. New is a <em>static method</em> that can be called without the need to instantiate a new object, which is fortunate as it is the way we get new objects from our class.</p>
<p>To call a static method, we use the name of the class in brackets, followed by two colons, then the name of the static method. In PowerShell, to call a method you always have to use parenthesis after the name of the method even if it takes no parameters. This is unlike a regular function in PowerShell.</p>
<p>Finally, we assign our newly instantiated object to the variable <code>$twit</code>.</p>
<p>We can now access the properties (and methods) in our object by using what is formally known as <em>dot notation</em>. If you've done any PowerShell coding then you've likely used it a million times by now without realizing it had a formal name.</p>
<p>You simply use the name of our object, a period, then the name of the property, as in <code>$twit.TwitterHandle</code>. Of course if we run this right now, we won't get anything back. This is because our variable is empty when the class is created. So let's assign it a value.</p>
<pre><code class="language-powershell">$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterHandle
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
</code></pre>
<p>It's that easy, we can use it like any other variable. Note one thing, when we created the property we used the <code>$</code> in front of the variable. But outside the class when we reference it as a property the <code>$</code> is omitted.</p>
<h2>Default Values for Properties</h2>
<p>There will be many times when you write a class in which you want to have some, or perhaps all, of its properties already populated with values. This will make it easier for your end user, especially for properties where the majority of the time the user can get by with the default value.</p>
<p>Creating a default value is simple, when you create the property you simply assign it a value.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'
}
</code></pre>
<p>Here a second property, <code>Name</code>, has been added. After its declaration I simply assigned it a name (mine in this case) just like I would assign any value to a variable.</p>
<p>Now let's create a new instance and examine the value in our <code>Name</code> property.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.Name
</code></pre>
<p>Result:</p>
<pre><code>Robert C. Cain
</code></pre>
<p>Of course just because we've provided a default value doesn't mean we can't change it.</p>
<pre><code class="language-powershell">$twit.Name = 'Mr. Code'
$twit.Name
</code></pre>
<p>Result:</p>
<pre><code>Mr. Code
</code></pre>
<h2>Our First Method</h2>
<p>Now that we've added properties, it's time to add a little functionality with our first <em>method</em>. A class method in PowerShell works just like a function, only without the need for the <code>function</code> keyword. For this example, we'll add a new method that takes the value in the <code>$TwitterHandle</code> property and return the URL to that handles Twitter page.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

}
</code></pre>
<p>The URL to a users Twitter account is simple, it is just twitter.com followed by the users twitter handle. Now, you might think you could just use <code>$TwitterHandle</code> to create this, but not so.</p>
<p>We need to let PowerShell know to use the TwitterHandle for this <em>particular</em> object. That's where the <code>$this</code> variable comes into play.</p>
<p><code>$this</code> is a built in variable which simply means &quot;the current object I am running this code in&quot;. Using <code>$this</code>, I can reference any property or other method within <em>this</em> instance of my class.</p>
<p>I also want to point out that after the name of our method we added parenthesis. This is an indicator to PowerShell we are defining a method and not a property. In this case we are not passing in any values to our method, so they are empty. It is possible though to pass values in, which we'll see in a future post.</p>
<p>Finally, note that my function, just like properties, is strongly typed. Since my URL is in the form of a string, I used <code>[string]</code> to indicate the data type being returned by this function.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.TwitterHandle = 'ArcaneCode'
$myTwitter = $twit.TwitterURL()
$myTwitter
</code></pre>
<p>Result:</p>
<pre><code>https://twitter.com/ArcaneCode
</code></pre>
<h2>No Return</h2>
<p>In my previous example, our method returned a value. There will be cases though when you simply want your method to do something, and not return any values. For those times, we can use the return type of <code>void</code>.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

}
</code></pre>
<p>I've added a new method, <code>OpenTwitter</code>. Before it I used <code>[void]</code> to let Twitter know this particular method won't be returning any data.</p>
<p>Within the function I call the PowerShell cmdlet <code>Start-Process</code>. This cmdlet will take the value passed into it and attempt to run the application that corresponds to it. For example, if I had passed in the file name to an Excel spreadsheet, PowerShell would have attempted to launch Microsoft Excel and open that file.</p>
<p>In this case we're passing in a URL, so PowerShell will launch your default browser and open the Twitter webpage for that user.</p>
<p>Also note we used the <code>$this</code> built in variable to call the <code>TwitterURL</code> method for this current instance of our object, here <code>$twit</code>.</p>
<p>To run it we only need to call our method.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.TwitterHandle = 'ArcaneCode'
$twit.OpenTwitter()
</code></pre>
<p>If all went well your web browser should open to the Twitter page for the associated user held in the <code>$TwitterHandle</code> variable.</p>
<h2>Conclusion</h2>
<p>In this opening article we covered some of the basics of using classes in PowerShell. Even with this limited information you should be able to start creating useful classes. In future articles we'll dive deeper into using classes in PowerShell.</p>
<p>I want to mention, as I write this in December 2021, that my posts for the rest of the year will diverge as I want to give a little gift and share some of my favorite things I've found on the internet this year. I'll pick this series back up in January of 2022.</p>
<p>The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4276</wp:post_id>
  <wp:post_date>2021-12-14 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-14 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 16:59:15</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 22:59:15</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-the-basics</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="class"><![CDATA[Class]]></category>
  <category domain="post_tag" nicename="classes"><![CDATA[Classes]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4279]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66507083094]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1639497610]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1470785696382263303";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_355994979664754";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167029</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:06</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] far we&#8217;ve covered a lot in this series on PowerShell Objects. We began by creating a class using the class keyword introduced in PowerShell 5. We then looked at using PSCustomObject to create new objects, then add [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645897.714356;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641206.114642;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167097</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Static Properties and Methods &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-02-07 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-02-07 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] last few articles we&#8217;ve been covering PowerShell objects. The first article in the series, Fun With PowerShell Classes &#8211; The Basics, covered the basics of using of the PowerShell class construct introduced in PowerShell version [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644246024.443415;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644250262.528002;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166813</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:16</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] I had started a series on classes and objects in PowerShell. If you haven&#8217;t read my post Fun With PowerShell Classes &#8211; The Basics you should give it a quick read. There are terms that were defined in it that we&#8217;ll be using [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835119.783355;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826816.671769;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166919</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:26</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my use of the $this keyword. Just like with objects generated by the more modern classes in PowerShell 5 and beyond, $this is used to represent the current instance of our custom object. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431626.388658;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436450.287601;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166972</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:10</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] is the next installment in my series on creating objects in PowerShell. In the first installment we showed how to create an object using the class type introduced in PowerShell 5. That covered the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040754.630932;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036410.953277;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-classes-the-basics-header</title>
  <link>http://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/fun-with-powershell-classes-the-basics-header/</link>
  <pubDate>Mon, 13 Dec 2021 22:57:54 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/fun-with-powershell-classes-the-basics-header.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4279</wp:post_id>
  <wp:post_date>2021-12-13 16:57:54</wp:post_date>
  <wp:post_date_gmt>2021-12-13 22:57:54</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 16:57:54</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 22:57:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-the-basics-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4276</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/fun-with-powershell-classes-the-basics-header.png</wp:attachment_url>
</item>
<item>
  <title>Fun with History: The History Guy</title>
  <link>http://arcanecode.com/2021/12/20/fun-with-history-the-history-guy/</link>
  <pubDate>Mon, 20 Dec 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4280</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="introduction">Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the spirit of the holiday season, I wanted to give a little gift back to you, my readers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I love history, honestly if I weren't in tech I would likely have become a history teacher of some kind. For relaxing I read a lot of history books and enjoy a lot of history shows on YouTube as well as other platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="the-history-guy">The History Guy</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One of my favorite YouTube channels is <a rel="noreferrer noopener" href="https://www.youtube.com/channel/UC4sEmXUuWIFlxRIFBRV6VXQ" target="_blank">The History Guy: History Deserves to Be Remembered</a>. Several times a week he releases roughly 15-minute videos on some event on history. Many are often little-known events, which cross a variety of areas.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some of course focus on big events, such as the world wars, or the US Civil War. Others might focus on motor sports, microfilm, or major events such as earthquakes or blackouts. Then there are ones that focus on notable, and some not so notable, figures from history.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The history is global in scale, not just US but events from history around the globe.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="the-most-important-invention-of-the-20th-century">The Most Important Invention of the 20th Century</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Below I've embedded my favorite video from his massive library, on the invention of the transistor. This video touches several areas of interest for me. Obviously, the transistor as it applies to computers, but in addition the advances it made possible in communication which appeals to the ham radio operator in me.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {"url":"https://www.youtube.com/watch?v=OuFlISa73Sw\u0026amp;list=PLA_6br3x4zyG_liVbEBQBF5IzFLSyf0gB\u0026amp;index=3","type":"video","providerNameSlug":"youtube","responsive":true,"className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?v=OuFlISa73Sw&amp;list=PLA_6br3x4zyG_liVbEBQBF5IzFLSyf0gB&amp;index=3
</div></figure>
<!-- /wp:embed -->

<!-- wp:heading -->
<h2 id="conclusion">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Please take a look, I feel sure you'll enjoy him as much as I do. Then jump over to his YouTube channel and subscribe, then enjoy many more videos from his library.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy Holidays!</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4280</wp:post_id>
  <wp:post_date>2021-12-20 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-20 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 17:25:22</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 23:25:22</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-history-the-history-guy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="fun"><![CDATA[Fun]]></category>
  <category domain="post_tag" nicename="history"><![CDATA[History]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4285]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66729807782]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1640012406]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1472944910194167809";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_359686635962255";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>fun-with-history-header</title>
  <link>http://arcanecode.com/2021/12/20/fun-with-history-the-history-guy/fun-with-history-header/</link>
  <pubDate>Mon, 13 Dec 2021 23:23:27 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/fun-with-history-header.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4285</wp:post_id>
  <wp:post_date>2021-12-13 17:23:27</wp:post_date>
  <wp:post_date_gmt>2021-12-13 23:23:27</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 17:23:27</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 23:23:27</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-history-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4280</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/fun-with-history-header.png</wp:attachment_url>
</item>
<item>
  <title>Fun with Preparedness</title>
  <link>http://arcanecode.com/2021/12/27/fun-with-preparedness/</link>
  <pubDate>Mon, 27 Dec 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4287</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="introduction">Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I have a confession to make. I'm something of what might be called a prepper. Now, does this mean I believe the government is about to clamp down on everyone, or the zombie invasion is upon us?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>No, of course not. But I do live in the southern United States, where we regularly have tornadoes, hurricanes, and (sometimes violent) thunderstorms. We also have some wild temperature swings, as I write this tomorrow's high is predicted to be 72 F, the low should be 39 F.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As such I've taken steps to be ready for weather related emergencies. I have a generator to supply power. My kerosene heater can keep me warm on cold nights when the power is out.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my car I keep a backpack with a few basic supplies should I be away from home and trapped. Blanket, change of clothes, water, food, some camping supplies. Things that will keep me alive and somewhat comfortable should I need to spend the night in or beside my car, or should I need to hike home or to a safe shelter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the spirit of gift giving during the holiday season, I wanted to share not one but two (in no particular order) YouTube channels that have taught me a lot about being prepared.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="the-sensible-prepper">The Sensible Prepper</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first channel I want to share is <a rel="noreferrer noopener" href="https://www.youtube.com/user/SensiblePrepper" target="_blank">The Sensible Prepper</a>. He shows various types of gear you can use to be prepared. Beyond that he also shows how everyday items, such as safety pins, plastic bottles, baking soda and more can be used in ways to get you ready for an emergency.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is one example, on using plastic bottles for preparedness.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {"url":"https://www.youtube.com/watch?v=5jUchqJ4lIA","type":"video","providerNameSlug":"youtube","responsive":true,"className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?v=5jUchqJ4lIA
</div></figure>
<!-- /wp:embed -->

<!-- wp:heading -->
<h2 id="corporals-corner">Corporals Corner</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The second channel I've learned a lot from is <a rel="noreferrer noopener" href="https://www.youtube.com/user/recall5811" target="_blank">Corporals Corner</a>. His channel is focused more on survival in the outdoors. He teaches how to create a wide variety of survival shelters and demonstrates equipment for staying alive when you are in the outdoors.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In some cases, he uses tents, or in other cases he creates entire shelters from nothing but the raw materials he finds in the woods. Corporal Kelly, USMC, has to be the hardest working YouTuber I've ever seen. He also knows more about knot tying than any other YouTuber I've ever watched.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is a recent video where he tests out an emergency shelter available from Amazon and shows the pros and cons.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {"url":"https://www.youtube.com/watch?v=fCjIo8Se6Qw","type":"video","providerNameSlug":"youtube","responsive":true,"className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?v=fCjIo8Se6Qw
</div></figure>
<!-- /wp:embed -->

<!-- wp:heading -->
<h2 id="conclusion">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I hope you'll enjoy these channels as much as I do and learn some lessons in preparedness as I have. Even just taking a few simple steps can make the difference between being miserable in a weather-related emergency and coming through it comfortably.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4287</wp:post_id>
  <wp:post_date>2021-12-27 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-27 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 18:44:48</wp:post_modified>
  <wp:post_modified_gmt>2021-12-14 00:44:48</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-preparedness</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="corporals-corner"><![CDATA[Corporals Corner]]></category>
  <category domain="category" nicename="fun"><![CDATA[Fun]]></category>
  <category domain="post_tag" nicename="preparedness"><![CDATA[Preparedness]]></category>
  <category domain="post_tag" nicename="sensible-prepper"><![CDATA[Sensible Prepper]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66982040141]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1640617228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1475481717666369542";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_363930572204528";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>fun-with-preparedness-header</title>
  <link>http://arcanecode.com/2021/12/27/fun-with-preparedness/fun-with-preparedness-header/</link>
  <pubDate>Tue, 14 Dec 2021 00:40:13 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/fun-with-preparedness-header.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4297</wp:post_id>
  <wp:post_date>2021-12-13 18:40:13</wp:post_date>
  <wp:post_date_gmt>2021-12-14 00:40:13</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 18:40:13</wp:post_modified>
  <wp:post_modified_gmt>2021-12-14 00:40:13</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-preparedness-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4287</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/fun-with-preparedness-header.png</wp:attachment_url>
</item>
<item>
  <title>Happy New Year - Now Go Make Your Bed</title>
  <link>http://arcanecode.com/2022/01/03/happy-new-year-now-go-make-your-bed/</link>
  <pubDate>Mon, 03 Jan 2022 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4299</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Happy New Year!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As we start this new year, I wanted to share a piece of advice that I've followed for the last few years, which has helped my mental state.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Make your bed.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Every day.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I know, it sounds simple, but it makes a surprising difference. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First off, you start the day with a "win". You look at your neatly made bed and get a feeling that you've already accomplished something for the day. It puts you in the attitude that you are ready to tackle the next thing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now flip it. You are coming to bed after a long day. If you leave your bed unmade, you see a chaotic mess. The sheets are rumpled, it looks like a choppy ocean wave. It does not, to me anyway, look at all inviting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If your bed was made though, it reminds you of a calm, tranquil lake. Soft, smooth, ready to relax in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I also make my sheets fun by having a variety of colors. Over time I'd purchase a set with some extra pillowcases from my local big box store. I selected colors I could mix and match. Black, White, Blue, Green, Red, and Brown.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I also picked up some fleece covers to act as my bed spread in colors that complement the sheets. White, Red, Blue, Brown, and Gray. This lets me setup combos like Green and Gray, Black and Red, Black and White, Blue and White (as you can see in the photo at the top), you name it I have lots of fun combos that keep my bedroom looking fresh and different, just with combining sheets and blankets.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Again, I realize this sounds like an extremely simple thing. However, it's a piece of advice I've seen many experts give so I decided to try it, and by golly it does make a difference in my outlook on the day.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Habits are interesting things, once you get them started it annoys you mentally when you skip them. Only rarely have I not made my bed, and that was usually because I was sick and in it. The other few times it was because I overslept and had to run out the door. Those times as soon as I got home I made it because it was mentally annoying me.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can now build on this habit to improve other areas of your life. Perhaps putting your car keys in a specific spot so you don't lose them, brushing your teeth, allocating time to update your blog, and more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Try it, if nothing else you'll have a nice neat bed.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4299</wp:post_id>
  <wp:post_date>2022-01-03 10:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-03 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-31 17:09:13</wp:post_modified>
  <wp:post_modified_gmt>2021-12-31 23:09:13</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>happy-new-year-now-go-make-your-bed</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="fun"><![CDATA[Fun]]></category>
  <category domain="category" nicename="personal"><![CDATA[Personal]]></category>
  <category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="post_tag" nicename="self-improvement"><![CDATA[Self Improvement]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4307]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67244536010]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1478033500750155777";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_368305501767035";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1641225622]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166764</wp:comment_id>
    <wp:comment_author><![CDATA[stannius]]></wp:comment_author>
    <wp:comment_author_email>stannius@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/stannius</wp:comment_author_url>
    <wp:comment_author_IP>24.17.205.235</wp:comment_author_IP>
    <wp:comment_date>2022-01-05 09:49:47</wp:comment_date>
    <wp:comment_date_gmt>2022-01-05 15:49:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have never in my almost 45 years on this planet understood the fascination with making one's bed that only you will see (and just rumple back up that night). The closest I came was when I was in the military, where I can understand nobody wants to see a row of rumpled beds, and I did appreciate the satisfaction of making a crisp corner with the non-fitted sheets.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1641397788.7348;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"stannius";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1641401819.716999;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"stannius";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>IMG_0965</title>
  <link>http://arcanecode.com/2022/01/03/happy-new-year-now-go-make-your-bed/img_0965/</link>
  <pubDate>Fri, 31 Dec 2021 22:39:24 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/img_0965.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4302</wp:post_id>
  <wp:post_date>2021-12-31 16:39:24</wp:post_date>
  <wp:post_date_gmt>2021-12-31 22:39:24</wp:post_date_gmt>
  <wp:post_modified>2021-12-31 16:39:24</wp:post_modified>
  <wp:post_modified_gmt>2021-12-31 22:39:24</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_0965</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4299</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/img_0965.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_0965</title>
  <link>http://arcanecode.com/2022/01/03/happy-new-year-now-go-make-your-bed/img_0965-2/</link>
  <pubDate>Fri, 31 Dec 2021 22:49:09 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/img_0965-1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4307</wp:post_id>
  <wp:post_date>2021-12-31 16:49:09</wp:post_date>
  <wp:post_date_gmt>2021-12-31 22:49:09</wp:post_date_gmt>
  <wp:post_modified>2021-12-31 16:49:09</wp:post_modified>
  <wp:post_modified_gmt>2021-12-31 22:49:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_0965-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4299</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/img_0965-1.jpg</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Objects - PSCustomObject</title>
  <link>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</link>
  <pubDate>Mon, 10 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4310</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nBefore the holidays I had started a series on classes and objects in PowerShell. If you haven't read my post [Fun With PowerShell Classes - The Basics](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) you should give it a quick read. There are terms that were defined in it that we'll be using here.\n\nFor this post I'll begin a series on the use of `PSCustomObject`. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. It still has a lot of validity today though, as you can use these techniques to extend the objects other people defined, including those already built into PowerShell. \n\nIn addition, understanding the use of `PSCustomObject` will give you a better understanding of the way classes work.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nSecond, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Code to Generate Our PSCustomObject\n\nFor these demos, I'm going to wrap the creation of our objects within a function. This is a common technique which allows us to create multiple objects based on a single set of code. Note this isn't required, you could use these techniques anywhere in your code. I just find placing it in functions makes for greater reuse.\n\nIf you need a refresher on PowerShell functions, I'll refer you back to my posts on functions: [Fun With PowerShell Basic Functions](https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/); [Fun With PowerShell Advanced Functions](https://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/); and [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/).\n\nLet's take a look at our first example, then break down each line.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject `\n                       -Property $properties\n\n  # Return the newly created object\n  return $object\n}\n```\n\nOur first line, obviously, defines our basic function. For this example I will be creating an object that holds the schema and table names for a database. It also will allow for a comment, so these are the three parameters that are passed in.\n\nTo add a list of properties to our object, we need to use a _hash table_. I define the hash table with three properties, Schema, Table, and Comment, and assign the parameter variables we passed in for their respective values. And yes, I do have a post on hash tables if you wish to know more about them, [Fun With PowerShell Hash Tables](https://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/).\n\nNext is where the magic occurs. I call the cmdlet `New-Object`. For its `TypeName` parameter I use the value of `PSObject`. This will create a variable of type `PSCustomObject`. I then pass in my hash table name for the `Property` parameter.\n\nThis is assigned to the variable `$object`. In the final line I return that value to the calling code.\n\nBefore someone points it out, yes I could have made the last line of the function simply `New-Object –TypeName PSObject -Property $properties` and not assigned it to a variable. As I explain in my previously mentioned posts on functions, not consuming the output within the function returns the value to the code that called it.\n\nAssigning to a value within my function, then returning that value, gives me some additional flexibility. Primarily I could use the `Write-Verbose` and `Write-Debug` statements to echo additional debugging information back to the developer (or user). It also allows for easier integration with testing tools, such as [Pester](https://pester.dev/).\n\nFor more info on Write-Verbose and Write-Debug, see my posts [Fun With PowerShell Write-Verbose](https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/) and [Fun With PowerShell Write-Debug](https://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/).\n\n## Creating Our Custom Object\n\nNow that we have the function created, we can call it to create our custom object. We'll then display its properties.\n\n``` powershell\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n\n# Display all properties\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable MyComment\n```\n\nAs you can see, simply running the name of our variable produces a table. Across the top are the names of our properties, below it are the values we passed into the function to use as values.\n\nIf we want to prove to ourselves this is indeed a `PSCustomObject`, we can use the `GetType` method.\n\n``` powershell\n$myObject.GetType()\n```\n\nResult:\n\n```\nIsPublic IsSerial Name            BaseType\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d            \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\nTrue     False    PSCustomObject  System.Object\n```\n\nAs you can see in the Name column, it is indeed of type `PSCustomObject`!\n\nLike any object, we can assign new values by referencing the individual properties.\n\n``` powershell\n$myObject.Schema = 'New Schema'\n$myObject.Comment = 'New Comment'\n$myObject\n```\n\nResult:\n\n```\nSchema     Table   Comment\n\u002d\u002d\u002d\u002d\u002d\u002d     \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-\nNew Schema MyTable New Comment\n```\n\nIn the output, you can see the values for Schema and Comment were updated. The original value for the Table property remained unchanged.\n\n## Adding Properties One At A Time\n\nThere is an alternate method we can use to create a custom object. We can create an empty object, then use the `Add-Member` cmdlet to add each property individually.\n\nLet's rewrite our function to use this methodology.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject\n\n  # Add-Member by passing in input object\n  Add-Member -InputObject $object `\n             –MemberType NoteProperty `\n             –Name Schema `\n             –Value $Schema\n\n  # Alternate syntax, pipe the object as an input to Add-Member\n  $object | Add-Member –MemberType NoteProperty `\n                       –Name Table `\n                       –Value $Table\n\n  $object | Add-Member -MemberType NoteProperty `\n                       -Name Comment `\n                       -Value $Comment\n\n  return $object\n}\n```\n\nThe function declaration is the same as in our first example. We then create an empty object through the line `$object = New-Object –TypeName PSObject`. This object now exists, but has none of our custom properties. Yet!\n\nNow we are going to call the `Add-Member` cmdlet. `Add-Member` allows us to add new properties and methods to an existing object.\n\nThe first parameter, `InputObject`, is used to indicate what object we want to work with.\n\nThe next parameter is `MemberType`. There are a variety of types we can add to a custom object. In this case we want to add a text property, so the correct value to use is `NoteProperty`. We'll see examples of other member types as we progress through this series.\n\nThe next two parameters are pretty self explanatory. The `Name` is what we want to call this property, and `Value` is the value we want it to have.\n\nWe then move on to add the `Table` property. In this example I wanted to show the alternative format for using `Add-Member`. You can take the object you want to add a member to, and pipe it into the `Add-Member` cmdlet. I've done this here for the `Table` property, as well as for the final property `Comment`.\n\nUsing this function has identical results as the previous example.\n\n``` powershell\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable MyComment\n```\n\nSo why use `Add-Member`? Clearly the first example where we used a hash table to declare our property list was more compact.\n\nThink about what we did here. We added new properties to _an existing object_! In this case it was a custom object we created. but this could be _any PowerShell object_. For example, we could have a list of file system objects returned to us by the `Get-ChildItem` cmdlet. Using `Add-Member` we have the ability to add new properties (and methods) to those objects.\n\nWe'll see an example of this very thing in a future blog post, but for now let's move on to the final section in today's post.\n\n## Creating Property Aliases\n\nIf you've been in IT for any length of time, you've probably encountered the situation where two different groups refer to the same property by two different names. In our example, let's say the DBA's refer to the comment property as `Comment`. They would like to use that property name when they use your script.\n\nYour software developers though don't think of this as the comment property, instead they call it `Description`. They complain that having to use the property name \u0022Comment\u0022 is causing a lot of coding errors.\n\nThis is one of those rare times we can make everyone happy, and we do so through the use of a property _alias_.\n\nWe'll start with the same `$object` variable we left off with in the previous example. We'll then use `Add-Member` to add a new alias.\n\n``` powershell\nAdd-Member -InputObject $myObject `\n           -MemberType AliasProperty `\n           -Name 'Description' `\n           -Value 'Comment' `\n           -PassThru\n```\n\nResult:\n\n```\nSchema     Table   Comment     Description\n\u002d\u002d\u002d\u002d\u002d\u002d     \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-     \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\nNew Schema MyTable New Comment New Comment\n```\n\nThe first thing to note is the `MemberType`. Instead of a `NoteProperty`, we are using the type `AliasProperty`. This will let the `Add-Member` cmdlet know we are simply adding an alternate name for an existing property.\n\nThe `Name` parameter is the name for the alias. The `Value` is the name of the already existing property.\n\nYou'll also note I added a switch to `Add-Member`, `PassThru`. In our previous examples, leaving this off ran the code but displayed no output. If want to see the results though, you can add the `PassThru` switch and the new values will be displayed in the terminal, as you saw in the _Result_ section above.\n\nOur alias added, you can see a new column `Description`. The value under it is identical to the one for comment.\n\nLet's change the `Description` property and see what happens.\n\n``` powershell\n$myObject.Description = 'The Description'\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment         Description\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-         \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable The Description The Description\n```\n\nAs you can see, both `Comment` and `Description` hold the newly updated value. Your users can now use these property names interchangeably.\n\nWe can of course update our original function to add the alias at the time the object is created.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject `\n                       -Property $properties\n\n  Add-Member -InputObject $object `\n             -MemberType AliasProperty `\n             -Name 'Description' `\n             -Value 'Comment'\n\n  # Return the newly created object\n  return $object\n}\n\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment   Description\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable MyComment MyComment\n```\n\nAs you can see, the function generated an object that included our alias. In this example I also combined methods. I used a hash table to define our initial set of properties, then used `Add-Member` to add the alias. I could have also put the addition of the alias in the second version of the function, where each property was added one at a time.\n\n## Conclusion\n\nIn this post we learned how to create a basic object using PSCustomObject. We added some properties, and even created an alias for one.\n\nNow you may be asking \u0022what about methods? Object can have methods too!\u0022 And you would be correct. In the next post in the series we'll see how to add custom methods to our object.\n\nIn future posts we'll see how to create custom objects from bits of C# code. Then we'll see how to add our own properties and methods to an existing object created by PowerShell.\n\nWe'll then return to our discussion of PowerShell classes by looking at some advanced features of the built in PowerShell class type.\n\nThe demos in this series of blog posts was inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>Before the holidays I had started a series on classes and objects in PowerShell. If you haven't read my post <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">Fun With PowerShell Classes - The Basics</a> you should give it a quick read. There are terms that were defined in it that we'll be using here.</p>
<p>For this post I'll begin a series on the use of <code>PSCustomObject</code>. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. It still has a lot of validity today though, as you can use these techniques to extend the objects other people defined, including those already built into PowerShell.</p>
<p>In addition, understanding the use of <code>PSCustomObject</code> will give you a better understanding of the way classes work.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Second, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Code to Generate Our PSCustomObject</h2>
<p>For these demos, I'm going to wrap the creation of our objects within a function. This is a common technique which allows us to create multiple objects based on a single set of code. Note this isn't required, you could use these techniques anywhere in your code. I just find placing it in functions makes for greater reuse.</p>
<p>If you need a refresher on PowerShell functions, I'll refer you back to my posts on functions: <a href="https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/">Fun With PowerShell Basic Functions</a>; <a href="https://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/">Fun With PowerShell Advanced Functions</a>; and <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a>.</p>
<p>Let's take a look at our first example, then break down each line.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Build a hash table with the properties
  $properties = [ordered]@{ Schema = $Schema
                            Table = $Table
                            Comment = $Comment
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject `
                       -Property $properties

  # Return the newly created object
  return $object
}
</code></pre>
<p>Our first line, obviously, defines our basic function. For this example I will be creating an object that holds the schema and table names for a database. It also will allow for a comment, so these are the three parameters that are passed in.</p>
<p>To add a list of properties to our object, we need to use a <em>hash table</em>. I define the hash table with three properties, Schema, Table, and Comment, and assign the parameter variables we passed in for their respective values. And yes, I do have a post on hash tables if you wish to know more about them, <a href="https://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/">Fun With PowerShell Hash Tables</a>.</p>
<p>Next is where the magic occurs. I call the cmdlet <code>New-Object</code>. For its <code>TypeName</code> parameter I use the value of <code>PSObject</code>. This will create a variable of type <code>PSCustomObject</code>. I then pass in my hash table name for the <code>Property</code> parameter.</p>
<p>This is assigned to the variable <code>$object</code>. In the final line I return that value to the calling code.</p>
<p>Before someone points it out, yes I could have made the last line of the function simply <code>New-Object –TypeName PSObject -Property $properties</code> and not assigned it to a variable. As I explain in my previously mentioned posts on functions, not consuming the output within the function returns the value to the code that called it.</p>
<p>Assigning to a value within my function, then returning that value, gives me some additional flexibility. Primarily I could use the <code>Write-Verbose</code> and <code>Write-Debug</code> statements to echo additional debugging information back to the developer (or user). It also allows for easier integration with testing tools, such as <a href="https://pester.dev/">Pester</a>.</p>
<p>For more info on Write-Verbose and Write-Debug, see my posts <a href="https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/">Fun With PowerShell Write-Verbose</a> and <a href="https://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/">Fun With PowerShell Write-Debug</a>.</p>
<h2>Creating Our Custom Object</h2>
<p>Now that we have the function created, we can call it to create our custom object. We'll then display its properties.</p>
<pre><code class="language-powershell">$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'

# Display all properties
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment
------   -----   -------
MySchema MyTable MyComment
</code></pre>
<p>As you can see, simply running the name of our variable produces a table. Across the top are the names of our properties, below it are the values we passed into the function to use as values.</p>
<p>If we want to prove to ourselves this is indeed a <code>PSCustomObject</code>, we can use the <code>GetType</code> method.</p>
<pre><code class="language-powershell">$myObject.GetType()
</code></pre>
<p>Result:</p>
<pre><code>IsPublic IsSerial Name            BaseType
-------- -------- ----            --------
True     False    PSCustomObject  System.Object
</code></pre>
<p>As you can see in the Name column, it is indeed of type <code>PSCustomObject</code>!</p>
<p>Like any object, we can assign new values by referencing the individual properties.</p>
<pre><code class="language-powershell">$myObject.Schema = 'New Schema'
$myObject.Comment = 'New Comment'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema     Table   Comment
------     -----   -------
New Schema MyTable New Comment
</code></pre>
<p>In the output, you can see the values for Schema and Comment were updated. The original value for the Table property remained unchanged.</p>
<h2>Adding Properties One At A Time</h2>
<p>There is an alternate method we can use to create a custom object. We can create an empty object, then use the <code>Add-Member</code> cmdlet to add each property individually.</p>
<p>Let's rewrite our function to use this methodology.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject

  # Add-Member by passing in input object
  Add-Member -InputObject $object `
             –MemberType NoteProperty `
             –Name Schema `
             –Value $Schema

  # Alternate syntax, pipe the object as an input to Add-Member
  $object | Add-Member –MemberType NoteProperty `
                       –Name Table `
                       –Value $Table

  $object | Add-Member -MemberType NoteProperty `
                       -Name Comment `
                       -Value $Comment

  return $object
}
</code></pre>
<p>The function declaration is the same as in our first example. We then create an empty object through the line <code>$object = New-Object –TypeName PSObject</code>. This object now exists, but has none of our custom properties. Yet!</p>
<p>Now we are going to call the <code>Add-Member</code> cmdlet. <code>Add-Member</code> allows us to add new properties and methods to an existing object.</p>
<p>The first parameter, <code>InputObject</code>, is used to indicate what object we want to work with.</p>
<p>The next parameter is <code>MemberType</code>. There are a variety of types we can add to a custom object. In this case we want to add a text property, so the correct value to use is <code>NoteProperty</code>. We'll see examples of other member types as we progress through this series.</p>
<p>The next two parameters are pretty self explanatory. The <code>Name</code> is what we want to call this property, and <code>Value</code> is the value we want it to have.</p>
<p>We then move on to add the <code>Table</code> property. In this example I wanted to show the alternative format for using <code>Add-Member</code>. You can take the object you want to add a member to, and pipe it into the <code>Add-Member</code> cmdlet. I've done this here for the <code>Table</code> property, as well as for the final property <code>Comment</code>.</p>
<p>Using this function has identical results as the previous example.</p>
<pre><code class="language-powershell">$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment
------   -----   -------
MySchema MyTable MyComment
</code></pre>
<p>So why use <code>Add-Member</code>? Clearly the first example where we used a hash table to declare our property list was more compact.</p>
<p>Think about what we did here. We added new properties to <em>an existing object</em>! In this case it was a custom object we created. but this could be <em>any PowerShell object</em>. For example, we could have a list of file system objects returned to us by the <code>Get-ChildItem</code> cmdlet. Using <code>Add-Member</code> we have the ability to add new properties (and methods) to those objects.</p>
<p>We'll see an example of this very thing in a future blog post, but for now let's move on to the final section in today's post.</p>
<h2>Creating Property Aliases</h2>
<p>If you've been in IT for any length of time, you've probably encountered the situation where two different groups refer to the same property by two different names. In our example, let's say the DBA's refer to the comment property as <code>Comment</code>. They would like to use that property name when they use your script.</p>
<p>Your software developers though don't think of this as the comment property, instead they call it <code>Description</code>. They complain that having to use the property name &quot;Comment&quot; is causing a lot of coding errors.</p>
<p>This is one of those rare times we can make everyone happy, and we do so through the use of a property <em>alias</em>.</p>
<p>We'll start with the same <code>$object</code> variable we left off with in the previous example. We'll then use <code>Add-Member</code> to add a new alias.</p>
<pre><code class="language-powershell">Add-Member -InputObject $myObject `
           -MemberType AliasProperty `
           -Name 'Description' `
           -Value 'Comment' `
           -PassThru
</code></pre>
<p>Result:</p>
<pre><code>Schema     Table   Comment     Description
------     -----   -------     -----------
New Schema MyTable New Comment New Comment
</code></pre>
<p>The first thing to note is the <code>MemberType</code>. Instead of a <code>NoteProperty</code>, we are using the type <code>AliasProperty</code>. This will let the <code>Add-Member</code> cmdlet know we are simply adding an alternate name for an existing property.</p>
<p>The <code>Name</code> parameter is the name for the alias. The <code>Value</code> is the name of the already existing property.</p>
<p>You'll also note I added a switch to <code>Add-Member</code>, <code>PassThru</code>. In our previous examples, leaving this off ran the code but displayed no output. If want to see the results though, you can add the <code>PassThru</code> switch and the new values will be displayed in the terminal, as you saw in the <em>Result</em> section above.</p>
<p>Our alias added, you can see a new column <code>Description</code>. The value under it is identical to the one for comment.</p>
<p>Let's change the <code>Description</code> property and see what happens.</p>
<pre><code class="language-powershell">$myObject.Description = 'The Description'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment         Description
------   -----   -------         -----------
MySchema MyTable The Description The Description
</code></pre>
<p>As you can see, both <code>Comment</code> and <code>Description</code> hold the newly updated value. Your users can now use these property names interchangeably.</p>
<p>We can of course update our original function to add the alias at the time the object is created.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Build a hash table with the properties
  $properties = [ordered]@{ Schema = $Schema
                            Table = $Table
                            Comment = $Comment
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject `
                       -Property $properties

  Add-Member -InputObject $object `
             -MemberType AliasProperty `
             -Name 'Description' `
             -Value 'Comment'

  # Return the newly created object
  return $object
}

$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment   Description
------   -----   -------   -----------
MySchema MyTable MyComment MyComment
</code></pre>
<p>As you can see, the function generated an object that included our alias. In this example I also combined methods. I used a hash table to define our initial set of properties, then used <code>Add-Member</code> to add the alias. I could have also put the addition of the alias in the second version of the function, where each property was added one at a time.</p>
<h2>Conclusion</h2>
<p>In this post we learned how to create a basic object using PSCustomObject. We added some properties, and even created an alias for one.</p>
<p>Now you may be asking &quot;what about methods? Object can have methods too!&quot; And you would be correct. In the next post in the series we'll see how to add custom methods to our object.</p>
<p>In future posts we'll see how to create custom objects from bits of C# code. Then we'll see how to add our own properties and methods to an existing object created by PowerShell.</p>
<p>We'll then return to our discussion of PowerShell classes by looking at some advanced features of the built in PowerShell class type.</p>
<p>The demos in this series of blog posts was inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4310</wp:post_id>
  <wp:post_date>2022-01-10 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-10 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-09 19:21:03</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 01:21:03</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-pscustomobject</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="pscustomobect"><![CDATA[PSCustomObect]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4313]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67515828826]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1641826814]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1480555086527008778";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_372358761361709";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167030</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:08</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] class using the class keyword introduced in PowerShell 5. We then looked at using PSCustomObject to create new objects, then add methods to those objects. In the previous post, we used C# code to create our PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645897.907232;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641208.260847;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166867</wp:comment_id>
    <wp:comment_author><![CDATA[Creating Custom Objects with PSCustomObject &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/01/13/creating-custom-objects-with-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-01-13 07:00:18</wp:comment_date>
    <wp:comment_date_gmt>2022-01-13 13:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain shows us one method of working with classes in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642078818.623966;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642082667.601459;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166916</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:20</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the previous installment of this series, I covered the various ways to create objects using the PSCustomObject. We saw how [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431620.099342;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436449.483936;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166973</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:12</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] of this series, I covered the various ways to create objects using the PSCustomObject. We saw how to create it using the New-Object cmdlet, then how to add your custom properties to it using the Add-Member [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040754.850106;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036412.796746;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun-With-PowerShell-Objects-01-PSCustomObject</title>
  <link>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/fun-with-powershell-objects-01-pscustomobject/</link>
  <pubDate>Mon, 10 Jan 2022 01:12:37 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-01-pscustomobject.png</guid>
  <description/>
  <content:encoded><![CDATA[PSCustomObject Code Sample]]></content:encoded>
  <excerpt:encoded><![CDATA[PSCustomObject Code Sample]]></excerpt:encoded>
  <wp:post_id>4313</wp:post_id>
  <wp:post_date>2022-01-09 19:12:37</wp:post_date>
  <wp:post_date_gmt>2022-01-10 01:12:37</wp:post_date_gmt>
  <wp:post_modified>2022-01-09 19:13:04</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 01:13:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-01-pscustomobject</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4310</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-01-pscustomobject.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[PSCustomObject Sample]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fun With PowerShell Objects - Adding Methods to PSCustomObject</title>
  <link>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</link>
  <pubDate>Mon, 17 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4317</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn the [previous installment](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/) of this series, I covered the various ways to create objects using the `PSCustomObject`. We saw how to create it using the `New-Object` cmdlet, then how to add your custom properties to it using the `Add-Member` cmdlet.\n\nIn this post we'll learn how to add our own _methods_ to our objects using _script blocks_. Before we go on, just a quick reminder on vocabulary.\n\nIn object oriented terminology, objects have properties and methods. From the perspective of the script writer who uses our object, they only know of the properties and methods we expose. They don't know, or care, how we implemented them.\n\nFrom the perspective of us, the authors of the code to create the object, it's a little different. What the end user calls properties we store in variables. We implement our objects methods using functions.\n\nWhen we are talking about our code in terms of writing our object, you will frequently see the terms _properties_ and _variables_ used interchangeably. Likewise you'll see the terms _method_ and _function_ used interchangeably.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Script Blocks\n\nBefore we get started, it's important to understand the concept of a _script block_. A script block is a piece of code encapsulated within squiggly braces {}. This code is meant to execute as a unit. Here's an example you've probably seen before.\n\n``` powershell\n$x = 1\nif ($x -eq 1)\n{ Write-Host 'Yep its one' }\n```\n\nThe code on the last line is the script block. This unit of code, within the squiggly braces, will execute should the `if` statement evaluates to true.\n\nIt's possible to define your own script blocks, and store them in a variable.\n\n``` powershell\n$hw = {\n        Clear-Host\n        \u0022Hello World\u0022\n      }\n```\n\nHere I've generated a simple block with two lines. The first clears the display, the second prints `Hello World`.\n\nNow you have a variable, `$hw`, holding a script block. How can we use this?\n\nFirst, we could execute the script block stored in the variable. To do so, we need to precede the name of the variable with an ampersand `\u0026amp;`. The ampersand is the PowerShell shortcut for _execute the code block contained in this variable_.\n\n``` powershell\n\u0026amp; $hw\n```\n\nResult:\n\n```\nHello World\n```\n\nAlthough it's difficult to show, the display did indeed clear before displaying our text.\n\nNote the space between the `\u0026amp;` and the variable name is optional, this works too.\n\n``` powershell\n\u0026amp;$hw\n```\n\nPersonally I think the space makes it a bit easier to read, not to mention it's easier for the eye to notice the `\u0026amp;`. Whichever way you go, I suggest picking a format and sticking to it.\n\nThere are some interesting ways we can use this concept. Of course we'll look at using script blocks to add new methods to an object in a moment, but another fun thing you can do is pass a script block into a function.\n\nA quick note, it is generally considered poor practice to have `Write-Host` statements within a function. Since this is just a simple demo though, we'll use them just to illustrate our concepts.\n\n``` powershell\nfunction Run-AScriptBlock($block)\n{\n  Write-Host 'About to run a script block'\n\n  \u0026amp; $block\n\n  Write-Host \u0022Block was run\u0022\n}\n\nRun-AScriptBlock $hw\n```\n\nResult:\n\n```\nHello World\nBlock was run\n```\n\nThe first line to display \u0022About to run....\u0022 did execute, but it was wiped out due to the `Clear-Host` in the script block.\n\nThe script block then displayed `Hello World`, and returned control to the function. The function then displayed \u0022Block was run\u0022 then exited.\n\nThe PowerShell testing tool, Pester, makes extensive use of this functionality to pass the code blocks being tested into Pester's unit testing functions.\n\nYour imagination is probably running wild at the various ways you can use this. For example, you could build a string of PowerShell code based on certain conditions, then once the string of code is complete execute it.\n\nAt this point you have a nice foundation on the concept of script blocks, so let's move on to the main topic of this post.\n\n## Starting Point\n\nThis post picks up where the previous one left off. If you recall, our previous post built a function to generate a custom object of type `PSCustomObject`. If you need an explanation please go back and read part 1 of this series, but to make it easy for you I'll reproduce the function needed to create the object we'll be working with.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject -Property $properties\n\n  Add-Member -InputObject $object `\n             -MemberType AliasProperty `\n             -Name 'Description' `\n             -Value 'Comment'\n\n  # Return the newly created object\n  return $object\n}\n\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n$myObject\n```\n\n## Adding a Method (aka Function) to an Object\n\nWith the knowledge above, combined with what we learned in the previous post, it turns out adding a simple function to an object is easy. First, we need to define our function in a script block. This function will combine the schema name and the table name with a period to separate the two.\n\n``` powershell\n$block = {\n           $st = \u0022$($this.Schema).$($this.Table)\u0022\n           return $st\n         }\n```\n\nIn this example I used _string interpolation_ to build my return string. (For more on string interpolation, see my post [Fun With PowerShell Strings](https://arcanecode.com/2021/07/12/fun-with-powershell-strings/).)\n\nNote my use of the `$this` keyword. Just like with objects generated by the more [modern classes](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) in PowerShell 5 and beyond, `$this` is used to represent the current instance of our custom object. Thus we'll be getting the schema and table names for the current object, stored in `$myObject`, and not one in another variable that was instantiated using the same code.\n\nIf you aren't a fan of string interpolation, you could have opted for concatenation with `$st = $this.Schema + '.' + $this.Table` to generate the return value, but interpolation is the generally accepted best practice for building strings.\n\nConcatenation is generally slower and takes more processing power than interpolation. Granted in this case it is barely measurable, but done over a dataset of millions of rows you might see an impact.\n\nWith the schema-table string (`$st`) built it is then returned.\n\nNow we will use the `Add-Member` cmdlet to add this function to our custom object. Assuming you have already run the function to create the `$myObject` variable, shown in the **Starting Point** section, you can use the following code to achieve our goal.\n\n``` powershell\nAdd-Member -InputObject $myObject `\n           -MemberType ScriptMethod `\n           -Name 'SchemaTable' `\n           -Value $block\n```\n\nI start by passing in the object I wish to add a member to, our `$myObject` variable.\n\nNext I indicate what type of member we are adding. `ScriptMethod` is the value to pass in to `MemberType` to indicate the data in the variable is a script block and should be manifested as a method.\n\nThe `Name` is next, in other words what we want to name this method. Finally into the `Value` parameter we pass in the variable holding the script block.\n\nOnce you add this new member, you can simply call it using the dot notation, with one important caveat. Because this is a method, you need to add parenthesis to the name of the method.\n\n``` powershell\n$myObject.SchemaTable()\n```\n\nResult:\n\n```\nMySchema.MyTable\n```\n\nUsing the parenthesis lets PowerShell make the distinction between a property and a method.\n\n## Parameters\n\nWhat's that? You in the back row raising your hand, what did you say? Parameters? You want to add parameters to your new method?\n\nWell, OK because you asked so nice.\n\nThis turns out to be pretty easy. We just need to add a `param` section within our script block.\n\n``` powershell\n$block = {\n           param ($DatabaseName)\n           $dst = \u0022$DatabaseName.$($this.Schema).$($this.Table)\u0022\n           return $dst\n         }\n```\n\nOn the first line of our script block we use the `param` keyword, then have a list of our parameters within parenthesis. Here we only have one, `$DatabaseName`, but we could have more separated by commas.\n\nI then build a string that uses the passed in database name, with the schema and table names already in the object, and finally return it.\n\nNext, I use `Add-Member` to add this function to our object just like I did with the previous example, the only difference being the name and the variable with our script block. Now we can call it.\n\n``` powershell\n$myObject.DatabaseSchemaTable('MyDBName')\n```\n\nResult:\n\n```\nMyDBName.MySchema.MyTable\n```\n\n## Conclusion\n\nThis post began with an explanation of _script blocks_. Using this knowledge we added new methods to our existing object. One even allowed us to pass in a parameter.\n\nIn in the next post we'll see how to create custom objects from bits of C# code. Later on we'll see how to add our own properties and methods to an existing object created by PowerShell.\n\nWell conclude this series by returning to our discussion of PowerShell classes by looking at some advanced features of the built in class construct.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In the <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">previous installment</a> of this series, I covered the various ways to create objects using the <code>PSCustomObject</code>. We saw how to create it using the <code>New-Object</code> cmdlet, then how to add your custom properties to it using the <code>Add-Member</code> cmdlet.</p>
<p>In this post we'll learn how to add our own <em>methods</em> to our objects using <em>script blocks</em>. Before we go on, just a quick reminder on vocabulary.</p>
<p>In object oriented terminology, objects have properties and methods. From the perspective of the script writer who uses our object, they only know of the properties and methods we expose. They don't know, or care, how we implemented them.</p>
<p>From the perspective of us, the authors of the code to create the object, it's a little different. What the end user calls properties we store in variables. We implement our objects methods using functions.</p>
<p>When we are talking about our code in terms of writing our object, you will frequently see the terms <em>properties</em> and <em>variables</em> used interchangeably. Likewise you'll see the terms <em>method</em> and <em>function</em> used interchangeably.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Script Blocks</h2>
<p>Before we get started, it's important to understand the concept of a <em>script block</em>. A script block is a piece of code encapsulated within squiggly braces {}. This code is meant to execute as a unit. Here's an example you've probably seen before.</p>
<pre><code class="language-powershell">$x = 1
if ($x -eq 1)
{ Write-Host 'Yep its one' }
</code></pre>
<p>The code on the last line is the script block. This unit of code, within the squiggly braces, will execute should the <code>if</code> statement evaluates to true.</p>
<p>It's possible to define your own script blocks, and store them in a variable.</p>
<pre><code class="language-powershell">$hw = {
        Clear-Host
        &quot;Hello World&quot;
      }
</code></pre>
<p>Here I've generated a simple block with two lines. The first clears the display, the second prints <code>Hello World</code>.</p>
<p>Now you have a variable, <code>$hw</code>, holding a script block. How can we use this?</p>
<p>First, we could execute the script block stored in the variable. To do so, we need to precede the name of the variable with an ampersand <code>&amp;</code>. The ampersand is the PowerShell shortcut for <em>execute the code block contained in this variable</em>.</p>
<pre><code class="language-powershell">&amp; $hw
</code></pre>
<p>Result:</p>
<pre><code>Hello World
</code></pre>
<p>Although it's difficult to show, the display did indeed clear before displaying our text.</p>
<p>Note the space between the <code>&amp;</code> and the variable name is optional, this works too.</p>
<pre><code class="language-powershell">&amp;$hw
</code></pre>
<p>Personally I think the space makes it a bit easier to read, not to mention it's easier for the eye to notice the <code>&amp;</code>. Whichever way you go, I suggest picking a format and sticking to it.</p>
<p>There are some interesting ways we can use this concept. Of course we'll look at using script blocks to add new methods to an object in a moment, but another fun thing you can do is pass a script block into a function.</p>
<p>A quick note, it is generally considered poor practice to have <code>Write-Host</code> statements within a function. Since this is just a simple demo though, we'll use them just to illustrate our concepts.</p>
<pre><code class="language-powershell">function Run-AScriptBlock($block)
{
  Write-Host 'About to run a script block'

  &amp; $block

  Write-Host &quot;Block was run&quot;
}

Run-AScriptBlock $hw
</code></pre>
<p>Result:</p>
<pre><code>Hello World
Block was run
</code></pre>
<p>The first line to display &quot;About to run....&quot; did execute, but it was wiped out due to the <code>Clear-Host</code> in the script block.</p>
<p>The script block then displayed <code>Hello World</code>, and returned control to the function. The function then displayed &quot;Block was run&quot; then exited.</p>
<p>The PowerShell testing tool, Pester, makes extensive use of this functionality to pass the code blocks being tested into Pester's unit testing functions.</p>
<p>Your imagination is probably running wild at the various ways you can use this. For example, you could build a string of PowerShell code based on certain conditions, then once the string of code is complete execute it.</p>
<p>At this point you have a nice foundation on the concept of script blocks, so let's move on to the main topic of this post.</p>
<h2>Starting Point</h2>
<p>This post picks up where the previous one left off. If you recall, our previous post built a function to generate a custom object of type <code>PSCustomObject</code>. If you need an explanation please go back and read part 1 of this series, but to make it easy for you I'll reproduce the function needed to create the object we'll be working with.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Build a hash table with the properties
  $properties = [ordered]@{ Schema = $Schema
                            Table = $Table
                            Comment = $Comment
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject -Property $properties

  Add-Member -InputObject $object `
             -MemberType AliasProperty `
             -Name 'Description' `
             -Value 'Comment'

  # Return the newly created object
  return $object
}

$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'
$myObject
</code></pre>
<h2>Adding a Method (aka Function) to an Object</h2>
<p>With the knowledge above, combined with what we learned in the previous post, it turns out adding a simple function to an object is easy. First, we need to define our function in a script block. This function will combine the schema name and the table name with a period to separate the two.</p>
<pre><code class="language-powershell">$block = {
           $st = &quot;$($this.Schema).$($this.Table)&quot;
           return $st
         }
</code></pre>
<p>In this example I used <em>string interpolation</em> to build my return string. (For more on string interpolation, see my post <a href="https://arcanecode.com/2021/07/12/fun-with-powershell-strings/">Fun With PowerShell Strings</a>.)</p>
<p>Note my use of the <code>$this</code> keyword. Just like with objects generated by the more <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">modern classes</a> in PowerShell 5 and beyond, <code>$this</code> is used to represent the current instance of our custom object. Thus we'll be getting the schema and table names for the current object, stored in <code>$myObject</code>, and not one in another variable that was instantiated using the same code.</p>
<p>If you aren't a fan of string interpolation, you could have opted for concatenation with <code>$st = $this.Schema + '.' + $this.Table</code> to generate the return value, but interpolation is the generally accepted best practice for building strings.</p>
<p>Concatenation is generally slower and takes more processing power than interpolation. Granted in this case it is barely measurable, but done over a dataset of millions of rows you might see an impact.</p>
<p>With the schema-table string (<code>$st</code>) built it is then returned.</p>
<p>Now we will use the <code>Add-Member</code> cmdlet to add this function to our custom object. Assuming you have already run the function to create the <code>$myObject</code> variable, shown in the <strong>Starting Point</strong> section, you can use the following code to achieve our goal.</p>
<pre><code class="language-powershell">Add-Member -InputObject $myObject `
           -MemberType ScriptMethod `
           -Name 'SchemaTable' `
           -Value $block
</code></pre>
<p>I start by passing in the object I wish to add a member to, our <code>$myObject</code> variable.</p>
<p>Next I indicate what type of member we are adding. <code>ScriptMethod</code> is the value to pass in to <code>MemberType</code> to indicate the data in the variable is a script block and should be manifested as a method.</p>
<p>The <code>Name</code> is next, in other words what we want to name this method. Finally into the <code>Value</code> parameter we pass in the variable holding the script block.</p>
<p>Once you add this new member, you can simply call it using the dot notation, with one important caveat. Because this is a method, you need to add parenthesis to the name of the method.</p>
<pre><code class="language-powershell">$myObject.SchemaTable()
</code></pre>
<p>Result:</p>
<pre><code>MySchema.MyTable
</code></pre>
<p>Using the parenthesis lets PowerShell make the distinction between a property and a method.</p>
<h2>Parameters</h2>
<p>What's that? You in the back row raising your hand, what did you say? Parameters? You want to add parameters to your new method?</p>
<p>Well, OK because you asked so nice.</p>
<p>This turns out to be pretty easy. We just need to add a <code>param</code> section within our script block.</p>
<pre><code class="language-powershell">$block = {
           param ($DatabaseName)
           $dst = &quot;$DatabaseName.$($this.Schema).$($this.Table)&quot;
           return $dst
         }
</code></pre>
<p>On the first line of our script block we use the <code>param</code> keyword, then have a list of our parameters within parenthesis. Here we only have one, <code>$DatabaseName</code>, but we could have more separated by commas.</p>
<p>I then build a string that uses the passed in database name, with the schema and table names already in the object, and finally return it.</p>
<p>Next, I use <code>Add-Member</code> to add this function to our object just like I did with the previous example, the only difference being the name and the variable with our script block. Now we can call it.</p>
<pre><code class="language-powershell">$myObject.DatabaseSchemaTable('MyDBName')
</code></pre>
<p>Result:</p>
<pre><code>MyDBName.MySchema.MyTable
</code></pre>
<h2>Conclusion</h2>
<p>This post began with an explanation of <em>script blocks</em>. Using this knowledge we added new methods to our existing object. One even allowed us to pass in a parameter.</p>
<p>In in the next post we'll see how to create custom objects from bits of C# code. Later on we'll see how to add our own properties and methods to an existing object created by PowerShell.</p>
<p>Well conclude this series by returning to our discussion of PowerShell classes by looking at some advanced features of the built in class construct.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4317</wp:post_id>
  <wp:post_date>2022-01-17 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-17 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 15:01:33</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 21:01:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-adding-methods-to-pscustomobject</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="methods"><![CDATA[Methods]]></category>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="pscustomobect"><![CDATA[PSCustomObect]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4318]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67794557812]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1642431617]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1483091815725154305";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_376657574265161";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167031</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:10</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] introduced in PowerShell 5. We then looked at using PSCustomObject to create new objects, then add methods to those objects. In the previous post, we used C# code to create our PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.116471;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641210.902687;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166947</wp:comment_id>
    <wp:comment_author><![CDATA[Adding Methods to a PSCustomObject &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/01/21/adding-methods-to-a-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-01-21 07:10:15</wp:comment_date>
    <wp:comment_date_gmt>2022-01-21 13:10:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain builds on a prior post: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642770615.091866;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642774767.407533;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166964</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 03/2022 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19856-Die-KW-032022-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2022-01-23 16:44:41</wp:comment_date>
    <wp:comment_date_gmt>2022-01-23 22:44:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Hier wird euch gezeigt, wie ihr an eure eigenen PowerShell Objekte Methoden bastelt. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642977881.115415;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642982963.278308;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166974</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:14</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] how to add your custom properties to it using the Add-Member cmdlet. In the subsequent post we saw how to add new methods to [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040755.038429;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036414.843293;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun-With-PowerShell-Objects-02-PSCustomObject-Methods</title>
  <link>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/fun-with-powershell-objects-02-pscustomobject-methods/</link>
  <pubDate>Mon, 10 Jan 2022 20:58:30 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-02-pscustomobject-methods.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4318</wp:post_id>
  <wp:post_date>2022-01-10 14:58:30</wp:post_date>
  <wp:post_date_gmt>2022-01-10 20:58:30</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 14:58:30</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 20:58:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-02-pscustomobject-methods</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4317</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-02-pscustomobject-methods.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Objects - Creating Objects from C#</title>
  <link>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</link>
  <pubDate>Mon, 24 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4321</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nThis is the next installment in my series on creating objects in PowerShell. In [the first installment](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) we showed how to create an object using the `class` type introduced in PowerShell 5. That covered the basics, and in the last installment of this series we'll cover some advanced techniques.\n\nIn the last two installment of this series, I covered the various ways to create objects using the `PSCustomObject`. We saw [how to create](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/) it using the `New-Object` cmdlet, then how to add your custom properties to it using the `Add-Member` cmdlet. In the subsequent post we saw [how to add new methods](https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/) to it.\n\nIn this post, we'll cover something new, creating an object based on C# code!\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Why C#\n\nYou may be asking yourself, why integrate C# code into PowerShell? Why not just define our objects using PowerShell? There are several reasons, especially if you are working with a team of C# developers, or are a C# developer yourself.\n\nFirst, it can make testing your C# classes easy. You can code the class and save it in a _.CS_ file. Then run some simple PowerShell to create a new object from your class and test its various properties and methods. This lets you make changes easily and test again. All without having to create a full blown C# project just to test.\n\nIt also allows for code reuse. Let's say your C# developers have created a library to do some calculations, and you need to use one of the methods from that library, but that library expects you to pass in an object based on a class.\n\nLet's further the example, perhaps you have the task of reading in a CSV file, doing a calculation for each row, then outputting another CSV file, or maybe even a JSON file. This is a one time use, so you don't want to go to the effort of creating a full blown C# project.\n\nUsing the techniques in this demo, you could simply access the C# file in which the class was defined, and generate an object from it in PowerShell. Then all you'd have to do is populate the object and pass it into the library to do the calculation, and output the result.\n\nThese are just a few simple examples, I'm sure you'll come up with many more as the need arises. I'll be honest, this isn't something you will need to do a great deal, but when you do you'll appreciate knowing how.\n\n## Embedding a C# Class in your PowerShell\n\nIn this first method, we'll define a standard C# class within a _here string_ then add it as a new data type in PowerShell. Once it exists as a type, we can then generate new objects from it. Let's take a look at a very simple class definition.\n\n``` powershell\n$code = @\u0022\nusing System;\n\npublic class SchemaTable\n{\n  public string DatabaseName;\n\n  public string SchemaTableName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;  // Setup a return variable\n\n    retVal = pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public SchemaTableName\n\n  public string FullName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;  // Setup a return variable\n\n    retVal = this.DatabaseName + \u0022.\u0022 + pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public FullName\n\n} // class SchemaTable\n\n\u0022@\n```\n\nIf you've read this far I'm going to assume you are familiar with C#, at least the basics of it, so I'll keep this explanation at a high level.\n\nWe start by declaring a class named `SchemaTable`. The next line declares a variable (which will become a property) called `DatabaseName`.\n\nI then create the first of two functions (which will become our methods). The `SchemaTableName` simply takes the two passed in values of `pSchema` and `pTable` and concatenates them together with a period between them.\n\nThe second, `FullName`, takes the value in `DatabaseName` and concatenates them with the schema and table name parameters, again using a period as a separator in the return string.\n\nNext, we need to add this class as a new data _type_ in PowerShell. You are already familiar with many data types, such as int, string, and more. We simply want to add a new data type to our PowerShell environment.\n\nTo do so, we will use the `Add-Type` cmdlet.\n\n``` powershell\nAdd-Type -TypeDefinition $code `\n         -Language CSharp\n```\n\nThe first parameter, `TypeDefinition`, takes the C# code we defined in the here string. The second, `Language`, is pretty obvious. We simply need to let PowerShell know what language this code was written in.\n\nAs of right now, the only supported language is C#. Because of this, if you leave off the `-Language CSharp` parameter, it will default to C# as the language. I included it here for completeness, but will omit it for future examples in this post.\n\nSo now we've defined a class in C#, and have added it as a new data type in PowerShell. How then do we create an object from it?\n\nWe'll turn to our old friend, `New-Object`.\n\n``` powershell\n$result = New-Object -TypeName SchemaTable\n```\n\nThat's it, that simple one line will create our new object based on the C# code we defined in the `$code` variable. You can even use `Get-Member` to display its properties and methods like you would with any other object.\n\n``` powershell\n$result | Get-Member\n```\n\nResult:\n\n```\nName            MemberType Definition\n\u002d\u002d\u002d\u002d            \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\nEquals          Method     bool Equals(System.Object obj)\nFullName        Method     string FullName(string pSchema, string pTable)\nGetHashCode     Method     int GetHashCode()\nGetType         Method     type GetType()\nSchemaTableName Method     string SchemaTableName(string pSchema, string pTable)\nToString        Method     string ToString()\nDatabaseName    Property   string DatabaseName {get;set;}\n```\n\nIt contains the standard methods and properties built into all objects, but it also has the three we defined: `FullName`, `SchemaTableName`, and `DatabaseName`.\n\nWe can use these properties and methods just like ones in any other object. Let's set the `DatabaseName` property, then display it.\n\n``` powershell\n$result.DatabaseName = 'MyDB'\n$result.DatabaseName\n```\n\nResult:\n\n```\nMyDB\n```\n\nLikewise, we can access the methods we created. Here's the `SchemaTableName` method.\n\n``` powershell\n$result.SchemaTableName('ASchema', 'ATable')\n```\n\nResult:\n\n```\nASchema.ATable\n```\n\nAnd for completeness, the `FullName` method.\n\n``` powershell\n$result.FullName('ASchema', 'ATable')\n```\n\nResult:\n\n```\nMyDB.ASchema.ATable\n```\n\n## C# Classes with Static Methods\n\nIn the [original post](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) in this series on basic PowerShell classes, I mentioned the concept of _static_ methods and properties. As static method or property is simply one that can be called without having to generate a new object.\n\nWhile we'll circle back around to discuss implementing static methods and properties in PowerShell classes in the final post in this series, it is likely you'll encounter C# classes with static methods and properties. As such we'll go ahead and cover them here, while we are talking C#.\n\nIn the code below, I've defined a class with one method, and labeled it as static. In reality you will encounter many classes that have a mix of static and non-static members, but for this post we'll keep the example simple.\n\n``` powershell\n$code = @\u0022\nusing System;\n\npublic class StaticSchemaTable\n{\n  public static string FullName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;\n\n    retVal = pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public static FullName\n} // class StaticSchemaTable\n\u0022@\n```\n\nAs you can see, I've simply used the `static` keyword as part of the `FullName` function declaration. I also changed the name of the class, otherwise the code is the same as the previous demo.\n\nNow we need to add this as a new type in our current PowerShell session.\n\n``` powershell\nAdd-Type -TypeDefinition $code\n```\n\nCalling our static method requires different syntax. First, it won't be necessary to create an object from it. Second, we'll need to use the full name of our class in brackets, followed by two colons. We then indicate the name of the static function to call, and pass in any parameters.\n\n``` powershell\n$result = [StaticSchemaTable]::FullName('MySchema', 'myTable')\n$result\n```\n\nResult:\n\n```\nMySchema.myTable\n```\n\nStatic methods and parameters aren't something that's used a great deal, but they are used so you should know how to handle them.\n\n## Creating an Object from A C# File\n\nWhile it is certainly possible to embed C# code right in your PowerShell, this could lead to some issues. The moment a developer makes a change to their _.cs_ file, you are now out of sync. You don't want to have to keep cutting and pasting all the time.\n\nIt makes far more sense, then, to simply access the C# file with the class definition, and load it at run time.\n\nFirst, you need to create a C# file with the sample code. Here is what I put in my _.cs_ file:\n\n``` csharp\nusing System;\n\npublic class StaticSchemaTableInFile\n{\n  public static string FullName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;\n\n    retVal = pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public static FullName\n} // class StaticSchemaTableInFile\n```\n\nThis is the same static class you just saw, with the minor change to the class name.\n\nIn the next sample, I simply build the path to the file name, then use the `Get-Content` to read it.\n\n``` powershell\n$csPath = 'C:\\Users\\arcan\\OneDrive\\BlogPosts\\Markdown\\'\n$file = \u0022$($csPath)Fun-With-PowerShell-Objects-Part 3.cs\u0022\n$code = Get-Content $file | Out-String\n```\n\n`Get-Content` will read the contents of the file. By default `Get-Content` reads it as an array with each line in the file being an element, so we'll have to pipe it through the `Out-String` cmdlet to convert it to a single string. This string is then stored in the `$code` variable. Of course you'll need to update the path and file variables you used on your computer.\n\nNow we do just like the previous demo, call `Add-Type` then run it.\n\n``` powershell\nAdd-Type -TypeDefinition $code\n$result = [StaticSchemaTableInFile]::FullName('mySchema', 'myTable')\n$result\n```\n\nResult:\n\n```\nmySchema.myTable\n```\n\nAgain, I reused the example from the static demo but we could also have used the first example, or any standard C# file containing class definitions.\n\n## Other Ways To Add Types\n\nWhile outside the scope of this post, I did want to mention there are two other ways you can add new data types to your PowerShell scripts. First, `Add-Type` will let you load types stored in an _assmebly_, in other words a **.dll** file.\n\nSecond, if you are running on a Windows computer you can add types stored in native Windows APIs. If you want to learn more about these, I'll refer you to the [Add-Type Documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2) at Microsoft.\n\n## Persistance\n\nOne last thing you need to be aware of. When you add a type it does _not_ persist between sessions. The moment you close your command window or VSCode, that type goes away. You'll need to recreate it the next time you run your script.\n\nThis is probably a good thing, as it's doubtful you will need to use these types on a daily basis. Should you need to, though, you'll have to edit your PowerShell profile and have them added within it.\n\n## Conclusion\n\nIn this post we saw how to create custom objects from C# classes. They could be embedded in our PowerShell code, or stored in external files. The subject of _static_ methods and properties were mentioned, along with a demo on how to use them.\n\nIn the next post we'll see a very useful technique, and cover the ability to add our own custom methods and properties to existing objects that others created, including ones built right into PowerShell.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>This is the next installment in my series on creating objects in PowerShell. In <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">the first installment</a> we showed how to create an object using the <code>class</code> type introduced in PowerShell 5. That covered the basics, and in the last installment of this series we'll cover some advanced techniques.</p>
<p>In the last two installment of this series, I covered the various ways to create objects using the <code>PSCustomObject</code>. We saw <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">how to create</a> it using the <code>New-Object</code> cmdlet, then how to add your custom properties to it using the <code>Add-Member</code> cmdlet. In the subsequent post we saw <a href="https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/">how to add new methods</a> to it.</p>
<p>In this post, we'll cover something new, creating an object based on C# code!</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Why C#</h2>
<p>You may be asking yourself, why integrate C# code into PowerShell? Why not just define our objects using PowerShell? There are several reasons, especially if you are working with a team of C# developers, or are a C# developer yourself.</p>
<p>First, it can make testing your C# classes easy. You can code the class and save it in a <em>.CS</em> file. Then run some simple PowerShell to create a new object from your class and test its various properties and methods. This lets you make changes easily and test again. All without having to create a full blown C# project just to test.</p>
<p>It also allows for code reuse. Let's say your C# developers have created a library to do some calculations, and you need to use one of the methods from that library, but that library expects you to pass in an object based on a class.</p>
<p>Let's further the example, perhaps you have the task of reading in a CSV file, doing a calculation for each row, then outputting another CSV file, or maybe even a JSON file. This is a one time use, so you don't want to go to the effort of creating a full blown C# project.</p>
<p>Using the techniques in this demo, you could simply access the C# file in which the class was defined, and generate an object from it in PowerShell. Then all you'd have to do is populate the object and pass it into the library to do the calculation, and output the result.</p>
<p>These are just a few simple examples, I'm sure you'll come up with many more as the need arises. I'll be honest, this isn't something you will need to do a great deal, but when you do you'll appreciate knowing how.</p>
<h2>Embedding a C# Class in your PowerShell</h2>
<p>In this first method, we'll define a standard C# class within a <em>here string</em> then add it as a new data type in PowerShell. Once it exists as a type, we can then generate new objects from it. Let's take a look at a very simple class definition.</p>
<pre><code class="language-powershell">$code = @&quot;
using System;

public class SchemaTable
{
  public string DatabaseName;

  public string SchemaTableName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;  // Setup a return variable

    retVal = pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public SchemaTableName

  public string FullName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;  // Setup a return variable

    retVal = this.DatabaseName + &quot;.&quot; + pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public FullName

} // class SchemaTable

&quot;@
</code></pre>
<p>If you've read this far I'm going to assume you are familiar with C#, at least the basics of it, so I'll keep this explanation at a high level.</p>
<p>We start by declaring a class named <code>SchemaTable</code>. The next line declares a variable (which will become a property) called <code>DatabaseName</code>.</p>
<p>I then create the first of two functions (which will become our methods). The <code>SchemaTableName</code> simply takes the two passed in values of <code>pSchema</code> and <code>pTable</code> and concatenates them together with a period between them.</p>
<p>The second, <code>FullName</code>, takes the value in <code>DatabaseName</code> and concatenates them with the schema and table name parameters, again using a period as a separator in the return string.</p>
<p>Next, we need to add this class as a new data <em>type</em> in PowerShell. You are already familiar with many data types, such as int, string, and more. We simply want to add a new data type to our PowerShell environment.</p>
<p>To do so, we will use the <code>Add-Type</code> cmdlet.</p>
<pre><code class="language-powershell">Add-Type -TypeDefinition $code `
         -Language CSharp
</code></pre>
<p>The first parameter, <code>TypeDefinition</code>, takes the C# code we defined in the here string. The second, <code>Language</code>, is pretty obvious. We simply need to let PowerShell know what language this code was written in.</p>
<p>As of right now, the only supported language is C#. Because of this, if you leave off the <code>-Language CSharp</code> parameter, it will default to C# as the language. I included it here for completeness, but will omit it for future examples in this post.</p>
<p>So now we've defined a class in C#, and have added it as a new data type in PowerShell. How then do we create an object from it?</p>
<p>We'll turn to our old friend, <code>New-Object</code>.</p>
<pre><code class="language-powershell">$result = New-Object -TypeName SchemaTable
</code></pre>
<p>That's it, that simple one line will create our new object based on the C# code we defined in the <code>$code</code> variable. You can even use <code>Get-Member</code> to display its properties and methods like you would with any other object.</p>
<pre><code class="language-powershell">$result | Get-Member
</code></pre>
<p>Result:</p>
<pre><code>Name            MemberType Definition
----            ---------- ----------
Equals          Method     bool Equals(System.Object obj)
FullName        Method     string FullName(string pSchema, string pTable)
GetHashCode     Method     int GetHashCode()
GetType         Method     type GetType()
SchemaTableName Method     string SchemaTableName(string pSchema, string pTable)
ToString        Method     string ToString()
DatabaseName    Property   string DatabaseName {get;set;}
</code></pre>
<p>It contains the standard methods and properties built into all objects, but it also has the three we defined: <code>FullName</code>, <code>SchemaTableName</code>, and <code>DatabaseName</code>.</p>
<p>We can use these properties and methods just like ones in any other object. Let's set the <code>DatabaseName</code> property, then display it.</p>
<pre><code class="language-powershell">$result.DatabaseName = 'MyDB'
$result.DatabaseName
</code></pre>
<p>Result:</p>
<pre><code>MyDB
</code></pre>
<p>Likewise, we can access the methods we created. Here's the <code>SchemaTableName</code> method.</p>
<pre><code class="language-powershell">$result.SchemaTableName('ASchema', 'ATable')
</code></pre>
<p>Result:</p>
<pre><code>ASchema.ATable
</code></pre>
<p>And for completeness, the <code>FullName</code> method.</p>
<pre><code class="language-powershell">$result.FullName('ASchema', 'ATable')
</code></pre>
<p>Result:</p>
<pre><code>MyDB.ASchema.ATable
</code></pre>
<h2>C# Classes with Static Methods</h2>
<p>In the <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">original post</a> in this series on basic PowerShell classes, I mentioned the concept of <em>static</em> methods and properties. As static method or property is simply one that can be called without having to generate a new object.</p>
<p>While we'll circle back around to discuss implementing static methods and properties in PowerShell classes in the final post in this series, it is likely you'll encounter C# classes with static methods and properties. As such we'll go ahead and cover them here, while we are talking C#.</p>
<p>In the code below, I've defined a class with one method, and labeled it as static. In reality you will encounter many classes that have a mix of static and non-static members, but for this post we'll keep the example simple.</p>
<pre><code class="language-powershell">$code = @&quot;
using System;

public class StaticSchemaTable
{
  public static string FullName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;

    retVal = pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public static FullName
} // class StaticSchemaTable
&quot;@
</code></pre>
<p>As you can see, I've simply used the <code>static</code> keyword as part of the <code>FullName</code> function declaration. I also changed the name of the class, otherwise the code is the same as the previous demo.</p>
<p>Now we need to add this as a new type in our current PowerShell session.</p>
<pre><code class="language-powershell">Add-Type -TypeDefinition $code
</code></pre>
<p>Calling our static method requires different syntax. First, it won't be necessary to create an object from it. Second, we'll need to use the full name of our class in brackets, followed by two colons. We then indicate the name of the static function to call, and pass in any parameters.</p>
<pre><code class="language-powershell">$result = [StaticSchemaTable]::FullName('MySchema', 'myTable')
$result
</code></pre>
<p>Result:</p>
<pre><code>MySchema.myTable
</code></pre>
<p>Static methods and parameters aren't something that's used a great deal, but they are used so you should know how to handle them.</p>
<h2>Creating an Object from A C# File</h2>
<p>While it is certainly possible to embed C# code right in your PowerShell, this could lead to some issues. The moment a developer makes a change to their <em>.cs</em> file, you are now out of sync. You don't want to have to keep cutting and pasting all the time.</p>
<p>It makes far more sense, then, to simply access the C# file with the class definition, and load it at run time.</p>
<p>First, you need to create a C# file with the sample code. Here is what I put in my <em>.cs</em> file:</p>
<pre><code class="language-csharp">using System;

public class StaticSchemaTableInFile
{
  public static string FullName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;

    retVal = pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public static FullName
} // class StaticSchemaTableInFile
</code></pre>
<p>This is the same static class you just saw, with the minor change to the class name.</p>
<p>In the next sample, I simply build the path to the file name, then use the <code>Get-Content</code> to read it.</p>
<pre><code class="language-powershell">$csPath = 'C:\Users\arcan\OneDrive\BlogPosts\Markdown\'
$file = &quot;$($csPath)Fun-With-PowerShell-Objects-Part 3.cs&quot;
$code = Get-Content $file | Out-String
</code></pre>
<p><code>Get-Content</code> will read the contents of the file. By default <code>Get-Content</code> reads it as an array with each line in the file being an element, so we'll have to pipe it through the <code>Out-String</code> cmdlet to convert it to a single string. This string is then stored in the <code>$code</code> variable. Of course you'll need to update the path and file variables you used on your computer.</p>
<p>Now we do just like the previous demo, call <code>Add-Type</code> then run it.</p>
<pre><code class="language-powershell">Add-Type -TypeDefinition $code
$result = [StaticSchemaTableInFile]::FullName('mySchema', 'myTable')
$result
</code></pre>
<p>Result:</p>
<pre><code>mySchema.myTable
</code></pre>
<p>Again, I reused the example from the static demo but we could also have used the first example, or any standard C# file containing class definitions.</p>
<h2>Other Ways To Add Types</h2>
<p>While outside the scope of this post, I did want to mention there are two other ways you can add new data types to your PowerShell scripts. First, <code>Add-Type</code> will let you load types stored in an <em>assmebly</em>, in other words a <strong>.dll</strong> file.</p>
<p>Second, if you are running on a Windows computer you can add types stored in native Windows APIs. If you want to learn more about these, I'll refer you to the <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2">Add-Type Documentation</a> at Microsoft.</p>
<h2>Persistance</h2>
<p>One last thing you need to be aware of. When you add a type it does <em>not</em> persist between sessions. The moment you close your command window or VSCode, that type goes away. You'll need to recreate it the next time you run your script.</p>
<p>This is probably a good thing, as it's doubtful you will need to use these types on a daily basis. Should you need to, though, you'll have to edit your PowerShell profile and have them added within it.</p>
<h2>Conclusion</h2>
<p>In this post we saw how to create custom objects from C# classes. They could be embedded in our PowerShell code, or stored in external files. The subject of <em>static</em> methods and properties were mentioned, along with a demo on how to use them.</p>
<p>In the next post we'll see a very useful technique, and cover the ability to add our own custom methods and properties to existing objects that others created, including ones built right into PowerShell.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4321</wp:post_id>
  <wp:post_date>2022-01-24 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-24 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 16:06:17</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 22:06:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-creating-objects-from-c</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="category" nicename="c-sharp"><![CDATA[C Sharp]]></category>
  <category domain="category" nicename="c"><![CDATA[C#]]></category>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4322]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68092666760]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1485628490141552640";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_381006680496917";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1643036409]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167032</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:12</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] looked at using PSCustomObject to create new objects, then add methods to those objects. In the previous post, we used C# code to create our PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.308705;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641212.964138;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166981</wp:comment_id>
    <wp:comment_author><![CDATA[Creating Powershell Objects from C# &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/01/25/creating-powershell-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-01-25 07:00:10</wp:comment_date>
    <wp:comment_date_gmt>2022-01-25 13:00:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain mixes languages: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643115610.659552;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643119346.332143;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun-With-PowerShell-Objects-03-Custom-Objects-From-CSharp</title>
  <link>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/fun-with-powershell-objects-03-custom-objects-from-csharp/</link>
  <pubDate>Mon, 10 Jan 2022 21:56:08 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-03-custom-objects-from-csharp.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4322</wp:post_id>
  <wp:post_date>2022-01-10 15:56:08</wp:post_date>
  <wp:post_date_gmt>2022-01-10 21:56:08</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 15:56:08</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 21:56:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-03-custom-objects-from-csharp</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4321</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-03-custom-objects-from-csharp.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Objects - Modifying Existing Objects</title>
  <link>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</link>
  <pubDate>Mon, 31 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4325</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nSo far we've covered a lot in this series on PowerShell Objects. We began by [creating a class using the class keyword](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) introduced in PowerShell 5. We then looked at using PSCustomObject to [create new objects](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/), then [add methods](https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/) to those objects. In the [previous post](https://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/), we used C# code to create our PowerShell objects.\n\nIn this installment, we'll see how to add properties and methods to _existing_ objects created by someone else. For this example we'll use objects returned by the `Get-ChildItem` cmdlet, but we could use any objects.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nIn the code samples be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Getting The Objects to Work With\n\nAs stated in the Introduction, we will use the objects returned by the `Get-ChildItem` cmdlet to add a new property and method to. We'll set our location (in my case to the folder where these samples are stored), call the `Get-ChildItem` cmdlet and store the result in a variable, `$items`.\n\n``` powershell\nSet-Location C:\\Users\\arcan\\OneDrive\\BlogPosts\\Markdown\n$items = Get-ChildItem\n```\n\nLet's look a the first item in the `$items` collection to see what its datatype is.\n\n``` powershell\n$items[0].GetType()\n```\n\nResult:\n\n```\nIsPublic IsSerial Name     BaseType\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d     \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\nTrue     False    FileInfo System.IO.FileSystemInfo\n```\n\nAs you can see, each item is of type `FileInfo`. Each object contains information about the corresponding file it represents. You can find a full list of properties and methods for the `FileInfo` class in the online [Microsoft Documentation for FileInfo](https://docs.microsoft.com/en-us/dotnet/api/system.io.fileinfo?view=net-6.0).\n\n## Coding Our New Method\n\nFor this example, we are going to iterate over our collection of `FileInfo` objects. To each one, we'll be adding one property and one method. The property will just be a number that can be used to uniquely identify each object. We'll look more at that momentarily.\n\nThe method we'll add will analyze the existing `Extension` property of the `FileInfo` object. As I'm sure you know, the extension is the data that occurs after the period in the file name, and is used to identify the type  of file it is.\n\nHere is the script block for this method.\n\n``` powershell\n# Define the custom script property\n$script = {\n\n  switch ($this.Extension)\n  {\n    '.cs'   {$retValue = 'C#'}\n    '.md'   {$retValue = 'Markdown'}\n    '.ps1'  {$retValue = 'Script'}\n    '.psd1' {$retValue = 'Module Definition'}\n    '.psm1' {$retValue = 'Module'}\n    '.xml'  {$retValue = 'XML File'}\n    '.pptx' {$retValue = 'PowerPoint'}\n    '.csv'  {$retValue = 'Comma Separated Values file'}\n    '.json' {$retValue = 'JavaScript Object Notation data'}\n    default {$retValue = 'Sorry dude, no clue.'}\n  }\n\n  return $retValue\n}\n```\n\nWithin the `switch` statement, I use `$this` to access the current object. It then access the `Extension` property of the current object.\n\nIt then goes down the list, comparing the extension value to the text to the left of the squiggly brace. If it finds a match, it will run the code inside the script block. This simply sets a return value variable to a more human friendly text representation of the file type.\n\nIf no match is found, it runs the code by the `default` value. For more in the switch statement, see my post [Fun With PowerShell Logic Branching](https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/).\n\n## Adding The Property and Method to the FileInfo Object\n\nNow that our script is defined, it's time to add it as well as a property to our `FileInfo` objects. Let's see the code, then we'll break it down.\n\n```powershell\n# Create an item count variable\n$itemCount = 0\n\n# Iterate over each DirectoryInfo object in the $items collection\nforeach($item in $items)\n{\n  # Add a note property, setting it to the current item counter\n  $itemCount++\n  $item | Add-Member –MemberType NoteProperty `\n                     –Name ItemNumber `\n                     –Value $itemCount\n\n  # Add script property to the individual file object\n  Add-Member -InputObject $item `\n             -MemberType ScriptMethod `\n             -Name 'ScriptType' `\n             -Value $script\n\n  # Now display the already existing Name property along with the\n  # property and method we just added.\n  \u0022$($item.ItemNumber): $($item.Name) = $($item.ScriptType())\u0022\n}\n```\n\nWe begin by creating a variable, `$itemCount`. Within the `foreach` loop we'll increment it, then use it as our index for the `ItemNumber` property.\n\nThe `foreach` loop is entered, where we iterate over the collection of `FileInfo` objects stored in `$items`. Each time through the loop, the current item is copied into the `$item` variable. For more info on `foreach`, see my post [Fun With PowerShell Loops](https://arcanecode.com/2021/08/23/fun-with-powershell-loops/).\n\nThe next line is straightforward, we simply increment the `$itemCount` by one.\n\nYou've seen the `Add-Member` cmdlet used in recent posts on adding properties and methods to a `PSCustomObject`, so I won't delve deep into it here.\n\nThe first call to `Add-Member` takes the current `FileInfo` object, stored in `$item`, and adds a new property we'll name `ItemNumber`. When we add it, we'll go ahead and assign the value in `$itemCount`. Note that this property could be updated at a future time, although we won't need to for this example.\n\nWe then call `Add-Member` a second time, adding in the script you saw earlier and naming it `ScriptType`.\n\nFinally, we use string interpolation to build a nicely formatted string with the item number, the name of the file (a native property of the `FileInfo` object), and finally we call the method we just added `ScriptType`.\n\nHere is the final output of our effort.\n\nResult:\n\n```\n1: blog-template.md = Markdown\n2: fun-with-powershell-classes-the-basics.md = Markdown\n3: fun-with-powershell-classes-the-basics.ps1 = Script\n4: fun-with-powershell-enum-flags-header.png = Sorry dude, no clue.\n5: Fun-With-PowerShell-Enum-Flags.md = Markdown\n6: Fun-With-PowerShell-Enums.md = Markdown\n7: Fun-With-PowerShell-Objects-Part 1.md = Markdown\n8: Fun-With-PowerShell-Objects-Part 1.ps1 = Script\n9: Fun-With-PowerShell-Objects-Part 2.md = Markdown\n10: Fun-With-PowerShell-Objects-Part 2.ps1 = Script\n11: Fun-With-PowerShell-Objects-Part 3.cs = C#\n12: Fun-With-PowerShell-Objects-Part 3.md = Markdown\n13: Fun-With-PowerShell-Objects-Part 3.ps1 = Script\n14: Fun-With-PowerShell-Objects-Part 4.md = Markdown\n15: Fun-With-PowerShell-Objects-Part 4.ps1 = Script\n16: fun-with-powershell-objects-part-1.png = Sorry dude, no clue.\n17: Fun-With-PowerShell-Providers.md = Markdown\n18: Fun-With-PowerShell-Write-Debug.md = Markdown\n19: Fun-With-PowerShell-Write-Verbose-and-Write-Debug.md = Markdown\n20: Fun-With-VSCode-Code-Snippets.md = Markdown\n21: IMG_0965.JPG = Sorry dude, no clue.\n22: more-fun-with-powershell-enums-header.png = Sorry dude, no clue.\n23: More-Fun-With-PowerShell-Enums.md = Markdown\n24: More-Fun-With-PowerShell-Enums.ps1 = Script\n25: security-for-apartment-dwellers-01.png = Sorry dude, no clue.\n26: Security-for-Apartment-Dwellers-header.png = Sorry dude, no clue.\n27: Security-for-Apartment-Dwellers.md = Markdown\n```\n\nI author these blog posts in markdown within VSCode first, prior to copying them into my WordPress based blog. This folder contains a markdown file for each post, most of which have one or more accompanying code files associated with it.\n\nI deliberately omitted the image type extensions (.jpg, .png) from the switch statement so you could see the default option being taken.\n\n## Persistance\n\nThere is an important fact you need to recall when using this technique. The new property and method only exist for the set of `FileInfo` objects contained in our `$items` collection. If I were to get another collection, perhaps using `$moreItems = Get-ChildItem`, the `FileInfo` objects stored in `$moreItems` will **NOT** have our `ItemNumber` and `ScriptType` in them.\n\nYou will have to explicitly add custom properties and methods to objects each time you need them.\n\n## Conclusion\n\nAs you can see, this technique offers many possibilities. You could define a script block at the top of your script that does a complex calculation, or perhaps formats data for easier reading by the end user. Then you simply add this script block to the objects you generate.\n\nThis makes your code much more readable. The complex part is at the top where we define the script block, out of the way of your loops.\n\nIt can also promote code reuse. You can create a separate script with many script blocks that you commonly use. You call that script from the one you are currently developing, and you instantly have a set of new properties and methods that can be added to the set of objects you are working with.\n\nThis method provides for extensibility with objects you did not author, or have the source code for. Perhaps you have a compiled PowerShell module that came from a vendor, but it lacks that one method that would, for your unique situation, make it much easier to work with. You can now code that method for yourself and use it.\n\nAs time goes on I'm sure you'll find many situations you can use these techniques to solve problems.\n\nIn the next three installments of this series we'll return to the PowerShell _class_ type. We'll look at some of the advanced abilities that it offers.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>So far we've covered a lot in this series on PowerShell Objects. We began by <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">creating a class using the class keyword</a> introduced in PowerShell 5. We then looked at using PSCustomObject to <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">create new objects</a>, then <a href="https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/">add methods</a> to those objects. In the <a href="https://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/">previous post</a>, we used C# code to create our PowerShell objects.</p>
<p>In this installment, we'll see how to add properties and methods to <em>existing</em> objects created by someone else. For this example we'll use objects returned by the <code>Get-ChildItem</code> cmdlet, but we could use any objects.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>In the code samples be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Getting The Objects to Work With</h2>
<p>As stated in the Introduction, we will use the objects returned by the <code>Get-ChildItem</code> cmdlet to add a new property and method to. We'll set our location (in my case to the folder where these samples are stored), call the <code>Get-ChildItem</code> cmdlet and store the result in a variable, <code>$items</code>.</p>
<pre><code class="language-powershell">Set-Location C:\Users\arcan\OneDrive\BlogPosts\Markdown
$items = Get-ChildItem
</code></pre>
<p>Let's look a the first item in the <code>$items</code> collection to see what its datatype is.</p>
<pre><code class="language-powershell">$items[0].GetType()
</code></pre>
<p>Result:</p>
<pre><code>IsPublic IsSerial Name     BaseType
-------- -------- ----     --------
True     False    FileInfo System.IO.FileSystemInfo
</code></pre>
<p>As you can see, each item is of type <code>FileInfo</code>. Each object contains information about the corresponding file it represents. You can find a full list of properties and methods for the <code>FileInfo</code> class in the online <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.fileinfo?view=net-6.0">Microsoft Documentation for FileInfo</a>.</p>
<h2>Coding Our New Method</h2>
<p>For this example, we are going to iterate over our collection of <code>FileInfo</code> objects. To each one, we'll be adding one property and one method. The property will just be a number that can be used to uniquely identify each object. We'll look more at that momentarily.</p>
<p>The method we'll add will analyze the existing <code>Extension</code> property of the <code>FileInfo</code> object. As I'm sure you know, the extension is the data that occurs after the period in the file name, and is used to identify the type  of file it is.</p>
<p>Here is the script block for this method.</p>
<pre><code class="language-powershell"># Define the custom script property
$script = {

  switch ($this.Extension)
  {
    '.cs'   {$retValue = 'C#'}
    '.md'   {$retValue = 'Markdown'}
    '.ps1'  {$retValue = 'Script'}
    '.psd1' {$retValue = 'Module Definition'}
    '.psm1' {$retValue = 'Module'}
    '.xml'  {$retValue = 'XML File'}
    '.pptx' {$retValue = 'PowerPoint'}
    '.csv'  {$retValue = 'Comma Separated Values file'}
    '.json' {$retValue = 'JavaScript Object Notation data'}
    default {$retValue = 'Sorry dude, no clue.'}
  }

  return $retValue
}
</code></pre>
<p>Within the <code>switch</code> statement, I use <code>$this</code> to access the current object. It then access the <code>Extension</code> property of the current object.</p>
<p>It then goes down the list, comparing the extension value to the text to the left of the squiggly brace. If it finds a match, it will run the code inside the script block. This simply sets a return value variable to a more human friendly text representation of the file type.</p>
<p>If no match is found, it runs the code by the <code>default</code> value. For more in the switch statement, see my post <a href="https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/">Fun With PowerShell Logic Branching</a>.</p>
<h2>Adding The Property and Method to the FileInfo Object</h2>
<p>Now that our script is defined, it's time to add it as well as a property to our <code>FileInfo</code> objects. Let's see the code, then we'll break it down.</p>
<pre><code class="language-powershell"># Create an item count variable
$itemCount = 0

# Iterate over each DirectoryInfo object in the $items collection
foreach($item in $items)
{
  # Add a note property, setting it to the current item counter
  $itemCount++
  $item | Add-Member –MemberType NoteProperty `
                     –Name ItemNumber `
                     –Value $itemCount

  # Add script property to the individual file object
  Add-Member -InputObject $item `
             -MemberType ScriptMethod `
             -Name 'ScriptType' `
             -Value $script

  # Now display the already existing Name property along with the
  # property and method we just added.
  &quot;$($item.ItemNumber): $($item.Name) = $($item.ScriptType())&quot;
}
</code></pre>
<p>We begin by creating a variable, <code>$itemCount</code>. Within the <code>foreach</code> loop we'll increment it, then use it as our index for the <code>ItemNumber</code> property.</p>
<p>The <code>foreach</code> loop is entered, where we iterate over the collection of <code>FileInfo</code> objects stored in <code>$items</code>. Each time through the loop, the current item is copied into the <code>$item</code> variable. For more info on <code>foreach</code>, see my post <a href="https://arcanecode.com/2021/08/23/fun-with-powershell-loops/">Fun With PowerShell Loops</a>.</p>
<p>The next line is straightforward, we simply increment the <code>$itemCount</code> by one.</p>
<p>You've seen the <code>Add-Member</code> cmdlet used in recent posts on adding properties and methods to a <code>PSCustomObject</code>, so I won't delve deep into it here.</p>
<p>The first call to <code>Add-Member</code> takes the current <code>FileInfo</code> object, stored in <code>$item</code>, and adds a new property we'll name <code>ItemNumber</code>. When we add it, we'll go ahead and assign the value in <code>$itemCount</code>. Note that this property could be updated at a future time, although we won't need to for this example.</p>
<p>We then call <code>Add-Member</code> a second time, adding in the script you saw earlier and naming it <code>ScriptType</code>.</p>
<p>Finally, we use string interpolation to build a nicely formatted string with the item number, the name of the file (a native property of the <code>FileInfo</code> object), and finally we call the method we just added <code>ScriptType</code>.</p>
<p>Here is the final output of our effort.</p>
<p>Result:</p>
<pre><code>1: blog-template.md = Markdown
2: fun-with-powershell-classes-the-basics.md = Markdown
3: fun-with-powershell-classes-the-basics.ps1 = Script
4: fun-with-powershell-enum-flags-header.png = Sorry dude, no clue.
5: Fun-With-PowerShell-Enum-Flags.md = Markdown
6: Fun-With-PowerShell-Enums.md = Markdown
7: Fun-With-PowerShell-Objects-Part 1.md = Markdown
8: Fun-With-PowerShell-Objects-Part 1.ps1 = Script
9: Fun-With-PowerShell-Objects-Part 2.md = Markdown
10: Fun-With-PowerShell-Objects-Part 2.ps1 = Script
11: Fun-With-PowerShell-Objects-Part 3.cs = C#
12: Fun-With-PowerShell-Objects-Part 3.md = Markdown
13: Fun-With-PowerShell-Objects-Part 3.ps1 = Script
14: Fun-With-PowerShell-Objects-Part 4.md = Markdown
15: Fun-With-PowerShell-Objects-Part 4.ps1 = Script
16: fun-with-powershell-objects-part-1.png = Sorry dude, no clue.
17: Fun-With-PowerShell-Providers.md = Markdown
18: Fun-With-PowerShell-Write-Debug.md = Markdown
19: Fun-With-PowerShell-Write-Verbose-and-Write-Debug.md = Markdown
20: Fun-With-VSCode-Code-Snippets.md = Markdown
21: IMG_0965.JPG = Sorry dude, no clue.
22: more-fun-with-powershell-enums-header.png = Sorry dude, no clue.
23: More-Fun-With-PowerShell-Enums.md = Markdown
24: More-Fun-With-PowerShell-Enums.ps1 = Script
25: security-for-apartment-dwellers-01.png = Sorry dude, no clue.
26: Security-for-Apartment-Dwellers-header.png = Sorry dude, no clue.
27: Security-for-Apartment-Dwellers.md = Markdown
</code></pre>
<p>I author these blog posts in markdown within VSCode first, prior to copying them into my WordPress based blog. This folder contains a markdown file for each post, most of which have one or more accompanying code files associated with it.</p>
<p>I deliberately omitted the image type extensions (.jpg, .png) from the switch statement so you could see the default option being taken.</p>
<h2>Persistance</h2>
<p>There is an important fact you need to recall when using this technique. The new property and method only exist for the set of <code>FileInfo</code> objects contained in our <code>$items</code> collection. If I were to get another collection, perhaps using <code>$moreItems = Get-ChildItem</code>, the <code>FileInfo</code> objects stored in <code>$moreItems</code> will <strong>NOT</strong> have our <code>ItemNumber</code> and <code>ScriptType</code> in them.</p>
<p>You will have to explicitly add custom properties and methods to objects each time you need them.</p>
<h2>Conclusion</h2>
<p>As you can see, this technique offers many possibilities. You could define a script block at the top of your script that does a complex calculation, or perhaps formats data for easier reading by the end user. Then you simply add this script block to the objects you generate.</p>
<p>This makes your code much more readable. The complex part is at the top where we define the script block, out of the way of your loops.</p>
<p>It can also promote code reuse. You can create a separate script with many script blocks that you commonly use. You call that script from the one you are currently developing, and you instantly have a set of new properties and methods that can be added to the set of objects you are working with.</p>
<p>This method provides for extensibility with objects you did not author, or have the source code for. Perhaps you have a compiled PowerShell module that came from a vendor, but it lacks that one method that would, for your unique situation, make it much easier to work with. You can now code that method for yourself and use it.</p>
<p>As time goes on I'm sure you'll find many situations you can use these techniques to solve problems.</p>
<p>In the next three installments of this series we'll return to the PowerShell <em>class</em> type. We'll look at some of the advanced abilities that it offers.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4325</wp:post_id>
  <wp:post_date>2022-01-31 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-31 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 16:53:57</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 22:53:57</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-modifying-existing-objects</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="get-childitem"><![CDATA[Get-ChildItem]]></category>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4326]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68392132310]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1643641203]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1488165190814375944";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_385107956753456";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167068</wp:comment_id>
    <wp:comment_author><![CDATA[Modifying Existing Objects with Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/02/03/modifying-existing-objects-with-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-02-03 07:06:24</wp:comment_date>
    <wp:comment_date_gmt>2022-02-03 13:06:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain dives a bit further into objects in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643893584.669101;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643898812.408272;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun-With-PowerShell-Objects-04-Modifying-Existing-Objects</title>
  <link>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/fun-with-powershell-objects-04-modifying-existing-objects/</link>
  <pubDate>Mon, 10 Jan 2022 22:49:20 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-04-modifying-existing-objects.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4326</wp:post_id>
  <wp:post_date>2022-01-10 16:49:20</wp:post_date>
  <wp:post_date_gmt>2022-01-10 22:49:20</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 16:49:20</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 22:49:20</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-04-modifying-existing-objects</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4325</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-04-modifying-existing-objects.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Classes - Static Properties and Methods</title>
  <link>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/</link>
  <pubDate>Mon, 07 Feb 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4330</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nOver the last few articles we've been covering PowerShell objects. The first article in the series, [Fun With PowerShell Classes - The Basics](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/), covered the basics of using of the PowerShell class construct introduced in PowerShell version 5.\n\nIf you've not read it I'd suggest you do so now as we'll be building on it in this article, as well as in the next two, as we explore the advanced capabilities of PowerShell classes. In this post we'll cover the concept of _static_ properties and methods.\n\nLet me mention that for all of the examples we'll display the code, then under it the result of our code if applicable. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAt the end of the line in many code samples you may notice a backtick \\` character. This is PowerShell's _line continuation_ character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Starting Point\n\nJust as a refresher, here is the class we originally developed.\n\n``` powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n}\n```\n\nWe can create a new instance of the class by calling the static new method built into all PowerShell defined classes. Once created we can start assigning values to its properties.\n\n``` powershell\n$twit = [Twitterer]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterHandle\n```\n\nWith that reminder, let's start diving in to some advanced features offered by classes.\n\n## Static Properties\n\nIn a previous post on [creating PowerShell objects from C# code](http://), I introduced the concept of _static_ properties and methods. A static property or method is one that can be called without having to create a new instance of an object from the class.\n\nTo call a static method or property, use the name of the class in brackets, then two colons, then the name of the property or method you want to call. In fact, you've already done this in creating a new instance of a class when you used `[Twitterer]::new()`.\n\nIt's easy to create your own static properties and methods. Let's create a new version of our class, and name it `TwittererRedux`. (Redux is a fancy word meaning 'bring back'.) Then, we'll add a new static property to it.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n}\n```\n\nIn the properties area we add one new property, `Version`. At the front we added the keyword `static`. This, of course, is the indicator this property is available even without creating a new instance of the class.\n\nHaving a version number is a fairly common and useful thing to include in a class. Let's see it in use. First though, make sure you've executed the above class definition for `TwitterRedux` to make sure it is memory.\n\n``` powershell\n[TwittererRedux]::Version\n```\n\nResult:\n\n```\n2022.01.07.002\n```\n\nOther examples of things you might wish to manifest as static properties include the author name, contact information, copyright, or perhaps a link to documentation or github where your class is stored.\n\nLet's turn now to the creation of a static method.\n\n## Static Methods\n\nIn our original version of the class we have a method called `OpenTwitter`. This accessed the objects function `TwitterURL`, which returned the formatted Twitter URL for the users handle, stored in the objects `TwitterHandle` property. Finally it opened up the Twitter page in the default browser.\n\nIt could be useful to have a function that would do something similar, only without having to go to the effort of creating a class, then populating the `TwitterHandle` property just so we could call this function.\n\nWe'll do so by adding a new, static function to the class.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2021.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\nWe call the new method similar to the way we accessed our property, when we called the `new` method to create the class.\n\n``` powershell\n[TwittererRedux]::OpenTwitterPage('ArcaneCode')\n```\n\nIf your coding went well, your default browser should open to my Twitter page (or whosever you passed in).\n\n## Restrictions on Static Properties and Methods\n\nThere is one restriction when working with static properties and methods, but it is one you need to know about.\n\n\u0026gt; Static properties and methods must be self contained, and cannot reference other properties and methods of the class.\n\nThis makes sense if you think about it a moment. You are only accessing the class definition, i.e. the blue print. Normal properties and methods only exist once an object has been created from a class. While it makes sense, it isn't intuitively obvious so I wanted to point it out.\n\n## A Note on Defining Classes\n\nI just wanted to point out a little \u0022gotcha\u0022 when working with classes. Within a single PowerShell script (i.e. PS1 file) you can only define a class once. Normally this is not a big issue.\n\nHowever, if you are developing a class it's possible you might want multiple versions of it. For example, at the top of the script you might want your original version.\n\nUnder it you might want basically the same code, but you've added a new method, or perhaps changed the code to an existing method. You want to do this for testing, so you can compare one version versus the other.\n\nPowerShell, or more precisely VSCode or the PowerShell IDE, will generate an error for the second, third, or more versions in your code warning you it has already been defined.\n\nThe fix is pretty simple, you could just comment out all but one of the class definitions, leaving the one you are working with uncommented. Alternatively, you could just create multiple PS1 files and work with different versions in each. VSCode is especially nice for this as it lets you have your PS1 files side by side.\n\n## Conclusion\n\nStatic properties and methods are not difficult to implement, and can be quite useful. As you create your classes, think about situations where they may benefit from a static property or method.\n\nIn the next installment of this series we'll continue our examination of the PowerShell _class_ type by diving into _overloads_.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>Over the last few articles we've been covering PowerShell objects. The first article in the series, <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">Fun With PowerShell Classes - The Basics</a>, covered the basics of using of the PowerShell class construct introduced in PowerShell version 5.</p>
<p>If you've not read it I'd suggest you do so now as we'll be building on it in this article, as well as in the next two, as we explore the advanced capabilities of PowerShell classes. In this post we'll cover the concept of <em>static</em> properties and methods.</p>
<p>Let me mention that for all of the examples we'll display the code, then under it the result of our code if applicable. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>At the end of the line in many code samples you may notice a backtick ` character. This is PowerShell's <em>line continuation</em> character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Starting Point</h2>
<p>Just as a refresher, here is the class we originally developed.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

}
</code></pre>
<p>We can create a new instance of the class by calling the static new method built into all PowerShell defined classes. Once created we can start assigning values to its properties.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterHandle
</code></pre>
<p>With that reminder, let's start diving in to some advanced features offered by classes.</p>
<h2>Static Properties</h2>
<p>In a previous post on <a href="http://">creating PowerShell objects from C# code</a>, I introduced the concept of <em>static</em> properties and methods. A static property or method is one that can be called without having to create a new instance of an object from the class.</p>
<p>To call a static method or property, use the name of the class in brackets, then two colons, then the name of the property or method you want to call. In fact, you've already done this in creating a new instance of a class when you used <code>[Twitterer]::new()</code>.</p>
<p>It's easy to create your own static properties and methods. Let's create a new version of our class, and name it <code>TwittererRedux</code>. (Redux is a fancy word meaning 'bring back'.) Then, we'll add a new static property to it.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

}
</code></pre>
<p>In the properties area we add one new property, <code>Version</code>. At the front we added the keyword <code>static</code>. This, of course, is the indicator this property is available even without creating a new instance of the class.</p>
<p>Having a version number is a fairly common and useful thing to include in a class. Let's see it in use. First though, make sure you've executed the above class definition for <code>TwitterRedux</code> to make sure it is memory.</p>
<pre><code class="language-powershell">[TwittererRedux]::Version
</code></pre>
<p>Result:</p>
<pre><code>2022.01.07.002
</code></pre>
<p>Other examples of things you might wish to manifest as static properties include the author name, contact information, copyright, or perhaps a link to documentation or github where your class is stored.</p>
<p>Let's turn now to the creation of a static method.</p>
<h2>Static Methods</h2>
<p>In our original version of the class we have a method called <code>OpenTwitter</code>. This accessed the objects function <code>TwitterURL</code>, which returned the formatted Twitter URL for the users handle, stored in the objects <code>TwitterHandle</code> property. Finally it opened up the Twitter page in the default browser.</p>
<p>It could be useful to have a function that would do something similar, only without having to go to the effort of creating a class, then populating the <code>TwitterHandle</code> property just so we could call this function.</p>
<p>We'll do so by adding a new, static function to the class.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2021.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<p>We call the new method similar to the way we accessed our property, when we called the <code>new</code> method to create the class.</p>
<pre><code class="language-powershell">[TwittererRedux]::OpenTwitterPage('ArcaneCode')
</code></pre>
<p>If your coding went well, your default browser should open to my Twitter page (or whosever you passed in).</p>
<h2>Restrictions on Static Properties and Methods</h2>
<p>There is one restriction when working with static properties and methods, but it is one you need to know about.</p>
<p>&gt; Static properties and methods must be self contained, and cannot reference other properties and methods of the class.</p>
<p>This makes sense if you think about it a moment. You are only accessing the class definition, i.e. the blue print. Normal properties and methods only exist once an object has been created from a class. While it makes sense, it isn't intuitively obvious so I wanted to point it out.</p>
<h2>A Note on Defining Classes</h2>
<p>I just wanted to point out a little &quot;gotcha&quot; when working with classes. Within a single PowerShell script (i.e. PS1 file) you can only define a class once. Normally this is not a big issue.</p>
<p>However, if you are developing a class it's possible you might want multiple versions of it. For example, at the top of the script you might want your original version.</p>
<p>Under it you might want basically the same code, but you've added a new method, or perhaps changed the code to an existing method. You want to do this for testing, so you can compare one version versus the other.</p>
<p>PowerShell, or more precisely VSCode or the PowerShell IDE, will generate an error for the second, third, or more versions in your code warning you it has already been defined.</p>
<p>The fix is pretty simple, you could just comment out all but one of the class definitions, leaving the one you are working with uncommented. Alternatively, you could just create multiple PS1 files and work with different versions in each. VSCode is especially nice for this as it lets you have your PS1 files side by side.</p>
<h2>Conclusion</h2>
<p>Static properties and methods are not difficult to implement, and can be quite useful. As you create your classes, think about situations where they may benefit from a static property or method.</p>
<p>In the next installment of this series we'll continue our examination of the PowerShell <em>class</em> type by diving into <em>overloads</em>.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4330</wp:post_id>
  <wp:post_date>2022-02-07 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-02-07 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 16:11:09</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 22:11:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-static-properties-and-methods</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="class"><![CDATA[Class]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="static-method"><![CDATA[Static Method]]></category>
  <category domain="post_tag" nicename="static-property"><![CDATA[Static Property]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4332]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68678357121]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1644246021]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1490701979097739277";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_389269809670604";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167167</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Overloading &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.208</wp:comment_author_IP>
    <wp:comment_date>2022-02-14 09:00:04</wp:comment_date>
    <wp:comment_date_gmt>2022-02-14 15:00:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] is the next installment in our series of advanced techniques for PowerShell classes. In the previous installment we saw how to implement static properties and methods. In this one, we&#8217;ll see how to overload [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644850804.284993;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644855367.785154;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167243</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.114.41</wp:comment_author_IP>
    <wp:comment_date>2022-02-21 09:00:21</wp:comment_date>
    <wp:comment_date_gmt>2022-02-21 15:00:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645459376.454744;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645455622.13982;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:68:"Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code";s:18:"comment_author_url";s:74:"http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:134:"[&#8230;] our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:12:"192.0.114.41";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:12:"192.0.114.41";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:91:"http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-classes-02-static</title>
  <link>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/fun-with-powershell-classes-02-static/</link>
  <pubDate>Tue, 11 Jan 2022 21:31:14 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-02-static.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4332</wp:post_id>
  <wp:post_date>2022-01-11 15:31:14</wp:post_date>
  <wp:post_date_gmt>2022-01-11 21:31:14</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 15:31:14</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 21:31:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-02-static</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4330</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-02-static.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Classes - Overloading</title>
  <link>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/</link>
  <pubDate>Mon, 14 Feb 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4336</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nThis is the next installment in our series of advanced techniques for PowerShell classes. In the [previous installment](https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/) we saw how to implement _static_ properties and methods. In this one, we'll see how to _overload_ your methods.\n\nWe'll take a deeper look at overloading in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, many of the code samples have lines which end in a backtick \\`, PowerShell's _line continuation_ character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nIn VSCode you can highlight snippet of code then press F8 to execute it. In the IDE, use F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Starting Point\n\nFor easy reference, here is our demo class as we left it at the end of the previous post.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\n## The Need to Overload a Method\n\nAbout half way into our class definition we have a method named `TwitterURL`. This function is pretty simple, it takes the value in the `TwitterHandle` property, composes the URL to the Twitter site for it, then returns it.\n\nHere is what it would look like in action.\n\n``` powershell\n$twit = [TwittererRedux]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterURL()\n```\n\nResult:\n\n```\nhttp://twitter.com/ArcaneCode\n```\n\nWhat if we had a lot of handles we wanted to get URLs for. It would be a two step process for each one, first assigning the handle to the `TwitterHandle` property, then calling the `TwitterURL` method.\n\n``` powershell\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'N4IXT'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'ArcaneTC'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'BuckWoodyMSFT'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'tradney'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'VKCsh'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'TechTrainerTime'\n$twit.TwitterURL()\n```\n\nOf course these could all be put into an array, or read in from a file and run through a `foreach` loop, even so it still takes two calls to our `$twit` object. Wouldn't it be nice to set the TwitterHandle property and return the URL all in one method call?\n\nBut what to call the method? We could go with `SetHandleAndGetURL`, or perhaps `UpdateAndGetTwitter`, or even `HeyHeresAMethodToSetTheTwitterHandleAndGetTheURL`.\n\nBut in fact we already have a great name in TwitterURL. Its short and explains just what it does. It's too bad we can't use it more than once.\n\nOh wait, we can!\n\n## Implementing an Overloaded Method\n\nTo create an overload, create a new function within your class and use the same name. To differentiate, you need to have it accept a different number of parameters. Let's make this clearer by the example below.\n\n``` powershell\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n```\n\nAt the top is our original function. Below it is the overloaded version. In it I pass in a single parameter, the `$TwitterHandle`. PowerShell can use this to determine which version of the function to call. \n\nIf you execute the `TwitterURL` method with no parameters, the version of the function at the top is executed.\n\nWhen you call `TwitterURL` and pass in a parameter, the version of the function at the bottom gets run. In here I first access the `TwitterHandle` property of the current object (represented by `$this`) and update it from the parameter `$twitterHandle`.\n\nNext, I called the original function to get the properly formatted URL from the (newly updated) `TwitterHandle` property.\n\nI chose to do it this way to demonstrate it is possible to call the original version of a function  from its overloaded version. It's certainly not required though, as the code to format the URL could have been copied from the original function. The downside to this however is if I make a change to one area, I have to make it to both.\n\nAlso be aware that setting the `TwitterHandle` property may be considered a _side effect_ by some. It's not intuitively obvious this will happen, and some users may think this to be a bug. It's important then to make sure you document this thoroughly in your documentation.\n\nLet's see it in action. First, here is the complete class with the new overloaded function added.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Overloaded Function that returns a string\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\nAfter running this to get the updated class definition in memory let's call it both ways.\n\n``` powershell\n# Create a new instance\n$twit = [TwittererRedux]::new()\n\n# Assign the handle, then call TwitterURL\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterURL()\n```\n\nResult:\n\n```\nhttps://twitter.com/ArcaneCode\n```\n\nNow let's call the overloaded version.\n\n``` powershell\n# Now call the overloaded version\n$twit.TwitterURL('N4IXT')\n```\n\nResult:\n\n```\nhttps://twitter.com/N4IXT\n```\n\nWe can also check the `TwitterHandle` property to ensure it has been updated.\n\n``` powershell\n$twit.TwitterHandle\n```\n\nResult:\n\n```\nN4IXT\n```\n\nWe could have added additional overloads with more parameters. We could have defined `[string] TwitterURL($twitterHandle, $anotherParameter)`, for example.\n\n## Other Ways to Differentiate an Overload\n\nIn the previous section I stated PowerShell differentiates overloads by the number of parameters passed into our function. There is one other way PowerShell can differentiate, and that is by the _data type_ of each parameter. Let's look at this simple example.\n\n``` powershell\nclass over\n{\n  [string] hello()\n    { return 'hello world' }\n\n  [string] hello([string] $name)\n    { return \u0022hello string of $name\u0022}\n\n  [string] hello([int] $number)\n    { return \u0022hello integer of $number\u0022}\n}\n```\n\nAs you can see, my class has three overloads. In the second two, we pass in a single parameter. What makes them different though is the data type for the parameter. In the first we use a string, the second an integer. To be accurate then, we need to say PowerShell can tell which overload to call by the number of parameters **and** the data type of each.\n\nAs should be obvious, you will need to strongly type all of your parameters for this to work, but when it comes to classes that's not a bad idea anyway.\n\nJust as proof, let's see these working.\n\n``` powershell\n$o = [over]::new()\n$o.hello()\n$o.hello('mom')\n$o.hello(33)\n```\n\nResult:\n\n```\nhello world\nhello string of mom\nhello integer of 33\n```\n\nYou can also mix and match, with multiple data types and parameters. For example...\n\n``` powershell\nhello([string] $name, [int] $number)\nhello([int] $number,  [string] $name)\n```\n\nBoth of these are both valid. Just to reiterate, what you could **not** do is:\n\n``` powershell\nhello([string] $nameA, [int] $number)\nhello([string] $nameB, [int] $anotherNumber)\n```\n\nPowerShell can't make the distinction between the two, as they have the same number of parameters _and_ data types in the same order.\n\n## Conclusion\n\nOverloads can be very useful when working with classes. They allow you to continue to use method names you are familiar with yet alter them to meet your changing needs.\n\nIn our next installment we'll cover the topic of class _constructors_, a way to populate properties when you instantiate your new object from the class definition.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>This is the next installment in our series of advanced techniques for PowerShell classes. In the <a href="https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/">previous installment</a> we saw how to implement <em>static</em> properties and methods. In this one, we'll see how to <em>overload</em> your methods.</p>
<p>We'll take a deeper look at overloading in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, many of the code samples have lines which end in a backtick `, PowerShell's <em>line continuation</em> character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>In VSCode you can highlight snippet of code then press F8 to execute it. In the IDE, use F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Starting Point</h2>
<p>For easy reference, here is our demo class as we left it at the end of the previous post.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<h2>The Need to Overload a Method</h2>
<p>About half way into our class definition we have a method named <code>TwitterURL</code>. This function is pretty simple, it takes the value in the <code>TwitterHandle</code> property, composes the URL to the Twitter site for it, then returns it.</p>
<p>Here is what it would look like in action.</p>
<pre><code class="language-powershell">$twit = [TwittererRedux]::new()
$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterURL()
</code></pre>
<p>Result:</p>
<pre><code>http://twitter.com/ArcaneCode
</code></pre>
<p>What if we had a lot of handles we wanted to get URLs for. It would be a two step process for each one, first assigning the handle to the <code>TwitterHandle</code> property, then calling the <code>TwitterURL</code> method.</p>
<pre><code class="language-powershell">$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterURL()
$twit.TwitterHandle = 'N4IXT'
$twit.TwitterURL()
$twit.TwitterHandle = 'ArcaneTC'
$twit.TwitterURL()
$twit.TwitterHandle = 'BuckWoodyMSFT'
$twit.TwitterURL()
$twit.TwitterHandle = 'tradney'
$twit.TwitterURL()
$twit.TwitterHandle = 'VKCsh'
$twit.TwitterURL()
$twit.TwitterHandle = 'TechTrainerTime'
$twit.TwitterURL()
</code></pre>
<p>Of course these could all be put into an array, or read in from a file and run through a <code>foreach</code> loop, even so it still takes two calls to our <code>$twit</code> object. Wouldn't it be nice to set the TwitterHandle property and return the URL all in one method call?</p>
<p>But what to call the method? We could go with <code>SetHandleAndGetURL</code>, or perhaps <code>UpdateAndGetTwitter</code>, or even <code>HeyHeresAMethodToSetTheTwitterHandleAndGetTheURL</code>.</p>
<p>But in fact we already have a great name in TwitterURL. Its short and explains just what it does. It's too bad we can't use it more than once.</p>
<p>Oh wait, we can!</p>
<h2>Implementing an Overloaded Method</h2>
<p>To create an overload, create a new function within your class and use the same name. To differentiate, you need to have it accept a different number of parameters. Let's make this clearer by the example below.</p>
<pre><code class="language-powershell">  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }
</code></pre>
<p>At the top is our original function. Below it is the overloaded version. In it I pass in a single parameter, the <code>$TwitterHandle</code>. PowerShell can use this to determine which version of the function to call.</p>
<p>If you execute the <code>TwitterURL</code> method with no parameters, the version of the function at the top is executed.</p>
<p>When you call <code>TwitterURL</code> and pass in a parameter, the version of the function at the bottom gets run. In here I first access the <code>TwitterHandle</code> property of the current object (represented by <code>$this</code>) and update it from the parameter <code>$twitterHandle</code>.</p>
<p>Next, I called the original function to get the properly formatted URL from the (newly updated) <code>TwitterHandle</code> property.</p>
<p>I chose to do it this way to demonstrate it is possible to call the original version of a function  from its overloaded version. It's certainly not required though, as the code to format the URL could have been copied from the original function. The downside to this however is if I make a change to one area, I have to make it to both.</p>
<p>Also be aware that setting the <code>TwitterHandle</code> property may be considered a <em>side effect</em> by some. It's not intuitively obvious this will happen, and some users may think this to be a bug. It's important then to make sure you document this thoroughly in your documentation.</p>
<p>Let's see it in action. First, here is the complete class with the new overloaded function added.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Overloaded Function that returns a string
  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<p>After running this to get the updated class definition in memory let's call it both ways.</p>
<pre><code class="language-powershell"># Create a new instance
$twit = [TwittererRedux]::new()

# Assign the handle, then call TwitterURL
$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterURL()
</code></pre>
<p>Result:</p>
<pre><code>https://twitter.com/ArcaneCode
</code></pre>
<p>Now let's call the overloaded version.</p>
<pre><code class="language-powershell"># Now call the overloaded version
$twit.TwitterURL('N4IXT')
</code></pre>
<p>Result:</p>
<pre><code>https://twitter.com/N4IXT
</code></pre>
<p>We can also check the <code>TwitterHandle</code> property to ensure it has been updated.</p>
<pre><code class="language-powershell">$twit.TwitterHandle
</code></pre>
<p>Result:</p>
<pre><code>N4IXT
</code></pre>
<p>We could have added additional overloads with more parameters. We could have defined <code>[string] TwitterURL($twitterHandle, $anotherParameter)</code>, for example.</p>
<h2>Other Ways to Differentiate an Overload</h2>
<p>In the previous section I stated PowerShell differentiates overloads by the number of parameters passed into our function. There is one other way PowerShell can differentiate, and that is by the <em>data type</em> of each parameter. Let's look at this simple example.</p>
<pre><code class="language-powershell">class over
{
  [string] hello()
    { return 'hello world' }

  [string] hello([string] $name)
    { return &quot;hello string of $name&quot;}

  [string] hello([int] $number)
    { return &quot;hello integer of $number&quot;}
}
</code></pre>
<p>As you can see, my class has three overloads. In the second two, we pass in a single parameter. What makes them different though is the data type for the parameter. In the first we use a string, the second an integer. To be accurate then, we need to say PowerShell can tell which overload to call by the number of parameters <strong>and</strong> the data type of each.</p>
<p>As should be obvious, you will need to strongly type all of your parameters for this to work, but when it comes to classes that's not a bad idea anyway.</p>
<p>Just as proof, let's see these working.</p>
<pre><code class="language-powershell">$o = [over]::new()
$o.hello()
$o.hello('mom')
$o.hello(33)
</code></pre>
<p>Result:</p>
<pre><code>hello world
hello string of mom
hello integer of 33
</code></pre>
<p>You can also mix and match, with multiple data types and parameters. For example...</p>
<pre><code class="language-powershell">hello([string] $name, [int] $number)
hello([int] $number,  [string] $name)
</code></pre>
<p>Both of these are both valid. Just to reiterate, what you could <strong>not</strong> do is:</p>
<pre><code class="language-powershell">hello([string] $nameA, [int] $number)
hello([string] $nameB, [int] $anotherNumber)
</code></pre>
<p>PowerShell can't make the distinction between the two, as they have the same number of parameters <em>and</em> data types in the same order.</p>
<h2>Conclusion</h2>
<p>Overloads can be very useful when working with classes. They allow you to continue to use method names you are familiar with yet alter them to meet your changing needs.</p>
<p>In our next installment we'll cover the topic of class <em>constructors</em>, a way to populate properties when you instantiate your new object from the class definition.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4336</wp:post_id>
  <wp:post_date>2022-02-14 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-02-14 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 17:40:47</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 23:40:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-overloading</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="classes"><![CDATA[Classes]]></category>
  <category domain="post_tag" nicename="overloading"><![CDATA[Overloading]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0bfcfea2e526082524007e688ed76255</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><a class="twitter-timeline" data-width="500" data-height="750" data-dnt="true" href="https://twitter.com/N4IXT?ref_src=twsrc%5Etfw">Tweets by N4IXT</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_0bfcfea2e526082524007e688ed76255</wp:meta_key>
    <wp:meta_value><![CDATA[1641943874]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4338]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7c413786b28bde31d098c0332036eb2e</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><a class="twitter-timeline" data-width="474" data-height="711" data-dnt="true" href="https://twitter.com/N4IXT?ref_src=twsrc%5Etfw">Tweets by N4IXT</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_7c413786b28bde31d098c0332036eb2e</wp:meta_key>
    <wp:meta_value><![CDATA[1641943935]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1493238611311009792";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_393453675918884";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68985682647]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1644850802]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167181</wp:comment_id>
    <wp:comment_author><![CDATA[Overloading Methods in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/02/15/overloading-methods-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-02-15 07:00:29</wp:comment_date>
    <wp:comment_date_gmt>2022-02-15 13:00:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues a series on classes in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644935356.655802;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644930029.804596;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167238</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 07/2022 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19860-Die-KW-072022-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2022-02-20 16:10:47</wp:comment_date>
    <wp:comment_date_gmt>2022-02-20 22:10:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Hier wird euch Overloading in der PowerShell erklärt. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:88:"Die KW 07/2022 im Link-Rückblick | artodeto's blog about coding, politics and the world";s:18:"comment_author_url";s:81:"http://artodeto.bazzline.net/archives/19860-Die-KW-072022-im-Link-Rueckblick.html";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:74:"[&#8230;] Hier wird euch Overloading in der PowerShell erklärt. [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:14:"185.26.156.242";s:13:"comment_agent";s:74:"HTTP_Request2/2.3.0 (http://pear.php.net/package/http_request2) PHP/7.4.28";s:7:"user_ip";s:14:"185.26.156.242";s:10:"user_agent";s:74:"HTTP_Request2/2.3.0 (http://pear.php.net/package/http_request2) PHP/7.4.28";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:73:"http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645395047.992617;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645400127.682784;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167169</wp:comment_id>
    <wp:comment_author><![CDATA[krismalygmailcom]]></wp:comment_author>
    <wp:comment_author_email>kris.maly@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>209.85.208.48</wp:comment_author_IP>
    <wp:comment_date>2022-02-14 09:09:52</wp:comment_date>
    <wp:comment_date_gmt>2022-02-14 15:09:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for educating the community and appreciate your volunteering. 

Thanks Kris]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>207301889</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1644851392.167035;s:5:"event";s:9:"check-ham";s:4:"user";s:16:"krismalygmailcom";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_by_email_id</wp:meta_key>
      <wp:meta_value><![CDATA[8718788]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644855368.07595;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167244</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.114.41</wp:comment_author_IP>
    <wp:comment_date>2022-02-21 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-02-21 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method overloading. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645455625.360108;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:68:"Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code";s:18:"comment_author_url";s:74:"http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:150:"[&#8230;] In our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method overloading. [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:12:"192.0.114.41";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:12:"192.0.114.41";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:73:"http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645459376.64934;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-classes-03-overload</title>
  <link>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/fun-with-powershell-classes-03-overload/</link>
  <pubDate>Tue, 11 Jan 2022 23:32:04 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-03-overload.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4338</wp:post_id>
  <wp:post_date>2022-01-11 17:32:04</wp:post_date>
  <wp:post_date_gmt>2022-01-11 23:32:04</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 17:32:04</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 23:32:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-03-overload</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4336</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-03-overload.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Classes - Constructors</title>
  <link>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</link>
  <pubDate>Mon, 21 Feb 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4342</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn our previous two posts, we covered the use of [static properties and methods in classes](https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/), then saw how to use [method overloading](https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/).\n\nThis is our final post of the series, and will cover the use of _constructors_. Constructors are functions that execute automatically when a class is instantiated.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nYou may notice a backtick \\` character at the end of many lines in the code samples. This is PowerShell's _line continuation_ character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. I have a section dedicated to the line continuation character in my post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) if you want to learn more.\n\nTo run a snippet of code highlight the lines (or parts of a line) you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Starting Point\n\nAs a reminder, this is our demo class `TwittererRedux` as we left it at the end of the last post. We'll start from it in this post.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Overloaded Function that returns a string\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n\n# Create a new instance and update the handle\n$twit = [TwittererRedux]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n\n```\n\n## Constructors\n\nIn the original version of our class, we created a new instance of the class by calling the `::new()` static method. Then, we assigned a value to our `TwitterHandle` property. Wouldn't it have been nice to do it all in one step?\n\nWell that is possible through the use of a _constructor_. A constructor is a function that gets run automatically when the object is instantiated, as part of the `::new()` static method. Every class gets a constructor automatically, it's just empty.\n\nBelow is an example of our class with a constructor. For brevity I'm omitting most of the class code, and will reproduce the full class sample at the end of this post.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # ... rest of class goes here\n```\n\nA constructor is a function, with the exact same name as the class. As you can see in the sample above, `TwitterRedux` is both the name of the class, as well as of the function.\n\nIn this case the function is empty, it doesn't do anything, which is what the behavior of the default constructor should be.\n\nHaving constructors allows us to create more compact code. For example, in previous examples we create a new instance of our class, then assign a handle to the TwitterHandle property on the next line. Using a constructor we can provide the ability to compress our code, creating a new instance and assigning the `TwitterHandle` value all in one step.\n\nTo do so, we need to create another function with the same name as our class, TwittererRedux.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Constructor passing in Twitter Handle\n  TwittererRedux ([string]$TwitterHandle)\n  {\n    $this.TwitterHandle = $TwitterHandle\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # ... rest of class goes here\n```\n\nThis technique uses overloading, as discussed in [a previous post](http://). Here we have added a single parameter, `$TwitterHandle`. Within the function we take the value passed in and assign it to the `TwitterHandle` property for the current instance, represented by `$this`.\n\nBefore I go on, I need to mention an important rule. **When you override a constructor, you must manually add the _default constructor_!** You can see that was done in the above sample.\n\nSo how do we use it? Pretty simple actually, when we instantiate our object by using `new`, we pass in the value.\n\n``` powershell\n# Create a new instance using an overloaded constructor\n$twit = [TwittererRedux]::new('ArcaneCode')\n\n# Display the result\n$twit.TwitterHandle\n```\n\nResult:\n\n```\nArcaneCode\n```\n\nHere when we called `new`, instead of leaving the parameter area empty we passed in a single string value. PowerShell then followed the rules of overloading as seen in the [previous post](https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/). It looked over the set of constructors and found one that had a single parameter of type string and executed the code associated with it.\n\nLet's further expand by adding another constructor so we can assign both the handle and the name when we instantiate a new object from our class.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Constructor passing in Twitter Handle\n  TwittererRedux ([string]$TwitterHandle)\n  {\n    $this.TwitterHandle = $TwitterHandle\n  }\n\n  # Constructor passing in Twitter Handle and Name\n  TwittererRedux ([string]$TwitterHandle, [string]$Name)\n  {\n    $this.TwitterHandle = $TwitterHandle\n    $this.Name = $Name\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # ... rest of class goes here\n```\n\nIn our second constructor we have two string parameters, which will be assigned to the handle and name properties of the current object.\n\n``` powershell\n$twit = [TwittererRedux]::new('ArcaneCode', 'Mr. Code')\n$twit.TwitterHandle\n$twit.Name\n```\n\nResult:\n\n```\nArcaneCode\nMr. Code\n```\n\n## The Final Version\n\nAs promised, here is the final version of our TwitterRedux class.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Constructor passing in Twitter Handle\n  TwittererRedux ([string]$TwitterHandle)\n  {\n    $this.TwitterHandle = $TwitterHandle\n  }\n\n  # Constructor passing in Twitter Handle and Name\n  TwittererRedux ([string]$TwitterHandle, [string]$Name)\n  {\n    $this.TwitterHandle = $TwitterHandle\n    $this.Name = $Name\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Overloaded Function that returns a string\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\n## Constructors vs Overloading\n\nConstructors are very similar to overloading a function, but not exactly the same.\n\nJust like overloading, each constructor declaration must be different in terms of the number of parameters and their data types.\n\nUnlike overloads, you have access to the properties and methods of the object. This is what let us assign values to our properties when we created the new instance of the object.\n\n## Conclusion\n\nConstructors can aid in making our code more compact, and allowing us to assign values when we instantiate new objects. Be cautious though, it can be tempting to make far more constructors than you need. Ensure that your constructors cover only the most common situations, otherwise you'll have a confusing mess that you have to document and maintain.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In our previous two posts, we covered the use of <a href="https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/">static properties and methods in classes</a>, then saw how to use <a href="https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/">method overloading</a>.</p>
<p>This is our final post of the series, and will cover the use of <em>constructors</em>. Constructors are functions that execute automatically when a class is instantiated.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>You may notice a backtick ` character at the end of many lines in the code samples. This is PowerShell's <em>line continuation</em> character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. I have a section dedicated to the line continuation character in my post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> if you want to learn more.</p>
<p>To run a snippet of code highlight the lines (or parts of a line) you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Starting Point</h2>
<p>As a reminder, this is our demo class <code>TwittererRedux</code> as we left it at the end of the last post. We'll start from it in this post.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Overloaded Function that returns a string
  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}

# Create a new instance and update the handle
$twit = [TwittererRedux]::new()
$twit.TwitterHandle = 'ArcaneCode'

</code></pre>
<h2>Constructors</h2>
<p>In the original version of our class, we created a new instance of the class by calling the <code>::new()</code> static method. Then, we assigned a value to our <code>TwitterHandle</code> property. Wouldn't it have been nice to do it all in one step?</p>
<p>Well that is possible through the use of a <em>constructor</em>. A constructor is a function that gets run automatically when the object is instantiated, as part of the <code>::new()</code> static method. Every class gets a constructor automatically, it's just empty.</p>
<p>Below is an example of our class with a constructor. For brevity I'm omitting most of the class code, and will reproduce the full class sample at the end of this post.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Create a property
  [string]$TwitterHandle

  # ... rest of class goes here
</code></pre>
<p>A constructor is a function, with the exact same name as the class. As you can see in the sample above, <code>TwitterRedux</code> is both the name of the class, as well as of the function.</p>
<p>In this case the function is empty, it doesn't do anything, which is what the behavior of the default constructor should be.</p>
<p>Having constructors allows us to create more compact code. For example, in previous examples we create a new instance of our class, then assign a handle to the TwitterHandle property on the next line. Using a constructor we can provide the ability to compress our code, creating a new instance and assigning the <code>TwitterHandle</code> value all in one step.</p>
<p>To do so, we need to create another function with the same name as our class, TwittererRedux.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Constructor passing in Twitter Handle
  TwittererRedux ([string]$TwitterHandle)
  {
    $this.TwitterHandle = $TwitterHandle
  }

  # Create a property
  [string]$TwitterHandle

  # ... rest of class goes here
</code></pre>
<p>This technique uses overloading, as discussed in <a href="http://">a previous post</a>. Here we have added a single parameter, <code>$TwitterHandle</code>. Within the function we take the value passed in and assign it to the <code>TwitterHandle</code> property for the current instance, represented by <code>$this</code>.</p>
<p>Before I go on, I need to mention an important rule. <strong>When you override a constructor, you must manually add the <em>default constructor</em>!</strong> You can see that was done in the above sample.</p>
<p>So how do we use it? Pretty simple actually, when we instantiate our object by using <code>new</code>, we pass in the value.</p>
<pre><code class="language-powershell"># Create a new instance using an overloaded constructor
$twit = [TwittererRedux]::new('ArcaneCode')

# Display the result
$twit.TwitterHandle
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
</code></pre>
<p>Here when we called <code>new</code>, instead of leaving the parameter area empty we passed in a single string value. PowerShell then followed the rules of overloading as seen in the <a href="https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/">previous post</a>. It looked over the set of constructors and found one that had a single parameter of type string and executed the code associated with it.</p>
<p>Let's further expand by adding another constructor so we can assign both the handle and the name when we instantiate a new object from our class.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Constructor passing in Twitter Handle
  TwittererRedux ([string]$TwitterHandle)
  {
    $this.TwitterHandle = $TwitterHandle
  }

  # Constructor passing in Twitter Handle and Name
  TwittererRedux ([string]$TwitterHandle, [string]$Name)
  {
    $this.TwitterHandle = $TwitterHandle
    $this.Name = $Name
  }

  # Create a property
  [string]$TwitterHandle

  # ... rest of class goes here
</code></pre>
<p>In our second constructor we have two string parameters, which will be assigned to the handle and name properties of the current object.</p>
<pre><code class="language-powershell">$twit = [TwittererRedux]::new('ArcaneCode', 'Mr. Code')
$twit.TwitterHandle
$twit.Name
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
Mr. Code
</code></pre>
<h2>The Final Version</h2>
<p>As promised, here is the final version of our TwitterRedux class.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Constructor passing in Twitter Handle
  TwittererRedux ([string]$TwitterHandle)
  {
    $this.TwitterHandle = $TwitterHandle
  }

  # Constructor passing in Twitter Handle and Name
  TwittererRedux ([string]$TwitterHandle, [string]$Name)
  {
    $this.TwitterHandle = $TwitterHandle
    $this.Name = $Name
  }

  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Overloaded Function that returns a string
  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<h2>Constructors vs Overloading</h2>
<p>Constructors are very similar to overloading a function, but not exactly the same.</p>
<p>Just like overloading, each constructor declaration must be different in terms of the number of parameters and their data types.</p>
<p>Unlike overloads, you have access to the properties and methods of the object. This is what let us assign values to our properties when we created the new instance of the object.</p>
<h2>Conclusion</h2>
<p>Constructors can aid in making our code more compact, and allowing us to assign values when we instantiate new objects. Be cautious though, it can be tempting to make far more constructors than you need. Ensure that your constructors cover only the most common situations, otherwise you'll have a confusing mess that you have to document and maintain.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4342</wp:post_id>
  <wp:post_date>2022-02-21 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-02-21 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 18:10:14</wp:post_modified>
  <wp:post_modified_gmt>2022-01-12 00:10:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-constructors</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="classes"><![CDATA[Classes]]></category>
  <category domain="post_tag" nicename="constructors"><![CDATA[Constructors]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4344]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[69289091099]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1645455619]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1495775396486213632";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_397694485494803";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>fun-with-powershell-classes-04-constructor</title>
  <link>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/fun-with-powershell-classes-04-constructor/</link>
  <pubDate>Wed, 12 Jan 2022 00:06:37 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-04-constructor.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4344</wp:post_id>
  <wp:post_date>2022-01-11 18:06:37</wp:post_date>
  <wp:post_date_gmt>2022-01-12 00:06:37</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 18:06:37</wp:post_modified>
  <wp:post_modified_gmt>2022-01-12 00:06:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-04-constructor</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4342</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-04-constructor.png</wp:attachment_url>
</item>
<item>
  <title>A New Year, A New Blog Layout</title>
  <link>http://arcanecode.com/2022/01/13/a-new-year-a-new-blog-layout/</link>
  <pubDate>Thu, 13 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4390</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>After a few years I decided it was time to update the blog with a new layout. I liked the look of the previous one, but the three-column layout had some limitations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The center column, where the main content resided, did not give much space for code samples. It was wrapping many lines of code unnecessarily and made it harder to read.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This new format is trimmed down, cleaner, and feels less cluttered. It also provides more space for the code samples, which is the important part.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy New Year and hope you enjoy the new format. Feel free to leave any feedback in the comments below.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4390</wp:post_id>
  <wp:post_date>2022-01-13 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-13 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-12 17:46:10</wp:post_modified>
  <wp:post_modified_gmt>2022-01-12 23:46:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-new-year-a-new-blog-layout</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="arcane-training-and-consulting"><![CDATA[Arcane Training and Consulting]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67639679367]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1642086001]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1481642195882938371";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_374109551186630";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Getting Healthy With Tech</title>
  <link>http://arcanecode.com/2022/03/02/getting-healthy-with-tech/</link>
  <pubDate>Wed, 02 Mar 2022 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4394</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="introduction">Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Over the last few months, I've been working hard to get healthier. I'm diabetic, with high blood pressure, and overweight (like a lot of people in IT). So, I've been working hard to change that.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm also a tech nerd and a data guy. I've been using tech to track my progress, examine many critical metrics, and trend these over time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I thought others may benefit from what I've done in this area over the last few months, and thought I'd share the tech and apps I've been using here.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="apple-watch">Apple Watch</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I use multiple platforms for my daily work, including Windows and Linux, but in my opinion it's Apple who has health tech really nailed down. My Apple Watch is my first tool for tracking my health.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With it, I can track my exercises. Every day, no excuses, I do a minimum of thirty minutes of exercise although as I've progressed it's turned into forty or more. I have an indoor exercise bike for rainy days, or on a nice day head to the great outdoors for a swift walk. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When I walk, I use walking / hiking poles to give my arms a bit of a workout. On days where I do my indoor bike, I do some weightlifting with some handheld barbells to work my arms.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My watch tracks the length of my workout, how many calories I burned, what the weather was like, and if I walk what path did I take, and what elevation change was included in my route.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition, it also tracks my blood oxygen level, heart rate, and has an ECG function. It also tracks my sleep to see how much rest I'm getting at night. The watch also has a cool little mindfulness app, which helps me calm down and focus.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, it provides reminders to stand up every hour. Like a lot of IT people, when I get seated in front of my PC I get really focused and lose track of time. Suddenly 3 hours can go by. Then when I stand up my bad back has gone stiff, and my arthritic hips let me know they aren't happy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The reminder to stand every hour has really made a difference. Getting up and moving around hourly really helps eliminate those stiff and sore times.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="apple-iphone-ipad">Apple iPhone / iPad</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The information in my watch feeds back to the Fitness and Health apps on my iPhone. Here I can review my information from the watch, combined with data from my other apps and tools, more of which I'll cover momentarily.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4401,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_1624.png"><img src="https://arcanecode.files.wordpress.com/2022/03/img_1624.png?w=473" alt="" class="wp-image-4401" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see, the fitness app gives me a nice dashboard of my progress. Today I did a 2.03-mile walk. My total exercise time for today was 50 minutes. Note that if I had done multiple exercise activities, for example 30 minutes on my bike and 10 minutes of weights, it would combine that time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It also shows my total calories burned, along with my target for today. So far, I've done 440 of 600 calories for my day today. The fitness app helps you calculate your target, but you can override it. In addition, it will prompt you to increase it over time based on your past workouts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, when I first started my goal was 520 calories. It then increased to 560, and now to 600. I'm sure in the near future I'll be prompted to increase it further, although as I mentioned I can change this whenever I feel I'm ready.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, it also shows how many times I've stood today, with a goal of standing up at least once during an hour, for 12 hours in the day.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The circles show your progress in a quick graphical format. Once the circle is closed you've completed your goal for the day, although it will continue the circle beyond the target. This makes it easy to challenge yourself to meet your goal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some refer to this as the "gameification" of exercise. Turning exercise into a game, much like trying to get a high score in a video game. While intellectually I understand what is going on, it's still a fun challenge to meet these goals and very satisfying to see those circles close.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Beyond the software built into my Apple devices, there are some other devices and applications I use.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="basic-app-requirements">Basic App Requirements</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before I list the apps and devices, I wanted to list a few of my basic requirements in selecting health apps. You may not have these same requirements, so you may find other apps that work better for you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, the app must work on both iPad and iPhone, with bonus points if there is an associated app for the Apple Watch. I like to do my monitoring of data on the iPad (which has a nice big screen my old eyes can see) but be able to register things like taking my meds on my iPhone, which is generally handy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next, the app needed to sync between the iPad / iPhone. I found many good apps, but very few that had the ability to synchronize their information between devices.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, it needs to be easy to use. My wife is also tracking her health, but while smart she's not a technical person so it has to be good for an average user, and not just tech nerds like me.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="omron-blood-pressure-monitor">Omron Blood Pressure Monitor</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To keep track of my blood pressure I use a monitor from a company called <a rel="noreferrer noopener" href="https://omronhealthcare.com/blood-pressure/" target="_blank">Omron</a>. They have multiple devices, mine has Bluetooth and allows for two users, which is nice as you can share with your spouse / significant other / pesky relative that won't leave.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My model is the BP7350, but there are a range of models that support this functionality. In the Apple Appstore they have a corresponding Omron Connect app. It's pretty simple, you take your BP on the machine, then open the app and it syncs that reading to the iPhone.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4407,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_5ebcec7d6ca7-1.jpeg"><img src="https://arcanecode.files.wordpress.com/2022/03/img_5ebcec7d6ca7-1.jpeg?w=473" alt="" class="wp-image-4407" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see it displays my readings for today. I can tap the History button on the bottom to see my readings over time. Should my meter and phone not automatically synchronize, I can tap the Sync button in the upper right corner to have the two sync.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you tap the + button, it brings up an additional menu. Tap on Profile, then App Settings and it will let you copy your readings into the Apple Health App.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="blood-glucose">Blood Glucose</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Being diabetic it's important to monitor my blood glucose (aka blood sugar) every day. For that, I use the <a rel="noreferrer noopener" href="https://shop.onetouch.com/verio-flex-meter/product/OTSUS01_0004" target="_blank">OneTouch Verio Flex</a> meter. While this meter is not in my insurance company's "approved" list, it was only $26 (US). The test strips run about $22 (US) for thirty, about a month's supply.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Both of these I happily pay out of pocket for the convenience of easily tracking my readings. There is a corresponding OneTouch app for the iPhone, it pairs with the meter over Bluetooth. I just take my reading and it automatically syncs to my phone.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4410,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_1626.png"><img src="https://arcanecode.files.wordpress.com/2022/03/img_1626.png?w=473" alt="" class="wp-image-4410" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see it forms a two-way link to the Apple Health and Fitness apps. It copies my daily reading into Apple Health and reads in my workouts from Fitness. It also looks for and warns about negative trends.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And yes, before someone points it out, I know my sugars are way too high. Late last year we found out my previous meds had quit working. The doctor's office says it happens sometimes. So, my doctor and I are working with different medications to see what is most effective for me. It's still a work in progress.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I mentioned it is a two-way link, the app also writes my glucose numbers into my Apple Health app.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="weight-tracking">Weight Tracking</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As you might expect as part of getting healthier, I wanted to lose weight. Thus, I needed an effective way to track it. Ideally, I wanted to be able to just step on a scale, and it be recorded in an app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I already used some Wyze cameras, since I had the app already it was an easy choice to select the <a href="https://www.amazon.com/Bluetooth-Composition-Wireless-Percentage-Smartphone/dp/B086CYBVH9/ref=sr_1_2_sspa?crid=16O1I8CDLVFUJ&amp;keywords=Wyze+scale&amp;qid=1646174248&amp;sprefix=wyze+scale%2Caps%2C109&amp;sr=8-2-spons&amp;psc=1&amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExWFdaQjZRQTZaMkJCJmVuY3J5cHRlZElkPUEwOTkxODYwMjRPRkQwRVNaVTRGNiZlbmNyeXB0ZWRBZElkPUEwNDUzNjg5MzJaMThQRTlEWTEyOSZ3aWRnZXROYW1lPXNwX2F0ZiZhY3Rpb249Y2xpY2tSZWRpcmVjdCZkb05vdExvZ0NsaWNrPXRydWU=" target="_blank" rel="noreferrer noopener">Wyze scale</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4430,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/61tqpg7ktql._ac_sl1500_.jpg"><img src="https://arcanecode.files.wordpress.com/2022/03/61tqpg7ktql._ac_sl1500_.jpg?w=913" alt="" class="wp-image-4430" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In addition to weight, it also has other measurements such as BMI. One tip, don't step off the scale too soon. Let it read your weight in, then wait a second. It will then calculate its other measurements. At that point you can step off, and the readings will show up in the Wyze app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the screen that displays your weight, you can go into the settings (gear icon in the upper right) and turn on data sharing with third party apps, like Apple Health. At $33 (US) this was a no brainer purchase.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="hydration">Hydration</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Staying hydrated is important for good health. Especially for diabetics, as it helps keep the sugars flushed from your system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note, <em>don't take anything here as medical advice</em>, I'm not a doctor, I'm just sharing what mine told me. Your situation may vary, so <em>be sure </em>to consult your own physician.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To track my hydration, and to get reminders that it is time to drink, I selected an app called <a rel="noreferrer noopener" href="https://waterminder.com" target="_blank">WaterMinder</a>. It has iPhone and iPad apps as well as an app for the Apple Watch. You enter basic data like your age, height, weight, and it calculates how much water you should take in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To be honest this is the one failing I found with the app, the number it creates is about half of what every other site I found said I should be getting. For me it said 80 ounces a day, so I just doubled that, and overrode the goal to 160 ounces a day. Again, be sure to do your own research and discuss the proper fluid intake goals with your own doctor.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4415,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_1627.png"><img src="https://arcanecode.files.wordpress.com/2022/03/img_1627.png?w=473" alt="" class="wp-image-4415" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see, the app provides a cute little graphic showing your intake for the day. So far, I've taken in 100.8 oz, or 63% of my goal. To add data, you can tap the + button and quick pick a water cup amount. Alternatively, you can tap the icon to the right of it, and it brings up a menu with various kinds of liquids and lets you type in how many ounces.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's one of the things I really like about this app. If you, for example, drink milk, it calculates how much water is in the milk then adds just that amount of water to your hydration total.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The app will sync between devices, but it's not always automatic. You can force it though, although I didn't see it documented. Just tap the + button, then tap outside it, and it will force a sync.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also share your readings with another user of the WaterMinder. I share mine with my wife, and she shares hers with me. We can see how much water the other one has ingested and encourage each other.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The app also has a nice history feature. It will show your trend over time, but for a given day it will also show you each individual entry. That way you can track exactly what you'd consumed that day.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="medication">Medication</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Many people, as they get older, take one or more medications. Even younger, healthier folks tend to take one or more vitamins. As such, it's important to have a way to track not just what medications you take but to remind you when it is time to take them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I spent a lot of time trying a multitude of apps to find one that met my requirements. I finally found one called <a href="https://apps.apple.com/us/app/everydose-medication-reminder/id1188929364" target="_blank" rel="noreferrer noopener">EveryDose</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>EveryDose is simple to use. You enter in all your medications. Built in there is a list of valid medications, so as you begin to type you can then pick your medication from the list. Should your medication not be in the list, no problem you can elect to add it anyway.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You also enter the strength of the pill, for example 50 mg, then the dose, 1 pill, 2, 1.5 pills, etc. Like the medications, you can enter a custom value as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As part of the data entry, you can select a time of day to take the medication, as well as a frequency (as needed, once a day, once a week, etc.). </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4421,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_1628.png"><img src="https://arcanecode.files.wordpress.com/2022/03/img_1628.png?w=473" alt="" class="wp-image-4421" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Note I've blurred out my prescription meds, but you can also enter your vitamins into the app to track them. When the reminder alert goes off, you can tell the app you took the meds on time, just now, or enter a specific date/time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you need to, you can go down the list and pick the meds you took individually. This is handy should you run out of a particular pill that day.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can export your list of meds so you can easily share with your doctor or pharmacist, plus great logging so you can see which meds you have taken on what days.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The one thing it lacked was integration into Apple Health. I'd love to see it enter my vitamins and such into those areas in Apple Health. But its other features were enough to make me go with it. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="exporting-health-data">Exporting Health Data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can take your health data to the next level by exporting it. Once exported, you can add it to your own database, or most importantly share it with your health care provider.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To do that well, I found an excellent app called <a rel="noreferrer noopener" href="https://apps.apple.com/us/app/health-auto-export-json-csv/id1115567069" target="_blank">Health Auto Export</a>. This is a multicomponent application. There is one app that runs on the iPhone itself. This app provides some simple reporting, but its main purpose is to run in the background and update your personal database. This data can then be used by the Health Auto Export iPad app, as well as their app that runs on MacOS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The primary purpose is to export your health data to a variety of formats such as CSV. You can bring this into Excel or Numbers, then slice and dice to provide your doctor with just the information they need.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It also has a nice dashboard which you can customize. Here's an example of mine:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4425,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/healthautoexport.png"><img src="https://arcanecode.files.wordpress.com/2022/03/healthautoexport.png?w=1024" alt="" class="wp-image-4425" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This gives me an easy-to-use dashboard I can view on my Mac or my iPads. I can drill down, using the menu on the left, to get more details, along with trends displayed over various charts and graphs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I mentioned, the most important functionality for me is the ability to export data. This has allowed me to share with my doctor, which helps him adjust my medication and track my health.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="conclusion">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As I work to improve my health, I've explored a variety of apps and tools to track my progress. I wanted to share what I've found so far in case you, too, are seeing to improve your health.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I said this earlier in the post but want to reiterate: <em>I am not a medical professional, and I am not offering medical advice</em>. Please consult your physician before embarking on any healthcare, such as exercise, hydration, medication, and the like.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For me this is a journey, a work in progress. It's possible, even likely, that as time goes by, I will find other apps and devices to improve my health.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you have suggestions, perhaps you've found a better app or device, then by all means share them in the comments so we can all get healthier. My slogan has become:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Exercise, hydrate, medicate, every day! No excuses. Be a monster!</p><cite>ArcaneCode</cite></blockquote>
<!-- /wp:quote -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Exercise, hydrate, medicate, every day! No excuses. Be a monster!]]></excerpt:encoded>
  <wp:post_id>4394</wp:post_id>
  <wp:post_date>2022-03-02 10:00:00</wp:post_date>
  <wp:post_date_gmt>2022-03-02 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-03-01 20:38:22</wp:post_modified>
  <wp:post_modified_gmt>2022-03-02 02:38:22</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>getting-healthy-with-tech</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="post_tag" nicename="apple-watch"><![CDATA[Apple Watch]]></category>
  <category domain="post_tag" nicename="health"><![CDATA[Health]]></category>
  <category domain="post_tag" nicename="ipad"><![CDATA[iPad]]></category>
  <category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
  <category domain="category" nicename="personal"><![CDATA[Personal]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[69667419752]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1499051939732107265";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_403431528254432";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1646236809]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167330</wp:comment_id>
    <wp:comment_author><![CDATA[Using Technology for Health | Voice of the DBA]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://voiceofthedba.com/2022/03/05/using-technology-for-health/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.55</wp:comment_author_IP>
    <wp:comment_date>2022-03-05 09:44:11</wp:comment_date>
    <wp:comment_date_gmt>2022-03-05 15:44:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] thought about how I&#8217;ve used technology to help me with this after reading Robert Cain&#8217;s post on his efforts to get more healthy. Robert is a friend and I enjoy seeing him at various events. I&#8217;m looking forward to our next [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1646495051.311034;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:47:" Using Technology for Health | Voice of the DBA";s:18:"comment_author_url";s:64:"http://voiceofthedba.com/2022/03/05/using-technology-for-health/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:259:"[&#8230;] thought about how I&#8217;ve used technology to help me with this after reading Robert Cain&#8217;s post on his efforts to get more healthy. Robert is a friend and I enjoy seeing him at various events. I&#8217;m looking forward to our next [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:11:"192.0.91.55";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:11:"192.0.91.55";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:59:"http://arcanecode.com/2022/03/02/getting-healthy-with-tech/";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1646500255.02968;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
  </channel>
</rss>
