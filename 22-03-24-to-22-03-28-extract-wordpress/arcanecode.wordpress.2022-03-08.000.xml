<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2022-03-08 01:03"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Arcane Code</title>
<link>http://arcanecode.com</link>
<description/>
<pubDate>Tue, 08 Mar 2022 01:03:50 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://arcanecode.com</wp:base_blog_url>
<wp:author>
  <wp:author_id>344266</wp:author_id>
  <wp:author_login>arcanecode</wp:author_login>
  <wp:author_email>arcanecode@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[arcanecode]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[Robert]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[Cain]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>178495</wp:term_id>
  <wp:category_nicename>powershell</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[PowerShell]]></wp:cat_name>
</wp:category>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://s0.wp.com/i/buttonw-com.png</url>
		<title>Arcane Code</title>
		<link>http://arcanecode.com</link>
	</image>
	<item>
  <title>VSCode User Snippets for PowerShell and MarkDown</title>
  <link>http://arcanecode.com/2020/09/29/vscode-user-snippets-for-powershell-and-markdown/</link>
  <pubDate>Tue, 29 Sep 2020 22:27:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.wordpress.com/?p=2795</guid>
  <description/>
  <content:encoded><![CDATA[<p>I’ve been working a lot on a new course for Pluralsight, Everyday PowerShell 7 for Developers. I’ve been cranking out a lot of code as a result, PowerShell, obviously, as well as Markdown for documentation.</p><p>I’m finding the use of VSCode’s User Snippets to be extremely useful for developing this course. Snippets have allowed me to store my most often used code as templates, quickly manifesting new sections of code.</p><p>In PowerShell I’m finding these especially useful for writing Pester tests. Most tests fall into a few simple patterns, using a snippet I can quickly create the bulk of my test, leaving me to fill in the few remaining pieces.</p><p>If you know Markdown, you know some of the syntax can be a bit arcane. Using snippets makes it easy to insert commonly used ones, such as being able to type in a snippet name of mdlink and get the correct syntax to appear for a hyperlink.</p><p>It also helps with consistency. A small example, for doing italics in Markdown, you can use a singe underscore or a single asterisk. For bold, two underscores or asterisks. </p><p>I decided (for no particular reason) to use underscores for italics and asterisks for bold. If it’s been a while since I wrote Markdown though, I may not always remember. So I setup mditalic and mdbold to insert the correct formatting for me.</p><p>I’ve placed my snippets in a repository on my github site:</p><p><a title="https://github.com/arcanecode/VSCode_User_Snippets" href="https://github.com/arcanecode/VSCode_User_Snippets">https://github.com/arcanecode/VSCode_User_Snippets</a></p><p>If you aren’t familiar with how to use User Snippets, I have a quick overview in a Markdown file in the repository. </p><p>Speaking of Markdown, there is one issue with VSCode. By default, intellisense is not enabled in VSCode for Markdown. While snippets can be used without intellisense, it’s much easier to use them with intellisense turned on.</p><p>In the repository I have a Markdown&nbsp; file with information on how to turn intellisense on in VSCode for Markdown files.</p><p>Be aware there are also user snippets available through the Extensions Marketplace in VSCode. Just go into the Extensions, and enter Snippet into the search bar.&nbsp; I just didn’t happen to find any that quite suited my needs, hence I created my own.</p><p>You’re welcome to copy and use the user snippets, just some or all of them, as you need. Do be aware some of them have my name and websites, such as the author info snippet I use for the bottom of all my Markdown files, or the header snippet for the top of my PowerShell files.</p><p>I hope you find user snippets as helpful as I do.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2795</wp:post_id>
  <wp:post_date>2020-09-29 16:27:00</wp:post_date>
  <wp:post_date_gmt>2020-09-29 22:27:00</wp:post_date_gmt>
  <wp:post_modified>2020-09-29 16:27:00</wp:post_modified>
  <wp:post_modified_gmt>2020-09-29 22:27:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vscode-user-snippets-for-powershell-and-markdown</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="markdown"><![CDATA[Markdown]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="vscode"><![CDATA[VSCode]]></category>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1601418421]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[49379478209]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Two New PowerShell Courses for Developers on Pluralsight</title>
  <link>http://arcanecode.com/2020/12/05/two-new-powershell-courses-for-developers-on-pluralsight/</link>
  <pubDate>Sat, 05 Dec 2020 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.wordpress.com/?p=2797</guid>
  <description/>
  <content:encoded><![CDATA[<p>I’m proud to announce I have not one but two, yes TWO new PowerShell courses available on Pluralsight, targeted for developers. These two courses are designed to work in harmony, to show developers how they can leverage PowerShell to automate and assist in their daily work.</p><p>The first is “<a href="https://app.pluralsight.com/library/courses/powershell-developers-quick-start-linux-macos-windows/table-of-contents" target="_blank">PowerShell 7 Quick Start for Developers on Linux, macOS, and Windows</a>”. It leverages your knowledge as a developer to bring you up to speed on the PowerShell language. It doesn’t waste time explaining concepts you already know, like variables and loops. It simply shows you how to do things in PowerShell.</p><p>The second course is “<a href="https://app.pluralsight.com/library/courses/everyday-powershell-developers-linux-macos-windows/table-of-contents" target="_blank">Everyday PowerShell for Developers on Linux, macOS, and Windows</a>”. It begins showing how to combine PowerShell with Docker to create a PHP container and test a simple website. It then proceeds to create an Azure SQL database and load data in it.</p><p>In the second you are taught how to code your own classes and modules by creating a simple module that leverages a USPS website API to lookup a zip code and return the city and state it belongs to.</p><p>In the final part of the course you are shown how to use the new <a href="https://github.com/arcanecode/DataFabricator" target="_blank">DataFabricator</a> module to generate realistic looking, but fake data for use in testing your applications.</p><p>While originally developed with PowerShell 7.0.3, all code in the course was tested and videoed using PowerShell 7.1.0.</p><p>Additionally, the code was tested on a variety of platforms, including Ubuntu 20.04, 20.10, Windows 10, H1 and H2, macOS Catalina and even macOS Big Sur.</p><p>If you don’t have a Pluralsight subscription, just go to the Pluralsight page and click the <a href="https://www.pluralsight.com/pricing/free-trial" target="_blank">Try for Free</a> link to get a free 10 day trial.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2797</wp:post_id>
  <wp:post_date>2020-12-05 10:00:00</wp:post_date>
  <wp:post_date_gmt>2020-12-05 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-04 20:50:01</wp:post_modified>
  <wp:post_modified_gmt>2020-12-05 02:50:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>two-new-powershell-courses-for-developers-on-pluralsight</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
  <category domain="category" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[51864223363]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1607184119]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Iterate Over A Hashtable in PowerShell</title>
  <link>http://arcanecode.com/2020/12/14/iterate-over-a-hashtable-in-powershell/</link>
  <pubDate>Mon, 14 Dec 2020 16:01:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2799</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Iterating over an array in PowerShell using a foreach loop is pretty simple. You might think you can do the same thing with a hash table using the same syntax, but if you do you’ll get nothing back. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is possible to loop over a hash table though, using one of two methods.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, let's create a simple hashtable.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>$hash = @{
'About Arcane Code' = 'http://arcanecode.me'
'ArcaneCode Blog' = 'https://arcanecode.com'
'ArcaneCode RedGate Articles' = 'http://arcanecode.red'
'ArcaneCode Github Repository' = 'http://arcanerepo.com'
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the first method, the one that I prefer, you can use the <strong><em>GetEnumerator </em></strong>method of the hash table object.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>foreach ($h in $hash.GetEnumerator() )
{
  Write-Host "$($h.Name) : $($h.Value)"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Within the loop, you can use the <strong><em>Name </em></strong>property to get the key part of the hash, and the <strong><em>Value </em></strong>property to retrieve the value. Here is the output:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>ArcaneCode Blog : https://arcanecode.com 
ArcaneCode Github Repository : http://arcanerepo.com 
About Arcane Code : http://arcanecode.me 
ArcaneCode RedGate Articles : http://arcanecode.red</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the second method, instead of iterating over the hash table itself, we loop over the <strong><em>Keys </em></strong>of the hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>foreach ($h in $hash.Keys) 
{
  Write-Host "$h: $($hash.Item($h))"
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>For each key, we retrieve it's value from the hash table using the key to indicate the item we want. We could have shortened this slightly, but skipping the <strong><em>Item </em></strong>and just referencing the value by the key, using this syntax:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>foreach ($h in $hash.Keys) 
{
  Write-Host "$h: $($hash.$h)"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Both of these methods produce the same output as our original version.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>ArcaneCode Blog : https://arcanecode.com 
ArcaneCode Github Repository : http://arcanerepo.com 
About Arcane Code : http://arcanecode.me 
ArcaneCode RedGate Articles : http://arcanecode.red</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There you go, two simple ways in which you can iterate over a hash table in PowerShell. As I indicated, I prefer GetEnumerator because I have access to both the key and the value in a single variable within my loop. But feel free to use the method that works best for your situation.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2799</wp:post_id>
  <wp:post_date>2020-12-14 10:01:00</wp:post_date>
  <wp:post_date_gmt>2020-12-14 16:01:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-12 17:08:00</wp:post_modified>
  <wp:post_modified_gmt>2020-12-12 23:08:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>iterate-over-a-hashtable-in-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hashtable"><![CDATA[Hashtable]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[52218070530]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1607961731]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1338514632726745089";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2042362535906901";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fixing the Failed To Acquire Token Error When Logging Into Azure from PowerShell</title>
  <link>http://arcanecode.com/2020/12/21/fixing-the-failed-to-acquire-token-error-when-logging-into-azure-from-powershell/</link>
  <pubDate>Mon, 21 Dec 2020 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2813</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>When I haven't used Azure from PowerShell in some time, I'll get an error "failed to acquire token" when using cmdlets such as Get-AzSubscription or Get-AzContext.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To add to the confusion, sometimes Connect-AzAccount appears to work and log me in, but I'll still get the error.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Under the hood, the Azure cmdlets are caching some connection tokens. Fixing this issue is pretty simple, although not intuitive or easy to find the solution. All you have to do is issue the following cmdlet:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Clear-AzContext</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This will remove old tokens from your system. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After issuing the clear command, just end your current PowerShell session, then login again using Connect-AzAccount and  you should be good to go.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2813</wp:post_id>
  <wp:post_date>2020-12-21 10:00:00</wp:post_date>
  <wp:post_date_gmt>2020-12-21 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-12 17:08:15</wp:post_modified>
  <wp:post_modified_gmt>2020-12-12 23:08:15</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixing-the-failed-to-acquire-token-error-when-logging-into-azure-from-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="azure"><![CDATA[Azure]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[52493818950]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1608566406]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1341050825897066500";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2047893328687155";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Suppress Write-Verbose When Calling A function in PowerShell</title>
  <link>http://arcanecode.com/2021/01/04/suppress-write-verbose-when-calling-a-function-in-powershell/</link>
  <pubDate>Mon, 04 Jan 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2833</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In a project for one of my recent Pluralsight courses, "<a href="https://www.pluralsight.com/courses/everyday-powershell-developers-linux-macos-windows" target="_blank" rel="noreferrer noopener">Everyday PowerShell for Developers on Linux, macOS, and Windows</a>", I had created some functions in my <a rel="noreferrer noopener" href="https://github.com/arcanecode/DataFabricator" target="_blank">DataFabricator </a>module. Some of these called many child functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I wanted to be able to call the parent function using Verbose in order to track progress. As you may be aware though, when you call a parent function using Verbose, it carries down to all of the functions it calls. This caused a large volume of verbose messages making it difficult to find the information I wanted. Hence I needed to suppress verbose in the called functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's see how. First let's create two simple functions that don't suppress verbose messages.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Parent1()
{
  &#091;CmdletBinding()]
  param()

  Write-Verbose "Verbose: Parent1"
  Write-Host "Parent1"
  Child1
}

function Child1()
{
  &#091;CmdletBinding()]
  param()

  Write-Verbose "Verbose: Child1"
  Write-Host "Child1"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When we call the parent function with the verbose switch, we get the expected output.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Parent1 -Verbose

VERBOSE: Verbose: Parent1
Parent1
VERBOSE: Verbose: Child1
Child1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now let's create an alternate version of the parent function. To suppress verbose on a called child function, all that is needed is to add the verbose switch, but followed by a colon and a $false.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Parent2()
{
  &#091;CmdletBinding()]
  param()

  Write-Verbose "Verbose: Parent2"
  Write-Host "Parent2"
  Child1 -Verbose:$false
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here is the output when we call the new Parent2.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Parent2 -Verbose

VERBOSE: Verbose: Parent2
Parent2
Child1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the verbose statements in the Child1 function do not trigger. All that was needed was to add "-Verbose:$false" as a switch when calling Child2.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And that's all there is to it, using this simple technique you can suppress verbose messages when calling a child function, whether verbose was used to call the parent or not.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2833</wp:post_id>
  <wp:post_date>2021-01-04 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-01-04 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-14 17:39:36</wp:post_modified>
  <wp:post_modified_gmt>2020-12-14 23:39:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>suppress-write-verbose-when-calling-a-function-in-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="write-verbose"><![CDATA[Write-Verbose]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[53012726053]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1609776021]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1346124316249911297";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2059329030876918";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Exclude A File From Git Source Code Control in VSCode</title>
  <link>http://arcanecode.com/2021/01/11/exclude-a-file-from-git-source-code-control-in-vscode/</link>
  <pubDate>Mon, 11 Jan 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2843</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Like many developers, I use VSCode for my projects. Primarily PowerShell, but also other things like the PHP code used for my <a rel="noreferrer noopener" href="https://w4shl.com" target="_blank">ham radio club website</a> or markdown projects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It can be useful to have extra files, that I don't need or want to have saved in Git. One example, I often have a "scratchpad.ps1" file. It's a place I can prototype code, test out ideas, before I copy them into my main project. If this file gets lost, or damaged, I don't really care as it's just temporary.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another example stems from my need to demonstrate code on video, for my Pluralsight courses, or live at SQL Saturdays and code camps. I often need to login to a website or database, and don't want to have my credentials hard coded in my script for everyone to see.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To solve this, I simply place my needed information in a text file, then use Get-Content (with the -Raw switch) to read it into a variable. I don't want this text file though to be placed in my public github repositories.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Excluding a file is simple. In the root folder of your source controlled project is a folder named <strong>.git</strong>. (Note the period on the front,  also note that on some operating systems it may be hidden by default.) Under it is another folder called <strong>info</strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In <strong>.git/info</strong> is a file called <strong>exclude </strong>(with no extension). To it, simply add the names of the files you want to exclude from source control. Here's an example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.&#091;oa]
# *~
uid.txt
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The lines that begin with a pound sign (#) are comments, and are included by git.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Under it is the file I added, uid.txt. This file is will now be excluded from any git commits, and will not be uploaded to github or whatever tool you use for git. You can see this in the VSCode file tree, the file will appear in an off color font. In a dark mode theme, this will be a gray.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2850,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2020/12/excludegit.jpg"><img src="https://arcanecode.files.wordpress.com/2020/12/excludegit.jpg?w=380" alt="" class="wp-image-2850" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The arrow points to the uid.txt file that was excluded from the project.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's all there is to it. Now you can include extra files, such as scratch pads, notes, or even passwords that you don't need (or want) to have as part of your git repository. Just keep in mind it's your responsibility to back these files up.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2843</wp:post_id>
  <wp:post_date>2021-01-11 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-01-11 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-14 17:38:07</wp:post_modified>
  <wp:post_modified_gmt>2020-12-14 23:38:07</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>exclude-a-file-from-git-source-code-control-in-vscode</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="git"><![CDATA[Git]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="vscode"><![CDATA[VSCode]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[53302946702]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1610380807]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1338629361960947712";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2042613245881830";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fun with PowerShell Get-Random</title>
  <link>http://arcanecode.com/2021/07/05/fun-with-powershell-get-random/</link>
  <pubDate>Mon, 05 Jul 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3634</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Many people know about PowerShell's <code>Get-Random </code>cmdlet. Using it you can generate a random value. For example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Will output a value such as:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>64031951</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But did you know there's other features of Get-Random?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Numeric Ranges</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With Get-Random you can lock down the return result to a specific range. You can specify a minimum value as well as a maximum.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random -Minimum 100 -Maximum 200

122</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can run it numerous times and the return value will always be between 100 and 200.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You don't have to use both the minimum and maximum values, you can just use one or the other.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While be default it returns an unsigned 32 bit integer, you can also use it to return a random floating point value.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random -Minimum 10.5 -Maximum 20.9

11.9004625960255</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Get-Random and Arrays</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can also use Get-Random with Arrays. Let's say you have an array of integer values. You can pipe it through Get-Random and it will pick one value from the array for you.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 1, 3, 5, 7, 9
$array | Get-Random

7</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The cool thing about this is it works with any array. Let's say you have an array of states, and want to pick a state at random.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = (
  'Alabama', 'Alaska', 'Arizona',
  'Arkansas', 'California', 'Colorado',
  'Connecticut', 'Delaware', 'Florida',
  'Georgia', 'Hawaii', 'Idaho',
  'Illinois', 'Indiana', 'Iowa'
)
$array | Get-Random

Florida</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This also works with arrays that hold a collection of objects. Let's get a collection of file objects from our C:\Temp folder and let it pick one for us.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$files = Get-ChildItem -Path "C:\Temp"
$files | Get-Random

    Directory: C:\Temp

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----           1/14/2021  2:31 PM                curl-7.74.0</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Getting More Than One Random Item</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Get-Random also has a <code>-Count</code> parameter which you can use to get multiple values back. Let's use our state example, and let it return five states.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = (
  'Alabama', 'Alaska', 'Arizona',
  'Arkansas', 'California', 'Colorado',
  'Connecticut', 'Delaware', 'Florida',
  'Georgia', 'Hawaii', 'Idaho',
  'Illinois', 'Indiana', 'Iowa'
)
$array | Get-Random -Count 5

Idaho
Alaska
California
Delaware
Colorado</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This works with any type of array, or just random integers.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random -Count 3

1981714362
1664558041
1474367023</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>SetSeed</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Get-Random has one more parameter, <code>-SetSeed</code>. You can pass in a value, and when you do Get-Random will always return the same result for that seed.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random -SetSeed 100

1881691673</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>No matter how many times you run Get-Random, as long as you use the same seed value, it will always return a result of 1881691673. This also works with other types of arrays such as the array of states we used earlier.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = (
  'Alabama', 'Alaska', 'Arizona',
  'Arkansas', 'California', 'Colorado',
  'Connecticut', 'Delaware', 'Florida',
  'Georgia', 'Hawaii', 'Idaho',
  'Illinois', 'Indiana', 'Iowa'
)
$array | Get-Random -SetSeed 33

Illinois</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Again, run this as much as you want and with the same SetSeed value it will always return the same state, in this case Illinois.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So why use SetSeed? One main use it testing. You want to create a set of reusable tests, for example using Pester, and want to validate you always get the same value back from your array.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we saw how to use Get-Random for a variety of purposes. Hopefully you'll find it as useful as I do!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">I have many PowerShell related courses on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.com/" target="_blank">https://pluralsight.com</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site. Once there just search for my name, Robert Cain, to see all the courses I have.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Learn how to use PowerShell's Get-Random cmdlet]]></excerpt:encoded>
  <wp:post_id>3634</wp:post_id>
  <wp:post_date>2021-07-05 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-07-05 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-15 15:39:08</wp:post_modified>
  <wp:post_modified_gmt>2021-07-15 21:39:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-get-random</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="get-random"><![CDATA[Get-Random]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3644]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[60385459786]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1625497228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1412063839848472588";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_251112836819636";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165736</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With the PowerShell Switch Parameter | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.149</wp:comment_author_IP>
    <wp:comment_date>2021-09-20 09:00:11</wp:comment_date>
    <wp:comment_date_gmt>2021-09-20 15:00:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] it&#8217;s actually quite easy. I started off the whole PowerShell series on my blog with a post Fun With PowerShell Get-Random. In it I described (among other things) how to use the Get-Random cmdlet to return a random value [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632150011.527621;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632153979.918811;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>get-random-image</title>
  <link>http://arcanecode.com/2021/07/05/fun-with-powershell-get-random/get-random-image/</link>
  <pubDate>Mon, 05 Jul 2021 03:12:57 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/get-random-image.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3644</wp:post_id>
  <wp:post_date>2021-07-04 21:12:57</wp:post_date>
  <wp:post_date_gmt>2021-07-05 03:12:57</wp:post_date_gmt>
  <wp:post_modified>2021-07-04 21:12:57</wp:post_modified>
  <wp:post_modified_gmt>2021-07-05 03:12:57</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>get-random-image</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3634</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/get-random-image.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Strings</title>
  <link>http://arcanecode.com/2021/07/12/fun-with-powershell-strings/</link>
  <pubDate>Mon, 12 Jul 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3646</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell has some of the best, most flexible string handling of any language I've used. In this post we'll look at some string basics, then some of the features that make it special.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note in these demos I'm using PowerShell Core 7.1.3 and VSCode. Everything here should also work in the PowerShell 5.1 and the PowerShell IDE.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Basic Strings in PowerShell</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Strings in PowerShell can be denoted with either single quote marks or double quote marks.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"This is a string"
'This is a string too!'
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you want to see the result, simply highlight the strings and press either F8 in VSCode, or F5 in the PowerShell IDE.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>This is a string
This is a string too!</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Multiline Strings, aka Here Strings</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell has the ability to create a multiline string, also known as a "<strong>here</strong>" string. To create a here string, use an @ sign, followed by a quotation mark (either single or double) then hit Enter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the next lines, enter the value for your string. Finally hit Enter, then on the next line put the closing quotation mark then another @ sign.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is important, the closing quotation mark and @ sign <strong>must</strong> be the first two characters on the line. If you attempt to indent them in any way the technique will not work!</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$heretext = @"
Some text here
Some more here
     a bit more

a blank line above
"@

$heretext

Some text here
Some more here
     a bit more

a blank line above</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Again, this works with single or double quotes. So what's a common use?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One common thing I use it for is SQL queries. Here's an example in a traditional language.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$sql = 'SELECT col1' `
     + '     , col2' `
     + '     , col3' `
     + '  FROM someTable ' `
     + ' WHERE col1 = ''a value'' '
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Note the single ` (back tick) mark at the end of each line. This is the line continuation character in PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As you can see, each line has to be connected with + signs. Now let's contrast it with a here string version.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$sql = @'
SELECT col1
     , col2
     , col3
  FROM someTable
 WHERE col1 = 'a value'
'@
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This is not only much more readable, but easier to work with. You can develop your SQL query in SQL Server Management Studio, or Azure Data Studio, then simply cut and paste it into PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another thing to notice, you can embed single or double quotes within a here string, and PowerShell will ignore them as denoting another string.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Embedded Quote Marks</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you need to embed a quotation mark in a string, you can simply double them up.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"ArcaneCode said ""PowerShell is awesome!"" and the crowd applauded."

ArcaneCode said "PowerShell is awesome!" and the crowd applauded.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This technique works with single quote marks as well. For example one's used in common words such as <em>shouldn't</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>'You shouldn''t miss the blog posts at arcanecode.com'

You shouldn't miss the blog posts at arcanecode.com</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>String Interpolation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You may be wondering what the difference between single and double quotes is. Double quotes allow you to use something called <strong>string interpolation</strong>. String interpolation will take any variables embedded in the string and expand them before returning the string.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's a simple example. First we get the number of items in the current folder. Then we copy the current folder location into another variable. Finally we create a string with these variables in it, surrounding the string in double quote marks.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$items = (Get-ChildItem).Count 

$loc = Get-Location

"There are $items items are in the folder $loc."

There are 3 items are in the folder C:\PSCore-QuickStart.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see in the result (the bottom line) it has taken the value in <code>$items</code>, a 3, and expanded it in the return result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Likewise, it has taken the value in <code>$loc</code> and expanded it to the name of the current folder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now see the result if single quote marks had been used.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$items = (Get-ChildItem).Count 

$loc = Get-Location

'There are $items items are in the folder $loc.'

There are $items items are in the folder $loc.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With single quotes, the string interpolation engine does not kick in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a rule of thumb then, only use double quotes if you have to have interpolation. Otherwise use single quotes so you don't incur the (admittedly minimal) amount of time for the string interpolation engine to needlessly process the string.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Escape Characters</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell also has the concept of escape characters. These are special characters you can embed in the string that provide additional formatting instructions. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that escape characters only work inside double quote marked strings. If you use single quotes for your strings, it will just display the escape character. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are four that are the most commonly used. Tab, Carriage Return, Line Feed, and escaping the $ (dollar sign) so it may be used.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Escape characters are preceded by a back tick <strong>`</strong> then the character. Let's look at the tab, which is a <strong>`t</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"`tThis is tabbed in"

        This is tabbed in</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The next is the carriage return line feed sequence, which is <code>`r`</code>n.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"Here is some text`r`nAnd some more text`r`n`r`nA blank line before this"

Here is some text
And some more text

A blank line before this</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You would most commonly use this when looping over data and building a new output string.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final escape character we'll look at allows you to embed a $ character in an double quoted string. Simply use a back tick followed by the dollar sign.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"The `$items variable is $items"

The $items variable is 3</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We've only covered four here, but note there are many more escape sequences you can use in PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post you saw all kinds of cool things you can do with PowerShell strings. With this knowledge you can take your PowerShell scripts to the next level, and be able to generate some creative output with your own PowerShell strings.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a rel="noreferrer noopener" href="https://www.pluralsight.com/courses/powershell-developers-quick-start-linux-macos-windows" target="_blank">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.com/" target="_blank">https://pluralsight.com</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site. Once there just search for my name, Robert Cain, to see all the courses I have.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun with PowerShell Strings]]></excerpt:encoded>
  <wp:post_id>3646</wp:post_id>
  <wp:post_date>2021-07-12 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-07-12 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-15 15:37:56</wp:post_modified>
  <wp:post_modified_gmt>2021-07-15 21:37:56</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-strings</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="strings"><![CDATA[Strings]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3667]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[60644954797]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1626102013]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1414600491544231936";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_255816513015935";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165792</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Write-Verbose | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.206</wp:comment_author_IP>
    <wp:comment_date>2021-09-27 09:00:18</wp:comment_date>
    <wp:comment_date_gmt>2021-09-27 15:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In my example though I want to display a multi line message. The first line will hold the name of the function, the second will be the start time. To accomplish this I am using a here string. If you aren&#8217;t familiar with here strings, see my post from July 12, 2021 named Fun With PowerShell Strings. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632754818.138482;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632758496.904622;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165078</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell String Formatting | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.201</wp:comment_author_IP>
    <wp:comment_date>2021-07-19 09:00:15</wp:comment_date>
    <wp:comment_date_gmt>2021-07-19 15:00:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] last Monday&#8217;s blog post, Fun With PowerShell Strings, I covered a lot of the basics around PowerShell Strings. One thing we didn&#8217;t get into though [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1626710433.467199;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1626706815.927476;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626913891]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626913891.119248;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165516</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Basic Functions | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.124</wp:comment_author_IP>
    <wp:comment_date>2021-08-30 09:00:12</wp:comment_date>
    <wp:comment_date_gmt>2021-08-30 15:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] The $() will force PowerShell to evaluate the expression, then string interpolation will replace it with the value before returning the final string. (For more on string interpolation, see my recent article Fun With PowerShell Strings.) [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630335612.327474;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630340763.733679;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166918</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In this example I used string interpolation to build my return string. (For more on string interpolation, see my post Fun With PowerShell Strings.) [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431624.451488;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436450.01065;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-strings</title>
  <link>http://arcanecode.com/2021/07/12/fun-with-powershell-strings/fun-with-powershell-strings/</link>
  <pubDate>Wed, 07 Jul 2021 02:12:40 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-strings.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3665</wp:post_id>
  <wp:post_date>2021-07-06 20:12:40</wp:post_date>
  <wp:post_date_gmt>2021-07-07 02:12:40</wp:post_date_gmt>
  <wp:post_modified>2021-07-06 20:12:40</wp:post_modified>
  <wp:post_modified_gmt>2021-07-07 02:12:40</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-strings</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3646</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-strings.png</wp:attachment_url>
</item>
<item>
  <title>fun-with-powershell-strings</title>
  <link>http://arcanecode.com/2021/07/12/fun-with-powershell-strings/fun-with-powershell-strings-2/</link>
  <pubDate>Wed, 07 Jul 2021 02:14:40 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-strings-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3667</wp:post_id>
  <wp:post_date>2021-07-06 20:14:40</wp:post_date>
  <wp:post_date_gmt>2021-07-07 02:14:40</wp:post_date_gmt>
  <wp:post_modified>2021-07-06 20:14:40</wp:post_modified>
  <wp:post_modified_gmt>2021-07-07 02:14:40</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-strings-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3646</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-strings-1.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Arrays</title>
  <link>http://arcanecode.com/2021/07/26/fun-with-powershell-arrays/</link>
  <pubDate>Mon, 26 Jul 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3668</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this article, we'll look at the different ways to use Arrays in PowerShell. We'll cover the basics, then move onto more advanced topics.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A quick note for my non-native English speaking friends, I use the term <em>aka</em> a few times. AKA is shortcut for "<em>also known as</em>", it's just a quick way to say "a is another word for b".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Array Basics</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The formal array to declare an array is to use <code>@()</code> around the contents, assigning it to a variable.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = @('Robert', 'Cain')
$array

Result:
Robert
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Note that in the output, each item (aka element) in the array is displayed on a single line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is a little easier way to create an array, you can omit the <code>@()</code> . If you are passing in more than one item, separated by a comma, PowerShell converts it to an array.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Robert', 'Cain'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you have a long list of items, you can break the list over multiple lines. As long as a comma is the last thing on the line PowerShell will assume the rest of the array contents continue on the next line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Robert',
         'Cain'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can access individual items in the array by using what is called positional notation. After the name of the array, use square brackets [] and inside put a number that indicates the position in the array.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Numbering begins at zero and goes to the maximum number of elements. (Well, technically the max number of elements minus one, but more on that in a moment.) If you try to use a number greater than the maximum number of elements, you will get an error.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Robert', 'Cain'
$array&#091;0]

Result:
Robert

$array&#091;1]

Result:
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Of course you can use variables in place of the numeric values for positional notation.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$x = 1
$array&#091;$x]

Result:
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So how do you know how many items are in an array? The array variable type has a <code>Count</code> property that can tell you that.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array.Count

Result:
2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There is also a property called <code>Length</code>, which returns the same thing. They can be used interchangeably, most people however use the <code>Count</code> property.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One thing to be careful of with <code>Count</code>, is that it returns the number of items in the array. But arrays start with position 0 (zero), so the last item in an array will be <code>Count - 1</code>, not <code>Count</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array&#091;$array.Count - 1]

Result:
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>PowerShell does provide a shortcut to get the last element. You can pass in a -1 (negative one) into the position, and it will get the last item.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array&#091; -1 ]

Result:
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Fun Tricks with Positional Notation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are a few fun tricks you can do with positional notation. So far, we've only used a single value in the square brackets to get a single value from the array. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Did you know you can pass in multiple numbers and get back multiple elements from the array in one command?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Zero', 'One', 'Two', 'Three',
         'Four', 'Five', 'Six', 'Seven'
$array&#091;2, 4, 6]

Result:
Two
Four
Six</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you pass in the same number twice, you'll get that array item back twice in the results.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

$array = 'Zero', 'One', 'Two', 'Three',
         'Four', 'Five', 'Six', 'Seven'
$array&#091;2, 4, 2]

Result:
Two
Four
Two</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Finally, you can use PowerShell's range operator to return a series of values.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

$array = 'Zero', 'One', 'Two', 'Three',
         'Four', 'Five', 'Six', 'Seven'
$array&#091;1..4]

Result:
'One'
'Two'
'Three'
'Four'</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Adding Items to an Array</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Adding items is pretty easy, you can use the<code> +=</code> (plus equal) to add a new item into the array. In this example, we'll add two new items, then display the new array, and finally the count of items.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Robert', 'Cain'

$array += 'Arcane'
$array += 'Code'
$array

$array.Count

Result:
Robert
Cain
Arcane
Code
4</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here you can see are my original two items, followed by the new ones we just added. Finally the count, 4, is displayed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Updating an Array Element</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>What if we want to update a value in the array? Turns out that is as easy as adding a new one. Simply address the item to replace with positional notation, then assign a new value.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array&#091;0] = 'Mr.'
$array

Result:
Mr.
Cain
Arcane
Code</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Empty Arrays</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When you need to create an empty array, you use the formal array declaration syntax we saw in the first example, only you put nothing in it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$empty = @()
$empty

Result:
(Nothing is displayed because the array is empty)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So why would you need an empty array?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's say  you were looping over a collection of some type, and were building a new array to output. It might be a collection (aka array) of files, or records return from a SQL Server query.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You would create the empty array, enter the loop, extract and format the information you want then add it to the empty array using the += syntax.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Iterating Over Arrays</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are a few methods we can use to iterate, or loop over the contents of our arrays. The most common, and one I use the most, is a <code>foreach</code> loop.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>foreach($item in $array)
{
  "The current item is $item"
}

Result:
The current item is Mr.
The current item is Cain
The current item is Arcane
The current item is Code</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The next option is to pipe our array into the <code>ForEach-Object</code> cmdlet, passing a script block to the cmdlet with our instructions.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array | ForEach-Object { "Current Value: $PSItem"}

Result:
Current Value: Mr.
Current Value: Cain
Current Value: Arcane
Current Value: Code</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The variable <code>$PSItem</code> is a built in PowerShell variable, meant to represent the current item in a loop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, an Array datatype has a <code>ForEach</code> method built right in. You call the method, then as you did with the <code>ForEach-Object</code> cmdlet pass in a script block with the instructions.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array.ForEach({ "Current Value: $_"})

Result:
Current Value: Mr.
Current Value: Cain
Current Value: Arcane
Current Value: Code</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example we used the variable <code>$_ </code>to represent the current item. The <code>$_</code> was the original way to create a placeholder, later PowerShell added the <code>$PSItem</code> variable. <code>$PSItem</code> was introduced way back in version 3, so unless you are on a really really REALLY old version of PowerShell, you can use <code>$_</code> and <code>$PSItem</code> interchangeably.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Erasing the Contents of an Array</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Clearing out the contents of an array is easy, just call the array's <code>Clear</code> method.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array.Clear()
$array

Result:
(Nothing is displayed because the array is empty)</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Mixed Data Types</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Unlike a lot of other languages, the values going into an array can be a mix of data types. In the example below I'm going to load an array with some strings, integers, and a floating point type.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Arcane', 'Code', 33, 42,
         'Alabama', 3.14, 'In the Morning'
$array

Result:
Arcane
Code
33
42
Alabama
3.14
In the Morning</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Removing Items From Arrays</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We now move to a topic that doesn't have a happy answer. You cannot remove an item from an array. That said, you could create a brand new array, filtering out the unwanted elements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example, we pipe our array into the <code>Where-Object</code> cmdlet. We pass in a script block, in which we say only pass out items where the value of the current item is not equal (<code> -ne </code> ) to the state of Alabama. After that we display the results.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note too we are using another built in line continuation feature of PowerShell. If the pipe symbol, a <code>|</code> , is the last thing on the line PowerShell assumes what is on the next line is a continuation of the line above. (I like to indent the second line to the right of my equal sign, but it's not required.)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

$array = 'Arcane', 'Code', 33, 42,
         'Alabama', 3.14, 'In the Morning'
$newArray = $array |
            Where-Object { $PSItem -ne 'Alabama' }
$newArray

Result:
Arcane
Code
33
42
3.14
In the Morning</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the state of Alabama is no longer in our list.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Fun Operators - In and Compare</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are other operators in PowerShell that can let us do fun things with arrays.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, what if we need to know if an item is already in the array? There's actually two methods to handle that. In the first, we'll see if the item is in the array.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Arcane', 'Code', 33, 42,
         'Alabama', 3.14, 'In the Morning'
'Arcane' -in $array

Result:
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the second method we'll use the contains operator.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array -contains 'Code'

Result:
True</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>More Fun Operators - Join</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>What if you wanted to convert all of the elements in the array into a single string? To handle that we have the <code>join</code> operator. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After the join, you pass in a character to use to separate each element. You also have the option to pass in an empty string if you don't want anything separating your results.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the last example, you'll see that you can pass in more than one character to separate the results.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 1, 3, 5, 7, 9
$result = $array -join ' '
$result

Result: 1 3 5 7 9

$array = 1, 3, 5, 7, 9
$result = $array -join '-'
$result

Result: 1-3-5-7-9

$array = 1, 3, 5, 7, 9
$result = $array -join ','
$result

Result: 1,3,5,7,9

$array = 1, 3, 5, 7, 9
$result = $array -join ''
$result

Result: 13579

$result = $array -join ', '
$result

Result: 1, 3, 5, 7, 9
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Even More Fun Operators - Replace, Match, Split</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are three more operators we'll cover here. The first is <code>Replace</code>, which will search through the array and replace one string with another.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$servers = 'HOLD-001', 'HOLD-002', 'SQL-001', 'SQL-002'
$newServers = $servers -replace 'HOLD', 'TEST'
$newServers

Result:
TEST-001
TEST-002
SQL-001
SQL-002</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You might use this to develop a script to run against your servers. When designing the script you might use a string like HOLD-001, HOLD-002, etc where HOLD is just a place holder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At runtime you pass a parameter into your script such as DVLP (development), TEST, or PROD (production) so you can use the same script in multiple environments.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next operator we'll look at is <code>match</code>. Match can be used as a filter. Let's take a look at this example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$servers = 'SRV-001', 'SRV-002', 'SQL-001', 'SQL-002'
$newServers = $servers -match 'SQL'
$newServers

Result:
SQL-001
SQL-002</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, only servers with SQL in the name were returned. This might be useful if you had a full list of all servers you wanted to iterate over, but in certain sections of your script you only wanted to do things to your SQL Servers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final operator to look at is <code>split</code>. You can use split to further divide the elements in your array into smaller parts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example we'll reuse our list of servers, but split the items based on a dash (or hyphen).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$servers = 'SRV-001', 'SRV-002', 'SQL-001', 'SQL-002'
$newServers = $servers -split '-'
$newServers

Result:
SRV
001
SRV
002
SQL
001
SQL
002</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here you can see each server name was split into two parts, each part becoming a new element in our output array. Also note that the character we split on, the dash, is discarded from the result set.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Iterating Over an Array of Objects</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Just like arrays of simple items like strings and integers, you can also loop over an array of objects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here, we'll get a list of files in my temp directory using the <code>Get-ChildItem</code> cmdlet.  We'll also use the empty array technique you saw earlier. A <code>foreach</code> loop will be used to go over each file object in the array and format a string with some of its properties, then add that string to our empty <code>$newFiles</code> array.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Set-Location "C:\Temp"
$files = Get-ChildItem
$newFiles = @()
foreach($file in $files)
{
  $newFiles += "$($file.Name) is $($file.Length) in size"
}
$newFiles

Result:
2019-ARRL-FieldDay-Rules-RevA.pdf is 111434 in size
ARRL-FIELD-DAY.adi is 76110 in size
azuredatastudio-windows-user-setup-1.13.1.exe is 91789368 in size
curl-7.74.0.zip is 6068670 in size
standard-notes-3.6.14-win.exe is 105761936 in size
SysinternalsSuite.zip is 41889407 in size
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Within my loop $file represents the current item in my <code>$files</code> array. Inside I access the properties of my file object. I could, for example, have used if <code>($file.Length -gt 1)</code> and done something useful.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this case I'm using string interpolation to display the value of a property. Note that because I want it to access the property, within the string I have to wrap it in <code>$()</code>, such as <code>$($file.Name)</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This forces PowerShell to first evaluate what is inside the <code>$()</code>, then return that into the string.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This post turned out longer than I'd intended, but there are so many fun things you can do with a PowerShell Array it was hard to stop at just a few.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With luck you'll have found some new techniques you can employ with arrays in your own PowerShell scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun with PowerShell Arrays]]></excerpt:encoded>
  <wp:post_id>3668</wp:post_id>
  <wp:post_date>2021-07-26 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-07-26 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-22 13:36:10</wp:post_modified>
  <wp:post_modified_gmt>2021-07-22 19:36:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-arrays</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="array"><![CDATA[Array]]></category>
  <category domain="post_tag" nicename="arrays"><![CDATA[Arrays]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3735]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[61162453764]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1627311614]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1419673926586744833";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_265197598744493";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165172</wp:comment_id>
    <wp:comment_author><![CDATA[Fun with Arrays in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/07/30/fun-with-arrays-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-07-30 06:10:10</wp:comment_date>
    <wp:comment_date_gmt>2021-07-30 12:10:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain looks at how arrays operate in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1627647010.728232;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1627652057.744728;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-arrays</title>
  <link>http://arcanecode.com/2021/07/26/fun-with-powershell-arrays/fun-with-powershell-arrays/</link>
  <pubDate>Fri, 09 Jul 2021 20:18:50 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-arrays.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3735</wp:post_id>
  <wp:post_date>2021-07-09 14:18:50</wp:post_date>
  <wp:post_date_gmt>2021-07-09 20:18:50</wp:post_date_gmt>
  <wp:post_modified>2021-07-09 14:18:50</wp:post_modified>
  <wp:post_modified_gmt>2021-07-09 20:18:50</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-arrays</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3668</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-arrays.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Hash Tables</title>
  <link>http://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/</link>
  <pubDate>Mon, 02 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3737</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hash tables are powerful, flexible items. In some languages, hash tables are also called <em>dictionaries</em>. In this post we'll start with a few basics, then get into some fun things you can do with hash tables.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A quick note, some documentation calls them a <em>hash table</em>, others read <em>hashtable</em>, one word. For this post I'll use the two word <em>hash table</em>, but it's the same thing no matter what documentation or blog you read.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Hash Table Basics</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To create a hash table you will need to use the @{} syntax to create a set of key / value pairs.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash = @{'Key'                 = 'Value'
          'PowerShell'          = 'PowerShell.com'
          'Arcane Code'         = 'arcanecode.com'
          'Pluralsight'         = 'pluralsight.com'
          'GitHub - ArcaneCode' = 'github.com/arcanecode'
         }
$hash                  # Display all values

Result:
Name                           Value
----                           -----
Arcane Code                    arcanecode.com
Key                            Value
Pluralsight                    pluralsight.com
PowerShell                     PowerShell.com
GitHub - ArcaneCode            github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example I lined up the equal signs because, in my humble opinion, it's easier to read. But it's not required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Similar to an array, you can use positional notation to retrieve a value, only instead of a numeric value you pass in the key.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash&#091;'PowerShell']

Result:
PowerShell.com</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The hash table manifests each key as a property. This means instead of positional notation you can instead use . (dot) notation.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.PowerShell

Result:
PowerShell.com</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But Arcane, you may ask, some of those keys have spaces in them. How does that work?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well all you have to do is put the key in quotes.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.'Arcane Code'

Result:
arcanecode.com</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Well that was fun, but what about updating a value for a key? All you have to do is assign the new value.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.'Arcane Code' = 'ArcaneCode.me'
$hash

Result:
Name                           Value
----                           -----
GitHub - ArcaneCode            github.com/arcanecode
Key                            Value
PowerShell                     PowerShell.com
Pluralsight                    pluralsight.com
Arcane Code                    arcanecode.me</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see the value for the <code>'Arcane Code'</code> key has changed from <code>arcanecode.com</code> to <code>arcanecode.me</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition to updating, you will have times you want to add a new item to an array. Doing so isn't intuitive, but it's easy. Just use the hash table, provide the new key and assign the value to it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Ubuntu = 'Ubuntu.com'
$hash

Result:
Name                           Value
----                           -----
GitHub - ArcaneCode            github.com/arcanecode
Key                            Value
Ubuntu                         Ubuntu.com
PowerShell                     PowerShell.com
Pluralsight                    pluralsight.com
Arcane Code                    arcanecode.me</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Fun Properties and Methods of Hash Tables</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hash tables have a variety of useful properties and methods you can call. The first, <code>Keys</code>, will return a list of all the keys.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Keys

Result:
GitHub - ArcaneCode
Key
PowerShell
Pluralsight
Arcane Code
Ubuntu
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you might guess, there's a corresponding property to return all the values.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Values

Result:
github.com/arcanecode
Value
PowerShell.com
pluralsight.com
arcanecode.me
Ubuntu.com</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Just like the array data type, hash tables also have a <code>Count</code> property to let you know how many key/value pairs are in the table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Count

Result:
6</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Earlier in this post I showed how to add a new key/value pair. Before adding, it would probably be a good idea to check and see if it is already there. There is a <code>ContainsKey</code> method that will do that.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.ContainsKey('Arcane Code')

Result:
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This method will return either <code>True</code> or <code>False</code> depending on the presence of the key.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Likewise, there is a method to check to see if a value is present.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.ContainsValue('pluralsight.com')

Result:
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>What if we'd wanted to use <code>ContainsKey</code> to see if a key was present, and if so we wanted to remove it? There is a <code>Remove</code> method that will delete a key/value pair from our hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Remove('Ubuntu')
$hash

Result:
Name                           Value
----                           -----
GitHub - ArcaneCode            github.com/arcanecode
Key                            Value
PowerShell                     PowerShell.com
Pluralsight                    pluralsight.com
Arcane Code                    arcanecode.me</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see in the results, the key / value pair for the Ubuntu entry is now gone.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final method we'll look at in this section will allow us to remove <em>all</em> key / value pairs from the hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Clear()
$hash

Result:
(Nothing is displayed because the hash table is empty)</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Creating an Empty Hash Table</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Much as with arrays, there are times you will want to create an empty hash table. You could then enter a loop that added new key / value pairs to the hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To declare an empty hash table, you simply assign <code>@{}</code> to a variable.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$empty = @{}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now you can assign values to it. Here we'll do it in individual lines, but as I indicated this technique is most useful in a loop.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$empty&#091;'Pluralsight'] = 'pluralsight.com'
$empty&#091;'DataFabricator'] = 'datafabricator.com'
$empty

Result:
Name                           Value
----                           -----
Pluralsight                    pluralsight.com
DataFabricator                 datafabricator.com</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Ordered Hash Tables</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's reset our hash table, then look at the output.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash = @{'Key'                 = 'Value'
          'PowerShell'          = 'PowerShell.com'
          'Arcane Code'         = 'arcanecode.com'
          'Pluralsight'         = 'pluralsight.com'
          'GitHub - ArcaneCode' = 'github.com/arcanecode'
         }
$hash

Result:
Name                           Value
----                           -----
Arcane Code                    arcanecode.com
Key                            Value
Pluralsight                    pluralsight.com
PowerShell                     PowerShell.com
GitHub - ArcaneCode            github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Look at the output carefully. The returned list is <em>not </em>in the same order we added them to the hash table. Most of the time you are referencing the hash table via a specific key, so the ordering isn't a concern.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if you needed them to be returned in the same order they were added in? Fortunately PowerShell has an <code>[ordered]</code> instruction  you can place before declaring the hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash = &#091;ordered]@{
  'Key'                 = 'Value'
  'PowerShell'          = 'PowerShell.com'
  'Arcane Code'         = 'arcanecode.com'
  'Pluralsight'         = 'pluralsight.com'
  'GitHub - ArcaneCode' = 'github.com/arcanecode'
}
$hash

Result:
Name                           Value
----                           -----
Key                            Value
PowerShell                     PowerShell.com
Arcane Code                    arcanecode.com
Pluralsight                    pluralsight.com
GitHub - ArcaneCode            github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the results are returned in the exact same order they were added to the hash table. This example also demonstrates you can begin the list of key / value pairs on the next line after the single squiggly bracket <code>{</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Iterating (Looping) Over a Hash Table</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It is possible to loop over the contents of a hash table. But it isn't quite as intuitive as it is with arrays. If you were to use <code>foreach($item in $hash)</code> you'd get an error, because PowerShell isn't sure if  you want to loop over the keys, values, or something else.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead, the hash table has a special method called <code>GetEnumerator</code> which will allow you to iterate over the table, returning one key / value pair each time through the loop.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>foreach($item in $hash.GetEnumerator())
{
  "$($item.Name) has a value of $($item.Value)"
}

Result:
Key has a value of Value
PowerShell has a value of PowerShell.com
Arcane Code has a value of arcanecode.com
Pluralsight has a value of pluralsight.com
GitHub - ArcaneCode has a value of github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This is the way I prefer to iterate over a hash table. Just my personal opinion, but I  think the code is cleaner and easier to read. That said, there is a second method you may like better.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In it you loop over the Key values, then reference the value from the hash table, using the key as the position. Do notice that instead of using the key[] notation, you have to reference the <code>Item</code> method then pass the key into it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>foreach($key in $hash.Keys)
{
  "$key value is $($hash.Item($key))"
}

Result:
Key value is Value
PowerShell value is PowerShell.com
Arcane Code value is arcanecode.com
Pluralsight value is pluralsight.com
GitHub - ArcaneCode value is github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the result is the same either way. Use which ever method makes the most sense for you.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Splatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Right now you are probably asking yourself "Splatting? Hey Arcane, are you trying to confuse us with silly names?"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Fear not, splatting is a real thing. First, let's start with an example. Here, we are going to take the output of <code>GetChildItem</code> and pipe it to a cmdlet called <code>Join-String</code>. If you aren't familiar with it, <code>Join-String</code> will take a list of objects and join them to a single string.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem -Directory D:\ |
  Join-String -Property Name -Separator ', '

Result:
Backups_Temp, CamtasiaWorkspace, Hyper-V, ISOs, Mobile Report Publisher</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With splatting, we create a hash table, Each key is the name of a parameter that needs to be passed in, and the value is what we want to use for that parameter.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$splat = @{Property = 'Name'
           Separator = ', '
          }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here you can see the <code>Property</code> and <code>Separator</code> parameter names were passed in as keys, and the values are what we want to pass in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we can call our cmdlet, passing in the name of our hash table. Only, and this is <strong>important</strong>, instead of a <code>$</code> we use an <code>@</code> at the front of the name of our hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem -Directory D:\ | Join-String @splat

Result:
Backups_Temp, CamtasiaWorkspace, Hyper-V, ISOs, Mobile Report Publisher</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Whenever PowerShell sees a @ in front of a name that corresponds to a hash table, it understand you are using a splat and expands each key / value pair into parameters. As you can see, it shortens the call to <code>Join-String</code> significantly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if we want to change the value of one of our parameters? That's easy, we just assign a new value. The rest of the hash table remains the same.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$splat.Separator = ' - '
Get-ChildItem -Directory D:\ | Join-String @splat

Result:
"Backups_Temp" - "CamtasiaWorkspace" - "Hyper-V" - "ISOs" - "Mobile Report Publisher"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>All of the parameters don't have to be included in the splat. For example, <code>Join-String</code> has a switch that, when included, will wrap each item in single quotes.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$splat = @{Property = 'Name'
           Separator = ', '
          }

Get-ChildItem -Directory D:\ |
  Join-String @splat -SingleQuote

Result:
'Backups_Temp', 'CamtasiaWorkspace', 'Hyper-V', 'ISOs', 'Mobile Report Publisher'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here I used a switch, but it could be another parameter with a value added after the splat.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if you wanted to include the switch in the hash table though? Switches don't have a value that is passed in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That turns out to be a simple answer, just include the switch as a key, and for the value use either <code>$True</code> or <code>$False</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$splat = @{Property = 'Name'
           Separator = ', '
           SingleQuote = $True
          }
Get-ChildItem -Directory D:\ | Join-String @splat

Result:
'Backups_Temp', 'CamtasiaWorkspace', 'Hyper-V', 'ISOs', 'Mobile Report Publisher'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You could also include the switch in the splat, but set the value to <code>$False </code>if you didn't want to use single quoted every time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While this example only had a few parameters, I've worked with some cmdlets that had a dozen or more parameters that were required to pass in. SQL Server's cmdlets come to mind.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I often had scripts that had a dozen parameters, but the only one that changed with each call was the actual SQL command I was sending to the server. Using a splat let me reduce the amount of code significantly.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we saw a lot of fun things you can do with hash tables. A few were creating, updating, adding and removing values. We also covered iterating over a hash table, and even the very useful concept of splatting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now you can use these features in your own scripts where a hash table comes into play.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun with PowerShell Hash Tables]]></excerpt:encoded>
  <wp:post_id>3737</wp:post_id>
  <wp:post_date>2021-08-02 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-02 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:31:28</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:31:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-hash-tables</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hash-table"><![CDATA[Hash Table]]></category>
  <category domain="post_tag" nicename="hashtables"><![CDATA[Hashtables]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="splatting"><![CDATA[Splatting]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3786]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[61415106203]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1627916426]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1422210692577382404";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_269865531611033";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166817</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] To add a list of properties to our object, we need to use a hash table. I define the hash table with three properties, Schema, Table, and Comment, and assign the parameter variables we passed in for their respective values. And yes, I do have a post on hash tables if you wish to know more about them, Fun With PowerShell Hash Tables. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.848899;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826824.12461;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165230</wp:comment_id>
    <wp:comment_author><![CDATA[Fun with Hash Tables in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/08/04/fun-with-hash-tables-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-08-04 06:10:10</wp:comment_date>
    <wp:comment_date_gmt>2021-08-04 12:10:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues a series on Powershell data structures: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628079010.725964;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628082899.633155;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-hash-tables</title>
  <link>http://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/fun-with-powershell-hash-tables/</link>
  <pubDate>Sat, 10 Jul 2021 00:57:39 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-hash-tables.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3786</wp:post_id>
  <wp:post_date>2021-07-09 18:57:39</wp:post_date>
  <wp:post_date_gmt>2021-07-10 00:57:39</wp:post_date_gmt>
  <wp:post_modified>2021-07-09 18:57:39</wp:post_modified>
  <wp:post_modified_gmt>2021-07-10 00:57:39</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-hash-tables</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3737</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-hash-tables.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Logic Branching</title>
  <link>http://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/</link>
  <pubDate>Mon, 09 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3788</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we'll see how some of PowerShell's logic branching works. <em>Logic branching</em> is where you execute certain lines of code only when a condition is true. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In either environment, you can run your entire script by pressing F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Logic Branching - if</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>No, I don't mean "if" we want to do logic branching. <code>if</code> is a keyword in PowerShell. With it, you can pass in a condition, then execute code based on the value of the condition. This example will make it a bit more clear.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 2
if ($var -eq 1)
{
  Clear-Host
  'If branch'
}
else
{
  Clear-Host
  'else branch'
}

Result:
else branch</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Beside the <code>if</code> keyword are a set of parenthesis <code>( )</code>. In it, you create some kind of expression, but, and this is important, the result of the equation must be either <code>True</code> or <code>False</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example, I created a variable <code>$var</code> and set the value to <code>2</code>. Then, inside the parenthesis I used <code>$var - eq 1</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Following this I have a set of squiggly braces <code>{ }</code> with code inside it. In PowerShell, this is known as a <em>script block</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If my condition is true, it will execute the first script block. But what if you want to do something if it evaluates to false? That's where the next keyword comes in, <code>else</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Immediately after the script block associated with the <code>if</code>, you add the <code>else</code> keyword, followed by a second script block to be executed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the example above, the condition will evaluate to false, so the code in the else script block will run, displaying the result of "<code>else branch</code>".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PowerShell also supports another keyword, <code>elseif</code>. I almost hesitate to provide a demo, because most developers say if you need to fall into an <code>elseif</code>, you should then change your code to use another branching method, which we'll cover next. However for completeness let's see an example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 2
if ($var -eq 1)
{
  Clear-Host
  'If branch'
}
elseif ($var -eq 33)
{
  Clear-Host
  'elseif branch'
}
else
{
  Clear-Host
  'else branch'
}

Result:
else branch</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As before, we start with an <code>if ($var -eq 1)</code>, but following that is our <code>elseif</code>. It will then check the condition in the <code>elseif</code>, <code>($var -eq 33)</code>. If it doesn't find a match for it, it flows to the next section, the else.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Obviously if it finds a match, it executes the script block associated with the <code>elseif</code>.  Once done it skips over any following <code>elseif</code> or <code>else</code> statements and goes on to the following our entire <code>if</code> construct.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A few things, first you can have <code>elseif</code> statements without an <code>else</code>. However it's generally a good idea to have a default code handler should you not execute any of the other <code>if</code> / <code>elseif</code> statements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, you can have as many <code>elseif</code> statements as you want. But as the old saying goes, just because you can do something, doesn't mean you should. Most PowerShell developers (myself included) say if you have to resort to an <code>elseif</code>, you should really be using a <code>switch</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Speaking of the <code>switch</code>....</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>More Fun with Logic Branching - switch</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In addition to the <code>if</code> statement, there is another way to branch your code, the <code>switch</code> statement.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 42
switch  ($var)
{
  41 {'Forty One'}
  42 {'Forty Two'}
  43 {'Forty Three'}
  default {'default'}
}

Result:
Forty Two
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With the switch statement, you pass in a value. Unlike the <code>if</code>, the value does not need to evaluate to <code>True</code> or <code>False</code>, it can be any value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It will then execute the script block that follows, evaluating each value in the list. If it finds a match, it will execute the code in the script block that follows. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the example above, it finds a match on 42, and runs the code in the script block which prints out the text '<code>Forty Two</code>'.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One issue you may encounter is multiple matches.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 42
switch  ($var)
{
  41   {'Forty One'}
  42   {'Forty Two'}
  '42' {'Forty Two'}
  43   {'Forty Three'}
  default {'default"}
}

Result:
Forty Two
Forty Two</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here, it went down the list and found the first match of integer <code>42</code>. It executed the script block, and continued down the list.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It next found the string of <code>'42'</code>. It converted the string to the same datatype as what was passed in, an integer <code>42</code>, found a match, and executed that script block.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how to stop execution after the first match? That's where <code>break</code> comes in. When PowerShell finds <code>break</code> it will stop code  execution and exit to the next line after the <code>switch</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 42
switch  ($var)
{
  41   {'Forty One'; break}
  42   {'Forty Two'; break}
  '42' {'Forty Two'; break}
  43   {'Forty Three'; break}
  default {'default'; break}
}

'Exit to this point'

Result:
Forty Two
Exit to this point</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see from the results, the <code>switch</code> found the first match at the int <code>42</code>. The break statement said "skip the rest and go to the next line after", which prints out <code>Exit to this point</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This brings up the subject of type coercion. This is the converting of one data type before comparing to another.  In PowerShell, anytime it compares values of two different datatypes, it converts the datatype on the <em>right</em> to match the datatype on the <em>left</em>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, if you had an equation <code>if ( 33 -eq '33')</code> it will convert the string <code>'33'</code>, on the right side of the <code>-eq</code>, to the datatype on the left side of the <code>-eq</code>, an integer <code>42</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With the <code>switch</code> statement, the <em>left</em> value is the one being passed in, in this case the variable <code>$var</code>. The <em>right</em> side are the values switch is looking at, here <code>41, 42, 43</code>. This is something to keep in mind whenever you are writing your code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example, it won't make a difference.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = '42'
switch  ($var)
{
  41 {'Forty One'}
  42 {'Forty Two'}
  43 {'Forty Three'}
  default {'default'}
}

Result:
Forty Two</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The code went down the list, converting each value to a string. It took the int, <code>42</code> and converted it to a string. It then found a match with the original string of <code>42</code> in the <code>$var</code> variable and printed out the '<code>Forty Two</code>' as found in the script block.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's take a slightly different example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = '042'
switch  ($var)
{
  41 {'Forty One'}
  42 {'Forty Two'}
  43 {'Forty Three'}
  default {'default'}
}

Result:
default</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case it compared each value, but the string <code>042</code> doesn't match the converted int of <code>'42'</code> so it didn't match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what's with the output of <code>default</code>? If the <code>switch</code> statement doesn't find a match, it will execute in the script block associated with <code>default</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>default</code> is optional, if you omit it and no match is found and the <code>switch</code> simply exits and continues to the next line after the switch.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a final point, I want to mention you don't have to contain everything in the switch's script blocks to a single line. This is perfectly valid code.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 42
switch  ($var)
{
  41   {
         'Forty One'
         break
       }
  42   {
         'Forty Two'
         break
       }
  '42' {
         'Forty Two'
         break
       }
  43   {
         'Forty Three'
         break
       }
  default {
            'default'
            break
          }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>While this example is a bit harder to read, you will encounter situations where trying to condense your script block to a single line will be difficult so don't hesitate to use multiple lines if it improves readability.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conslusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This post focused on the logic branching mechanisms built into PowerShell, <code>if</code> and <code>switch</code>. Hopefully this will give you a better understanding of your options for handling conditional code execution in PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun With PowerShell Logic Branching - if and switch]]></excerpt:encoded>
  <wp:post_id>3788</wp:post_id>
  <wp:post_date>2021-08-09 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-09 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:29:26</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:29:26</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-logic-branching</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="conditional-code-execution"><![CDATA[Conditional Code Execution]]></category>
  <category domain="post_tag" nicename="if"><![CDATA[if]]></category>
  <category domain="post_tag" nicename="logic-branching"><![CDATA[Logic Branching]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="switch"><![CDATA[switch]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3843]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[61669509062]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1628521226]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1424747406764265473";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_274402381157348";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165448</wp:comment_id>
    <wp:comment_author><![CDATA[Ed Eaglehouse]]></wp:comment_author>
    <wp:comment_author_email>eeaglehouse@buckeyemountain.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.buckeyemountain.com</wp:comment_author_url>
    <wp:comment_author_IP>74.219.116.250</wp:comment_author_IP>
    <wp:comment_date>2021-08-24 07:45:03</wp:comment_date>
    <wp:comment_date_gmt>2021-08-24 13:45:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["As developers we have to use our own judgement and pick the right construct for a particular situation." I agree. My point is this: there are usually many _right_ constructs but some offer better advantages than others, even if "better" simply means cleaner, more understandable code. Depending on the number of cases, even your switch statement on state name may be better served using a list or dictionary to provide a substitution. There is seldom a single "right" way to do something but you can choose what will be most advantageous.
I understand you're posting your blog to help the development community. I share your desire to help others. I've run into only a small number of authors who are blogging for financial gain; I think most people sincerely just want to help. Regardless of their reasons, I feel it is important to communicate clear ideas, so misspellings and poor grammar get in the way. I'll be the first to admit I'm guilty of missing mistakes in my own messages.
I'm not the best at responding quickly but I'll put my money where my mouth is and offer to proofread your posts, if you'd like. Nobody's perfect and everyone could use an editor. By the way, I hate PowerShell, so I'm particularly challenged by its unconventional syntax and is also why I'm so picky about the code.
Lastly, my intention was not to be condescending; my goal was to point out alternatives. I personally thank you for sharing your knowledge and insight. It helps us all.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>165394</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629812704.939429;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629816818.998031;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167034</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:16</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] If no match is found, it runs the code by the default value. For more in the switch statement, see my post Fun With PowerShell Logic Branching. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.722392;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641216.786389;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165394</wp:comment_id>
    <wp:comment_author><![CDATA[arcanecode]]></wp:comment_author>
    <wp:comment_author_email>arcanecode@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://arcanecode.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>108.221.34.116</wp:comment_author_IP>
    <wp:comment_date>2021-08-20 19:07:35</wp:comment_date>
    <wp:comment_date_gmt>2021-08-21 01:07:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[For a complex situation as you describe, I would completely agree the if/elseif is the better fit.

Let's take a different example though, where you have a script that reads data from a CSV file and inserts it into a database. There could be a set of business rules that need to be applied that the switch is the better fit for. Perhaps our CSV file has a column for the state name, and the database only wants the abbreviated form of the state. Here a switch makes far more sense.

As developers we have to use our own judgement and pick the right construct for a particular situation. General rules are just that, general, and should absolutely be broken if it makes sense as it did in your example.

As to your suggestion to get a proofreader, are you volunteering?

I provide these posts for free to the community and receive no direct compensation for them. As such, paying an editor does not make good financial sense for me. I've had people volunteer in the past, but after a few posts they fade away.

Additionally, I use a conversational tone for these posts as if the reader and I were sitting down having a one-on-one discussion. The overwhelming majority of people aren't going to notice a few grammatical slips here and there, instead focusing on the overall content. These are free blog posts, not a book that you've paid money for. I am sorry if they bother you, but you'll have to decide if the content is worth putting up with them or if you'll look elsewhere. Either way I appreciate the feedback.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>comment</wp:comment_type>
    <wp:comment_parent>165363</wp:comment_parent>
    <wp:comment_user_id>344266</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[62098559206]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1629508055]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1629508055]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1629508055.6201;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165735</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With the PowerShell Switch Parameter | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.149</wp:comment_author_IP>
    <wp:comment_date>2021-09-20 09:00:09</wp:comment_date>
    <wp:comment_date_gmt>2021-09-20 15:00:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] But then it occurred to me, not everyone may know what a switch parameter is. And to be clear, I&#8217;m not talking about the switch statement. I covered that in my post Fun With PowerShell Logic and Branching. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632150009.513843;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632153979.6842;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165286</wp:comment_id>
    <wp:comment_author><![CDATA[Logic Branching in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/08/10/logic-branching-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-08-10 06:10:29</wp:comment_date>
    <wp:comment_date_gmt>2021-08-10 12:10:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues to have fun with Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628597429.354202;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628602614.57428;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166229</wp:comment_id>
    <wp:comment_author><![CDATA[Fun with PowerShell Enums | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.84.113</wp:comment_author_IP>
    <wp:comment_date>2021-11-15 10:00:35</wp:comment_date>
    <wp:comment_date_gmt>2021-11-15 16:00:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Returning False makes it easy to use an if statement and raise an error if the user tries to use an invalid value. For more on the if statement, see my post Fun with PowerShell Logic Branching. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636992036.005477;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636995991.540097;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165363</wp:comment_id>
    <wp:comment_author><![CDATA[Ed Eaglehouse]]></wp:comment_author>
    <wp:comment_author_email>eeaglehouse@buckeyemountain.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.buckeyemountain.com</wp:comment_author_url>
    <wp:comment_author_IP>74.219.116.250</wp:comment_author_IP>
    <wp:comment_date>2021-08-18 06:13:39</wp:comment_date>
    <wp:comment_date_gmt>2021-08-18 12:13:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If "most developers say if you need to fall into an elseif, you should then change your code to use another branching method," then most developers have never worked with complicated code. if-elseif will allow you to prioritize unrelated (or loosely related) conditions where switch will not. For example:
if (emergencyAlert -ne 0) { throwRedFlagException(); }
elseif (notificationCount -gt 0) { showNotifications(); }
else { displayMessage('Nothing to report'); }
It prioritizes the emergencyAlert condition. Only when that condition fails will it process the rest of the conditions in the if-elseif-else block. You can't do that with a single switch block.
And a suggestion: get someone to proofread your posts. Grammar and spelling errors provide a jarring experience and distract from your message.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629293006.818301;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[62098524114]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1629507948]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1629507948]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1629507948.074629;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629288821.540749;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun With PowerShell Code Formatting</title>
  <link>http://arcanecode.com/2021/08/16/fun-with-powershell-code-formatting/</link>
  <pubDate>Mon, 16 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3818</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we'll take a look at some of PowerShell's rules around <em>code formatting</em>. Code formatting is how you can layout your code statements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In either environment, you can run your entire script by pressing F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Code Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Unlike some languages, such as Python, PowerShell is extremely flexible when it comes to how you format your code. There are, in fact, very few rules around it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's take this first example. When I'm developing a script I tend to do so in steps. I write short pieces at a time, then I use the method of highlighting those lines of code and running using F8/F5 (depending on if I'm in VSCode or the IDE).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's one downside, if you don't have any lines of code highlighted pressing F5 will run your entire script (in either VSCode or the IDE).  I have to admit, even though I've been using VSCode for a few years now old habits die hard and I still press F5 sometimes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To prevent my entire script from running I add the following line at the top of my scripts. Once it is complete can remove it or comment it out.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 ) { exit }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here, 1 will always equal 1, so it will run the code in the script block. This is the <code>exit</code> command, which will cause a script to exit, or in other words stop running.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The real point of this example though isn't the <code>exit</code> command, but the formatting of the <code>if</code> statement. As you can see, since the script block was so short, I was able to put it all on a single line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But I didn't have to. I could have placed it on multiple lines.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 )
  { exit }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example, I placed my single line script block on the next line. Whenever I have a short script block like this, I usually indent two spaces, just because I think it is more readable. But that's my personal preference. I could have placed it all the way on the left.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 )
{ exit }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>I could also have spread it out over multiple lines, as I did in the previous section, even though the code (the <code>exit</code> statement) was still only a single line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 )
{
  exit
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Many people have a preference for putting the opening squiggly brace at the end of the line with the <code>if</code> statement, and PowerShell supports that as well.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 ) {
  exit
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>I tend to prefer the former method as it makes lining up your opening and closing squiggly braces much easier, but fortunately PowerShell supports what ever method you wish to use to format your code.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>More Fun with Code Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Next, I'd like I to mention two small things that fall into the code formatting realm.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, it is possible to compact multiple lines of code into a single line in PowerShell. All you have to do is use a semicolon <code>;</code> to separate each one.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$a = 'Hi'; $b = 'Mom'; "$a $b"

Result:
Hi Mom</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The second thing I'll mention is <em>comments</em>. Comments begin with a # (pound sign, or as some call it a hash tag).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># This is a comment</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Comments can go after a section of code.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 2   # Assign 2 to the variable $var</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>PowerShell also supports multi-line comments. You start and end them with <code>&lt;#</code> and <code>#&gt;</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&lt;#
   This is a multi line comment.
   You can also put blank lines in here.

   See, easy.
#&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The opening and closing &lt;# #&gt; don't have to be at the beginning of the line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&lt;#--------------------------------------------
  You don't have to indent either.
--------------------------------------------#&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Documenting Your Code Formatting Standards</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you work in an organization, even one with just two of you doing PowerShell development, it's incredibly important to document your coding standards. This will ensure the code produced by all developers in your organization has a consistent look and feel.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what types of things should go into the document? Well how about something as simple as indenting your code. When you indent, for example as part of an if statement, should it be two spaces? Four? More? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And should it be spaces, or should you use the TAB character? Personally I hate the TAB character, leads to formatting issues when going between platforms. Remember, PowerShell runs on Windows, macOS and Linux. But as I like to say "hey you do you".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How about the opening squiggly brace of a script block. Should that be at the end of (for example) your if statement, or should it go on the next line?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How about comments? Let's say you decide each script (PS1 file) should have a header. What should go in it? A copyright notice? The author name? A description of the script? What order should it be in?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is one rule that is almost universally accepted, never use the short version of names for cmdlets, always spell them out. For example, <code>gci</code> is short for <code>Get-ChildItem</code>. When you are in the terminal just looking around, it's perfectly valid to use <code>gci</code>, but in a script always spell out the full <code>Get-ChildItem</code> cmdlet name.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These are just a few ideas to get the ball rolling. You should keep your standards document as brief as possible, but cover as many things as necessary to create a consistent look and feel when coding new PowerShell scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are hundreds of good books and blog sites that discuss and have examples of coding standards. In the end go with what works best for you, but the important part, <em>stick with it</em>!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Make it a group decision as much as possible. Your entire coding team should have input into the standards. Even more important, when a new member comes into the team before they write the first line of code they should be introduced to your coding standards.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I would also avoid using something like a Word document to store the standards. Instead, put them online in a place that is easy to search and index. If your team has it's own internal Wiki, that's a great place. Or, author them in Markdown format and store them in a GitHub repository. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wherever you put them, accessibility is key. Standards should be easy to reference, and to find the item you need.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This post covered the flexibility of code formatting in PowerShell, as well as touched on a few items such as commenting. More importantly, it touched on the importance of documenting and standardizing your code formatting rules.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With this info I hope you jump right on creating your own set of coding standards!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun With PowerShell Code Formatting]]></excerpt:encoded>
  <wp:post_id>3818</wp:post_id>
  <wp:post_date>2021-08-16 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-16 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:30:55</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:30:55</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-code-formatting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="code-formatting"><![CDATA[Code Formatting]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3859]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[61929609204]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1629126010]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1427284054039269384";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_279061967358056";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>fun-with-powershell-logic-branching</title>
  <link>http://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/fun-with-powershell-logic-branching/</link>
  <pubDate>Mon, 12 Jul 2021 21:57:59 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-logic-branching.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3842</wp:post_id>
  <wp:post_date>2021-07-12 15:57:59</wp:post_date>
  <wp:post_date_gmt>2021-07-12 21:57:59</wp:post_date_gmt>
  <wp:post_modified>2021-07-12 15:57:59</wp:post_modified>
  <wp:post_modified_gmt>2021-07-12 21:57:59</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-logic-branching</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3788</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-logic-branching.png</wp:attachment_url>
</item>
<item>
  <title>fun-with-powershell-logic-branching</title>
  <link>http://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/fun-with-powershell-logic-branching-2/</link>
  <pubDate>Mon, 12 Jul 2021 22:00:34 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-logic-branching-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3843</wp:post_id>
  <wp:post_date>2021-07-12 16:00:34</wp:post_date>
  <wp:post_date_gmt>2021-07-12 22:00:34</wp:post_date_gmt>
  <wp:post_modified>2021-07-12 16:00:34</wp:post_modified>
  <wp:post_modified_gmt>2021-07-12 22:00:34</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-logic-branching-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3788</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-logic-branching-1.png</wp:attachment_url>
</item>
<item>
  <title>fun-with-powershell-code-formatting</title>
  <link>http://arcanecode.com/2021/08/16/fun-with-powershell-code-formatting/fun-with-powershell-code-formatting/</link>
  <pubDate>Mon, 12 Jul 2021 22:46:19 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-code-formatting.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3858</wp:post_id>
  <wp:post_date>2021-07-12 16:46:19</wp:post_date>
  <wp:post_date_gmt>2021-07-12 22:46:19</wp:post_date_gmt>
  <wp:post_modified>2021-07-12 16:46:19</wp:post_modified>
  <wp:post_modified_gmt>2021-07-12 22:46:19</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-code-formatting</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3818</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-code-formatting.png</wp:attachment_url>
</item>
<item>
  <title>fun-with-powershell-code-formatting</title>
  <link>http://arcanecode.com/2021/08/16/fun-with-powershell-code-formatting/fun-with-powershell-code-formatting-2/</link>
  <pubDate>Mon, 12 Jul 2021 22:47:24 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-code-formatting-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3859</wp:post_id>
  <wp:post_date>2021-07-12 16:47:24</wp:post_date>
  <wp:post_date_gmt>2021-07-12 22:47:24</wp:post_date_gmt>
  <wp:post_modified>2021-07-12 16:47:24</wp:post_modified>
  <wp:post_modified_gmt>2021-07-12 22:47:24</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-code-formatting-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3818</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-code-formatting-1.png</wp:attachment_url>
</item>
<item>
  <title>Fun with PowerShell Loops</title>
  <link>http://arcanecode.com/2021/08/23/fun-with-powershell-loops/</link>
  <pubDate>Mon, 23 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3861</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Continuing my series on PowerShell basics, in this installment we'll talk bout looping in PowerShell. Looping is a mechanism for repeating a set of instructions multiple times, ending once a condition is met. Looping is also known as <em>iterating</em>, as in "iterating over an array".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Loops continue until one of two things happen. In one type of loop, the loop continues until a certain condition is true. In the second type, the loop will iterate over a collection (also called an array) of objects until the entire collection has been gone through.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-f3429b03-3f94-499d-836a-0dcf85afe337">For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-b0b31076-f27b-48db-889d-e4e479cb087e">To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>While</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>while</code> loop continues as long as a condition is true. Let's take a look at an example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
while ($i -le 5)
{
  "`$i = $i"
  $i = $i + 1
}

Result:
$i = 1
$i = 2
$i = 3
$i = 4
$i = 5</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In a while loop, you start with the keyword <code>while</code>, then pass in a condition. In this case, it will keep looping as long as <code>$i</code> is less than or equal to 5. Once <code>$i</code> is greater than 5, it will exit the loop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Inside the loop we print out the value of <code>$i</code>, then increment the value of <code>$i</code> by 1.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what happens if <code>$i</code> had been set to the value of 6, as in:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

$i = 6
while ($i -le 5)
{
  "`$i = $i"
  $i = $i + 1
}

Result:
(Nothing is displayed)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case, the <code>while</code> keyword checked the value at the start of the loop. Since <code>$i</code> was already greater than 5, the loop never executed. So when using a <code>while</code> loop, be sure to understand there may be conditions under which the <code>while</code> loop will never execute.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Fun with Unary Operators</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before we see the next type of loop, I just want to mention <em>unary operators</em>. In the previous section you saw <code>$i = $i + 1</code>. Obviously this increased the value of <code>$i</code> by one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is an alternative syntax, the unary operator. With the unary operator, you use <code>++</code> either before or after the variable, as in <code>$i++</code> or <code>++$i</code>, to increment it. You can also use <code>--</code> to decrement the value by one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what is the difference between <code>$i++</code> and <code>++$i</code>? It has to do with when the value is incremented. Let's look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
"`$i is $(($i++))"
"`$i is now $i"

Result:
$i is 1
$i is now 2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In  this case we start by assigning the value of 1 to <code>$i</code>. We then have a string,  <code>"`$i is $(($i++))"</code>. In the results, it prints out <code>$i = 1</code>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this case, when <code>++</code> follows a variable the value is returned, <em>then</em> the variable is incremented. As PowerShell evaluates the string, it replaces <code>$i</code> with the value of 1, prints out <code>$i is 1</code>, and <em>then </em>it increments the value <code>$i</code> to 2.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the final statement it displays the result of the incremented value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if the <code>++</code> occurs before the variable?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
"`$i is $((++$i))"
"`$i is now $i"

Result:
$i is 2
$i is now 2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With <code>++</code> before the variable, the value in <code>$i</code> is incremented <em>first</em>, then the result is returned. So when PowerShell evaluated <code>$((++$i))</code> it incremented the value of <code>$i</code> by one, now making it 2, <em>then</em> returned it to the string.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We took this detour into unary operators because it's very common to use an expression like <code>$i++</code> within a loop to increment the value, as you'll see in the remaining examples.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Do While</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With the <code>while</code> loop, you saw that it was possible that it might not execute, if the while condition was already true. What if, though, you always wanted the loop to execute at least once?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's where <code>do while</code> comes into play.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
do
{
  "`$i = $i"
  $i++
} while($i -le 5)

Result:
$i = 1
$i = 2
$i = 3
$i = 4
$i = 5</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This is a similar result to what we experienced with while. But, what if $i was already greater than 5, as in the next example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 33
do
{
  "`$i = $i"
  $i++
} while($i -le 5)

Result:
$i = 33</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Because the while check didn't occur  until the very <em>end </em>of the loop, we are guaranteed that it will execute the code within our <code>do</code>'s script block at least once, and hence it printed <code>$i = 33</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Do Until</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As an alternative to <code>do while</code>, there is <code>do until</code>. With <code>do while</code> it continues to loop as long as a condition <em>is</em> true.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Contrast this with do until, which keeps looping as long as the condition is <em>not</em> true.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
do
{
  "`$i = $i"
  $i++
} until($i -gt 5)

Result:
$i = 1
$i = 2
$i = 3
$i = 4
$i = 5</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case, once <code>$i</code> is greater than 5, the loop exits. There's not much difference between <code>do while</code> and <code>do until</code>. It's mostly a matter of how you like to think about your code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Does it make more sense, or will it increase code readability, to write your  code so that it keeps looping <em>while</em> a condition is true, or until it <em>becomes </em>true.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>For</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another loop you can have fun with is the <code>for</code> loop. The <code>for</code> loop is ideal when you want to iterate over code a set number of times.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"ampFitText":true} -->
<amp-fit-text layout="fixed-height" min-font-size="6" max-font-size="72" height="80"><pre class="wp-block-code"><code>for ($f = 0; $f -le 5; $f++)
{
  "`$f = $f"
}

Result:
$f = 0
$f = 1
$f = 2
$f = 3
$f = 4
$f = 5</code></pre></amp-fit-text>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>After the <code>for</code>, you pass in three expressions, separated by semicolons <code>;</code> . The first expression you pass in sets the starting value for the variable we'll increment each time through the loop. In this case, <code>$f = 0</code> will (obviously) set the variable <code>$f to 0</code> (zero). <code>$f</code> will be come the value we'll increment each time through the loop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second expression is just like what you would use on a <code>while</code>/<code>do while</code> loop. As long as this condition is true it will keep looping. In this case, the expression <code>$f -le 5</code> will keep looping as long as <code>$f</code> is less than or equal to 5.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally we have an expression that we want to execute at the end of the loop. Here, we'll use a unary operator to increase the value of <code>$f</code> by 1. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So let's express this in human terms.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Set the value of <code>$f</code> to zero.</li><li>Is <code>$f</code> less than or equal to 5? If yes, go into the script block. If no, exit the loop.</li><li>Now execute all the code in the script block.</li><li>At the end of the script block, add 1 to <code>$f</code>.</li><li>Go back to step 2.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>As you can see, the for is very similar to a while loop. If $f is already over 5 (in this example) the loop will not execute at all. Like while, it will keep looping as long as our condition is true. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>for</code> is a little more compact than a <code>while</code> loop as you can include the increment option in the for command rather than having to include it in the script block. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>ForEach</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>By far, the foreach loop is the one I use more than any other. The foreach loop allows you to iterate over an array (or a <em>collection</em> of objects, which is really just an array).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With for each you create a place holder variable then pass in the name of the array. Here, take a look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 11,12,13,14,15   # Simple Array
foreach ($item in $array)
{
  "`$item = $item"
}

Result:
$item = 11
$item = 12
$item = 13
$item = 14
$item = 15</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We create an array of numbers and assign them to the variable <code>$array.</code> Then in the <code>foreach</code> loop, we go over the array item by item. As each item is read from the array it is copied into the first variable in the <code>foreach</code> clause, in this case <code>$item</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It then simply executes the code in the script block, when done it grabs the next item from <code>$array</code>, copies it into <code>$item</code>, and repeats the script block.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this case we looped over a simple array of integers, but <code>foreach</code> can also loop over something more complex like a collection of objects. In this next example we'll use the <code>Get-ChildItem</code> cmdlet to get a list of files from the current directory. As it goes over each one it will copy that file object into our <code>$file</code> variable, then we can use it in the script block.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>foreach ($file in Get-ChildItem)
{
  $file.Name
}

Result:
01 - Cmdlets.ps1
02 - Providers.ps1
03 - Variables.ps1
04 - Strings.ps1
05 - Arrays and Hashtables.ps1
06 - Logic Branching and Looping.ps1
07 - Functions.ps1
08 - Classes.ps1
09 - Examples.ps1
ReadMe.md</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The script block is very simple, it just references the Name property of the <code>$file</code> object and displays it on the screen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now many people might have coded this as:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$myFiles = Get-ChildItem
foreach($file in $myFiles)
...</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Which is perfectly valid code. I just wanted to show that if the only reason you needed the <code>$myFiles</code> variable was to hold information to iterate over, and you weren't going to reference it again in your code, you could skip it and just use the cmdlet right in the foreach loop.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Code Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my previous post I dove into the Code Formatting around PowerShell. In all my examples, I used a space between the loop keyword and parenthesis that enclosed the condition. In addition I put the opening squiggly brace on the next line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Neither is necessary, this is perfect valid code:]</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
while($i=1){
  # Do some stuff
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we looked at several ways to iterate over your code. This included several variations on while, as well as for and the useful foreach. Now you have several tools at your disposal when you need to run the same piece of  code multiple times.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun with PowerShell Loops]]></excerpt:encoded>
  <wp:post_id>3861</wp:post_id>
  <wp:post_date>2021-08-23 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-23 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:30:18</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:30:18</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-loops</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="looping"><![CDATA[Looping]]></category>
  <category domain="post_tag" nicename="loops"><![CDATA[Loops]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="unary-operators"><![CDATA[Unary Operators]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3895]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[62186611594]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1629730828]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1429820847351599105";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_283686220228964";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167035</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:18</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] The foreach loop is entered, where we iterate over the collection of FileInfo objects stored in $items. Each time through the loop, the current item is copied into the $item variable. For more info on foreach, see my post Fun With PowerShell Loops. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.915941;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641218.874663;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165454</wp:comment_id>
    <wp:comment_author><![CDATA[Loops in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/08/25/loops-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-08-25 06:10:27</wp:comment_date>
    <wp:comment_date_gmt>2021-08-25 12:10:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain takes us through different structured programming constructs in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629898289.466928;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629893428.000163;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-loops</title>
  <link>http://arcanecode.com/2021/08/23/fun-with-powershell-loops/fun-with-powershell-loops/</link>
  <pubDate>Thu, 15 Jul 2021 21:44:54 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-loops.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3894</wp:post_id>
  <wp:post_date>2021-07-15 15:44:54</wp:post_date>
  <wp:post_date_gmt>2021-07-15 21:44:54</wp:post_date_gmt>
  <wp:post_modified>2021-07-15 15:44:54</wp:post_modified>
  <wp:post_modified_gmt>2021-07-15 21:44:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-loops</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3861</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-loops.png</wp:attachment_url>
</item>
<item>
  <title>fun-with-powershell-loops</title>
  <link>http://arcanecode.com/2021/08/23/fun-with-powershell-loops/fun-with-powershell-loops-2/</link>
  <pubDate>Thu, 15 Jul 2021 21:46:28 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/08/fun-with-powershell-loops.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3895</wp:post_id>
  <wp:post_date>2021-07-15 15:46:28</wp:post_date>
  <wp:post_date_gmt>2021-07-15 21:46:28</wp:post_date_gmt>
  <wp:post_modified>2021-07-15 15:46:28</wp:post_modified>
  <wp:post_modified_gmt>2021-07-15 21:46:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-loops-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3861</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/08/fun-with-powershell-loops.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell String Formatting</title>
  <link>http://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/</link>
  <pubDate>Mon, 19 Jul 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3914</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In last Monday's blog post, <a rel="noreferrer noopener" href="https://arcanecode.com/2021/07/12/fun-with-powershell-strings/" target="_blank">Fun With PowerShell Strings</a>, I covered a lot of the basics around PowerShell Strings. One thing we didn't get into though was some of the special formatting commands you can use with PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Specifically, this can control the output when we embed a numeric value inside a string. Passing in special formatting instructions will make it easy to display values with commas, as currency, or even as hexidecimal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-f3429b03-3f94-499d-836a-0dcf85afe337">For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-b0b31076-f27b-48db-889d-e4e479cb087e">To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>How it Works</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell supports the C# / C / C++ style of string formatting. Let's take a look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&#091;string]::Format("There are {0} items.", $items)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Inside our string we have <code>{0}</code>. This is a placeholder, when a C style language sees this it will look for the first variable after the string and put that into placeholder <code>0</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PowerShell of course always wants to make life easier on us, so we can use this much simpler format.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There are {0} items." -f $items</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In PowerShell we have our string, including the placeholder. After it we have a -f to let PowerShell know the following items will be copied into the placeholders. In this case, the value in <code>$items</code> will be inserted into the <code>{0}</code> placeholder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's not necessary to use a variable, we could have just hardcoded a value.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There are {0} items." -f 33</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>What if we had multiple items? Well we'd just use multiple placeholders (all on one line).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There are {0} items in the location {1}." -f $items, $loc</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example, <code>$items </code>will go into the <code>{0}</code> and the value in <code>$loc</code> will get inserted into placeholder <code>{1}</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can even repeat a placeholder.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There's {0} items in {1}. {0} is a lot of items!" -f $items, $loc</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now, if you've read my previous post you're probably thinking "wait, wouldn't string interpolation make all these unnecessary?"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And in these examples you are correct, with string interpolation you could have used the much easier to read syntax.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There are $items items."</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So why use the placeholder style? Well it turns out the placeholder syntax includes some extra syntax which will allow you to format values passed in. Let's take a look at some examples.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Number</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the placeholder, after the placeholder position ( <code>0</code> in these examples ) you can put a colon <code>:</code> , then a letter that indicates the formatting style. Then another number which indicates the decimal places to retain.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"N0 {0:N0} formatted" -f 12345678.119    

Result:
N0 12,345,678 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example, after the colon we have the letter <code>N</code>. This lets PowerShell know we want this to be formatted as a numeric value, and to include commas to separate the numbers. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example after the letter <code>N</code> we have another number, a <code>0</code>. This indicates how many decimal places to retain in the output.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's another example where we'll include two decimal places.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"N2 {0:N2} formatted" -f 12345678.119

Result:
N2 12,345,678.12 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, it follows the normal rules for rounding up the output. The next to the last last number, <code>1</code>, was rounded up to <code>2</code> since the number after it was a <code>9</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Often we want to display numbers as right aligned, so the last digit will line up in our output. This means we want to display a number of spaces in front of it. PowerShell includes a feature for this too.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"N0 {0,8:N0} formatted" -f 123.119

Result:
N0      123 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>After the place holder we have a comma then a number ( here <code>0,8</code> ). This tells PowerShell we want the value for this placeholder to be eight characters in width.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the output, PowerShell saw the final value, <code>123</code>, was three characters wide. So it subtracted three from eight and put five spaces in front of the <code>123</code> so the entire output became eight characters in width.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A common question is "what if the output is longer than the width passed in?". For example, you used <code>0,3</code> but your input to the placeholder was a value of <code>123456</code>? In that case PowerShell will still format it as <code>123,456</code> but will not add any spaces before the number. This could result in some misaligned output in your display, but at least the accurate value will still be shown.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Currency</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Using the <code>C</code> format instruction, PowerShell can display the results in currency format. It will use the default currency symbol for your computer's language / location. Since I'm in the United States it will use a dollar sign.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"C0 {0:C0} formatted" -f 12345678.1234
"C2 {0:C2} formatted" -f 12345678.1234
"C2 {0,20:C2} formatted" -f 12345678.1234

Result:
C0 $12,345,678 formatted
C2 $12,345,678.12 formatted
C2       $12,345,678.12 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Currency acts very similar to the Number format, the only real difference is the addition of your location's currency symbol in the formatted output.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Percentage</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell also has the ability to display values in a percentage format.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"P0 {0:P0} formatted" -f 0.1234
"P2 {0:P2} formatted" -f 0.1234
"P2 {0,8:P2} formatted" -f 0.1234

Result:
P0 12% formatted
P2 12.34% formatted
P2   12.34% formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Make sure to notice that PowerShell will take the decimal amount and automatically convert the percentage for you. Thus, if you want to display <code>12%</code>, you have to pass in <code>0.12</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Hex</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Next up on the list is Hexadecimal notation. PowerShell supports two methods for doing Hex values. In the first, it will take a standard number (base 10) and convert it to hexadecimal then display it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"X0 0x{0:X0} formatted" -f 1234

Result:
X0 0x4D2 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case we passed in the number 1234. PowerShell converted it to hex then displayed it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if the value were already in hex format though, and we just wanted to display it? In PowerShell, we indicate a number is in hex by placing a <code>0x</code> in front of it. So we just pass in our number with 0x in front to the string.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"X0 0x{0:X0} formatted" -f 0x4D2

Result:
X0 0x4D2 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When PowerShell saw the <code>0x</code> on the front of <code>0x4D2</code>, it knew this value was already in hex format and didn't try to convert it, it simply displayed our value.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Decimal</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The name of the next formatter we'll look at is Decimal. It's a bit misnamed though, because it's really just for formatting integer based numbers. As a matter of fact, if you try use with a non integer value, such as 33.42, it will error out.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's look at the most basic form of Decimal.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"D0 {0:D0} formatted"   -f 123

Result:
D0 123 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Pretty simple, it just displays the value. So you can guess D is the formatter for decimal, but what is <code>D0</code>? The number after the D indicates how many spaces we want to zero pad to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In other words, we want the string to be a certain number of characters long, so the number indicates that length. It will then put zeros to the left to pad it out. Let's look at this example to make it clear.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"D8 {0:D8} formatted"   -f 123

Result:
D8 00000123 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case, the <code>D8</code> indicated we wanted eight characters in decimal formatting. PowerShell converted <code>123</code> to a string that was three characters long, so it put five zero's in front to make the total length eight.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also add the placeholder comma value formatting to make a value a certain width wide. In these two examples, the first will act like a Number format. The second though will let you use leading zeros, but still set the total space.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"D0 {0,9:D0} formatted" -f 123
"D0 {0,9:D6} formatted" -f 123

Result:
D0       123 formatted
D0   0000123 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the first example, it made the output nine characters wide by placing six spaces in front of the <code>123</code>. In the second example, it first made the <code>123</code> six characters by placing <code>000</code> on front, resulting in <code>000123</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It then took the resulting <code>000123</code> and made that nine wide by placing three spaces in front. As you can see, PowerShell is very flexible when formatting this way.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A reminder, as stated earlier Decimal is only for integers. If I were to try using <code>-f 123.1</code> as an input it would error out.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Custom Date Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In addition to the other formats, PowerShell provides the ability to create custom date outputs. You do so using these characters, note they are case sensitive.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>M / MM</td><td>One or Two character month number</td></tr><tr><td>d / dd</td><td>One or two character day of the month number.</td></tr><tr><td>yy / yyyy</td><td>Two or four digit year number.</td></tr><tr><td>h / hh</td><td>One or two digit hour of the day in 12 hour format</td></tr><tr><td>H / HH</td><td>One or two digit hour of the day in 24 hour format</td></tr><tr><td>m / mm</td><td>One or two digit minute of the hour</td></tr><tr><td>s / ss</td><td>One or two digit second of the minute</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>Let's see these used in a series of examples.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"Today is {0:M/d/yy}."                 -f $(Get-Date)
"Today is {0,10:MM/dd/yyyy}."          -f $(Get-Date)
"Today is {0,10:dd/MM/yyyy}."          -f $(Get-Date)
"Today is {0,10:yyyyMMdd}."            -f $(Get-Date)
"Today is {0,10:MM/dd/yyyy hh:mm:ss}." -f $(Get-Date)
"Today is {0,10:MM/dd/yyyy HH:mm:ss}." -f $(Get-Date)

Result:
Today is 7/18/21.
Today is 07/18/2021.
Today is 18/07/2021.
Today is   20210718.
Today is 07/18/2021 04:59:56.
Today is 07/18/2021 16:59:56.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In all of these, I passed in the current date (as I'm writing this) using Get-Date, but any date based variable would have worked.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the output I've arranged the date parts in a variety of common manners. You can use these or create your own custom formats. For example you may wish to use a dash instead of a slash to separate the date parts.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Custom Number Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's say you lived in London, where the pound was  your default currency. But you are part of a multinational company and need to produce output to send to your coworkers in the United States. You don't want to have to change your computer to a US language just to get the $ symbol.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can fix this by using custom formatting. In these examples, when it sees a character such as the $ it will just keep it in the output. When it sees <code>#,</code> (a pound sign followed by a comma) it will know to use commas in the output.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When it sees just a <code>#</code> sign it will put a number there if it has one, otherwise a space, and when it sees <code>0</code> it will put a number from the passed in data, or a zero if there is no number there. These examples will clarify it. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note each one is on it's own line, WordPress is wrapping the -f part to the next line for space reasons. Additionally, in this and other examples I've chosen to add spaces to line up the demos for readability, this isn't a requirement and you can format however you need.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"Custom 0, 25 $ #,##0.0000  = {0,25:$ #,##0.0000} " -f 123456789.012000005
"Custom 0, 25 $ #,##0.0000  = {0,25:$ #,##0.00} "   -f 123456789.012000005
"Custom 0, 25 $ ##0.0000    = {0,25:$ ##0.00} "     -f 123456789.012000005

Result:
Custom 0, 25 $ #,##0.0000  =        $ 123,456,789.0120
Custom 0, 25 $ #,##0.0000  =          $ 123,456,789.01
Custom 0, 25 $ ##0.0000    =            $ 123456789.01</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Using Formatting with Variables</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It's possible to create a formatted value, then assign that to a variable. Let's take a look at this slightly more complex example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$vTday = "{0,8:N0}" -f 134567
$vYest = "{0,8:N0}" -f 23546

$tday = "{0:MM/dd/yyyy}" -f $(Get-Date)
$yest = "{0:MM/dd/yyyy}" -f $((Get-Date).AddDays(-1))

$output = "Visitors to ArcaneCode.com`r`n"
$output += "$tday had $vTday visitors`r`n"
$output += "$yest had $vYest visitors"
$output

Result:
Visitors to ArcaneCode.com
07/18/2021 had  134,567 visitors
07/17/2021 had   23,546 visitors</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The first two lines you've seen a few times by now. I'm simply taking a number, formatting it with commas and making it eight spaces wide.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next line you've seen as well, I take the current date, format to <code>MM/dd/yyyy</code> format and assign to <code>$tday</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>$yest</code> line is slightly more complex, but only because I'm doing some date math. The <code>(Get-Date)</code> will get the current date, but create a date object from it. Essentially I have a date variable type but without a variable name.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because I have a date datatype I can employ a method of the date datatype, <code>AddDays</code>. This will let me add a number of days to the date, or if you pass in a negative value subtract days. Thus <code>AddDays(-1)</code> will give me yesterday's date. I then have to wrap it all in <code>$()</code> so PowerShell will evaluate the entire expression before passing it back to the placeholder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally I'm using the += operand to concatenate several strings together for a nice output. Note the formatted dates, and how the visitors number right aligns nicely.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While string interpolation makes creating output strings easy, knowing how to use placeholders can make creating formatted output even easier, allowing you to create output with numeric values that align neatly, or creating custom date formatting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-ca0181e3-575b-4eed-82bf-28f56b9e726c">The demos in this course came from my Pluralsight course <a rel="noreferrer noopener" href="https://www.pluralsight.com/courses/powershell-developers-quick-start-linux-macos-windows" target="_blank">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.com" target="_blank">https://pluralsight.com</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site. Once there just search for my name, Robert Cain, to see all the courses I have. </p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3914</wp:post_id>
  <wp:post_date>2021-07-19 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-07-19 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-18 19:17:47</wp:post_modified>
  <wp:post_modified_gmt>2021-07-19 01:17:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-string-formatting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="string-formatting"><![CDATA[string formatting]]></category>
  <category domain="post_tag" nicename="strings"><![CDATA[Strings]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[60907659011]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1417137204489596934";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_260384562559130";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1626706814]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165089</wp:comment_id>
    <wp:comment_author><![CDATA[String Formatting in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/07/21/string-formatting-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-07-21 06:05:13</wp:comment_date>
    <wp:comment_date_gmt>2021-07-21 12:05:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues a series on fun with Powershell and strings: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1626869113.892601;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626913887]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626913887.564161;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1626873827.526148;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166375</wp:comment_id>
    <wp:comment_author><![CDATA[More Fun with PowerShell Enums | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.30</wp:comment_author_IP>
    <wp:comment_date>2021-11-29 10:01:01</wp:comment_date>
    <wp:comment_date_gmt>2021-11-29 16:01:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] If you want to learn more about string formatting, I&#8217;ll refer you to my post Fun With PowerShell String Formatting. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638201661.404928;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638205800.5603;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165517</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Basic Functions | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.124</wp:comment_author_IP>
    <wp:comment_date>2021-08-30 09:00:14</wp:comment_date>
    <wp:comment_date_gmt>2021-08-30 15:00:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] We create a return value of the file name, plus the spaces to put at the end. We then use a string formatting command to put the file size at the end. For more on PowerShell&#8217;s string formatting syntax, see my post Fun With PowerShell String Formatting. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630335614.277207;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630340763.954551;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-string-formatting</title>
  <link>http://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/fun-with-powershell-string-formatting/</link>
  <pubDate>Mon, 19 Jul 2021 01:04:23 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-string-formatting.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3961</wp:post_id>
  <wp:post_date>2021-07-18 19:04:23</wp:post_date>
  <wp:post_date_gmt>2021-07-19 01:04:23</wp:post_date_gmt>
  <wp:post_modified>2021-07-18 19:04:23</wp:post_modified>
  <wp:post_modified_gmt>2021-07-19 01:04:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-string-formatting</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3914</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-string-formatting.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Basic Functions</title>
  <link>http://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/</link>
  <pubDate>Mon, 30 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3971</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Like most languages, PowerShell supports the use of functions. Functions are reusable bits of code with a name wrapped around them. This lets you make multiple calls to your function name allowing you code reuse.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PowerShell actually has two types of functions, Basic and Advanced. Basic functions are a lot like the 1974 VW SuperBeetle I owned back in college. No frills but useful, gets you where you are going. Did 0 to 60 mph in under 5 minutes. Most of the time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Advanced functions have a lot more capabilities, and are more akin to a Tesla. Lots of fancy design, can do cool things, and depending on your need might be worth the extra investment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post we will focus on Basic functions, saving Advanced functions for a later post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Basic Functions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To declare a <em>Basic Function</em> you begin with the keyword <code>function</code>.  You then follow it with the name of the function. After that are a set of parenthesis, in which you put in any values you want to pass into the function (if any) that the function can use internally. The values passed in are known as <em>parameters</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  return $one * $two
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This function is simple. You pass in two values, which it then multiplies by each other. The <code>return</code> keyword is used to return the result. So how to use it?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well, first you need to highlight the function and use F8 in VSCode (or F5 in the IDE). This will put the function in memory so it can be used.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To call it, just use the name of the function followed by the values to pass in.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-AValue 33 42

Result:
1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The 33 will go into the <code>$one</code> variable, then 42 will go into the <code>$two</code> variable. Note that when calling the function no commas are needed to separate the values. In addition, unlike other languages they don't have to be placed in parenthsis.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also take a function and assign it to a variable which will then hold the results.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can also skip placing the result into a variable, and place the function call right into the string.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"Returned value is $(Get-AValue 33 42)"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The <code>$()</code> will force PowerShell to evaluate the expression, then string interpolation will replace it with the value before returning the final string. (For more on string interpolation, see my recent article <a href="https://arcanecode.com/2021/07/12/fun-with-powershell-strings/" target="_blank" rel="noreferrer noopener">Fun With PowerShell Strings</a>.)</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Passing Parameters by Name</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell also supports passing in the parameters by <em>name</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$returnValue = Get-AValue -one 11 -two 13
"Returned value is $returnValue"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With this, you use the names of the variables from the function declaration. Instead of a <code>$</code> though, you use a <code>-</code> (dash) to show this is a parameter and not a variable, <code>-one</code> and <code>-two</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The great thing about passing in by name is that the order doesn't matter. You can list the parameters in any order you want.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$returnValue = Get-AValue -two 13 -one 11
"Returned value is $returnValue"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see in this example we listed the second parameter, <code>-two</code>, first. Because we used names, PowerShell knew which parameter to assign which value to.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>No Return</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Strictly speaking, the return keyword is not required. Whenever PowerShell finds a value that isn't otherwise consumed, that is, used by assigning that value to a variable or used in some other way, PowerShell returns that value from the function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  $one * $two
}

$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the result of the <code>$one * $two</code> calculation isn't otherwise used in the function it is returned as you can see in the result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This can lead to some interesting side effects. Look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  $one * $two
  "Hello from Get-AValue"
}

$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 1386 Hello from Get-AValue</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example, there are two things that aren't consumed. First is the calculation results, second is the string <code>Hello from Get-AValue</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how to get around this? Using the return keyword has another use. When PowerShell sees return, it exits the function immediately returning the result, as in this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  if ($one -eq 33)
    { return $one + $two }
  else
    { return $one + $two }

  "Hello from Get-AValue"
}

$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 75</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The function saw the value for <code>$one</code> is 33, so took the first branch in the if statement, adding the two. It then exited the function immediately. The <code>Hello from Get-AValue</code> is never executed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is one problem with this demo. A basic rule of functions is that they should have one, and only one exit point (barring any error handling). Having two <code>return</code> statements violates this rule. It's easy enough to fix though.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  if ($one -eq 33)
    { $retVal = $one + $two }
  else
    { $retVal = $one + $two }

  return $retVal
}

$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 75</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here I assign the result of the equations to the variable <code>$retVal</code> (short for return value). At the end of the function I have a single <code>return</code> statement that returns the value.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Case for Return</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I have met some PowerShell professionals who say you should never use the <code>return</code> statement. I have to respectfully disagree.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, using <code>return</code> speaks of clear intent. I didn't get to a certain spot and my code and just stopped, forgetting to complete the function. Using <code>return</code> clearly says "this is the value I meant to return".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, I have explicit control over my code. Using it I clearly control where my code exits. Typically the <code>return</code> is the last statement in my function, but it's not required as I may want some error handling.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Third, it improves readability. When I read through the code the <code>return</code> statement clearly shows what value I intend to return.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For these reasons I use the return keyword in all my functions. The choice is of course up to you, but I wanted to make the case why I like it. You will see many code samples without the <code>return</code> keyword, so I wanted you to be aware of the difference and why some people use it and others don't.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Using Multiple Functions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It's possible to have multiple functions in the same script, and even have those functions call each other. Let's look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Format-FileOutput($files)
{
  # Find the max length of a file name
  $maxLength = Get-MaxFileNameLength $files

  Write-Host "`r`nHere is the file output`r`n"
  $padding = (' ' * ($maxLength + 1))
  Write-Host "File Name $($padding) Size"
  Write-Host ('-' * ($maxLength + 16))

  foreach($file in $files)
  {
    Format-FileLine $file $maxLength
  }
}

function Get-MaxFileNameLength($files)
{
  $maxLength = 0

  foreach($file in $files)
  {
    if ($file.Name.Length -gt $maxLength)
      { $maxLength = $file.Name.Length }
  }

  return $maxLength
}

function Format-FileLine($file, $maxFileNameLength)
{
  # +1 will ensure there is always at least one space between
  # the file name and the size
  $spaces = ' ' * ($maxFileNameLength - $file.Name.Length + 1)
  $retVal = "$($file.Name)$($spaces){0,15:N0}" -f $file.Length

  return $retVal
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's break this down. The first function is <code>Format-FileOutput</code>. It takes one parameter, <code>$files</code>, which is intended to hold a list of file objects such as one returned by the <code>Get-ChildItem</code> cmdlet.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first thing it does is call another function, <code>Get-MaxFileNameLength</code> and assign the result to a variable. This function will loop over all the file objects passed in and determine the length of the longest file name. This will be used later in formatting the output.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This also highlights another feature of PowerShell, the order you declare functions is not important. In some languages, you cannot declare a function that is called, in this case <code>Get-MaxFileNameLength</code> after a function it's called from, here <code>Format-FileOutput</code>. Any called functions must be listed before the function they are called from.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Again, PowerShell doesn't care, you can declare the functions in any order you wish.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Looking at <code>Get-MaxFileNameLength</code>, it sets a max length of zero, then loops over the list of file objects passed in. Each file object has a <code>Name</code> property, the name of the file. But the <code>Name</code> property  has it's own set of properties, one of which is <code>Length</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is not the length (or size) of the <em>file</em>, but the length of the file <em>name</em>. If the file name were <code>MyScript.ps1</code>, the length would be 12.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As it loops it compares the length of the file name, and if it's greater than the max length already found it replaces it. Finally it returns that value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Returning to <code>Format-FileOutput</code>, it uses some <code>Write-Host</code> statements to create a nice header to display in the output. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that some people say not to put <code>Write-Host</code> statements inside a function, that anything like <code>Write-Host</code> should be done in the main script that calls the function.  Normally I might agree, however this is a simple demo so we'll go with it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After creating a nice header, it then loops over the list of file objects that were passed in, calling the <code>Format-FileLine</code> function. It passes in two parameters, the file object from the passed in array, and the maximum file name length.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The output will be in the format of:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>FileName.ps1       12,345</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We want the file sizes to line up neatly, so we first calculate the number of spaces we need to put between the end of the file name and the start of our file sizes. PowerShell lets you repeat a character by using the syntax <code>char * numberoftimes</code>, such as <code>' ' * 20</code> to get 20 spaces.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here we use the length of the maximum file name, then subtract the length of the current file name, and finally add one extra space at the end.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We create a return value of the file name, plus the spaces to put at the end. We then use a string formatting command to put the file size at the end. For more on PowerShell's string formatting syntax, see my post <a href="https://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/" target="_blank" rel="noreferrer noopener">Fun With PowerShell String Formatting</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This formatted string is returned to the <code>Format-FileOutput</code> function, where it is displayed on the screen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how to use this?  First, highlight all three functions then use F8/F5 to get them into memory. Then, just set your file location in the terminal to a spot you want to list the files in, and call the main function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$myfiles = Get-ChildItem
Format-FileOutput $myfiles

Result:
File Name                                       Size
----------------------------------------------------
01 - Cmdlets.ps1                               3,732
02 - Providers.ps1                             1,819
03 - Variables.ps1                             4,717
04 - Strings.ps1                               7,970
05 - Arrays and Hashtables.ps1                 8,486
06 - Logic Branching and Looping.ps1           4,315
07 - Functions.ps1                             6,907
08 - Classes.ps1                               6,210
09 - Examples.ps1                              3,125
Company.csv                                    9,694
Company.json                                  19,479
ReadMe.md                                      1,115</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see it lists my header, then the list of files. The sizes are neatly right aligned.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can use these same functions with other directories on your drive. I'm going to change my current folder to one that has some ISOs in it. Then I'll run my same functions.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$myfiles = Get-ChildItem
Format-FileOutput $myfiles

Result:
File Name                                         Size
------------------------------------------------------
2018-11-13-raspbian-stretch-full.img     5,297,405,952
2018-11-13-raspbian-stretch-full.zip     1,978,611,497
Camtasia and Snagit MVP Keys.docx               63,229
Camtasia-2018-Key.txt                               71
Keys.txt                                           798
MediaCreationTool21H1.exe                   19,463,448
Office 2016 Professional Plus Keys.txt              77
SQLServer2019-x64-ENU-Dev.iso            1,433,974,784
Win10ProMultiActivationKey.txt                      31
win32diskimager-1.0.0-install.exe           12,567,188
Windows10-20H2.iso                       4,899,078,144
Windows10-21H1.iso                       4,556,128,256
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The longer file names and sizes made the output slightly wider than the original example, but as you see the functions adapted easily to this. All without any changes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This gives me a set of functions I can reuse over and over. And I don't have to reuse them together, I could if I needed to have code that calls just the Get-MaxFileNameLength function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Keep Functions Small and Focused</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This brings up another rule of functions. Keep the function small and focused. Each function should do one thing and return the result. This will make it much easier to reuse your functions in other projects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Get-MaxFileNameLength function in the above demo is a good example. It does one thing, gets the maximum file name length, and returns it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I could call this from my main script, but I could also write a second function similar to Format-FileOutput but perhaps it could include additional information such as the last modified date. The new function could also reference Get-MaxFileNameLength, providing good code reuse.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It also reduces the amount of code you need to write in a new function, as well as reduces what you need to test, assuming Get-MaxFileNameLength has already been tested of course.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Parameter Names versus Variable Names</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I want to call out something you may not have noticed. When we called <code>Format-FileName</code> we passed in:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Format-FileLine $file $maxLength</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The variable <code>$maxLength</code> was used for the second parameter. But look at the declaration for the function:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Format-FileLine($file, $maxFileNameLength)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the function, the second parameter is named <code>$maxFileNameLength</code>. The point in this demo was to show the variable named being passed in does not need to match the variable used in the function declaration. PowerShell can happily take <code>$maxLength</code> and copy its value into <code>$maxFileNameLength</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Good Function Names</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You probably know by now that PowerShell uses the Verb-Noun naming method for its cmdlets. In these demos we could have used any names we wanted for the functions. <code>function Adam()</code>, <code>function John()</code>, or <code>function Robert()</code> are all valid names. Well almost.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is generally a best practice to use the Verb-Noun naming convention when creating your own function names. Additionally, PowerShell likes you to use an <em>approved verb</em>. You don't have to, but PowerShell can display a warning if you don't.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what are the list of approved verbs? The easiest way is to let PowerShell tell you.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Verb | Sort-Object Verb</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The screen shot below shows a short sample of what PowerShell has (the list is too long to reprint here). Click on it for a larger view.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4006,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-basic-functions-01.png"><img src="https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-basic-functions-01.png?w=1024" alt="" class="wp-image-4006" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can then select an appropriate verb from the list for your function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we covered the use of Basic Functions in PowerShell. You saw how to declare a function, how parameters worked, as well as the pros and cons of the <code>return</code> keyword.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We then got into the use of multiple functions in a PowerShell script, and how they can call one another.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In a future post we'll dive into the concepts of Advanced Functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3971</wp:post_id>
  <wp:post_date>2021-08-30 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-30 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:29:54</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:29:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-basic-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="functions"><![CDATA[Functions]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4014]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[62443101716]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1630335610]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1432357482148548613";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_288518019745784";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165531</wp:comment_id>
    <wp:comment_author><![CDATA[Fun with Powershell Functions &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/08/31/fun-with-powershell-functions/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-08-31 06:05:08</wp:comment_date>
    <wp:comment_date_gmt>2021-08-31 12:05:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain shows us the basics of functions in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630415482.85126;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630411508.750319;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166815</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:20</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] you need a refresher on PowerShell functions, I&#8217;ll refer you back to my posts on functions: Fun With PowerShell Basic Functions; Fun With PowerShell Advanced Functions; and Fun With PowerShell Pipelined [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.326192;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826820.681046;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166491</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; The Basics | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.90</wp:comment_author_IP>
    <wp:comment_date>2021-12-14 10:00:12</wp:comment_date>
    <wp:comment_date_gmt>2021-12-14 16:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] you aren&#8217;t familiar with functions yet, you need to brush up. You can start with my series Fun With PowerShell Functions, then continue through the next few posts which move into advanced functions and pipelined [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639501415.647181;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639497612.391047;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-basic-functions-02</title>
  <link>http://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/fun-with-powershell-basic-functions-02/</link>
  <pubDate>Mon, 19 Jul 2021 18:58:23 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-basic-functions-02-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4014</wp:post_id>
  <wp:post_date>2021-07-19 12:58:23</wp:post_date>
  <wp:post_date_gmt>2021-07-19 18:58:23</wp:post_date_gmt>
  <wp:post_modified>2021-07-19 12:58:23</wp:post_modified>
  <wp:post_modified_gmt>2021-07-19 18:58:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-basic-functions-02</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3971</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-basic-functions-02-2.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Advanced Functions</title>
  <link>http://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/</link>
  <pubDate>Mon, 06 Sep 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4018</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my previous post, I covered the use of PowerShell Basic Functions. In this post we'll cover <em>Advanced Functions</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Advanced Functions provide several abilities over basic ones. First, you can create a detailed parameter list, including the ability to include <em>optional parameters</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, you can <em>pipeline enable</em> your functions. Just like a cmdlet, you'll be able to take input from the pipeline, work with it, then send it out your function back into the pipeline. This will be the subject of our next post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, you can use features such as Verbose and Debug, which will be the subject of an upcoming blog post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>A Simple Advanced Function</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my Basic Functions post, I created a simple function <code>Get-AValue</code> that multiplied two values together and returned the result. Let's take a look at the advanced version, <code>Get-BValue</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-BValue()
{
  &#091;CmdletBinding()]
  param (
          &#091;Parameter( Mandatory = $true
                    , HelpMessage = 'Enter value one.'
                    )
          ]
          &#091;int] $one
        , &#091;Parameter( Mandatory = $false
                    , HelpMessage = 'Enter value two.'
                    )
          ]
          &#091;int] $two = 42
        )

  return $one * $two

}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We start with the <code>function</code> keyword, followed by the name we've chosen for the function, in this case <code>Get-BValue</code>. Note the parenthesis are empty, unlike a basic function advanced ones declare their parameters in a different spot.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first line you'll see in the function is <code>[CmdletBinding()]</code>. This is the indicator to PowerShell that this is an advanced function. It must be included in the first line for PowerShell to treat this as advanced.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up are the parameters, inside a <code>param ()</code> block. Within we list each parameter, separated by commas.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A useful feature is the ability to add <em>parameter attributes</em>. For the first parameter, <code>$one</code>, we have the following block:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&#091;Parameter( Mandatory = $true
          , HelpMessage = 'Enter value one.'
          )
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The first attribute is <code>Mandatory</code>. This indicates that this is a required parameter, and can be set to either <code>$true</code> or <code>$false</code>. When <code>$true</code>, if the user does not enter it they will be prompted to supply a  value. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>HelpMessage</code> is text that will be displayed when the user gets help on your function. We won't do much with it in this demo, but I've included it to show there are a variety of attributes you can use with parameters.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up is the actual parameter declaration, <code>[int] $one</code>. In this demo we've <em>strongly typed</em> our variable. Only integer values will be allowed, any string our decimal value (such as 3.14) will be rejected by PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that for readability I've chosen to split the code onto separate lines, you could have condensed all this into a single line if you'd wanted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Strong typing has its pros and cons. It can be very helpful in cases where the data must be of a specific type. On the other hand, it can prevent other uses. In this demo for example, we could just have easily multiplied a decimal value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you want a flexible variable, then you can leave off the type declaration. In this example we'll leave it in, so you can see how it works.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up is the second variable declaration.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>, &#091;Parameter( Mandatory = $false
             , HelpMessage = 'Enter value two.'
             )
  ]
  &#091;int] $two = 42
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here, we've set <code>Mandatory</code> to <code>$false</code>. This means if the user does not supply a value for <code>$two</code>, it will use the default value. Where does the default value come from?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you look you'll see <code>[int] $two = 42</code>. The <code>42</code> is the default value, and is used when the user does not supply a value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After the parameter block ends we have the actual code for the function, in this case a simple <code>return $one * $two</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So let's see some examples of how this works.  In your development environment highlight the function and press F8 (for VSCode) or F5 (for the PowerShell IDE). Now that it's in memory you can call it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-BValue -one 33 -two 42

Result:
1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here I called the function, passing in the parameters by name. I could have also left off the names and called it by position, as we did in the tutorial on basic functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now lets call it only passing in a value for <code>-one</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-BValue -one 33

Result:
1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case, it took our input for <code>-one</code>, but since no value for <code>-two</code> was passed in, the function used the default value of <code>42</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what happens if we call it and pass in no values?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-BValue

Result:
cmdlet Get-BValue at command pipeline position 1
Supply values for the following parameters:
one: 33
1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see in the <code>Result:</code> output area, we were prompted for a value for one. I entered <code>33</code> and hit enter, then got the expected result of 1386.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To illustrate how the strong typing works, let's call passing in a string for the <code>-one</code> parameter.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-BValue -one "x"

Result:
Get-BValue: Cannot process argument transformation on parameter 'one'. Cannot convert value "x" to type "System.Int32". Error: "Input string was not in a correct format."</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, PowerShell rejects our input with the resulting error message.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we got a start in PowerShell Advanced Functions. We covered a simple advanced function, including parameters and how to use attributes with them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But there's still more fun to be had! In the next post we'll see how to <em>pipeline enable</em> your advanced functions. Then in a future post we'll implement two switches common to all cmdlets and advanced functions, <em>Verbose</em> and <em>Debug</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4018</wp:post_id>
  <wp:post_date>2021-09-06 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-09-06 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 18:11:59</wp:post_modified>
  <wp:post_modified_gmt>2021-07-22 00:11:59</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-advanced-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced-functions"><![CDATA[Advanced Functions]]></category>
  <category domain="post_tag" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4096]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[62702286105]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1434894386832285702";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_293259575938295";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1630940456]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166816</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:22</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] functions, I&#8217;ll refer you back to my posts on functions: Fun With PowerShell Basic Functions; Fun With PowerShell Advanced Functions; and Fun With PowerShell Pipelined [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.583213;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826822.476019;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-advanced-functions</title>
  <link>http://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/fun-with-powershell-advanced-functions/</link>
  <pubDate>Wed, 21 Jul 2021 23:30:27 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-advanced-functions.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4096</wp:post_id>
  <wp:post_date>2021-07-21 17:30:27</wp:post_date>
  <wp:post_date_gmt>2021-07-21 23:30:27</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 17:30:27</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 23:30:27</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-advanced-functions</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4018</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-advanced-functions.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Pipelined Functions</title>
  <link>http://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/</link>
  <pubDate>Mon, 13 Sep 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4097</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my previous post, I covered the use of PowerShell <em>Advanced Functions</em>. I highly suggest you read it if you haven't, it provides some foundational knowledge that will be important to understand for this post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post, we'll see how to <em>pipeline enable</em> your functions. Just like a cmdlet, you'll be able to take input from the pipeline, work with it, then send it out your function back into the pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Pipelining Your Advanced Functions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pipelining is what gives PowerShell it's real power. The ability to have small, focused cmdlets (or functions) that you can chain together to produce a useful output. Let's see this simple, common example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem | Sort-Object -Property Length

Result:
Mode  LastWriteTime       Length Name
----  -------------       ------ ----
la--- 11/24/2020  3:37 PM   1115 ReadMe.md
la--- 11/24/2020  3:42 PM   1819 02 - Providers.ps1
la--- 11/24/2020  3:42 PM   3125 09 - Examples.ps1
la--- 11/24/2020  3:42 PM   3732 01 - Cmdlets.ps1
la---  7/15/2021  4:48 PM   4315 06 - Logic Branching and Looping.ps1
la--- 11/24/2020  3:42 PM   4717 03 - Variables.ps1
la--- 11/24/2020  3:42 PM   6210 08 - Classes.ps1
la---  7/20/2021  4:35 PM   6843 07 - Functions.ps1
la---  7/18/2021  8:18 PM   7970 04 - Strings.ps1
la---  7/9/2021   8:00 PM   8486 05 - Arrays and Hashtables.ps1
la--- 11/20/2020 12:58 AM   9694 Company.csv
la--- 11/20/2020 12:58 AM  19479 Company.json</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, <code>Get-ChildItem</code>'s output was piped into the <code>Sort-Object</code> cmdlet using the pipe symbol, the vertical bar <code>|</code> . <code>Sort-Object</code> took a parameter of a property name, in this case <code>Length</code>, and sorted its output based on that property name.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how fun would it be to write your own functions that could work with the pipeline? Well as it turns out it's not only fun but easy too. Here's an example of a simple pipeline enabled function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-PSFiles ()
{
  &#091;CmdletBinding()]
  param ( &#091;Parameter (ValueFromPipeline) ]
          $file
        )

  begin  { }

  process
  {
    if ($file.Name -like "*.ps1")
    {
      $retval = "  PowerShell file is $($file.Name)"
      # This is the equivalent of: return $retval
      $retval
    }
  }

  end { }
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The purpose of <code>Get-PSFiles</code> is to examine each file being passed in from the pipeline. If it finds the file name ends in .ps1, it will pass it onto the next item in the pipeline. Otherwise it gets ignored.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First off is the <code>[CmdletBinding()]</code>, which you know by now is needed to let Powershell know this is an advanced function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we have our <code>param</code> block. Note that the parameter block has an attribute of <code>(ValueFromPipeline)</code>. When an object comes in from the pipeline it will get copied into the variable with the <code>(ValueFromPipeline)</code> attribute, in this case <code>$file</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next block in the function is the <code>begin { }</code> block. The begin block executes once, and only once, when the function is first called. Here you could do things like set variables or perform a calculation that will be used later in the function. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my experience the <code>begin</code> block isn't used a lot, and if yours is empty you can actually omit it completely from your function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next section is the <code>process</code> block. This is where all the fun happens! Here we can work with the objects as they are passed in, one by one, from the pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this simple script, I look at the <code>Name</code> property of the item being passed in, which is stored in the variable <code>$file</code>. If it ends in <code>.ps1</code>, I set the return value (<code>$retVal</code>) to a string which has some text including the file name. If it doesn't end in <code>.ps1</code>, I just don't do anything with it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I then have a simple line of <code>$retVal</code>. Since it's not consumed by any other code PowerShell pushes it out into the next item in the pipeline. If there is no next item, it is displayed to the screen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once all the incoming items from the pipeline have been processed, the function continues to the <code>end { }</code> block. This is where you would do any cleanup. Similar to the <code>begin</code> block, <code>end</code> does not get used a lot, and you can omit it entirely if it is empty.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To use our <code>Get-PSFiles</code> function, we first need to highlight it and use F5/F8 to load it into memory. Once done we'll be ready to call it. In this case when we call it we'll save the output into a variable then display the contents of the variable.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$output = Get-ChildItem | Get-PSFiles
$output

Result:
  PowerShell file is 01 - Cmdlets.ps1
  PowerShell file is 02 - Providers.ps1
  PowerShell file is 03 - Variables.ps1
  PowerShell file is 04 - Strings.ps1
  PowerShell file is 05 - Arrays and Hashtables.ps1
  PowerShell file is 06 - Logic Branching and Looping.ps1
  PowerShell file is 07 - Functions.ps1
  PowerShell file is 08 - Classes.ps1
  PowerShell file is 09 - Examples.ps1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The directory I'm running from has other files in it besides PowerShell scripts, but the function we wrote filtered those out and only returns my PowerShell script files.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You may wonder, what datatype gets returned? We can find out by checking the type of the variable using the <code>GetType()</code> method built into all PowerShell variables.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$output.GetType()

Result:
IsPublic IsSerial Name     BaseType
-------- -------- ----     --------
True     True     Object&#091;] System.Array
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, it returns an array of objects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So this function is useful, but limited in one way. It can only work with file type objects such as ones retrieved using <code>Get-ChildItem</code>. What if instead we wanted a function that only worked on a single property?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Line Continuation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before we get into the next section, I want to bring up the topic of <em>line continuation</em>. Sometimes a line of PowerShell code will get very long. It can be useful to break it up across multiple lines for readability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PowerShell uses the backtick character, the <code>`</code> as its line continuation character. On US keyboard this is typically to the left of the number 1. If you are outside the US you'll have to hunt around to find it, I'll have to claim ignorance of keyboard layouts for other areas of our globe.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The line continuation character simply tells PowerShell "hey, this set of commands continues on the next line, treat it all as one line of code until you no longer find another backtick character".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's a simple example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Write-Host 'Here are the names!' `
  -ForegroundColor Green</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see I have a simple <code>Write-Host</code> which displays information to the screen. At the very end of the line I have the backtick character. Then the <code>Write-Host</code> cmdlet continues, passing in the parameter of <code>ForegroundColor</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I encourage you to use line continuation characters whenever you have a long line of code as it will make it much easier to read. It's also useful to folks like myself who write blog posts or give presentations where my display area is limited. If you go look at some examples on <a href="https://github.com/arcanecode" target="_blank" rel="noreferrer noopener">my GitHub site</a>, you'll see I use them quite a bit. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On a large monitor such as the one I normally use it's not as needed. But when I write a blog post like this one, or go present at a user group, the amount of space I have is much more limited.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's also worth mentioning that the pipe symbol | has line continuation built right into it. I could have taken my earlier example and entered into my editor like so:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem |
  Sort-Object -Property Length</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The pipe symbol has to be the very last character on the line. There cannot be any spaces, comments, or other code after it. On the next line I chose to indent the <code>Sort-Object</code> command by two spaces, this is strictly to make the code easier to read and is not required, but is a good habit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OK that little detour complete, let's continue our fun by using just a single property from the pipeline in our function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Using a Single Property in your Pipeline Function</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One way we can make our functions more reusable is to work with a single property. For example, almost all cmdlets return a set of objects that have a <code>Name</code> property. We could create a function that works with just that property, and thus use it with all cmdlets that return objects with a <code>Name</code> property.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This next example is a bit contrived, to show you the concepts, and isn't something I'd normally code in "real life" but it will serve to show you how this concept works.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Show-BName ()
{
  &#091;CmdletBinding()]
  param ( &#091;Parameter (ValueFromPipelineByPropertyName)]
          $Name
        )

  begin
  {
    Write-Host 'Here are the names!' `
      -ForegroundColor Green
    $names = @()
  }

  process
  {
    $names += $name
    "  Here is the name: $name"
  }

  end
  {
    Write-Host "Those were the names you passed in:" `
      -ForegroundColor Green
    foreach ($n in $names)
    {
       Write-Host "  You passed in " `
         -ForegroundColor White -NoNewline
      Write-Host $n -ForegroundColor Yellow
    }
  }
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the parameter block, we use a slightly different attribute, <code>ValueFromPipelineByPropertyName</code>. This tells PowerShell to take each object being passed in, and copy it's <code>Name</code> property into our variable, in this case <code>$Name</code>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that the name of the parameter must match the name of the property you want to work with. Thus the <code>Name </code>property is copied into the <code>$Name</code> parameter. The rest of the object will be discarded, and not available to you in the function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The function falls into our <code>begin</code> block, in which I've included a <code>Write-Host</code> statement to display a message our function is beginning. Let me stress, you normally do not include <code>Write-Host</code> messages in functions. Typically the script that calls the function will take the output, and display the results. I'm doing this here only to demonstrate how each piece of the advanced function works.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I then do something you might do, I create a variable called <code>$names</code>. I initialize it as an empty array.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now the function moves into the <code>process</code> block. In it, I take the name that came in from the pipeline and add it to the array. I then embed the name in a string. Since I don't do anything with the string, it is now passed out to return to the pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally we hit the <code>end</code> block. Here, I'm using some <code>Write-Host</code> statements to show we're done and what names were processed. In a real world situation you might use this for logging or some other reason that fits your needs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So let's see this in action. As before, highlight the function and run it using F8/F5 to get it into memory. Then we can call it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem |
  Show-BName

Result:
Here are the names!
  Here is the name: 01 - Cmdlets.ps1
  Here is the name: 02 - Providers.ps1
  Here is the name: 03 - Variables.ps1
  Here is the name: 04 - Strings.ps1
  Here is the name: 05 - Arrays and Hashtables.ps1
  Here is the name: 06 - Logic Branching and Looping.ps1
  Here is the name: 07 - Functions.ps1
  Here is the name: 08 - Classes.ps1
  Here is the name: 09 - Examples.ps1
  Here is the name: Company.csv
  Here is the name: Company.json
  Here is the name: ReadMe.md
Those were the names you passed in:
  You passed in 01 - Cmdlets.ps1
  You passed in 02 - Providers.ps1
  You passed in 03 - Variables.ps1
  You passed in 04 - Strings.ps1
  You passed in 05 - Arrays and Hashtables.ps1
  You passed in 06 - Logic Branching and Looping.ps1
  You passed in 07 - Functions.ps1
  You passed in 08 - Classes.ps1
  You passed in 09 - Examples.ps1
  You passed in Company.csv
  You passed in Company.json
  You passed in ReadMe.md</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The first set of "Here is the names..." is what came out of the function into the pipeline. Since we didn't do anything with them, they were displayed on the screen. The second set, with "You passed in..." is from the <code>end</code> block.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can have even more fun, let's take the output of our function and pipe it into another cmdlet. We'll use <code>Sort-Object</code> to display our results in descending order.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem |
  Show-BName |
  Sort-Object -Descending

Result:
Here are the names!
Those were the names you passed in:
  You passed in 01 - Cmdlets.ps1
  You passed in 02 - Providers.ps1
  You passed in 03 - Variables.ps1
  You passed in 04 - Strings.ps1
  You passed in 05 - Arrays and Hashtables.ps1
  You passed in 06 - Logic Branching and Looping.ps1
  You passed in 07 - Functions.ps1
  You passed in 08 - Classes.ps1
  You passed in 09 - Examples.ps1
  You passed in Company.csv
  You passed in Company.json
  You passed in ReadMe.md
  Here is the name: ReadMe.md
  Here is the name: Company.json
  Here is the name: Company.csv
  Here is the name: 09 - Examples.ps1
  Here is the name: 08 - Classes.ps1
  Here is the name: 07 - Functions.ps1
  Here is the name: 06 - Logic Branching and Looping.ps1
  Here is the name: 05 - Arrays and Hashtables.ps1
  Here is the name: 04 - Strings.ps1
  Here is the name: 03 - Variables.ps1
  Here is the name: 02 - Providers.ps1
  Here is the name: 01 - Cmdlets.ps1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There are a couple of things to notice with this version. First, the result of the end block, the "You passed in..." comes first. That's because the function ended, but the data it produced is now being consumed by <code>Sort-Object</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, you can see <code>Sort-Object</code> took the output and sorted in reverse (descending) order.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As they say on TV, but wait, there's more!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because our function only acts on the <code>Name</code> property, it could care less what type of object is coming in as long as it has a <code>Name</code> property. Thus we could use it with any cmdlet as long as that cmdlet produces objects with a <code>Name</code> property!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>Get-Process</code> returns objects with a <code>Name</code> property, so let's use it with our new function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Process | Show-BName

Result:
  Here is the name: 5KPlayer
  Here is the name: aesm_service
  Here is the name: Airplay
  Here is the name: AppleMobileDeviceProcess
  Here is the name: ApplicationFrameHost
  Here is the name: CepstralLicSrv
  Here is the name: Code
  (many more here, truncated for brevity)
Those were the names you passed in:
  You passed in 5KPlayer
  You passed in aesm_service
  You passed in Airplay
  You passed in AppleMobileDeviceProcess
  You passed in ApplicationFrameHost
  You passed in CepstralLicSrv
  You passed in Code
  (many more here too, again truncated for brevity)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Because we were able to keep the needs of our function tightly scoped to just the <code>Name</code> property, we were able to create a function that was highly flexible and reusable.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we saw how to create a function that would work in the pipeline. We did it two ways, first by passing in entire objects, then by passing in a specific property of an object.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But there's still more fun to be had! In a future post we'll see how to implement two switches common to all cmdlets and advanced functions, <em>Verbose</em> and <em>Debug</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4097</wp:post_id>
  <wp:post_date>2021-09-13 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-09-13 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 18:27:34</wp:post_modified>
  <wp:post_modified_gmt>2021-07-22 00:27:34</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-pipelined-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced-functions"><![CDATA[Advanced Functions]]></category>
  <category domain="post_tag" nicename="pipeline"><![CDATA[Pipeline]]></category>
  <category domain="post_tag" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4096]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[62963739742]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1631545206]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1437430895624007680";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_297999808797605";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167168</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Overloading &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.208</wp:comment_author_IP>
    <wp:comment_date>2022-02-14 09:00:06</wp:comment_date>
    <wp:comment_date_gmt>2022-02-14 15:00:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644850806.331618;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644855368.001021;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167033</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:14</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.516906;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641214.764149;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167098</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Static Properties and Methods &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-02-07 09:00:26</wp:comment_date>
    <wp:comment_date_gmt>2022-02-07 15:00:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644246026.560399;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644250262.760608;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165660</wp:comment_id>
    <wp:comment_author><![CDATA[Pipelined Functions in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/09/14/pipelined-functions-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-09-14 06:05:17</wp:comment_date>
    <wp:comment_date_gmt>2021-09-14 12:05:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues a series on functions in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631621117.163787;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631626135.667683;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165791</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Write-Verbose | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.206</wp:comment_author_IP>
    <wp:comment_date>2021-09-27 09:00:15</wp:comment_date>
    <wp:comment_date_gmt>2021-09-27 15:00:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] this blog post. If you need more info on how pipelined functions work, please see my recent post Fun With PowerShell Pipelined Functions. That post will explain the structure of the function, including the begin, process and end [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632754815.911449;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632758496.636136;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166814</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:18</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.070608;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826818.88524;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167245</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.114.41</wp:comment_author_IP>
    <wp:comment_date>2022-02-21 09:00:27</wp:comment_date>
    <wp:comment_date_gmt>2022-02-21 15:00:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] much easier to read. I have a section dedicated to the line continuation character in my post Fun With PowerShell Pipelined Functions if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645455628.183383;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:68:"Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code";s:18:"comment_author_url";s:74:"http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:174:"[&#8230;] much easier to read. I have a section dedicated to the line continuation character in my post Fun With PowerShell Pipelined Functions if you want to learn [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:12:"192.0.114.41";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:12:"192.0.114.41";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:73:"http://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645459376.859391;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166917</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:22</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431622.474448;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436449.74889;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166975</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:16</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036416.55713;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040755.249634;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-switch-parameter-01</title>
  <link>http://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/fun-with-powershell-switch-parameter-01/</link>
  <pubDate>Thu, 22 Jul 2021 17:42:25 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-switch-parameter-01.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4118</wp:post_id>
  <wp:post_date>2021-07-22 11:42:25</wp:post_date>
  <wp:post_date_gmt>2021-07-22 17:42:25</wp:post_date_gmt>
  <wp:post_modified>2021-07-28 12:49:57</wp:post_modified>
  <wp:post_modified_gmt>2021-07-28 18:49:57</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-switch-parameter-01</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4149</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-switch-parameter-01.png</wp:attachment_url>
</item>
<item>
  <title>Fun With the PowerShell Switch Parameter</title>
  <link>http://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/</link>
  <pubDate>Mon, 20 Sep 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4149</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>
Over the last few posts I've been covering PowerShell functions, both Basic Functions and Advanced Functions. In this post I had originally intended to cover two switches available to all advanced functions, Verbose and Debug.

But then it occurred to me, not everyone may know what a switch parameter is. And to be clear, I'm not talking about the switch statement. I covered that in my post <a href="http://arcanecode.com/?p=3788">Fun With PowerShell Logic and Branching</a>.

Here, I'm talking about the ability to use what PowerShell calls a switch <em>parameter</em>.

We'll take a deeper look in a moment, but first let me mention that for all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.

To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.
<h2>A Simple Switch Example</h2>
If you've been following my series, you know that you can pass in values, in other words parameters, to a function by name. For example:

[code lang=powershell]
Get-AValue -one 33 -two 42
[/code]

<code>-one</code> and <code>-two</code> were the parameter names, and <code>33</code> and <code>42</code> the values passed in for them.

A switch is similar, you list the name of the switch on call to the function, but unlike a regular parameter you pass in no value. The presence of the switch is enough to tell the function what you want to do.

Let's look at an example using the common <code>Write-Host</code> cmdlet.

[code lang=powershell]
Write-Host 'Hi Mom' -NoNewline -ForegroundColor Green
Write-Host ' and Dad' -ForegroundColor Yellow
[/code]

Result:
<img src="https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-switch-parameter-01.png" alt="Hi Mom and Dad Image"/>

Normally, <code>Write-Host</code> displays its text, then automatically moves the cursor to the next line. However, <code>Write-Host</code> has a <code>-NoNewLine</code> switch. Including the switch will keep <code>Write-Host</code> from adding the line feed at the end, and allows us do fun things like having two different colors of text on the same line.

Note that we didn't have to pass in any value, didn't have to set it to true or false. Just including the switch was enough to say "hey don't wrap to a new line".
<h2>Implementing Your Own Switches</h2>
Switches wouldn't be any fun if we couldn't use them too! And it's actually quite easy. I started off the whole PowerShell series on my blog with a post <a href="https://arcanecode.com/2021/07/05/fun-with-powershell-get-random/">Fun With PowerShell Get-Random</a>. In it I described (among other things) how to use the <code>Get-Random</code> cmdlet to return a random value from an array. We'll borrow on that idea for this function.

[code lang=powershell]
function Get-RandomSouthAmericanCountry()
{
[CmdletBinding()]
param(
[switch] $UpperCase
)

$array = (
'Argentina', 'Bolivia', 'Brazil',
'Chile', 'Columbia', 'Ecuador',
'Guyana', 'Paraguay', 'Peru',
'Suriname', 'Uruguay', 'Venezuela'
)

# Get an item from the array and convert from
# a generic object to a string
$retVal = $($array | Get-Random).ToString()

# If user passed in upper case switch,
# upper case return value
if ($UpperCase.IsPresent)
{
$retVal = $retVal.ToUpper()
}

return $retVal

}
[/code]

I'll give a shout of sorts to my wonderful geek friends who live on the South American continent with this example, our <code>Get-RandomSouthAmericanCountry</code> function. Of course we start with <code>[CmdletBinding()]</code> to indicate this is an advanced function. Then we have our param block.

[code lang=powershell]
param(
[switch] $UpperCase
)
[/code]

We have one parameter named <code>$UpperCase</code>. But instead of having a traditional data type in front, we have <code>[switch]</code>. This will indicate to PowerShell that <code>$UpperCase</code> is a switch. We'll see how to use it within our code in a moment, but first let's take a quick look at the rest of the function.

After the param block we have an array which lists the countries in South America (according to the <a href="https://www.countries-ofthe-world.com/countries-of-south-america.html">countries of the world</a> website I found).

I then fall to this line to get the country:

[code lang=powershell]
$retVal = $($array | Get-Random).ToString()
[/code]

First, I use <code>$array | Get-Random</code> to get a random country. This will return an element from the array, but I need it to be a datatype of string rather than a generic object. So I wrap the result of <code>Get-Random</code> in <code>$( )</code> to make PowerShell evaluate it as an object. Then I can call the <code>.ToString()</code> method of the object to convert it to a string. Finally it gets assigned to my return variable, <code>$retVal</code>.

The next part is where I look to see if my switch was used.

[code lang=powershell]
if ($UpperCase.IsPresent)
{
$retVal = $retVal.ToUpper()
}
[/code]

Here, you use the name of the switch and access its <code>.IsPresent</code> property. This returns <code>$true</code> if the switch was passed in. Thus if it was passed in, the <code>if</code> statement will take affect and call the <code>.ToUpper()</code> method on our <code>$retVal</code> string. This is why we had to convert to a string, string data types have a <code>.ToUpper()</code> method, generic objects don't.

As the final step we return the value held in <code>$retVal</code>, which sticks to the rule of having one exit point for a function.

After highlighting the function and running it using F8/F5 to get it in memory, we'll call it. First, we'll so so using it without the switch.

[code lang=powershell]
Get-RandomSouthAmericanCountry
[/code]

Result:
<code>Venezuela</code>

Great, now let's call it with our switch.

[code lang=powershell]
Get-RandomSouthAmericanCountry -UpperCase
[/code]

Result:
<code>URUGUAY</code>

In this call, just including the switch caused the output to display in upper case.
<h2>Switches Work with Basic Functions Too</h2>
In the above example I used an advanced function. Be aware that if you are using a basic function, as I described in a previous article, you can still use a switch.

Here is the previous example rewritten as a basic function. (Note the function declaration should all be on one line, the blog layout will probably wrap it.)

[code lang=powershell]
function Get-RandomSouthAmericanCountryBasic([switch] $UpperCase)
{
$array = (
'Argentina', 'Bolivia', 'Brazil',
'Chile', 'Columbia', 'Ecuador',
'Guyana', 'Paraguay', 'Peru',
'Suriname', 'Uruguay', 'Venezuela'
)

# Get an item from the array and convert from
# a generic object to a string
$retVal = $($array | Get-Random).ToString()

# If user passed in upper case switch,
# upper case return value
if ($UpperCase.IsPresent)
{
$retVal = $retVal.ToUpper()
}

return $retVal

}
[/code]

The only real difference is the removal of the <code>[CmdletBinding()}</code> statement and the <code>param</code> block. I then declared the <code>[switch] $UpperCase</code> inside the parenthesis like you would do with a basic function.

By the way, like most things in PowerShell casing isn't important. These are all the same to PowerShell:

[code lang=powershell]
[switch] $UpperCase
[SWITCH] $UpperCase
[Switch] $UpperCase
[/code]

When you strongly type your variables, for example using <code>[int]</code> or <code>[string]</code>, it's common to use lower case, so I generally stick to lower for <code>[switch]</code>, but it's not mandatory. Just pick a standard for you and your team, then stick with it.
<h2>Naming Switches</h2>
When creating your switches, be sure to use clear names. In our example, UpperCase was a good switch name. Especially when using the <code>Get-</code> verb in our function name, as it implied the results should be in upper case. It doesn't occur to me that I need to pass in some value to make it happen.

Contrast that with a switch name like MaxValue. Here, I wonder if I want to return a maximum value, or if I need to pass in a value that I want to be the maximum value, or something else.
<h2>A Note on $switchName -eq $true</h2>
You may see examples on the web such as:

[code lang=powershell]
if ($UpperCase -eq $true)
[/code]

to check to see if a switch is present. This is a much older, and very much out of date method. Microsoft recommends you use the <code>.IsPresent</code> method that you saw in these examples, you should stick to it in your code.
<h2>Conclusion</h2>
In this post we covered the useful switch parameter. It's very easy to use, and can add a lot of flexibility to your functions. This also gives a good foundation for discussion of the Verbose and Debug switches built into all Advanced Functions in our next blog post.

The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.

If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a>. At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4149</wp:post_id>
  <wp:post_date>2021-09-20 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-09-20 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-08-19 12:43:36</wp:post_modified>
  <wp:post_modified_gmt>2021-08-19 18:43:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-the-powershell-switch-parameter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="switch"><![CDATA[switch]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[63227240465]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1632150006]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1439967614516727814";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_302462198351366";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165790</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Write-Verbose | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.206</wp:comment_author_IP>
    <wp:comment_date>2021-09-27 09:00:13</wp:comment_date>
    <wp:comment_date_gmt>2021-09-27 15:00:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my previous post, Fun With the PowerShell Switch Parameter, I introduced the use of switches with PowerShell functions. We learned how they work, and how to [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632754813.745965;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632758496.376509;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun With PowerShell Write-Verbose</title>
  <link>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/</link>
  <pubDate>Mon, 27 Sep 2021 15:00:06 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4172</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>

In my previous post, <a href="https://arcanecode.com/?p=4149">Fun With the PowerShell Switch Parameter</a>, I introduced the use of <em>switches</em> with PowerShell functions. We learned how they work, and how to create your own. For all functions, PowerShell creates a set of switches that are just "built in" to PowerShell. You do not have to explicitly create these yourself, you can simply use them and implement them within your own functions.

Two of the most used are <code>-Verbose</code> and <code>-Debug</code>. When used with the <code>Write-Verbose</code> and <code>Write-Debug</code> cmdlets they will display informational messages to the user of your functions. In this post, we'll focus on the <code>Verbose</code> switch. The next post in the series will examine the <code>Debug</code> switch.

We'll take a deeper look at <code>Verbose</code> in a moment, but first let me mention that for all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.4, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.

To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.

<h2>Write-Verbose</h2>

Messages displayed using the <code>-Verbose</code> switch are intended for the users. It can advise a user of long running processes, or let the user know a function is indeed being executed. Let's take a look at a function we'll use for this demo.

[code lang=powershell]
function Show-FileInfo ()
{
  [CmdletBinding()]
  param ( [Parameter (ValueFromPipeline)]
          $file
        )

  process
  {
    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }

}
[/code]

The purpose of this function is to take a stream of files from the pipeline, then display the file name and the file size. It's extremely simple but will serve for this blog post. If you need more info on how pipelined functions work, please see my recent post <a href="https://arcanecode.com/?p=4097">Fun With PowerShell Pipelined Functions</a>. That post will explain the structure of the function, including the <code>begin</code>, <code>process</code> and <code>end</code> blocks.

Let's run this function. First, highlight the function and execute it to get it in memory. Then let's call the function.

[code lang=powershell]
Get-ChildItem | Show-FileInfo
[/code]

Result:

[code lang=text]
01 - Cmdlets.ps1 is 3,732 bytes long.
02 - Providers.ps1 is 1,819 bytes long.
03 - Variables.ps1 is 4,717 bytes long.
04 - Strings.ps1 is 7,970 bytes long.
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 9,574 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
Company.csv is 9,694 bytes long.
Company.json is 19,479 bytes long.
ReadMe.md is 1,115 bytes long.
[/code]

So far so good, you can see the files I have in my current folder (obviously your list of files will vary). Now let's say we want to let the user know when the function starts and ends, so the user can get an idea of how long it will take to execute. Most of the time our function runs in an automated fashion so we don't need this, however there may be times when a user wants to manually run it so they can get execution times.

We can modify our function to use the <code>Write-Verbose</code> cmdlet to display this message when the built in <code>-Verbose</code> switch is used. First, we'll add a <code>begin</code> block to our function to show the start time.

[code lang=powershell]
begin
  {
    $fn = &quot;$($PSCmdlet.MyInvocation.MyCommand.Name)&quot;
    $st = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Starting at $($st.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }
[/code]

The first thing we do is get the function name. PowerShell has a built in variable called <code>$PSCmdlet</code> which has information about the code currently being executed. It has an object property called <code>MyInvocation</code>, which has an object property named <code>MyCommand</code>. This has a property called <code>Name</code> which holds the name of the function currently being executed.

While this seems a bit more complicated than just keying in <code>$fn = 'Show-FileName'</code>, it actually leverages code reuse. I can paste this into any function and continue, without the need to update anything.

Next I capture the current date and time into a variable called <code>$st</code>, short for start time.

The call to <code>Write-Verbose</code> comes next. By default, when a <code>Write-Verbose</code> is executed, it displayes the text VERBOSE: followed by the message, such as:

[code lang=powershell]
VERBOSE: Your Message Here
[/code]

In my example though I want to display a multi line message. The first line will hold the name of the function, the second will be the start time. To accomplish this I am using a <em>here string</em>. If you aren't familiar with here strings, see my post from July 12, 2021 named <a href="https://arcanecode.com/2021/07/12/fun-with-powershell-strings/">Fun With PowerShell Strings</a>.

In the here string I start with the characters &#096;r&#096;n. This will send a carriage return - line feed to the here string, so the <code>VERBOSE:</code> will appear on a line by itself. I then add two spaces so the line with the function name will be indented two spaces. Not necessary, but I think it makes it more readable.

The next line is the starting time, also indented two spaces. Here I take the start time and convert it to a string. Into the <code>ToString</code> function I pass in a <em>date format string</em> to display the current date and time. This will produce year-month-day hour:minute:second, with the <code>tt</code> becoming AM or PM. Finally I close out the here string as well as the process block.

As is, this code could be copy and pasted into any function without modification, ready to use. You could even go so far as to make it a snippet in VSCode, I have a project on GitHub, <a href="https://github.com/arcanecode/VSCode_User_Snippets">VSCode_User_Snippets</a> that explains how to create user snippets in VSCode. It was written to target implementing MarkDown snippets, but I also included my default PowerShell snippets. Note that the PowerShell IDE used with PowerShell 5.1 also allows for reusable code snippets.

OK, we've handled the message we want to show when the function starts. Now we'll add an <code>end</code> block to display the ending time.

[code lang=powershell]
end
  {
    $et = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }
[/code]

Since I already had the function name in the <code>$fn</code> variable I didn't have to get it again. I just grab the current time into the variable <code>$et</code> (for end time) and display it as I did in the opening.

For reference here is the function again with the new blocks added.

[code lang=powershell]
function Show-FileInfo ()
{
  [CmdletBinding()]
  param ( [Parameter (ValueFromPipeline)]
          $file
        )

  begin
  {
    $fn = &quot;$($PSCmdlet.MyInvocation.MyCommand.Name)&quot;
    $st = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Starting at $($st.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }

  process
  {
    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }

  end
  {
    $et = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }
}
[/code]

If I run this, you&#039;ll see I get the exact same results I did the first time.

[code lang=powershell]
Get-ChildItem | Show-FileInfo
[/code]

Result:

[code lang=text]
01 - Cmdlets.ps1 is 3,732 bytes long.
02 - Providers.ps1 is 1,819 bytes long.
03 - Variables.ps1 is 4,717 bytes long.
04 - Strings.ps1 is 7,970 bytes long.
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 9,574 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
Company.csv is 9,694 bytes long.
Company.json is 19,479 bytes long.
ReadMe.md is 1,115 bytes long.
[/code]

So how do I get the verbose messages to display? Well all I have to do is add the <code>-Verbose</code> switch to the call.

[code lang=powershell]
Get-ChildItem | Show-FileInfo -Verbose
[/code]

Result:

[code lang=text]
VERBOSE:   
  Function: Show-FileInfo
  Starting at 2021-08-15 07:28:26 PM
01 - Cmdlets.ps1 is 3,732 bytes long.
02 - Providers.ps1 is 1,819 bytes long.
03 - Variables.ps1 is 4,717 bytes long.
04 - Strings.ps1 is 7,970 bytes long.
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 9,574 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
Company.csv is 9,694 bytes long.
Company.json is 19,479 bytes long.
ReadMe.md is 1,115 bytes long.
VERBOSE:   
  Function: Show-FileInfo
  Finished at 2021-08-15 07:28:26 PM
[/code]

Simply by adding the <code>-Verbose</code> switch, it now displays the text passed into any <code>Write-Verbose</code> cmdlets you coded. If you look at our <code>param</code> block, you won't see the <code>Verbose</code> switch declared, as we had to in the previous article <a href="https://arcanecode.com/?p=4149">Fun With the PowerShell Switch Parameter</a>.

PowerShell automatically adds the <code>Verbose</code> switch to every advanced function you author. You don't have to do anything special. If PowerShell sees you've added the switch when you (or a user) runs your function, it will automatically execute any <code>Write-Verbose</code> cmdlets for you.

<h2>Taking It to the Next Level</h2>

As is, this function requires our user to manually calculate the run time by comparing the start and end times. But PowerShell developers are a courteous bunch, and so we'll take care of this for them.

Let's update the <code>end</code> block to perform the calculation.

[code lang=powershell]
  end
  {
    $et = Get-Date

    $rt = $et - $st  # Run Time

    # Format the output time
    if ($rt.TotalSeconds -lt 1)
      { $elapsed = &quot;$($rt.TotalMilliseconds.ToString(&#039;#,0.0000&#039;)) Milliseconds&quot; }
    elseif ($rt.TotalSeconds -gt 60)
      { $elapsed = &quot;$($rt.TotalMinutes.ToString(&#039;#,0.0000&#039;)) Minutes&quot; }
    else
      { $elapsed = &quot;$($rt.TotalSeconds.ToString(&#039;#,0.0000&#039;)) Seconds&quot; }


    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
  Elapsed Time $elapsed
&quot;@
  }

[/code]

After getting my end time, I subtract the start time from the end time, and place it in the <code>$rt</code> variable, short for run time. This will produce a variable that is a <em>datetime</em> datatype.

A PowerShell datetime datatype has some very useful methods. The first we'll use is <code>TotalSeconds</code>, which indicates how many seconds are in our variable. In the <code>if</code> statement, check to see if the run time seconds is less than 1. If so, it uses another property <code>TotalMilliseconds</code> that (obviously) returns the total number of milliseconds in the run time variable. It converts it to a string, and we pass in a string format so we get a nice output. Finally it appends the text Milliseconds so the user will now what time unit they are dealing with, and places it all in a variable <code>$elapsed</code>.

The <code>elseif</code> is similar. If the total seconds exceeds 60, we'll display the run time in minutes. The <code>else</code> script block covers the case when the elapsed time is between 1 and 60 seconds.

Finally we add a third line to the here string passed into <code>Write-Verbose</code>.

Highlight the entire function and execute it so the new version is in memory. Then call the function using the <code>Verbose</code> switch.

[code lang=powershell]
Get-ChildItem | Show-FileInfo -Verbose
[/code]

Result:

[code lang=text]
VERBOSE:   
  Function: Show-FileInfo
  Starting at 2021-08-15 07:59:39 PM
01 - Cmdlets.ps1 is 3,732 bytes long.
02 - Providers.ps1 is 1,819 bytes long.
03 - Variables.ps1 is 4,717 bytes long.
04 - Strings.ps1 is 7,970 bytes long.
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 9,977 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
Company.csv is 9,694 bytes long.
Company.json is 19,479 bytes long.
ReadMe.md is 1,115 bytes long.
VERBOSE:   
  Function: Show-FileInfo
  Finished at 2021-08-15 07:59:39 PM
  Elapsed Time 19.9018 Milliseconds
[/code]

As you can see, these few extra lines of code provides a more professional looking output, not to mention accurate. The user will not be forced to manually calculate times.

And don't forget you can place these into code snippets for fast and easy use. As constructed both the opening and closing sections can simply be inserted without modification. Again, see my GitHub project, <a href="https://github.com/arcanecode/VSCode_User_Snippets">VSCode_User_Snippets</a> for examples on using code snippets in Visual Studio Code.

<h2>Conclusion</h2>

In this post we saw how the built in <code>-Verbose</code> switch works along with the companion <code>Write-Verbose</code>. This can provide a useful tool to keep users appraised of extra, "meta" information such as run times without obscuring the output of the function when it is used in normal circumstances.

In the next blog post we'll look at the counterpart for verbose, <code>-Debug</code> and it's <code>Write-Debug</code> cmdlet.

If you want to learn more about PowerShell, check out my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.

If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4172</wp:post_id>
  <wp:post_date>2021-09-27 09:00:06</wp:post_date>
  <wp:post_date_gmt>2021-09-27 15:00:06</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 15:16:42</wp:post_modified>
  <wp:post_modified_gmt>2021-08-20 21:16:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-write-verbose</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="verbose"><![CDATA[Verbose]]></category>
  <category domain="post_tag" nicename="write-verbose"><![CDATA[Write-Verbose]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4176]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[63489624622]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1632754811]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1442504347842224131";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_307065421224377";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165837</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Write-Debug | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.204</wp:comment_author_IP>
    <wp:comment_date>2021-10-04 09:00:35</wp:comment_date>
    <wp:comment_date_gmt>2021-10-04 15:00:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my previous post, Fun With PowerShell Write-Verbose, I introduced the use of the built in -Verbose switch. In this post we&#8217;ll dive into its [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633364340.952908;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633359635.238141;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166818</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:25</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] more info on Write-Verbose and Write-Debug, see my posts Fun With PowerShell Write-Verbose and Fun With PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.951427;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826825.55989;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165808</wp:comment_id>
    <wp:comment_author><![CDATA[Verbose Powershell Results &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/10/01/verbose-powershell-results/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-10-01 06:05:10</wp:comment_date>
    <wp:comment_date_gmt>2021-10-01 12:05:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain gets verbose on us: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633089910.438781;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633093961.592071;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-write-verbose-01</title>
  <link>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/fun-with-powershell-write-verbose-01/</link>
  <pubDate>Thu, 19 Aug 2021 21:00:04 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/09/fun-with-powershell-write-verbose-01.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4176</wp:post_id>
  <wp:post_date>2021-08-19 15:00:04</wp:post_date>
  <wp:post_date_gmt>2021-08-19 21:00:04</wp:post_date_gmt>
  <wp:post_modified>2021-08-19 15:00:04</wp:post_modified>
  <wp:post_modified_gmt>2021-08-19 21:00:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-write-verbose-01</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4172</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/09/fun-with-powershell-write-verbose-01.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Write-Debug</title>
  <link>http://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/</link>
  <pubDate>Mon, 04 Oct 2021 15:00:26 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4179</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>

In my previous post, <a href="https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/" target="_blank">Fun With PowerShell Write-Verbose</a>, I introduced the use of the built in <code>-Verbose</code> switch. In this post we'll dive into its counterpart, the <code>-Debug</code> switch and its companion <code>Write-Debug</code> cmdlet.

In covering <code>Write-Verbose</code>, I mentioned verbose messages are typically targeted at the average <em>user</em>. The <code>-Debug</code> messages are meant to target the <em>developer</em>. These messages are meant to assist the PowerShell developer in trouble shooting and debugging their code.

We'll take a deeper look at <code>Debug</code> momentarily, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.4, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.

To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.

<h2>$DebugPreference - An Introduction</h2>

Before we start discussing the <code>Write-Debug</code> cmdlet, we need to cover a PowerShell built in variable, <code>$DebugPreference</code>. If you want to see the value currently there, just type <code>$DebugPreference</code> into your terminal window and hit ENTER.

Depending on how your system is configured, this will usually be set to either <code>Continue</code> or <code>SilentlyContinue</code>. (If it is set to something else then likely you previously ran a script which changed it).

Usually you want it set to <code>Continue</code>. This will display the message provided to the <code>Write-Debug</code> cmdlet, after doing so it will continue to the next line of code.

If it is set to <code>SilentlyContinue</code>, the message is suppressed. Even if <code>Write-Debug</code> is executed, no text is displayed.

For these demos to work, you need to ensure your <code>$DebugPreference</code> is set to <code>Continue</code>, at least to start with. To set it, just assign it.

[code lang=powershell]
$DebugPreference = &#039;Continue&#039;
[/code]

Later we'll see some more options when it comes to <code>$DebugPreference</code>, but for now let's dig into the <code>Write-Debug</code> cmdlet.

<h2>Write-Debug</h2>

Just like the <code>Verbose</code> switch, the <code>Debug</code> switch is built in. You don't have to explicitly declare it. Within your code simply use the <code>Write-Debug</code> cmdlet. If PowerShell detects the <code>-Debug</code> switch is passed in, it will display any messages from the <code>Write-Debug</code> cmdlet.

For this demo, we'll reuse the <code>Show-FileInfo</code> from the previous blog post, <a href="https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/" target="_blank">Fun With PowerShell Write-Verbose</a>.

[code lang=powershell]
function Show-FileInfo ()
{
  [CmdletBinding()]
  param ( [Parameter (ValueFromPipeline)]
          $file
        )

  begin
  {
    $fn = &quot;$($PSCmdlet.MyInvocation.MyCommand.Name)&quot;
    $st = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Starting at $($st.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }

  process
  {
    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }

  end
  {
    $et = Get-Date
    $rt = $et - $st  # Run Time

    # Format the output time
    if ($rt.TotalSeconds -lt 1)
      { $elapsed = &quot;$($rt.TotalMilliseconds.ToString(&#039;#,0.0000&#039;)) Milliseconds&quot; }
    elseif ($rt.TotalSeconds -gt 60)
      { $elapsed = &quot;$($rt.TotalMinutes.ToString(&#039;#,0.0000&#039;)) Minutes&quot; }
    else
      { $elapsed = &quot;$($rt.TotalSeconds.ToString(&#039;#,0.0000&#039;)) Seconds&quot; }

    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
  Elapsed Time $elapsed
&quot;@
  }
}
[/code]

The only modifications made are to the <code>process</code> block. We created a variable, <code>$dbgMsg</code> to hold the debugging message we wish to display. Since this is a multiline string, I'm going to do the same thing I did with the <code>Verbose</code> messages and begin with a carriage return / line feed escape sequence ( &#096;r&#096;n ). This will let the word <code>DEBUG</code> appear on a line by itself. Also note I indented the remaining lines two spaces, and used periods so the colons could be aligned. It's a simple bit of formatting, but it makes the provided information much easier to read.

On the first line I have the name of the function. You'd be surprised how useful this can be. When developing a module or a large complex script with many functions, there may be times when you think your script is calling one function when it is actually calling another.

In this example I then show the file name, including the full path to the file. This can be a useful bit of information to the developer, as it lets us know exactly which directory we are in. Especially useful as the main function only displays the file name, not the full path to the file. The line after shows the file length.

I then display some environmental information. First, I show the value in the previously mentioned <code>$DebugPreference</code> variable. This, perhaps, could help me understand why some debug messages are not getting displayed.

On the next line I show the version of PowerShell this code is running in. Again, a potentially valuable piece of information. There's always the possibility the developer is running a different version of PowerShell than the user having issues, and this may be a clue to an issue.

Finally, we call the <code>Write-Debug</code> cmdlet. The remaining code is the same as the original function from my previous blog post.

After you highlight the function and run it to put it in memory, let's call it. For this demo I created a folder <code>C:\Demo</code> and copied a few random files into it.

First, let's call it without the <code>-Debug</code> switch.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo
[/code]

Result:

[code lang=text]
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 11,200 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
SQLServer2019-x64-ENU-Dev.iso is 1,433,974,784 bytes long.
ubuntu-20.10-desktop-amd64.iso is 2,942,003,200 bytes long.
WideWorldImporters-2021-03-29.zip is 731,246,592 bytes long.
WideWorldImportersDW-2021-03-29.zip is 237,830,144 bytes long.
[/code]

OK, so far so good. Since we didn't use the <code>-Debug</code> switch, the <code>Write-Debug</code> statement is ignored. Now let's call it again, only this time we'll use <code>-Debug</code> when calling <code>Show-FileInfo</code>.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Debug
[/code]

Result:

[code lang=text]
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\06 - Logic Branching and Looping.ps1
  File Length....: 4,315 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\07 - Functions.ps1
  File Length....: 11,200 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
07 - Functions.ps1 is 11,200 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\08 - Classes.ps1
  File Length....: 6,210 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
08 - Classes.ps1 is 6,210 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\09 - Examples.ps1
  File Length....: 3,125 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
09 - Examples.ps1 is 3,125 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\SQLServer2019-x64-ENU-Dev.iso
  File Length....: 1,433,974,784 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
SQLServer2019-x64-ENU-Dev.iso is 1,433,974,784 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\ubuntu-20.10-desktop-amd64.iso
  File Length....: 2,942,003,200 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
ubuntu-20.10-desktop-amd64.iso is 2,942,003,200 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImporters-2021-03-29.zip
  File Length....: 731,246,592 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
WideWorldImporters-2021-03-29.zip is 731,246,592 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImportersDW-2021-03-29.zip
  File Length....: 237,830,144 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
WideWorldImportersDW-2021-03-29.zip is 237,830,144 bytes long.
[/code]

As you can see, our debugging messages are now displayed. For each file it shows the debug message, then shows the normal output of the function, the file name and size.

While a simple example, seeing not just the file name but the full file name including its path could supply valuable information to the developer, not to mention the environmental information.

What about the verbose messages? Well there's no problem using both switches to see all the messages.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Verbose -Debug
[/code]

Result (note a few files were omitted for brevity):

[code lang=text]
VERBOSE:
  Function: Show-FileInfo
  Starting at 2021-08-17 05:48:44 PM
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.

*** Some rows removed here for brevity ***

DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImportersDW-2021-03-29.zip
  File Length....: 237,830,144 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
WideWorldImportersDW-2021-03-29.zip is 237,830,144 bytes long.
VERBOSE:
  Function: Show-FileInfo
  Finished at 2021-08-17 05:48:44 PM
  Elapsed Time 24.4972 Milliseconds
[/code]

As you can see, we get the starting and ending messages from the use of <code>-Verbose</code>, as well as the debugging messages.

<h2>$DebugPreference - Digging Deeper</h2>

<h3>Inquire</h3>

In an earlier section of this post we introduced the built-in variable, <code>$DebugPreference</code>, and discussed two of its possible settings, <code>Continue</code> and <code>SilentlyContinue</code>.

What if, though, we wanted PowerShell to stop every time it encounters a <code>Write-Debug</code>?

To do that, we can set the <code>$DebugPreference</code> value to <code>Inquire</code>, as we'll do in our process block.

[code lang=powershell]
  process
  {
    $DebugPreference = &#039;Inquire&#039;

    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }
[/code]

Run the function to get the new version into memory, then let's call <code>Show-FileInfo</code> again.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Debug
[/code]

This time, it displays our first debug message, but then displays a prompt in the terminal window.

Result:

[code lang=text]
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
[/code]

You now have the option to hit <code>Y</code> to continue (or just press ENTER), or stop by pressing <code>H</code> to stop execution. In this case, using <code>S</code> to suspend has the same affect as halting.

What about <code>A</code>, for <code>Yes to All</code>? You might think it will just run the rest of the script without stopping. For this demo though, that's not the case. The <code>A</code> option is meant for the rare situations where you are piping data through the <code>Write-Debug</code> cmdlet.

In our demo, as I suspect in most situations you'll encounter, pressing <code>A</code> has the same effect as pressing <code>Y</code>.

<h3>Stop</h3>

Using <code>Inquire</code> we can prompt the developer (or the person running the script) as to what they want to do once they hit the <code>Write-Debug</code>. Let's imagine a situation though where want our script to stop running. In a moment we'll look at a situation where this can be useful, but for now let's just see stop in action.

Here we'll just change our <code>$DebugPreference</code> to <code>Stop</code>.

[code lang=powershell]
  process
  {
    $DebugPreference = &#039;Stop&#039;

    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }
[/code]

As usual, re-run the function to refresh the version in memory, then call <code>Show-FileInfo</code> again.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Debug
[/code]

Result:

[code lang=text]
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Stop
  PS Version.....: 7.1.4
Write-Debug:
Line |
  30 |      Write-Debug -Message $dbgMsg
     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     | The running command stopped because the preference variable &quot;DebugPreference&quot; or common parameter is set to Stop:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Stop
  PS Version.....: 7.1.4
[/code]

You can see our debug message was displayed, then we got a message to let us know the debug preference was set to stop, which is why code execution stopped.

<h3>Conditional Stopping</h3>

The stop command becomes more useful when we make the stop conditional. We want our code to keep running until we find a certain condition. Once we find it, we'll display debugging information then stop our script.

While <code>Write-Debug</code> doesn't have a built in method for this, we can construct the code ourselves using a simple <code>if</code> statement. For this demo we'll display our debug message until the point we hit a specified condition.

[code lang=powershell]
  process
  {
    if ($file.Length -gt 100000)
      { $DebugPreference = &#039;Stop&#039; }
    else
      { $DebugPreference = &#039;Continue&#039; }

    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }
[/code]

In this example, pretend we know something goes wrong when our file length exceeds 100 KB (100,000 bytes). We use an <code>if</code> statement to check the length. If it is greater than 100,000 bytes, it will set the <code>$DebugPreference</code> to <code>Stop</code>, otherwise it will set it to <code>Continue</code>.

Note we could have also chosen not to call <code>Write-Debug</code> at all if the length is less then 100,000 bytes, or any other number of things. I chose to go ahead and display the debug info in this case, as there's always the possibility it may provide useful information. Let's update our function in memory by running it, then we can execute it.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Debug
[/code]

Result:

[code lang=text]
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\06 - Logic Branching and Looping.ps1
  File Length....: 4,315 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\07 - Functions.ps1
  File Length....: 11,200 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
07 - Functions.ps1 is 11,200 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\08 - Classes.ps1
  File Length....: 6,210 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
08 - Classes.ps1 is 6,210 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\09 - Examples.ps1
  File Length....: 3,125 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
09 - Examples.ps1 is 3,125 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\SQLServer2019-x64-ENU-Dev.iso
  File Length....: 1,433,974,784 bytes.
  DebugPreference: Stop
  PS Version.....: 7.1.4
Write-Debug:
Line |
  33 |      Write-Debug -Message $dbgMsg
     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     | The running command stopped because the preference variable &quot;DebugPreference&quot; or common parameter is set to Stop:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\SQLServer2019-x64-ENU-Dev.iso
  File Length....: 1,433,974,784 bytes.
  DebugPreference: Stop
  PS Version.....: 7.1.4
[/code]

As you can see, the first file we encounter with a length of 100,000 bytes or greater causes execution to stop.

Bear in mind, using <code>Stop</code> has a dramatic effect on your code. For my normal day to day development I may use a <code>Stop</code>, but when I send this script to production I'd either remove the stop logic all together, or at least replace it with the previously discussed <code>Inquire</code> setting.

Also note that if you use <code>Stop</code>, the script <strong>STOPS</strong>. The <code>end</code> block will never execute. This could potentially leave your script, as well as the scripting environment in an unstable state. So as cool as the <code>Stop</code> setting is, I recommend you use it sparingly and as a general rule do not include it in production code.

<h2>Resetting $DebugPreference</h2>

Once your script is done, it's a good idea to restore the <code>$DebugPreference</code> setting so it is in a default state for next time. Of course, in the <code>end</code> block you could simply add <code>$DebugPreference = 'SilentlyContinue'</code> (or <code>Continue</code>), but what if that wasn't the state when your script began?

It's a better idea to capture the state of <code>$DebugPreference</code> when your script begins. So in the 'begin' block, we'll add a line at the very top, <code>$currentDebugPreference = $DebugPreference</code>.

Then in the <code>end</code> block we'll add a line to reset the debug preference variable to its value from the start of the script, <code>$DebugPreference = $currentDebugPreference</code>.

Below is the completed script with one other alteration, which you'll find in the <code>process</code> block. I changed the <code>Stop</code> to <code>Inquire</code> and the <code>Continue</code> to <code>SilentlyContinue</code>. The first change will give us the option to stop or continue. The second will suppress the debug message for the files we (in our fictional scenario) know are OK, those below 100,000 bytes. This was done just for demo purposes, so you could see the effect of the various settings for <code>$DebugPreference</code>.

[code lang=powershell]
function Show-FileInfo ()
{
  [CmdletBinding()]
  param ( [Parameter (ValueFromPipeline)]
          $file
        )

  begin
  {
    $currentDebugPreference = $DebugPreference
    $fn = &quot;$($PSCmdlet.MyInvocation.MyCommand.Name)&quot;
    $st = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Starting at $($st.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }

  process
  {
    if ($file.Length -gt 100000)
      { $DebugPreference = &#039;Inquire&#039; }
    else 
      { $DebugPreference = &#039;SilentlyContinue&#039; }

    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }

  end
  {
    $DebugPreference = $currentDebugPreference
    $et = Get-Date
    $rt = $et - $st  # Run Time

    # Format the output time
    if ($rt.TotalSeconds -lt 1)
      { $elapsed = &quot;$($rt.TotalMilliseconds.ToString(&#039;#,0.0000&#039;)) Milliseconds&quot; }
    elseif ($rt.TotalSeconds -gt 60)
      { $elapsed = &quot;$($rt.TotalMinutes.ToString(&#039;#,0.0000&#039;)) Minutes&quot; }
    else
      { $elapsed = &quot;$($rt.TotalSeconds.ToString(&#039;#,0.0000&#039;)) Seconds&quot; }

    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
  Elapsed Time $elapsed
&quot;@
  }
}
[/code]

Now let's run it, after highlighting the function and executing it so it is refreshed in memory. First I'll set the <code>$DebugPreference</code> to <code>Continue</code>, so it will be different from either the <code>Inquire</code> or <code>SilentlyContinue</code>. Then I'll call it, using both the <code>Verbose</code> and <code>Debug</code> switches. Finally I'll display the <code>$DebugPreference</code> again, to prove it was reset at the end of the function. Note too when the <code>Inquire</code> kicks in I will just answer <code>Y</code> so the script can complete normally.

[code lang=powershell]
$DebugPreference = &#039;Continue&#039;
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Verbose -Debug
$DebugPreference
[/code]

Result:

[code lang=text]
VERBOSE:   
  Function: Show-FileInfo
  Starting at 2021-08-17 06:25:46 PM
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 11,200 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
DEBUG: 
  Function.......: Show-FileInfo
  File Name......: C:\Demo\SQLServer2019-x64-ENU-Dev.iso
  File Length....: 1,433,974,784 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
SQLServer2019-x64-ENU-Dev.iso is 1,433,974,784 bytes long.
DEBUG: 
  Function.......: Show-FileInfo
  File Name......: C:\Demo\ubuntu-20.10-desktop-amd64.iso
  File Length....: 2,942,003,200 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
ubuntu-20.10-desktop-amd64.iso is 2,942,003,200 bytes long.
DEBUG: 
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImporters-2021-03-29.zip
  File Length....: 731,246,592 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
WideWorldImporters-2021-03-29.zip is 731,246,592 bytes long.
DEBUG: 
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImportersDW-2021-03-29.zip
  File Length....: 237,830,144 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
WideWorldImportersDW-2021-03-29.zip is 237,830,144 bytes long.
VERBOSE:   
  Function: Show-FileInfo
  Finished at 2021-08-17 06:25:57 PM
  Elapsed Time 11.7336 Seconds
Continue
[/code]

As you would probably expect by this point in the post, we show our verbose information. We then see a list of files from the normal code in the script. The debug messages for files under 100,000 bytes were suppressed because we'd set the <code>$DebugPreference</code> to <code>SilentlyContinue</code>.

We then see the debug messages, along with inquiries as to our wish to continue. Since we said yes to all of them, the code in the <code>end</code> block was able to execute and display the closing verbose message.

The very last line of the result is <code>Continue</code>, which came from the last line we used to run the script, <code>$DebugPreference</code>. This confirms the value was indeed reset to the value that was present when the script started.

<h2>Conclusion</h2>

Well this was a monster sized post, so thanks for sticking with it to the end. In it, we saw how the built in <code>-Debug</code> switch works along with the companion <code>Write-Debug</code>. We also covered the built-in PowerShell variable <code>$DebugPreference</code>, and saw how it can affect the behavior of the <code>Write-Debug</code> cmdlet.

As you can see, the use of <code>Debug</code> can provide valuable feedback to you as a PowerShell developer, supplying critical information about the internal state of your script as well as the environment it is running in.

If you want to learn more about PowerShell, check out my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.

If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses or any other course on the site.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4179</wp:post_id>
  <wp:post_date>2021-10-04 09:00:26</wp:post_date>
  <wp:post_date_gmt>2021-10-04 15:00:26</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 18:29:13</wp:post_modified>
  <wp:post_modified_gmt>2021-08-21 00:29:13</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-write-debug</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="debug"><![CDATA[Debug]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="write-debug"><![CDATA[Write-Debug]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4181]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[63760889872]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1633359632]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1445041153934598146";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_311522954111957";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165856</wp:comment_id>
    <wp:comment_author><![CDATA[Write-Debug in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/10/06/write-debug-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-10-06 06:10:13</wp:comment_date>
    <wp:comment_date_gmt>2021-10-06 12:10:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain goes from verbose to debug mode: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633527441.727001;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633522213.195294;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166819</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:27</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] For more info on Write-Verbose and Write-Debug, see my posts Fun With PowerShell Write-Verbose and Fun With PowerShell Write-Debug. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835121.245818;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826827.455935;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-write-debug</title>
  <link>http://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/fun-with-powershell-write-debug/</link>
  <pubDate>Fri, 20 Aug 2021 23:46:29 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/08/fun-with-powershell-write-debug.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4181</wp:post_id>
  <wp:post_date>2021-08-20 17:46:29</wp:post_date>
  <wp:post_date_gmt>2021-08-20 23:46:29</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 17:46:29</wp:post_modified>
  <wp:post_modified_gmt>2021-08-20 23:46:29</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-write-debug</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4179</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/08/fun-with-powershell-write-debug.png</wp:attachment_url>
</item>
<item>
  <title>Fun With VSCode Snippets for Markdown and PowerShell</title>
  <link>http://arcanecode.com/2021/10/11/fun-with-vscode-snippets-for-markdown-and-powershell/</link>
  <pubDate>Mon, 11 Oct 2021 15:00:15 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4183</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>

I have a confession. I love Markdown. There I said it, my confession is out in the open for all to see.

Seriously though, I do find this documentation language very useful, and easy to use. With just a few commands I can produce a nicely formatted document that can be displayed in my code editor, as well as on platforms like GitHub. I've even begun authoring these blog posts in Markdown.

A big reason for me is the ability to integrate it into my projects. VSCode, as well as the full blow Visual Studio, support Markdown (with of course the proper extensions installed). When I create a new PowerShell project in VSCode, I can store the projects documentation in Markdown format right alongside the PowerShell code.

Speaking of VSCode...

<h2>VSCode Snippets</h2>

A great thing about VSCode is the ability to create your own code <em>snippets</em>. A snippet is a text replacement system where I can enter a few characters of text and VSCode will then replace it with the full snippet. Snippets are activated using the <em>Intellisense</em> feature of VSCode.

One example, I have a standard header I put at the top of my PowerShell scripts. When I defined this header as a snippet, I named it <code>psheader</code>. Now I can enter <code>pshead</code> into my PowerShell script. VSCode's intellisense feature will prompt me with the list of snippets I have that being with <code>pshead</code>. I can then pick the one I want (<code>psheader</code>), press enter and the snippet of <code>psheader</code> will be replaced with the full text of my file header.

By default, pretty much every language in VSCode has the ability to handle snippets.

Except Markdown.

<h2>Markdown Snippets in VSCode</h2>

Shocking right? How could such an awesome language like Markdown not have snippets? (And yes, Markdown may not be a language in the strictest sense, but it's a close enough word for now.)

Well it's possible to enable Markdown snippets in PowerShell. Sometime back I created a GitHub project that shows you how to enable and use snippets for Markdown. In addition, I included my snippets for both PowerShell and Markdown.

Rather than reiterating everything here, I'll just point you to that repository.

<a href="https://github.com/arcanecode/VSCode_User_Snippets" target="_blank">https://github.com/arcanecode/VSCode_User_Snippets</a>

The main file in the repository, <code>ReadMe.md</code> gives a brief overview and explanation on how to use snippets.

The file <code>Enable_Intellisense_in_Markdown.md</code> does just what is says, shows you how to enable intellisense for Markdown in VSCode.

In VSCode, you can use certain replacements in your snippets. For example, you can embed the <code>$CURRENT_YEAR</code> snippet variable in your snippet (no matter what language) and when the snippet is generated into your code, it will replace the <code>$CURRENT_YEAR</code> with the actual current year.

I included a file, <code>Snippet_Reference.md</code> that lists the various snippet variables and gives a bit more explanation on how to use them.

If you aren't familiar with Markdown, or don't use it very often, you'll find the file <code>Markdown_Cheatsheet.md</code> useful. It has a list of the most often used Markdown formatting commands.

Finally I included two <code>.json</code> files. These are the snippets I use for PowerShell and Markdown on my system. You can use these as a guide in creating your own snippets, or copy the ones you find useful onto your VSCode installation.

If you use the VSCode sync settings feature, they you will be happy to know snippets are included as part of the sync process. You can modify your snippet files on one computer and they will be copied to all the other computers you sync VSCode on.

<h2>Conclusion</h2>

This was a brief post that primarily served to bring awareness to snippets, as well as the ability to use them with Markdown files. Go take a look at the <a href="https://github.com/arcanecode/VSCode_User_Snippets" target="_blank">repository</a> and with just a little effort I believe you'll find yourself becoming much more productive with the addition of snippets to your toolbox.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4183</wp:post_id>
  <wp:post_date>2021-10-11 09:00:15</wp:post_date>
  <wp:post_date_gmt>2021-10-11 15:00:15</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 18:24:41</wp:post_modified>
  <wp:post_modified_gmt>2021-08-21 00:24:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-vscode-snippets-for-markdown-and-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="intellisense"><![CDATA[Intellisense]]></category>
  <category domain="category" nicename="markdown"><![CDATA[Markdown]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="snippets"><![CDATA[Snippets]]></category>
  <category domain="category" nicename="vscode"><![CDATA[VSCode]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4184]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[64030502285]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1633964426]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1447577841634320389";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_315929500337969";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165922</wp:comment_id>
    <wp:comment_author><![CDATA[Visual Studio Code, Markdown, and Snippets &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/10/15/visual-studio-code-markdown-and-snippets/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-10-15 06:05:20</wp:comment_date>
    <wp:comment_date_gmt>2021-10-15 12:05:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain takes us through Markdown and snippets in Visual Studio Code: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634299520.689605;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634303645.561642;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-vscode-code-snippets</title>
  <link>http://arcanecode.com/2021/10/11/fun-with-vscode-snippets-for-markdown-and-powershell/fun-with-vscode-code-snippets/</link>
  <pubDate>Fri, 20 Aug 2021 23:58:42 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/08/fun-with-vscode-code-snippets.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4184</wp:post_id>
  <wp:post_date>2021-08-20 17:58:42</wp:post_date>
  <wp:post_date_gmt>2021-08-20 23:58:42</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 17:58:42</wp:post_modified>
  <wp:post_modified_gmt>2021-08-20 23:58:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-vscode-code-snippets</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4183</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/08/fun-with-vscode-code-snippets.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Providers</title>
  <link>http://arcanecode.com/2021/10/18/fun-with-powershell-providers/</link>
  <pubDate>Mon, 18 Oct 2021 23:15:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4205</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Providers are an interesting concept in PowerShell. A provider allows us to use a standard method to communicate with different areas of your computer using the same set of commands. For example, the file system is accessed using a provider. When you use <code>Get-ChildItem</code> it goes through the file system provider to return a list of the files on your computer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.5, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Listing the Providers</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To start with, let's get a list of the available providers. To do that, PowerShell has the <code>Get-PSProvider</code> cmdlet.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-PSProvider</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Name         Capabilities                        Drives
----         ------------                        ------
Registry     ShouldProcess                       {HKLM, HKCU}
Alias        ShouldProcess                       {Alias}
Environment  ShouldProcess                       {Env}
FileSystem   Filter, ShouldProcess, Credentials  {C, D, E, H…}
Function     ShouldProcess                       {Function}
Variable     ShouldProcess                       {Variable}
Certificate  ShouldProcess                       {Cert}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, there are a variety of providers available out of the box. The default provider is the <code>FileSystem</code>. As stated in the introduction, when you use <code>Get-ChildItem</code> it goes through the <code>FileSystem</code> provider to get a list of files, or more specifically file system objects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the right most column of the output, you can see a list of drives. Using the drives we can navigate the provider. To see a detailed list of drives, you can use the <code>Get-PSDrive</code> cmdlet.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-PSDrive</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Name           Used (GB)     Free (GB) Provider      Root                 CurrentLocation
----           ---------     --------- --------      ----                 ---------------
Alias                                  Alias
C                 898.79         53.83 FileSystem    C:\                  \Demo\PSCore-QuickStart
Cert                                   Certificate   \
D                 953.72          0.02 FileSystem    D:\
E                 875.38         56.00 FileSystem    E:\
Env                                    Environment
Function                               Function
HKCU                                   Registry      HKEY_CURRENT_USER
HKLM                                   Registry      HKEY_LOCAL_MACHINE
Variable                               Variable
WSMan                                  WSMan</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The <code>Name</code> column shows the name we will use when we want to change our location. First look at the column <code>Provider</code>, then at the rows with <code>FileSystem</code>. It shows three drives, C, D, and E. These are the three hard drives on my computer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>CurrentLocation</code> shows where we are in the provider tree. In the <code>FileSystem</code> provider, these locations are folders. For the C drive, I happen to be in the <code>\Demo\PSCore-QuickStart</code> folder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's look at how to use some of the other providers.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Environment Provider</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To change to a different provider, you simply use <code>Set-Location</code> followed by the name to move to, just as you would to change to a different hard drive.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Set-Location env
Get-ChildItem</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Name                           Value
----                           -----
__COMPAT_LAYER                 DetectorsAppHealth
ALLUSERSPROFILE                C:\ProgramData
APPDATA                        C:\Users\arcan\AppData\Roaming
CHROME_CRASHPAD_PIPE_NAME      \\.\pipe\crashpad_7700_VQTNLEXXNDEMJHTN
COLORTERM                      truecolor
CommonProgramFiles             C:\Program Files\Common Files
CommonProgramFiles(x86)        C:\Program Files (x86)\Common Files
CommonProgramW6432             C:\Program Files\Common Files
...list truncated for brevity...</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This time <code>Get-ChildItem</code> recognized it was operating in the context of the Environment provider, and returned a list of environment variables and their values. (Note I've shortened the output for brevity.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can access these like any other collection.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$envVars = Get-ChildItem
$envVars&#091;1].Name
$envVars&#091;1].Value</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>ALLUSERSPROFILE
C:\ProgramData</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's look at another provider.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Variable Provider</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another useful provider is the <code>Variable</code> provider. It gives access to a list of all variables and their values currently in memory. This includes both user defined variables and built in PowerShell variables. In this example I'll create a new variable, <code>$aVariable</code>. I'll then move to the variable provider and list them.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$aVariable = 'Some Value'
Set-Location variable
Get-ChildItem</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Name                           Value
----                           -----
?                              True
^                              Set-Location
$                              Get-ChildItem
args                           {}
aVariable                      Some Value
ConfirmPreference              High
DebugPreference                SilentlyContinue
...list truncated for brevity...</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This returns both the names and values for all of the variables. This can be an excellent debugging tool, for example logging all values when an error occurs.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Other Providers</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In addition to the built in list of providers you have seen, many modules will add their own providers that you can navigate. On of my favorites is the SQL Server module. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll go over it more in a future post, but know that through it you can use <code>Get-ChildItem</code> to navigate your list of servers, instances, databases, tables, and columns all as if they were your file system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You will find many modules supply providers you'll find useful.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we took a brief look at providers, and how to navigate them. In addition, you are now aware there is a big world of providers outside the few default ones you saw in this post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The demos in this series of blog posts came from my Pluralsight course <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/jWzbre" target="_blank">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/" target="_blank" rel="noreferrer noopener">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4205</wp:post_id>
  <wp:post_date>2021-10-18 17:15:00</wp:post_date>
  <wp:post_date_gmt>2021-10-18 23:15:00</wp:post_date_gmt>
  <wp:post_modified>2021-10-18 16:08:36</wp:post_modified>
  <wp:post_modified_gmt>2021-10-18 22:08:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-providers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="providers"><![CDATA[Providers]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4196]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[64308812960]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1634598971]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1450239317448744964";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_320766509854268";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166005</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 42/2021 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19834-Die-KW-422021-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2021-10-24 15:45:59</wp:comment_date>
    <wp:comment_date_gmt>2021-10-24 21:45:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] PowerShell Providers scheinen so eine Art Fassade oder Adapter zu sein. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1635115897.580764;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1635111959.558057;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165970</wp:comment_id>
    <wp:comment_author><![CDATA[The Purpose of Powershell Providers &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/10/21/the-purpose-of-powershell-providers/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-10-21 06:05:14</wp:comment_date>
    <wp:comment_date_gmt>2021-10-21 12:05:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain explains what providers do in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634817914.090371;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634822396.334413;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun with PowerShell Enums</title>
  <link>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/</link>
  <pubDate>Mon, 15 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4244</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nThis post begins a series on using _Classes_ in PowerShell. As a first step, we will cover the use of an `Enum`, as enums are frequently used in combination with classes.\n\nAn Enum is a way to provide a set of predetermined values to the end user. This allows the user to pick from a finite list, and assure a value being passed into a function or class will be valid.\n\nWe'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Basic Enum Declaration\n\n`Enum` is short for _enumerated value_. As mentioned in the intro, it is a set of predetermined values that will ensure users of your script select a valid value required by your PowerShell code. Let's start by defining a basic `Enum`.\n\n```powershell\nEnum MyTwitters\n{\n  ArcaneCode\n  ArcaneTC\n  N4IXT\n}\n```\n\nAs you can see, the basic declaration is very simple. You simply use the keyword `Enum` followed by what you wish to name it. In the squiggly braces you list the valid values.\n\nHere I've listed three of my Twitter accounts. The first is the main one I use, _ArcaneCode_. The second is the one I use for my company _ArcaneTC_ (short for Arcane Training and Consulting). I use it primarily to announce new Pluralsight courses, so it doesn't see a huge amount of use.\n\nOne of my hobbies is amateur radio, also known as _ham radio_. _N4IXT_ is my FCC assigned amateur radio call sign I use to identify myself on the air. I don't post a lot, I use it mostly to read through the latest news in the ham radio world.\n\nNote that Enums cannot have spaces in their names, although you could use separators such as an underscore. *Arcane_Code* would be a valid value for an enum.\n\n## What are my valid Enum values?\n\nYou've now created an `Enum`, perhaps you've included it within a module you are providing to other programmers in your company. How can they retrieve a list of valid values?\n\nHopefully you've provided documentation, but it's also easy for a user to have PowerShell return a list of values. First, make sure you have executed the code above by highlighting it and using F8 (VSCode) or F5 (PowerShell IDE) to get the Enum into memory. Then you can run the line of code below. \n\n```powershell\n[MyTwitters].GetEnumNames()\n```\n\nResult:\n\n```\nArcaneCode\nArcaneTC\nN4IXT\n```\n\nAs you can see, it simply returns a list of the values that we declared in the Enum.\n\n## Assigning an Enum to a Variable\n\nNow we have our enum, and know what the values are. We're now ready to use our enum in our script. Here I'll just assign it to a variable, but we could also pass an enumerated value into a function.\n\nBegin typing out the following code sample, and note what happens when you hit the second colon.\n\n```powershell\n$tweet = [MyTwitters]::\n```\n\nWhen you have entered the second colon, you should see a list of the enumerated values in VSCode.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>This post begins a series on using <em>Classes</em> in PowerShell. As a first step, we will cover the use of an <code>Enum</code>, as enums are frequently used in combination with classes.</p>
<p>An Enum is a way to provide a set of predetermined values to the end user. This allows the user to pick from a finite list, and assure a value being passed into a function or class will be valid.</p>
<p>We'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Basic Enum Declaration</h2>
<p><code>Enum</code> is short for <em>enumerated value</em>. As mentioned in the intro, it is a set of predetermined values that will ensure users of your script select a valid value required by your PowerShell code. Let's start by defining a basic <code>Enum</code>.</p>
<pre><code class="language-powershell">Enum MyTwitters
{
  ArcaneCode
  ArcaneTC
  N4IXT
}
</code></pre>
<p>As you can see, the basic declaration is very simple. You simply use the keyword <code>Enum</code> followed by what you wish to name it. In the squiggly braces you list the valid values.</p>
<p>Here I've listed three of my Twitter accounts. The first is the main one I use, <em>ArcaneCode</em>. The second is the one I use for my company <em>ArcaneTC</em> (short for Arcane Training and Consulting). I use it primarily to announce new Pluralsight courses, so it doesn't see a huge amount of use.</p>
<p>One of my hobbies is amateur radio, also known as <em>ham radio</em>. <em>N4IXT</em> is my FCC assigned amateur radio call sign I use to identify myself on the air. I don't post a lot, I use it mostly to read through the latest news in the ham radio world.</p>
<p>Note that Enums cannot have spaces in their names, although you could use separators such as an underscore. <em>Arcane_Code</em> would be a valid value for an enum.</p>
<h2>What are my valid Enum values?</h2>
<p>You've now created an <code>Enum</code>, perhaps you've included it within a module you are providing to other programmers in your company. How can they retrieve a list of valid values?</p>
<p>Hopefully you've provided documentation, but it's also easy for a user to have PowerShell return a list of values. First, make sure you have executed the code above by highlighting it and using F8 (VSCode) or F5 (PowerShell IDE) to get the Enum into memory. Then you can run the line of code below.</p>
<pre><code class="language-powershell">[MyTwitters].GetEnumNames()
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
ArcaneTC
N4IXT
</code></pre>
<p>As you can see, it simply returns a list of the values that we declared in the Enum.</p>
<h2>Assigning an Enum to a Variable</h2>
<p>Now we have our enum, and know what the values are. We're now ready to use our enum in our script. Here I'll just assign it to a variable, but we could also pass an enumerated value into a function.</p>
<p>Begin typing out the following code sample, and note what happens when you hit the second colon.</p>
<pre><code class="language-powershell">$tweet = [MyTwitters]::
</code></pre>
<p>When you have entered the second colon, you should see a list of the enumerated values in VSCode.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"align":"center","id":4247,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-01-vscode.png"><img src="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-01-vscode.png?w=647" alt="" class="wp-image-4247" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"I say _should_ as sometimes I've had VSCode return enums that were declared in my script, and not for the specific enum I was working with.\n\nIn the PowerShell ISE though, I've had it work right every time.\n"} -->
<div class="wp-block-jetpack-markdown"><p>I say <em>should</em> as sometimes I've had VSCode return enums that were declared in my script, and not for the specific enum I was working with.</p>
<p>In the PowerShell ISE though, I've had it work right every time.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"align":"center","id":4248,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-02-ise.png"><img src="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-02-ise.png?w=393" alt="" class="wp-image-4248" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"When complete, your assignment should look like:\n\n```powershell\n$tweet = [MyTwitters]::ArcaneCode\n```\n\n## Is it Valid?\n\nSo you have a value from the enum copied into your variable, `$tweet`. How do we test it?\n\nIt's important to understand enums are objects. In addition to the values you provide they have a set of properties and methods you can use. In the previous example, you saw the `GetEnumNames` method being used.\n\nAnother useful method is `IsDefined`.\n\n```powershell\n[enum]::IsDefined(([MyTwitters]), $tweet)\n```\n\nResult:\n\n```\nTrue\n```\n\nInto the `IsDefined` method you pass in your enumeration, then the value you want to test. Here our value is in the variable `$tweet`. If the value is contained in the enum, the method returns `True`.\n\nWhat if the user passes in a value that is not contained in our enum?\n\n```powershell\n$tweet = 'Invalid'\n[enum]::IsDefined(([MyTwitters]), $tweet)\n```\n\nResult:\n\n```\nFalse\n```\n\nReturning `False` makes it easy to use an `if` statement and raise an error if the user tries to use an invalid value. For more on the `if` statement, see my post [Fun with PowerShell Logic Branching](https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/).\n\n## Conclusion\n\nFor these examples we used my Twitter accounts for our enum values, but there are many more uses some of them extremely common. You could load an enum with the days of the week, months of the year, colors, and other common values your scripts might use.\n\nIn the introduction I mentioned we are starting our series on classes with the enum as enums are frequently used with classes. However this is not a requirement. You can use enums with any PowerShell code you want to write.\n\nIn the my next post we'll continue exploring the enum. We'll look at a few more useful methods, as well as see how to assign values to our enum values.\n\nThe demos in this series of blog posts came from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><p>When complete, your assignment should look like:</p>
<pre><code class="language-powershell">$tweet = [MyTwitters]::ArcaneCode
</code></pre>
<h2>Is it Valid?</h2>
<p>So you have a value from the enum copied into your variable, <code>$tweet</code>. How do we test it?</p>
<p>It's important to understand enums are objects. In addition to the values you provide they have a set of properties and methods you can use. In the previous example, you saw the <code>GetEnumNames</code> method being used.</p>
<p>Another useful method is <code>IsDefined</code>.</p>
<pre><code class="language-powershell">[enum]::IsDefined(([MyTwitters]), $tweet)
</code></pre>
<p>Result:</p>
<pre><code>True
</code></pre>
<p>Into the <code>IsDefined</code> method you pass in your enumeration, then the value you want to test. Here our value is in the variable <code>$tweet</code>. If the value is contained in the enum, the method returns <code>True</code>.</p>
<p>What if the user passes in a value that is not contained in our enum?</p>
<pre><code class="language-powershell">$tweet = 'Invalid'
[enum]::IsDefined(([MyTwitters]), $tweet)
</code></pre>
<p>Result:</p>
<pre><code>False
</code></pre>
<p>Returning <code>False</code> makes it easy to use an <code>if</code> statement and raise an error if the user tries to use an invalid value. For more on the <code>if</code> statement, see my post <a href="https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/">Fun with PowerShell Logic Branching</a>.</p>
<h2>Conclusion</h2>
<p>For these examples we used my Twitter accounts for our enum values, but there are many more uses some of them extremely common. You could load an enum with the days of the week, months of the year, colors, and other common values your scripts might use.</p>
<p>In the introduction I mentioned we are starting our series on classes with the enum as enums are frequently used with classes. However this is not a requirement. You can use enums with any PowerShell code you want to write.</p>
<p>In the my next post we'll continue exploring the enum. We'll look at a few more useful methods, as well as see how to assign values to our enum values.</p>
<p>The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4244</wp:post_id>
  <wp:post_date>2021-11-15 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-15 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-14 22:57:21</wp:post_modified>
  <wp:post_modified_gmt>2021-11-15 04:57:21</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-enums</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="enum"><![CDATA[Enum]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4252]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65386392103]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1636992033]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1460276546506313728";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_338134988117420";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166261</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 46/2021 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19840-Die-KW-462021-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2021-11-21 16:59:09</wp:comment_date>
    <wp:comment_date_gmt>2021-11-21 22:59:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Klassen, ENums, PowerShell? Hier erhaltet ihr Informationen. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637535549.161509;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637539588.755115;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166374</wp:comment_id>
    <wp:comment_author><![CDATA[More Fun with PowerShell Enums | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.30</wp:comment_author_IP>
    <wp:comment_date>2021-11-29 10:00:59</wp:comment_date>
    <wp:comment_date_gmt>2021-11-29 16:00:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a previous post, Fun with PowerShell Enums I introduced the concept of [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638201659.676432;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638205800.507582;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166267</wp:comment_id>
    <wp:comment_author><![CDATA[Using Enums in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/11/22/using-enums-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-11-22 07:10:09</wp:comment_date>
    <wp:comment_date_gmt>2021-11-22 13:10:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain quietly tells us that Powershell is a real programming language, sysadmins who claim to &#8230;: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637591060.562544;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637586609.600626;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-enums-03-header</title>
  <link>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/fun-with-powershell-enums-03-header/</link>
  <pubDate>Mon, 15 Nov 2021 04:53:53 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header.png</guid>
  <description/>
  <content:encoded><![CDATA[How to declare an enum]]></content:encoded>
  <excerpt:encoded><![CDATA[Declaring an Enum]]></excerpt:encoded>
  <wp:post_id>4251</wp:post_id>
  <wp:post_date>2021-11-14 22:53:53</wp:post_date>
  <wp:post_date_gmt>2021-11-15 04:53:53</wp:post_date_gmt>
  <wp:post_modified>2021-11-14 22:54:20</wp:post_modified>
  <wp:post_modified_gmt>2021-11-15 04:54:20</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-enums-03-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Enum Declaration]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>fun-with-powershell-enums-03-header</title>
  <link>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/fun-with-powershell-enums-03-header-2/</link>
  <pubDate>Mon, 15 Nov 2021 04:56:07 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4252</wp:post_id>
  <wp:post_date>2021-11-14 22:56:07</wp:post_date>
  <wp:post_date_gmt>2021-11-15 04:56:07</wp:post_date_gmt>
  <wp:post_modified>2021-11-14 22:56:07</wp:post_modified>
  <wp:post_modified_gmt>2021-11-15 04:56:07</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-enums-03-header-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header-1.png</wp:attachment_url>
</item>
<item>
  <title>More Fun with PowerShell Enums</title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/</link>
  <pubDate>Mon, 29 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4261</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn a previous post, [Fun with PowerShell Enums](https://arcanecode.com/2021/11/15/fun-with-powershell-enums/) I introduced the concept of _Enums_.\n\nIn this post we'll dive deeper into enums, taking a look at more of its properties a well as other ways to use enums.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Enums for Code Clarity\n\nOne major way enums can be used is to clarify your code. In my previous post on enums I mentioned I was a ham radio operator. The clubs I belong to meet on alternate Thursday nights. Let's say I wrote a small PowerShell function to let me know if tonight is a ham club meeting.\n\nInto that function I need to pass one parameter, a number that indicates the day of the week. If 0 is Sunday, and 6 Saturday, the number 4 represents a Thursday.\n\n```powershell\nfunction IsItHamClubNight($Day)\n{\n  if ($Day -eq 4)\n  { Write-Host \u0022Yay! It's ham club night\u0022 }\n  else \n  { Write-Host \u0022Sorry, just a boring night\u0022 }\n}\n```\n\nWhen I call this function, I have to know what number to use.\n\n```powershell\n$day = 4\nIsItHamClubNight $day\n```\n\nResult:\n```\nYay! It's ham club night\n```\n\nObviously it would be easier to pass in the name of the day of the week rather than a number. But this function is now heavily embedded in your organization, changing it would require a large effort.\n\nBy using an enum, we can provide the ability to use a human readable name, without the need to rewrite our function.\n\n```powershell\nEnum DaysOfWeek\n{\n  Sunday = 0\n  Monday = 1\n  Tuesday = 2\n  Wednesday = 3\n  Thursday = 4\n  Friday = 5\n  Saturday = 6\n}\n```\n\nEnums allow us to assign a value to each label. Here we made Sunday 0, and so on, but we can use any integer value. Now we can assign one of the enums to a variable and pass that into our function.\n\n```powershell\n$day = [DaysOfWeek]::Thursday\nIsItHamClubNight $day\n```\n\nResult:\n\n```\nYay! It's ham club night\n```\n\nEven better, we can skip the use of a variable.\n\n```powershell\nIsItHamClubNight ([DayOfWeek]::Thursday)\n```\n\nWhich gives the same result. Now users of your function don't have to remember which number represents Thursday, they can simply use the name of our enum followed by the day of the week. All of this without the need to modify our `IsItHamClubNight` function!\n\n## Getting the Enum Values\n\nLet's say you know the enum you want to use is `DaysOfWeek`, but you can't quite recall the various day names. Was it Monday, or the short abbreviation Mon? Or maybe you just want the full list so you can iterate over them.\n\nThe Enum type has a method, `GetEnumNames`. It can be used to retrieve the members of the enum.\n\n```powershell\n[DaysOfWeek].GetEnumNames()\n```\n\nResult:\n\n```\nSunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n```\n\nIt actually returns a collection so you can use it to iterate over the members, as in a foreach loop.\n\n```powershell\nforeach( $enumValue in [DaysOfWeek].GetEnumNames() )\n{\n  Write-Host \u0022Enum Value is $enumValue\u0022\n}\n```\n\nResult:\n\n```\nEnum Value is Sunday\nEnum Value is Monday\nEnum Value is Tuesday\nEnum Value is Wednesday\nEnum Value is Thursday\nEnum Value is Friday\nEnum Value is Saturday\n```\n\nAlternatively you can pipe it, for example into a `ForEach-Object`.\n\n```powershell\n[DaysOfWeek].GetEnumNames() |\n  ForEach-Object { \u0022{0} {1}\u0022 -f $_, [int]([DaysOfWeek]::$_) }\n```\n\nResult:\n\n```\nSunday 0\nMonday 1\nTuesday 2\nWednesday 3\nThursday 4\nFriday 5\nSaturday 6\n```\n\nThis looks a bit cryptic so let me break it down. The `\u0022{0} {1}\u0022 -f ` indicates we want to create a formatted string. The `{0}` and `{1}` are placeholders. After the `-f` is a list of values. The first value will go into the `{0}`, the second into the `{1}`.\n\nThe next thing you see is `$_`. This is simply a PowerShell shortcut for \u0022the current object coming through the pipeline\u0022. From the enum, Sunday will be first, then Monday, and so on.\n\nNext you see `[int]([DaysOfWeek]::$_)`. The `[int]` is used to convert what comes after it into an integer value. Next, we access the DayOfWeek enum, and give it the current object.\n\nAs a result, the output displays both the name from the enum, as well as the value associated with it.\n\nIf you want to learn more about string formatting, I'll refer you to my post [Fun With PowerShell String Formatting](https://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/).\n\n## Enums with Duplicate Values\n\nIt is possible to assign the same numeric value to multiple items in an enum. For each position in our radio club, we want to indicate their level. President and Vice President are at the top, with Secretary and Treasurer in the second tier. Finally there are some appointed positions that are important, but not the top of the chain.\n\nHere's how this might be expressed in an enum.\n\n```powershell\nEnum ClubPositions\n{\n  President = 1\n  VicePresident = 1\n  Secretary = 2\n  Treasurer = 2\n  Webmaster = 3\n  Greeter = 3\n  SnackBringer = 3\n}\n```\n\nWe can do comparisons between our various offices and their associated numeric value.\n\n```powershell\n[ClubPositions]::President -eq 1\n[ClubPositions]::VicePresident -eq 1\n```\n\nResult:\n\n```\nTrue\nTrue\n```\n\nYou can even compare two enums to each other.\n\n```powershell\n[ClubPositions]::President -eq [ClubPositions]::VicePresident\n```\n\nResult:\n\n```\nTrue\n```\n\nRemember the `GetEnumNames` method we looked at a moment ago? This works as well.\n\n```powershell\n[ClubPositions].GetEnumNames()\n```\n\nResult:\n\n```\nPresident\nVicePresident\nSecretary\nTreasurer\nWebmaster\nGreeter\nSnackBringer\n```\n\nThere is one other method very similar to `GetEnumNames`, `GetEnumValues`. It doesn't work quite like you'd think though.\n\nFirst, let's use it with our `DaysOfWeek` enum.\n\n```powershell\n[DaysOfWeek].GetEnumValues()\n```\n\nResult:\n\n```\nSunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n```\n\nAs you can see, there's no real difference compared to `GetEnumNames`. But now let's run it for the `ClubPositions` enum.\n\n```powershell\n[ClubPositions].GetEnumValues()\n```\n\nResult:\n\n```\nVicePresident\nVicePresident\nTreasurer\nTreasurer\nGreeter\nGreeter\nGreeter\n```\n\nIn the second example it went through the enum, and only returned one text value for each integer. This is why we only see one entry for each numeric value.\n\nIt actually does the same thing with the `DaysOfWeek` enum, but because we only used each integer value once, only one label for each value was returned.\n\n## Conclusion\n\nUsing enums to aid with code clarity was the first item in this blog post. We then saw how to assign values to the individual members of an enum, as well as how to iterate over the members of an enum.\n\nIn the next article in this series, we'll look at the concept of using enums as bit flags for when you need to save multiple states for a single item.\n\nThe demos in this series of blog posts were derived from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In a previous post, <a href="https://arcanecode.com/2021/11/15/fun-with-powershell-enums/">Fun with PowerShell Enums</a> I introduced the concept of <em>Enums</em>.</p>
<p>In this post we'll dive deeper into enums, taking a look at more of its properties a well as other ways to use enums.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Enums for Code Clarity</h2>
<p>One major way enums can be used is to clarify your code. In my previous post on enums I mentioned I was a ham radio operator. The clubs I belong to meet on alternate Thursday nights. Let's say I wrote a small PowerShell function to let me know if tonight is a ham club meeting.</p>
<p>Into that function I need to pass one parameter, a number that indicates the day of the week. If 0 is Sunday, and 6 Saturday, the number 4 represents a Thursday.</p>
<pre><code class="language-powershell">function IsItHamClubNight($Day)
{
  if ($Day -eq 4)
  { Write-Host &quot;Yay! It's ham club night&quot; }
  else 
  { Write-Host &quot;Sorry, just a boring night&quot; }
}
</code></pre>
<p>When I call this function, I have to know what number to use.</p>
<pre><code class="language-powershell">$day = 4
IsItHamClubNight $day
</code></pre>
<p>Result:</p>
<pre><code>Yay! It's ham club night
</code></pre>
<p>Obviously it would be easier to pass in the name of the day of the week rather than a number. But this function is now heavily embedded in your organization, changing it would require a large effort.</p>
<p>By using an enum, we can provide the ability to use a human readable name, without the need to rewrite our function.</p>
<pre><code class="language-powershell">Enum DaysOfWeek
{
  Sunday = 0
  Monday = 1
  Tuesday = 2
  Wednesday = 3
  Thursday = 4
  Friday = 5
  Saturday = 6
}
</code></pre>
<p>Enums allow us to assign a value to each label. Here we made Sunday 0, and so on, but we can use any integer value. Now we can assign one of the enums to a variable and pass that into our function.</p>
<pre><code class="language-powershell">$day = [DaysOfWeek]::Thursday
IsItHamClubNight $day
</code></pre>
<p>Result:</p>
<pre><code>Yay! It's ham club night
</code></pre>
<p>Even better, we can skip the use of a variable.</p>
<pre><code class="language-powershell">IsItHamClubNight ([DayOfWeek]::Thursday)
</code></pre>
<p>Which gives the same result. Now users of your function don't have to remember which number represents Thursday, they can simply use the name of our enum followed by the day of the week. All of this without the need to modify our <code>IsItHamClubNight</code> function!</p>
<h2>Getting the Enum Values</h2>
<p>Let's say you know the enum you want to use is <code>DaysOfWeek</code>, but you can't quite recall the various day names. Was it Monday, or the short abbreviation Mon? Or maybe you just want the full list so you can iterate over them.</p>
<p>The Enum type has a method, <code>GetEnumNames</code>. It can be used to retrieve the members of the enum.</p>
<pre><code class="language-powershell">[DaysOfWeek].GetEnumNames()
</code></pre>
<p>Result:</p>
<pre><code>Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
</code></pre>
<p>It actually returns a collection so you can use it to iterate over the members, as in a foreach loop.</p>
<pre><code class="language-powershell">foreach( $enumValue in [DaysOfWeek].GetEnumNames() )
{
  Write-Host &quot;Enum Value is $enumValue&quot;
}
</code></pre>
<p>Result:</p>
<pre><code>Enum Value is Sunday
Enum Value is Monday
Enum Value is Tuesday
Enum Value is Wednesday
Enum Value is Thursday
Enum Value is Friday
Enum Value is Saturday
</code></pre>
<p>Alternatively you can pipe it, for example into a <code>ForEach-Object</code>.</p>
<pre><code class="language-powershell">[DaysOfWeek].GetEnumNames() |
  ForEach-Object { &quot;{0} {1}&quot; -f $_, [int]([DaysOfWeek]::$_) }
</code></pre>
<p>Result:</p>
<pre><code>Sunday 0
Monday 1
Tuesday 2
Wednesday 3
Thursday 4
Friday 5
Saturday 6
</code></pre>
<p>This looks a bit cryptic so let me break it down. The <code>&quot;{0} {1}&quot; -f </code> indicates we want to create a formatted string. The <code>{0}</code> and <code>{1}</code> are placeholders. After the <code>-f</code> is a list of values. The first value will go into the <code>{0}</code>, the second into the <code>{1}</code>.</p>
<p>The next thing you see is <code>$_</code>. This is simply a PowerShell shortcut for &quot;the current object coming through the pipeline&quot;. From the enum, Sunday will be first, then Monday, and so on.</p>
<p>Next you see <code>[int]([DaysOfWeek]::$_)</code>. The <code>[int]</code> is used to convert what comes after it into an integer value. Next, we access the DayOfWeek enum, and give it the current object.</p>
<p>As a result, the output displays both the name from the enum, as well as the value associated with it.</p>
<p>If you want to learn more about string formatting, I'll refer you to my post <a href="https://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/">Fun With PowerShell String Formatting</a>.</p>
<h2>Enums with Duplicate Values</h2>
<p>It is possible to assign the same numeric value to multiple items in an enum. For each position in our radio club, we want to indicate their level. President and Vice President are at the top, with Secretary and Treasurer in the second tier. Finally there are some appointed positions that are important, but not the top of the chain.</p>
<p>Here's how this might be expressed in an enum.</p>
<pre><code class="language-powershell">Enum ClubPositions
{
  President = 1
  VicePresident = 1
  Secretary = 2
  Treasurer = 2
  Webmaster = 3
  Greeter = 3
  SnackBringer = 3
}
</code></pre>
<p>We can do comparisons between our various offices and their associated numeric value.</p>
<pre><code class="language-powershell">[ClubPositions]::President -eq 1
[ClubPositions]::VicePresident -eq 1
</code></pre>
<p>Result:</p>
<pre><code>True
True
</code></pre>
<p>You can even compare two enums to each other.</p>
<pre><code class="language-powershell">[ClubPositions]::President -eq [ClubPositions]::VicePresident
</code></pre>
<p>Result:</p>
<pre><code>True
</code></pre>
<p>Remember the <code>GetEnumNames</code> method we looked at a moment ago? This works as well.</p>
<pre><code class="language-powershell">[ClubPositions].GetEnumNames()
</code></pre>
<p>Result:</p>
<pre><code>President
VicePresident
Secretary
Treasurer
Webmaster
Greeter
SnackBringer
</code></pre>
<p>There is one other method very similar to <code>GetEnumNames</code>, <code>GetEnumValues</code>. It doesn't work quite like you'd think though.</p>
<p>First, let's use it with our <code>DaysOfWeek</code> enum.</p>
<pre><code class="language-powershell">[DaysOfWeek].GetEnumValues()
</code></pre>
<p>Result:</p>
<pre><code>Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
</code></pre>
<p>As you can see, there's no real difference compared to <code>GetEnumNames</code>. But now let's run it for the <code>ClubPositions</code> enum.</p>
<pre><code class="language-powershell">[ClubPositions].GetEnumValues()
</code></pre>
<p>Result:</p>
<pre><code>VicePresident
VicePresident
Treasurer
Treasurer
Greeter
Greeter
Greeter
</code></pre>
<p>In the second example it went through the enum, and only returned one text value for each integer. This is why we only see one entry for each numeric value.</p>
<p>It actually does the same thing with the <code>DaysOfWeek</code> enum, but because we only used each integer value once, only one label for each value was returned.</p>
<h2>Conclusion</h2>
<p>Using enums to aid with code clarity was the first item in this blog post. We then saw how to assign values to the individual members of an enum, as well as how to iterate over the members of an enum.</p>
<p>In the next article in this series, we'll look at the concept of using enums as bit flags for when you need to save multiple states for a single item.</p>
<p>The demos in this series of blog posts were derived from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4261</wp:post_id>
  <wp:post_date>2021-11-29 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-29 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 22:02:01</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 04:02:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="enum"><![CDATA[Enum]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4265]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65918115450]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1638201657]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1465350076600094721";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_346775573920028";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166414</wp:comment_id>
    <wp:comment_author><![CDATA[Beyond the Basics with Powershell Enums &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/12/01/beyond-the-basics-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-12-01 07:05:09</wp:comment_date>
    <wp:comment_date_gmt>2021-12-01 13:05:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain hits us again on the topic of enumerations in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638363909.735517;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638368124.655534;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>more-fun-with-powershell-enums-header</title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/more-fun-with-powershell-enums-header/</link>
  <pubDate>Sat, 27 Nov 2021 03:57:33 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header.png</guid>
  <description/>
  <content:encoded><![CDATA[More Fun with PowerShell Enums Post Header]]></content:encoded>
  <excerpt:encoded><![CDATA[More Fun with PowerShell Enums]]></excerpt:encoded>
  <wp:post_id>4263</wp:post_id>
  <wp:post_date>2021-11-26 21:57:33</wp:post_date>
  <wp:post_date_gmt>2021-11-27 03:57:33</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 21:58:01</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 03:58:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4261</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[More Fun with PowerShell Enums]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>more-fun-with-powershell-enums-header</title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/more-fun-with-powershell-enums-header-2/</link>
  <pubDate>Sat, 27 Nov 2021 03:59:33 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4264</wp:post_id>
  <wp:post_date>2021-11-26 21:59:33</wp:post_date>
  <wp:post_date_gmt>2021-11-27 03:59:33</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 21:59:33</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 03:59:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums-header-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4261</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-1.png</wp:attachment_url>
</item>
<item>
  <title>more-fun-with-powershell-enums-header</title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/more-fun-with-powershell-enums-header-3/</link>
  <pubDate>Sat, 27 Nov 2021 04:00:37 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4265</wp:post_id>
  <wp:post_date>2021-11-26 22:00:37</wp:post_date>
  <wp:post_date_gmt>2021-11-27 04:00:37</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 22:00:37</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 04:00:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums-header-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4261</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-2.png</wp:attachment_url>
</item>
<item>
  <title>Fun with PowerShell Enum Flags</title>
  <link>http://arcanecode.com/2021/12/06/fun-with-powershell-enum-flags/</link>
  <pubDate>Mon, 06 Dec 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4271</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn my last two posts, I introduced the concept of _Enums_ in PowerShell, then got into some of the more advanced uses. In this post we'll examine a special way to use an enum, known as a _Flag_.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## A Brief Refresher on Binary Math\n\nIn order to understand how flags work you need at least a basic understanding of binary math. In this section I'll see if I can't provide a short, simple refresher on the subject.\n\nIn my previous article, I mentioned that I am a ham radio operator, and am a member of multiple clubs. In a small club it's not unusual to hold multiple offices, for example I'm both the secretary and the webmaster for one of the clubs, as well as a paid member. We can denote this by using a single variable to hold this information through the use of an enum flag.\n\nA flag is a single variable that can be broken into its individual bits to indicate multiple values. In our example, we'll use a flag to indicate a member's paid status, their office, and if they hold more than one position in the club, all with a single variable.\n\nLet's say we have six people standing in a row. Each person has a sign, the first reads \u0022paid\u0022, the rest have the names of club offices.\n\nWhen a member walks into a room, people hold up signs that indicate the person's status in the club, while the others leave their signs face down. When the Vice President walks in, the paid sign is raised up, as is the Vice President sign. We then take a photograph to capture this information in a single place.\n\nI happen to be both Secretary and Webmaster of my club, as well as a paid member, so in my case three signs would go up and be captured in a photo. If we happen to have a visitor to the club, none of the signs will be raised, and a photo will record that.\n\nBit flags work the same way. Each sign is a bit, and the photo corresponds to the variable that holds all the bits.\n\nLet's say we have a 32 bit integer. If all 32 of the bits are set to a 0, then the value of that integer will be 0.\n\nIf the bit in position one is set to 1, and all of the other bits are 0, it indicates the value of the variable is 1.\n\nIn the second bit position, if the value is set to 1 and all other bits set to 0, the integer value is 2. If both bits one and two are set to 1, the integer value will be 3, and so on.\n\nThis chart of binary numbers and their decimal counterparts may help clarify.\n\n| Binary | Decimal |\n|\u002d\u002d\u002d\u002d\u002d\u002d-:|\u002d\u002d\u002d\u002d\u002d\u002d:|\n| 0000 | 0 |\n| 0001 | 1 |\n| 0010 | 2 |\n| 0011 | 3 |\n| 0100 | 4 |\n| 0101 | 5 |\n| 0110 | 6 |\n| 0111 | 7 |\n| 1000 | 8 |\n| 1001 | 9 |\n| 1010 | 10 |\n\nThese are just the first few as an example, you could continue this chart into the trillions of values if not higher.\n\nShould you need a further refresher on binary numbers, I'd suggest the [Binary Number article on Wikipedia](https://en.wikipedia.org/wiki/Binary_number) as a good guide. It's important to understand binary values in order to fully understand how flags work.\n\n## Enum Flags\n\nLet's create our own enum flag to hold the status of club members. You declare an enum as a flag by placing the `[Flags()]` modifier in front of the enum declaration, as you'll see below. Note that the values must correspond to the integer value if a bit is set. The Wikipedia article includes a nice chart that shows a decimal number and what that number looks like in binary.\n\n\n```powershell\n[Flags()] enum MemberStatus\n{\n  Paid = 1\n  President = 2\n  VicePresident = 4\n  Secretary = 8\n  Treasurer = 16\n  Webmaster = 32\n}\n```\n\nI could add more to this list if needed, using the value of 64 for the next member status, then 128, then 256, and so on.\n\nNow lets represent a member status in a variable to show a member is the Vice President, and is also a paid member. To do so, we simply add the various statuses together.\n\n```powershell\n$memStatus = [MemberStatus]::Paid + [MemberStatus]::VicePresident\n\n$memStatus\n```\n\nResult:\n\n```\nPaid, VicePresident\n```\n\nWhat's nice about using an enum flag is that when we display the variable PowerShell converts the flags back into the members from the enum.\n\nWe could also simply assign the total number. In this case, Paid (value of 1), plus Vice President (value 4), adds up to 5.\n\n```powershell\n$memStatus = [MemberStatus] 5\n$memStatus\n```\n\nResult:\n\n```\nPaid, VicePresident\n```\n\nFinally, if we want to display the numeric value behind our flag, we can cast it as an `int`.\n\n```powershell\n[int]$memStatus\n```\n\nResult:\n\n```\n5\n```\n\n## Is the Flag Set? HasFlag to the Rescue!\n\nOften you will want to see if a specific flag is set, for example we want to see if a member is paid. Now, if the paid status is the only flag set, it's easy, just use `$someVariable -eq [MemberStatus]::Paid`.\n\nIt gets much more complex if a variable has multiple flags set. Fortunately, enums have a method built in called `HasFlag` you can use to test with.\n\nFirst, let's load a variable with several flags from our `MemberStatus` enum.\n\n```powershell\n$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid\n\n$memStatus\n```\n\nResult:\n\n```\nPaid, Secretary, Webmaster\n```\n\nSo now we've got our `$memStatus` variable loaded with multiple statuses. Also note that even though we added the status in reverse order, they are always returned in ascending order from the enum declaration.\n\nNow we want to know if our secretary / webmaster has paid their dues for the year. To do so, we'll call the `HasFlag` method of our variable, and pass in the status we wish to check.\n\n```powershell\n$memStatus.HasFlag([MemberStatus]::Paid)\n```\n\nResult:\n\n```\nTrue\n```\n\n## The GetHashCode Method\n\nSo far, when we've wanted to see the value of our enum derived variable, we've used `[int]` to cast the variable in integer form.\n\n```powershell\n$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid\n\n[int]$memStatus\n```\n\nResult:\n\n```\n41\n```\n\nThis shortcut works, and is something I've seen in many blog posts and examples. However, there is a method that is more clear in terms of code self-documentation. Like using `[int]`, it will return an unsigned, 32 bit integer: `GetHashCode`.\n\n```powershell\n$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid\n\n$memStatus.GetHashCode()\n```\n\nResult:\n\n```\n41\n```\n\nBoth methods work, but in my opinion `GetHashCode` is clearer in terms of intention, especially to someone unfamiliar with enum flags. Whichever route you go I suggest being consistent throughout your code.\n\n## Conclusion\n\nThis article focused on the use of enums as flags. While it is not something I use frequently, enum flags can be extremely useful when an item can have multiple states simultaneously. Our club member status is one such example, another is file attributes. A file could have both the hidden and compressed attributes.\n\nEnum flags can reduce the size of your data for an item. Rather than having six individual variables for the six member statuses, a single variable can hold them all. This reduction in the size of your data can be even more valuable when that data is being stored in a database or file.\n\nThe demos in this series of blog posts were derived from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In my last two posts, I introduced the concept of <em>Enums</em> in PowerShell, then got into some of the more advanced uses. In this post we'll examine a special way to use an enum, known as a <em>Flag</em>.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>A Brief Refresher on Binary Math</h2>
<p>In order to understand how flags work you need at least a basic understanding of binary math. In this section I'll see if I can't provide a short, simple refresher on the subject.</p>
<p>In my previous article, I mentioned that I am a ham radio operator, and am a member of multiple clubs. In a small club it's not unusual to hold multiple offices, for example I'm both the secretary and the webmaster for one of the clubs, as well as a paid member. We can denote this by using a single variable to hold this information through the use of an enum flag.</p>
<p>A flag is a single variable that can be broken into its individual bits to indicate multiple values. In our example, we'll use a flag to indicate a member's paid status, their office, and if they hold more than one position in the club, all with a single variable.</p>
<p>Let's say we have six people standing in a row. Each person has a sign, the first reads &quot;paid&quot;, the rest have the names of club offices.</p>
<p>When a member walks into a room, people hold up signs that indicate the person's status in the club, while the others leave their signs face down. When the Vice President walks in, the paid sign is raised up, as is the Vice President sign. We then take a photograph to capture this information in a single place.</p>
<p>I happen to be both Secretary and Webmaster of my club, as well as a paid member, so in my case three signs would go up and be captured in a photo. If we happen to have a visitor to the club, none of the signs will be raised, and a photo will record that.</p>
<p>Bit flags work the same way. Each sign is a bit, and the photo corresponds to the variable that holds all the bits.</p>
<p>Let's say we have a 32 bit integer. If all 32 of the bits are set to a 0, then the value of that integer will be 0.</p>
<p>If the bit in position one is set to 1, and all of the other bits are 0, it indicates the value of the variable is 1.</p>
<p>In the second bit position, if the value is set to 1 and all other bits set to 0, the integer value is 2. If both bits one and two are set to 1, the integer value will be 3, and so on.</p>
<p>This chart of binary numbers and their decimal counterparts may help clarify.</p>
<table>
<thead>
<tr>
<th style="text-align:right;">Binary</th>
<th style="text-align:right;">Decimal</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">0000</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td style="text-align:right;">0001</td>
<td style="text-align:right;">1</td>
</tr>
<tr>
<td style="text-align:right;">0010</td>
<td style="text-align:right;">2</td>
</tr>
<tr>
<td style="text-align:right;">0011</td>
<td style="text-align:right;">3</td>
</tr>
<tr>
<td style="text-align:right;">0100</td>
<td style="text-align:right;">4</td>
</tr>
<tr>
<td style="text-align:right;">0101</td>
<td style="text-align:right;">5</td>
</tr>
<tr>
<td style="text-align:right;">0110</td>
<td style="text-align:right;">6</td>
</tr>
<tr>
<td style="text-align:right;">0111</td>
<td style="text-align:right;">7</td>
</tr>
<tr>
<td style="text-align:right;">1000</td>
<td style="text-align:right;">8</td>
</tr>
<tr>
<td style="text-align:right;">1001</td>
<td style="text-align:right;">9</td>
</tr>
<tr>
<td style="text-align:right;">1010</td>
<td style="text-align:right;">10</td>
</tr>
</tbody>
</table>
<p>These are just the first few as an example, you could continue this chart into the trillions of values if not higher.</p>
<p>Should you need a further refresher on binary numbers, I'd suggest the <a href="https://en.wikipedia.org/wiki/Binary_number">Binary Number article on Wikipedia</a> as a good guide. It's important to understand binary values in order to fully understand how flags work.</p>
<h2>Enum Flags</h2>
<p>Let's create our own enum flag to hold the status of club members. You declare an enum as a flag by placing the <code>[Flags()]</code> modifier in front of the enum declaration, as you'll see below. Note that the values must correspond to the integer value if a bit is set. The Wikipedia article includes a nice chart that shows a decimal number and what that number looks like in binary.</p>
<pre><code class="language-powershell">[Flags()] enum MemberStatus
{
  Paid = 1
  President = 2
  VicePresident = 4
  Secretary = 8
  Treasurer = 16
  Webmaster = 32
}
</code></pre>
<p>I could add more to this list if needed, using the value of 64 for the next member status, then 128, then 256, and so on.</p>
<p>Now lets represent a member status in a variable to show a member is the Vice President, and is also a paid member. To do so, we simply add the various statuses together.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Paid + [MemberStatus]::VicePresident

$memStatus
</code></pre>
<p>Result:</p>
<pre><code>Paid, VicePresident
</code></pre>
<p>What's nice about using an enum flag is that when we display the variable PowerShell converts the flags back into the members from the enum.</p>
<p>We could also simply assign the total number. In this case, Paid (value of 1), plus Vice President (value 4), adds up to 5.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus] 5
$memStatus
</code></pre>
<p>Result:</p>
<pre><code>Paid, VicePresident
</code></pre>
<p>Finally, if we want to display the numeric value behind our flag, we can cast it as an <code>int</code>.</p>
<pre><code class="language-powershell">[int]$memStatus
</code></pre>
<p>Result:</p>
<pre><code>5
</code></pre>
<h2>Is the Flag Set? HasFlag to the Rescue!</h2>
<p>Often you will want to see if a specific flag is set, for example we want to see if a member is paid. Now, if the paid status is the only flag set, it's easy, just use <code>$someVariable -eq [MemberStatus]::Paid</code>.</p>
<p>It gets much more complex if a variable has multiple flags set. Fortunately, enums have a method built in called <code>HasFlag</code> you can use to test with.</p>
<p>First, let's load a variable with several flags from our <code>MemberStatus</code> enum.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid

$memStatus
</code></pre>
<p>Result:</p>
<pre><code>Paid, Secretary, Webmaster
</code></pre>
<p>So now we've got our <code>$memStatus</code> variable loaded with multiple statuses. Also note that even though we added the status in reverse order, they are always returned in ascending order from the enum declaration.</p>
<p>Now we want to know if our secretary / webmaster has paid their dues for the year. To do so, we'll call the <code>HasFlag</code> method of our variable, and pass in the status we wish to check.</p>
<pre><code class="language-powershell">$memStatus.HasFlag([MemberStatus]::Paid)
</code></pre>
<p>Result:</p>
<pre><code>True
</code></pre>
<h2>The GetHashCode Method</h2>
<p>So far, when we've wanted to see the value of our enum derived variable, we've used <code>[int]</code> to cast the variable in integer form.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid

[int]$memStatus
</code></pre>
<p>Result:</p>
<pre><code>41
</code></pre>
<p>This shortcut works, and is something I've seen in many blog posts and examples. However, there is a method that is more clear in terms of code self-documentation. Like using <code>[int]</code>, it will return an unsigned, 32 bit integer: <code>GetHashCode</code>.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid

$memStatus.GetHashCode()
</code></pre>
<p>Result:</p>
<pre><code>41
</code></pre>
<p>Both methods work, but in my opinion <code>GetHashCode</code> is clearer in terms of intention, especially to someone unfamiliar with enum flags. Whichever route you go I suggest being consistent throughout your code.</p>
<h2>Conclusion</h2>
<p>This article focused on the use of enums as flags. While it is not something I use frequently, enum flags can be extremely useful when an item can have multiple states simultaneously. Our club member status is one such example, another is file attributes. A file could have both the hidden and compressed attributes.</p>
<p>Enum flags can reduce the size of your data for an item. Rather than having six individual variables for the six member statuses, a single variable can hold them all. This reduction in the size of your data can be even more valuable when that data is being stored in a database or file.</p>
<p>The demos in this series of blog posts were derived from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4271</wp:post_id>
  <wp:post_date>2021-12-06 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-06 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 22:11:54</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 04:11:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-enum-flags</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="enum"><![CDATA[Enum]]></category>
  <category domain="post_tag" nicename="flags"><![CDATA[Flags]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4268]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66194336568]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1638806415]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1467886617268469771";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_351001210164131";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166775</wp:comment_id>
    <wp:comment_author><![CDATA[Keith R]]></wp:comment_author>
    <wp:comment_author_email>kobe@kuler.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>108.227.70.59</wp:comment_author_IP>
    <wp:comment_date>2022-01-06 11:52:51</wp:comment_date>
    <wp:comment_date_gmt>2022-01-06 17:52:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice post, surely very helpful for non-programmer admins. However, for "want[ing] to see the value of our enum derived variable", I disagree that "GetHashCode is clearer in terms of intention". [int] correctly expresses the intention to see directly the value of the enum. GetHashCode() may _happen to_ return that same value for an int-based enum, but per _intention_, it doesn't have to; it merely needs to return a 32 bit integer corresponding to the object, suitable for hashing it into a hash table. You can see this using an Int64-based enum with a large value, e.g. 0x10FFFFEEEE; in this case the corresponding [long] gives you the enum's value, where GetHashCode() does not.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641496722.715902;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641491571.498135;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun With PowerShell Classes - The Basics</title>
  <link>http://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/</link>
  <pubDate>Tue, 14 Dec 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4276</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn the last few posts we looked at the use of Enums, a technique closely associated with classes. In this post we'll start looking at classes themselves. We'll open with some terminology, then look at our first class.\n\nFor the next post in this series I plan to do a history lesson on the use of `PSCustomObject`. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. From there we'll return to the modern area and get into some advanced class techniques.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Terminology\n\nIf you are familiar with _object oriented_ terminology, then this short overview will be familiar to you. However, many who come into PowerShell scripting do not come from a coding background. It's worth taking a few paragraphs, then, to explain some common terms that will be used in this and future articles.\n\nA _class_ is code that is used as a blueprint to create an _object_ variable in memory. In fact, all variables in PowerShell are objects, even built in ones like strings or integers. Their classes are already defined and ready to be used in the core PowerShell libraries.\n\nThe act of creating a new object from a class is called _instantiation_. You can _instantiate_ multiple variables from the same class.\n\nIn most object oriented discussions, the classic example compares a class to a blueprint for a house. From that single blueprint a home builder can create an entire neighborhood of houses.\n\nEach house has properties that can be set to make the houses different from each other, even though they are built from the same blueprint. House color, trim color, number of cars the garage will hold, are all properties that can be set on a per house basis.\n\nLikewise, a PowerShell class has _properties_. These are made available through variables, and may be things like first name, last name, address, birth date, number of pets, or any number of other items that would apply to this instance of an object built from your class.\n\nA house blueprint may also have tasks assigned to it. \u0022Get building permit from city\u0022, for example, or \u0022paint the trim\u0022. In the PowerShell world, a class can also have tasks assigned to it. These are created by using _functions_.\n\nIf you aren't familiar with functions yet, you need to brush up. You can start with my series [Fun With PowerShell Functions](https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/), then continue through the next few posts which move into advanced functions and pipelined functions.\n\nWhen it comes to classes, we call these built in functions _methods_. A method is designed to act on the data within the function itself.\n\nA simple example, you may have three properties, first name, middle name, and last name. You could create a method (in the form of a function) called full name, which concatenates the three parts of the name together, correctly formatting for times when a middle name is absent.\n\nMethods in a class can return a value, but do not have to. We'll see examples of both in this article.\n\nAlso be aware there are special types of properties and methods that are called _static properties_ and _static methods_. These are pieces of code that PowerShell can execute from the class itself, _without creating an object from that class_.\n\nWe'll see examples of how to create and use these in our future post on advanced classes, but I wanted to mention them as PowerShell classes have a static function we'll need to use in order to instantiate new objects.\n\nThis short intro just hits the tip of the iceberg when it comes to object oriented methodology, entire books have been written on the subject. Hopefully it provides enough information to get you started.\n\nSo now that we're all on the same page when it comes to terminology, let's go create a class.\n\n## A Very Simple Class\n\nThis first example will be very simple. Take a look, then we will go over its parts.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In the last few posts we looked at the use of Enums, a technique closely associated with classes. In this post we'll start looking at classes themselves. We'll open with some terminology, then look at our first class.</p>
<p>For the next post in this series I plan to do a history lesson on the use of <code>PSCustomObject</code>. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. From there we'll return to the modern area and get into some advanced class techniques.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Terminology</h2>
<p>If you are familiar with <em>object oriented</em> terminology, then this short overview will be familiar to you. However, many who come into PowerShell scripting do not come from a coding background. It's worth taking a few paragraphs, then, to explain some common terms that will be used in this and future articles.</p>
<p>A <em>class</em> is code that is used as a blueprint to create an <em>object</em> variable in memory. In fact, all variables in PowerShell are objects, even built in ones like strings or integers. Their classes are already defined and ready to be used in the core PowerShell libraries.</p>
<p>The act of creating a new object from a class is called <em>instantiation</em>. You can <em>instantiate</em> multiple variables from the same class.</p>
<p>In most object oriented discussions, the classic example compares a class to a blueprint for a house. From that single blueprint a home builder can create an entire neighborhood of houses.</p>
<p>Each house has properties that can be set to make the houses different from each other, even though they are built from the same blueprint. House color, trim color, number of cars the garage will hold, are all properties that can be set on a per house basis.</p>
<p>Likewise, a PowerShell class has <em>properties</em>. These are made available through variables, and may be things like first name, last name, address, birth date, number of pets, or any number of other items that would apply to this instance of an object built from your class.</p>
<p>A house blueprint may also have tasks assigned to it. &quot;Get building permit from city&quot;, for example, or &quot;paint the trim&quot;. In the PowerShell world, a class can also have tasks assigned to it. These are created by using <em>functions</em>.</p>
<p>If you aren't familiar with functions yet, you need to brush up. You can start with my series <a href="https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/">Fun With PowerShell Functions</a>, then continue through the next few posts which move into advanced functions and pipelined functions.</p>
<p>When it comes to classes, we call these built in functions <em>methods</em>. A method is designed to act on the data within the function itself.</p>
<p>A simple example, you may have three properties, first name, middle name, and last name. You could create a method (in the form of a function) called full name, which concatenates the three parts of the name together, correctly formatting for times when a middle name is absent.</p>
<p>Methods in a class can return a value, but do not have to. We'll see examples of both in this article.</p>
<p>Also be aware there are special types of properties and methods that are called <em>static properties</em> and <em>static methods</em>. These are pieces of code that PowerShell can execute from the class itself, <em>without creating an object from that class</em>.</p>
<p>We'll see examples of how to create and use these in our future post on advanced classes, but I wanted to mention them as PowerShell classes have a static function we'll need to use in order to instantiate new objects.</p>
<p>This short intro just hits the tip of the iceberg when it comes to object oriented methodology, entire books have been written on the subject. Hopefully it provides enough information to get you started.</p>
<p>So now that we're all on the same page when it comes to terminology, let's go create a class.</p>
<h2>A Very Simple Class</h2>
<p>This first example will be very simple. Take a look, then we will go over its parts.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":"```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n}\n```\n"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

}
</code></pre>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":"We begin the definition with the keyword `class`, followed by what we wish to name our class. In my previous articles on enums we used Twitter data as an example, so let's stick to that.\n\nAfter the name of the class we need an opening squiggly brace, and a closing one at the end. In PowerShell squiggly braces are used to define a _scrpt block_. You've seen these before, functions, `foreach`, `if` statements and more all use script blocks. Classes are no different, everything in the script block is the class definition.\n\nWith classes, as with most script blocks, it's not necessary to put the opening squiggly brace on the next line, many use `class Twitter {` on a single line. I just feel having the squiggly braces vertically aligned makes things easier to read.\n\nWithin the class I have defined a single property, `$TwitterHandle`. Before the name of the variable I have indicated the variable type in brackets, `[string]`. Unlike regular PowerShell, all properties must be _strongly typed_.\n\nLet's create, or _instantiate_, a new variable from our class (after highlighting the class definition and using F8 or F5 to get it into memory).\n\n```powershell\n$twit = [Twitterer]::new()\n```\n\nThis syntax may look a bit odd, so let me explain. When we created our class we defined a single property. Anytime we define a class, though, PowerShell adds extra properties and methods behind the scenes.\n\nOne of those methods is `new`. New is a _static method_ that can be called without the need to instantiate a new object, which is fortunate as it is the way we get new objects from our class.\n\nTo call a static method, we use the name of the class in brackets, followed by two colons, then the name of the static method. In PowerShell, to call a method you always have to use parenthesis after the name of the method even if it takes no parameters. This is unlike a regular function in PowerShell.\n\nFinally, we assign our newly instantiated object to the variable `$twit`.\n\nWe can now access the properties (and methods) in our object by using what is formally known as _dot notation_. If you've done any PowerShell coding then you've likely used it a million times by now without realizing it had a formal name.\n\nYou simply use the name of our object, a period, then the name of the property, as in `$twit.TwitterHandle`. Of course if we run this right now, we won't get anything back. This is because our variable is empty when the class is created. So let's assign it a value.\n\n```powershell\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterHandle\n```\n\nResult:\n\n```\nArcaneCode\n```\n\nIt's that easy, we can use it like any other variable. Note one thing, when we created the property we used the `$` in front of the variable. But outside the class when we reference it as a property the `$` is omitted.\n\n## Default Values for Properties\n\nThere will be many times when you write a class in which you want to have some, or perhaps all, of its properties already populated with values. This will make it easier for your end user, especially for properties where the majority of the time the user can get by with the default value.\n\nCreating a default value is simple, when you create the property you simply assign it a value.\n\n```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n}\n```\n\nHere a second property, `Name`, has been added. After its declaration I simply assigned it a name (mine in this case) just like I would assign any value to a variable.\n\nNow let's create a new instance and examine the value in our `Name` property.\n\n```powershell\n$twit = [Twitterer]::new()\n$twit.Name\n```\n\nResult:\n\n```\nRobert C. Cain\n```\n\nOf course just because we've provided a default value doesn't mean we can't change it.\n\n```powershell\n$twit.Name = 'Mr. Code'\n$twit.Name\n```\n\nResult:\n\n```\nMr. Code\n```\n\n## Our First Method\n\nNow that we've added properties, it's time to add a little functionality with our first _method_. A class method in PowerShell works just like a function, only without the need for the `function` keyword. For this example, we'll add a new method that takes the value in the `$TwitterHandle` property and return the URL to that handles Twitter page.\n\n```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n}\n```\n\nThe URL to a users Twitter account is simple, it is just twitter.com followed by the users twitter handle. Now, you might think you could just use `$TwitterHandle` to create this, but not so.\n\nWe need to let PowerShell know to use the TwitterHandle for this _particular_ object. That's where the `$this` variable comes into play.\n\n`$this` is a built in variable which simply means \u0022the current object I am running this code in\u0022. Using `$this`, I can reference any property or other method within _this_ instance of my class.\n\nI also want to point out that after the name of our method we added parenthesis. This is an indicator to PowerShell we are defining a method and not a property. In this case we are not passing in any values to our method, so they are empty. It is possible though to pass values in, which we'll see in a future post.\n\nFinally, note that my function, just like properties, is strongly typed. Since my URL is in the form of a string, I used `[string]` to indicate the data type being returned by this function.\n\n```powershell\n$twit = [Twitterer]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$myTwitter = $twit.TwitterURL()\n$myTwitter\n```\n\nResult:\n\n```\nhttps://twitter.com/ArcaneCode\n```\n\n## No Return\n\nIn my previous example, our method returned a value. There will be cases though when you simply want your method to do something, and not return any values. For those times, we can use the return type of `void`.\n\n```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n}\n```\n\nI've added a new method, `OpenTwitter`. Before it I used `[void]` to let Twitter know this particular method won't be returning any data.\n\nWithin the function I call the PowerShell cmdlet `Start-Process`. This cmdlet will take the value passed into it and attempt to run the application that corresponds to it. For example, if I had passed in the file name to an Excel spreadsheet, PowerShell would have attempted to launch Microsoft Excel and open that file.\n\nIn this case we're passing in a URL, so PowerShell will launch your default browser and open the Twitter webpage for that user.\n\nAlso note we used the `$this` built in variable to call the `TwitterURL` method for this current instance of our object, here `$twit`.\n\nTo run it we only need to call our method.\n\n```powershell\n$twit = [Twitterer]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.OpenTwitter()\n```\n\nIf all went well your web browser should open to the Twitter page for the associated user held in the `$TwitterHandle` variable.\n\n## Conclusion\n\nIn this opening article we covered some of the basics of using classes in PowerShell. Even with this limited information you should be able to start creating useful classes. In future articles we'll dive deeper into using classes in PowerShell.\n\nI want to mention, as I write this in December 2021, that my posts for the rest of the year will diverge as I want to give a little gift and share some of my favorite things I've found on the internet this year. I'll pick this series back up in January of 2022.\n\nThe demos in this series of blog posts came from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><p>We begin the definition with the keyword <code>class</code>, followed by what we wish to name our class. In my previous articles on enums we used Twitter data as an example, so let's stick to that.</p>
<p>After the name of the class we need an opening squiggly brace, and a closing one at the end. In PowerShell squiggly braces are used to define a <em>scrpt block</em>. You've seen these before, functions, <code>foreach</code>, <code>if</code> statements and more all use script blocks. Classes are no different, everything in the script block is the class definition.</p>
<p>With classes, as with most script blocks, it's not necessary to put the opening squiggly brace on the next line, many use <code>class Twitter {</code> on a single line. I just feel having the squiggly braces vertically aligned makes things easier to read.</p>
<p>Within the class I have defined a single property, <code>$TwitterHandle</code>. Before the name of the variable I have indicated the variable type in brackets, <code>[string]</code>. Unlike regular PowerShell, all properties must be <em>strongly typed</em>.</p>
<p>Let's create, or <em>instantiate</em>, a new variable from our class (after highlighting the class definition and using F8 or F5 to get it into memory).</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
</code></pre>
<p>This syntax may look a bit odd, so let me explain. When we created our class we defined a single property. Anytime we define a class, though, PowerShell adds extra properties and methods behind the scenes.</p>
<p>One of those methods is <code>new</code>. New is a <em>static method</em> that can be called without the need to instantiate a new object, which is fortunate as it is the way we get new objects from our class.</p>
<p>To call a static method, we use the name of the class in brackets, followed by two colons, then the name of the static method. In PowerShell, to call a method you always have to use parenthesis after the name of the method even if it takes no parameters. This is unlike a regular function in PowerShell.</p>
<p>Finally, we assign our newly instantiated object to the variable <code>$twit</code>.</p>
<p>We can now access the properties (and methods) in our object by using what is formally known as <em>dot notation</em>. If you've done any PowerShell coding then you've likely used it a million times by now without realizing it had a formal name.</p>
<p>You simply use the name of our object, a period, then the name of the property, as in <code>$twit.TwitterHandle</code>. Of course if we run this right now, we won't get anything back. This is because our variable is empty when the class is created. So let's assign it a value.</p>
<pre><code class="language-powershell">$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterHandle
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
</code></pre>
<p>It's that easy, we can use it like any other variable. Note one thing, when we created the property we used the <code>$</code> in front of the variable. But outside the class when we reference it as a property the <code>$</code> is omitted.</p>
<h2>Default Values for Properties</h2>
<p>There will be many times when you write a class in which you want to have some, or perhaps all, of its properties already populated with values. This will make it easier for your end user, especially for properties where the majority of the time the user can get by with the default value.</p>
<p>Creating a default value is simple, when you create the property you simply assign it a value.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'
}
</code></pre>
<p>Here a second property, <code>Name</code>, has been added. After its declaration I simply assigned it a name (mine in this case) just like I would assign any value to a variable.</p>
<p>Now let's create a new instance and examine the value in our <code>Name</code> property.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.Name
</code></pre>
<p>Result:</p>
<pre><code>Robert C. Cain
</code></pre>
<p>Of course just because we've provided a default value doesn't mean we can't change it.</p>
<pre><code class="language-powershell">$twit.Name = 'Mr. Code'
$twit.Name
</code></pre>
<p>Result:</p>
<pre><code>Mr. Code
</code></pre>
<h2>Our First Method</h2>
<p>Now that we've added properties, it's time to add a little functionality with our first <em>method</em>. A class method in PowerShell works just like a function, only without the need for the <code>function</code> keyword. For this example, we'll add a new method that takes the value in the <code>$TwitterHandle</code> property and return the URL to that handles Twitter page.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

}
</code></pre>
<p>The URL to a users Twitter account is simple, it is just twitter.com followed by the users twitter handle. Now, you might think you could just use <code>$TwitterHandle</code> to create this, but not so.</p>
<p>We need to let PowerShell know to use the TwitterHandle for this <em>particular</em> object. That's where the <code>$this</code> variable comes into play.</p>
<p><code>$this</code> is a built in variable which simply means &quot;the current object I am running this code in&quot;. Using <code>$this</code>, I can reference any property or other method within <em>this</em> instance of my class.</p>
<p>I also want to point out that after the name of our method we added parenthesis. This is an indicator to PowerShell we are defining a method and not a property. In this case we are not passing in any values to our method, so they are empty. It is possible though to pass values in, which we'll see in a future post.</p>
<p>Finally, note that my function, just like properties, is strongly typed. Since my URL is in the form of a string, I used <code>[string]</code> to indicate the data type being returned by this function.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.TwitterHandle = 'ArcaneCode'
$myTwitter = $twit.TwitterURL()
$myTwitter
</code></pre>
<p>Result:</p>
<pre><code>https://twitter.com/ArcaneCode
</code></pre>
<h2>No Return</h2>
<p>In my previous example, our method returned a value. There will be cases though when you simply want your method to do something, and not return any values. For those times, we can use the return type of <code>void</code>.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

}
</code></pre>
<p>I've added a new method, <code>OpenTwitter</code>. Before it I used <code>[void]</code> to let Twitter know this particular method won't be returning any data.</p>
<p>Within the function I call the PowerShell cmdlet <code>Start-Process</code>. This cmdlet will take the value passed into it and attempt to run the application that corresponds to it. For example, if I had passed in the file name to an Excel spreadsheet, PowerShell would have attempted to launch Microsoft Excel and open that file.</p>
<p>In this case we're passing in a URL, so PowerShell will launch your default browser and open the Twitter webpage for that user.</p>
<p>Also note we used the <code>$this</code> built in variable to call the <code>TwitterURL</code> method for this current instance of our object, here <code>$twit</code>.</p>
<p>To run it we only need to call our method.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.TwitterHandle = 'ArcaneCode'
$twit.OpenTwitter()
</code></pre>
<p>If all went well your web browser should open to the Twitter page for the associated user held in the <code>$TwitterHandle</code> variable.</p>
<h2>Conclusion</h2>
<p>In this opening article we covered some of the basics of using classes in PowerShell. Even with this limited information you should be able to start creating useful classes. In future articles we'll dive deeper into using classes in PowerShell.</p>
<p>I want to mention, as I write this in December 2021, that my posts for the rest of the year will diverge as I want to give a little gift and share some of my favorite things I've found on the internet this year. I'll pick this series back up in January of 2022.</p>
<p>The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4276</wp:post_id>
  <wp:post_date>2021-12-14 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-14 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 16:59:15</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 22:59:15</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-the-basics</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="class"><![CDATA[Class]]></category>
  <category domain="post_tag" nicename="classes"><![CDATA[Classes]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4279]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66507083094]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1639497610]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1470785696382263303";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_355994979664754";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167029</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:06</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] far we&#8217;ve covered a lot in this series on PowerShell Objects. We began by creating a class using the class keyword introduced in PowerShell 5. We then looked at using PSCustomObject to create new objects, then add [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645897.714356;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641206.114642;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167097</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Static Properties and Methods &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-02-07 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-02-07 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] last few articles we&#8217;ve been covering PowerShell objects. The first article in the series, Fun With PowerShell Classes &#8211; The Basics, covered the basics of using of the PowerShell class construct introduced in PowerShell version [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644246024.443415;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644250262.528002;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166813</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:16</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] I had started a series on classes and objects in PowerShell. If you haven&#8217;t read my post Fun With PowerShell Classes &#8211; The Basics you should give it a quick read. There are terms that were defined in it that we&#8217;ll be using [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835119.783355;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826816.671769;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166919</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:26</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my use of the $this keyword. Just like with objects generated by the more modern classes in PowerShell 5 and beyond, $this is used to represent the current instance of our custom object. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431626.388658;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436450.287601;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166972</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:10</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] is the next installment in my series on creating objects in PowerShell. In the first installment we showed how to create an object using the class type introduced in PowerShell 5. That covered the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040754.630932;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036410.953277;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-classes-the-basics-header</title>
  <link>http://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/fun-with-powershell-classes-the-basics-header/</link>
  <pubDate>Mon, 13 Dec 2021 22:57:54 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/fun-with-powershell-classes-the-basics-header.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4279</wp:post_id>
  <wp:post_date>2021-12-13 16:57:54</wp:post_date>
  <wp:post_date_gmt>2021-12-13 22:57:54</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 16:57:54</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 22:57:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-the-basics-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4276</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/fun-with-powershell-classes-the-basics-header.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Objects - PSCustomObject</title>
  <link>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</link>
  <pubDate>Mon, 10 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4310</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nBefore the holidays I had started a series on classes and objects in PowerShell. If you haven't read my post [Fun With PowerShell Classes - The Basics](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) you should give it a quick read. There are terms that were defined in it that we'll be using here.\n\nFor this post I'll begin a series on the use of `PSCustomObject`. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. It still has a lot of validity today though, as you can use these techniques to extend the objects other people defined, including those already built into PowerShell. \n\nIn addition, understanding the use of `PSCustomObject` will give you a better understanding of the way classes work.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nSecond, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Code to Generate Our PSCustomObject\n\nFor these demos, I'm going to wrap the creation of our objects within a function. This is a common technique which allows us to create multiple objects based on a single set of code. Note this isn't required, you could use these techniques anywhere in your code. I just find placing it in functions makes for greater reuse.\n\nIf you need a refresher on PowerShell functions, I'll refer you back to my posts on functions: [Fun With PowerShell Basic Functions](https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/); [Fun With PowerShell Advanced Functions](https://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/); and [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/).\n\nLet's take a look at our first example, then break down each line.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject `\n                       -Property $properties\n\n  # Return the newly created object\n  return $object\n}\n```\n\nOur first line, obviously, defines our basic function. For this example I will be creating an object that holds the schema and table names for a database. It also will allow for a comment, so these are the three parameters that are passed in.\n\nTo add a list of properties to our object, we need to use a _hash table_. I define the hash table with three properties, Schema, Table, and Comment, and assign the parameter variables we passed in for their respective values. And yes, I do have a post on hash tables if you wish to know more about them, [Fun With PowerShell Hash Tables](https://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/).\n\nNext is where the magic occurs. I call the cmdlet `New-Object`. For its `TypeName` parameter I use the value of `PSObject`. This will create a variable of type `PSCustomObject`. I then pass in my hash table name for the `Property` parameter.\n\nThis is assigned to the variable `$object`. In the final line I return that value to the calling code.\n\nBefore someone points it out, yes I could have made the last line of the function simply `New-Object –TypeName PSObject -Property $properties` and not assigned it to a variable. As I explain in my previously mentioned posts on functions, not consuming the output within the function returns the value to the code that called it.\n\nAssigning to a value within my function, then returning that value, gives me some additional flexibility. Primarily I could use the `Write-Verbose` and `Write-Debug` statements to echo additional debugging information back to the developer (or user). It also allows for easier integration with testing tools, such as [Pester](https://pester.dev/).\n\nFor more info on Write-Verbose and Write-Debug, see my posts [Fun With PowerShell Write-Verbose](https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/) and [Fun With PowerShell Write-Debug](https://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/).\n\n## Creating Our Custom Object\n\nNow that we have the function created, we can call it to create our custom object. We'll then display its properties.\n\n``` powershell\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n\n# Display all properties\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable MyComment\n```\n\nAs you can see, simply running the name of our variable produces a table. Across the top are the names of our properties, below it are the values we passed into the function to use as values.\n\nIf we want to prove to ourselves this is indeed a `PSCustomObject`, we can use the `GetType` method.\n\n``` powershell\n$myObject.GetType()\n```\n\nResult:\n\n```\nIsPublic IsSerial Name            BaseType\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d            \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\nTrue     False    PSCustomObject  System.Object\n```\n\nAs you can see in the Name column, it is indeed of type `PSCustomObject`!\n\nLike any object, we can assign new values by referencing the individual properties.\n\n``` powershell\n$myObject.Schema = 'New Schema'\n$myObject.Comment = 'New Comment'\n$myObject\n```\n\nResult:\n\n```\nSchema     Table   Comment\n\u002d\u002d\u002d\u002d\u002d\u002d     \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-\nNew Schema MyTable New Comment\n```\n\nIn the output, you can see the values for Schema and Comment were updated. The original value for the Table property remained unchanged.\n\n## Adding Properties One At A Time\n\nThere is an alternate method we can use to create a custom object. We can create an empty object, then use the `Add-Member` cmdlet to add each property individually.\n\nLet's rewrite our function to use this methodology.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject\n\n  # Add-Member by passing in input object\n  Add-Member -InputObject $object `\n             –MemberType NoteProperty `\n             –Name Schema `\n             –Value $Schema\n\n  # Alternate syntax, pipe the object as an input to Add-Member\n  $object | Add-Member –MemberType NoteProperty `\n                       –Name Table `\n                       –Value $Table\n\n  $object | Add-Member -MemberType NoteProperty `\n                       -Name Comment `\n                       -Value $Comment\n\n  return $object\n}\n```\n\nThe function declaration is the same as in our first example. We then create an empty object through the line `$object = New-Object –TypeName PSObject`. This object now exists, but has none of our custom properties. Yet!\n\nNow we are going to call the `Add-Member` cmdlet. `Add-Member` allows us to add new properties and methods to an existing object.\n\nThe first parameter, `InputObject`, is used to indicate what object we want to work with.\n\nThe next parameter is `MemberType`. There are a variety of types we can add to a custom object. In this case we want to add a text property, so the correct value to use is `NoteProperty`. We'll see examples of other member types as we progress through this series.\n\nThe next two parameters are pretty self explanatory. The `Name` is what we want to call this property, and `Value` is the value we want it to have.\n\nWe then move on to add the `Table` property. In this example I wanted to show the alternative format for using `Add-Member`. You can take the object you want to add a member to, and pipe it into the `Add-Member` cmdlet. I've done this here for the `Table` property, as well as for the final property `Comment`.\n\nUsing this function has identical results as the previous example.\n\n``` powershell\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable MyComment\n```\n\nSo why use `Add-Member`? Clearly the first example where we used a hash table to declare our property list was more compact.\n\nThink about what we did here. We added new properties to _an existing object_! In this case it was a custom object we created. but this could be _any PowerShell object_. For example, we could have a list of file system objects returned to us by the `Get-ChildItem` cmdlet. Using `Add-Member` we have the ability to add new properties (and methods) to those objects.\n\nWe'll see an example of this very thing in a future blog post, but for now let's move on to the final section in today's post.\n\n## Creating Property Aliases\n\nIf you've been in IT for any length of time, you've probably encountered the situation where two different groups refer to the same property by two different names. In our example, let's say the DBA's refer to the comment property as `Comment`. They would like to use that property name when they use your script.\n\nYour software developers though don't think of this as the comment property, instead they call it `Description`. They complain that having to use the property name \u0022Comment\u0022 is causing a lot of coding errors.\n\nThis is one of those rare times we can make everyone happy, and we do so through the use of a property _alias_.\n\nWe'll start with the same `$object` variable we left off with in the previous example. We'll then use `Add-Member` to add a new alias.\n\n``` powershell\nAdd-Member -InputObject $myObject `\n           -MemberType AliasProperty `\n           -Name 'Description' `\n           -Value 'Comment' `\n           -PassThru\n```\n\nResult:\n\n```\nSchema     Table   Comment     Description\n\u002d\u002d\u002d\u002d\u002d\u002d     \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-     \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\nNew Schema MyTable New Comment New Comment\n```\n\nThe first thing to note is the `MemberType`. Instead of a `NoteProperty`, we are using the type `AliasProperty`. This will let the `Add-Member` cmdlet know we are simply adding an alternate name for an existing property.\n\nThe `Name` parameter is the name for the alias. The `Value` is the name of the already existing property.\n\nYou'll also note I added a switch to `Add-Member`, `PassThru`. In our previous examples, leaving this off ran the code but displayed no output. If want to see the results though, you can add the `PassThru` switch and the new values will be displayed in the terminal, as you saw in the _Result_ section above.\n\nOur alias added, you can see a new column `Description`. The value under it is identical to the one for comment.\n\nLet's change the `Description` property and see what happens.\n\n``` powershell\n$myObject.Description = 'The Description'\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment         Description\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-         \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable The Description The Description\n```\n\nAs you can see, both `Comment` and `Description` hold the newly updated value. Your users can now use these property names interchangeably.\n\nWe can of course update our original function to add the alias at the time the object is created.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject `\n                       -Property $properties\n\n  Add-Member -InputObject $object `\n             -MemberType AliasProperty `\n             -Name 'Description' `\n             -Value 'Comment'\n\n  # Return the newly created object\n  return $object\n}\n\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment   Description\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable MyComment MyComment\n```\n\nAs you can see, the function generated an object that included our alias. In this example I also combined methods. I used a hash table to define our initial set of properties, then used `Add-Member` to add the alias. I could have also put the addition of the alias in the second version of the function, where each property was added one at a time.\n\n## Conclusion\n\nIn this post we learned how to create a basic object using PSCustomObject. We added some properties, and even created an alias for one.\n\nNow you may be asking \u0022what about methods? Object can have methods too!\u0022 And you would be correct. In the next post in the series we'll see how to add custom methods to our object.\n\nIn future posts we'll see how to create custom objects from bits of C# code. Then we'll see how to add our own properties and methods to an existing object created by PowerShell.\n\nWe'll then return to our discussion of PowerShell classes by looking at some advanced features of the built in PowerShell class type.\n\nThe demos in this series of blog posts was inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>Before the holidays I had started a series on classes and objects in PowerShell. If you haven't read my post <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">Fun With PowerShell Classes - The Basics</a> you should give it a quick read. There are terms that were defined in it that we'll be using here.</p>
<p>For this post I'll begin a series on the use of <code>PSCustomObject</code>. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. It still has a lot of validity today though, as you can use these techniques to extend the objects other people defined, including those already built into PowerShell.</p>
<p>In addition, understanding the use of <code>PSCustomObject</code> will give you a better understanding of the way classes work.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Second, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Code to Generate Our PSCustomObject</h2>
<p>For these demos, I'm going to wrap the creation of our objects within a function. This is a common technique which allows us to create multiple objects based on a single set of code. Note this isn't required, you could use these techniques anywhere in your code. I just find placing it in functions makes for greater reuse.</p>
<p>If you need a refresher on PowerShell functions, I'll refer you back to my posts on functions: <a href="https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/">Fun With PowerShell Basic Functions</a>; <a href="https://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/">Fun With PowerShell Advanced Functions</a>; and <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a>.</p>
<p>Let's take a look at our first example, then break down each line.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Build a hash table with the properties
  $properties = [ordered]@{ Schema = $Schema
                            Table = $Table
                            Comment = $Comment
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject `
                       -Property $properties

  # Return the newly created object
  return $object
}
</code></pre>
<p>Our first line, obviously, defines our basic function. For this example I will be creating an object that holds the schema and table names for a database. It also will allow for a comment, so these are the three parameters that are passed in.</p>
<p>To add a list of properties to our object, we need to use a <em>hash table</em>. I define the hash table with three properties, Schema, Table, and Comment, and assign the parameter variables we passed in for their respective values. And yes, I do have a post on hash tables if you wish to know more about them, <a href="https://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/">Fun With PowerShell Hash Tables</a>.</p>
<p>Next is where the magic occurs. I call the cmdlet <code>New-Object</code>. For its <code>TypeName</code> parameter I use the value of <code>PSObject</code>. This will create a variable of type <code>PSCustomObject</code>. I then pass in my hash table name for the <code>Property</code> parameter.</p>
<p>This is assigned to the variable <code>$object</code>. In the final line I return that value to the calling code.</p>
<p>Before someone points it out, yes I could have made the last line of the function simply <code>New-Object –TypeName PSObject -Property $properties</code> and not assigned it to a variable. As I explain in my previously mentioned posts on functions, not consuming the output within the function returns the value to the code that called it.</p>
<p>Assigning to a value within my function, then returning that value, gives me some additional flexibility. Primarily I could use the <code>Write-Verbose</code> and <code>Write-Debug</code> statements to echo additional debugging information back to the developer (or user). It also allows for easier integration with testing tools, such as <a href="https://pester.dev/">Pester</a>.</p>
<p>For more info on Write-Verbose and Write-Debug, see my posts <a href="https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/">Fun With PowerShell Write-Verbose</a> and <a href="https://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/">Fun With PowerShell Write-Debug</a>.</p>
<h2>Creating Our Custom Object</h2>
<p>Now that we have the function created, we can call it to create our custom object. We'll then display its properties.</p>
<pre><code class="language-powershell">$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'

# Display all properties
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment
------   -----   -------
MySchema MyTable MyComment
</code></pre>
<p>As you can see, simply running the name of our variable produces a table. Across the top are the names of our properties, below it are the values we passed into the function to use as values.</p>
<p>If we want to prove to ourselves this is indeed a <code>PSCustomObject</code>, we can use the <code>GetType</code> method.</p>
<pre><code class="language-powershell">$myObject.GetType()
</code></pre>
<p>Result:</p>
<pre><code>IsPublic IsSerial Name            BaseType
-------- -------- ----            --------
True     False    PSCustomObject  System.Object
</code></pre>
<p>As you can see in the Name column, it is indeed of type <code>PSCustomObject</code>!</p>
<p>Like any object, we can assign new values by referencing the individual properties.</p>
<pre><code class="language-powershell">$myObject.Schema = 'New Schema'
$myObject.Comment = 'New Comment'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema     Table   Comment
------     -----   -------
New Schema MyTable New Comment
</code></pre>
<p>In the output, you can see the values for Schema and Comment were updated. The original value for the Table property remained unchanged.</p>
<h2>Adding Properties One At A Time</h2>
<p>There is an alternate method we can use to create a custom object. We can create an empty object, then use the <code>Add-Member</code> cmdlet to add each property individually.</p>
<p>Let's rewrite our function to use this methodology.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject

  # Add-Member by passing in input object
  Add-Member -InputObject $object `
             –MemberType NoteProperty `
             –Name Schema `
             –Value $Schema

  # Alternate syntax, pipe the object as an input to Add-Member
  $object | Add-Member –MemberType NoteProperty `
                       –Name Table `
                       –Value $Table

  $object | Add-Member -MemberType NoteProperty `
                       -Name Comment `
                       -Value $Comment

  return $object
}
</code></pre>
<p>The function declaration is the same as in our first example. We then create an empty object through the line <code>$object = New-Object –TypeName PSObject</code>. This object now exists, but has none of our custom properties. Yet!</p>
<p>Now we are going to call the <code>Add-Member</code> cmdlet. <code>Add-Member</code> allows us to add new properties and methods to an existing object.</p>
<p>The first parameter, <code>InputObject</code>, is used to indicate what object we want to work with.</p>
<p>The next parameter is <code>MemberType</code>. There are a variety of types we can add to a custom object. In this case we want to add a text property, so the correct value to use is <code>NoteProperty</code>. We'll see examples of other member types as we progress through this series.</p>
<p>The next two parameters are pretty self explanatory. The <code>Name</code> is what we want to call this property, and <code>Value</code> is the value we want it to have.</p>
<p>We then move on to add the <code>Table</code> property. In this example I wanted to show the alternative format for using <code>Add-Member</code>. You can take the object you want to add a member to, and pipe it into the <code>Add-Member</code> cmdlet. I've done this here for the <code>Table</code> property, as well as for the final property <code>Comment</code>.</p>
<p>Using this function has identical results as the previous example.</p>
<pre><code class="language-powershell">$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment
------   -----   -------
MySchema MyTable MyComment
</code></pre>
<p>So why use <code>Add-Member</code>? Clearly the first example where we used a hash table to declare our property list was more compact.</p>
<p>Think about what we did here. We added new properties to <em>an existing object</em>! In this case it was a custom object we created. but this could be <em>any PowerShell object</em>. For example, we could have a list of file system objects returned to us by the <code>Get-ChildItem</code> cmdlet. Using <code>Add-Member</code> we have the ability to add new properties (and methods) to those objects.</p>
<p>We'll see an example of this very thing in a future blog post, but for now let's move on to the final section in today's post.</p>
<h2>Creating Property Aliases</h2>
<p>If you've been in IT for any length of time, you've probably encountered the situation where two different groups refer to the same property by two different names. In our example, let's say the DBA's refer to the comment property as <code>Comment</code>. They would like to use that property name when they use your script.</p>
<p>Your software developers though don't think of this as the comment property, instead they call it <code>Description</code>. They complain that having to use the property name &quot;Comment&quot; is causing a lot of coding errors.</p>
<p>This is one of those rare times we can make everyone happy, and we do so through the use of a property <em>alias</em>.</p>
<p>We'll start with the same <code>$object</code> variable we left off with in the previous example. We'll then use <code>Add-Member</code> to add a new alias.</p>
<pre><code class="language-powershell">Add-Member -InputObject $myObject `
           -MemberType AliasProperty `
           -Name 'Description' `
           -Value 'Comment' `
           -PassThru
</code></pre>
<p>Result:</p>
<pre><code>Schema     Table   Comment     Description
------     -----   -------     -----------
New Schema MyTable New Comment New Comment
</code></pre>
<p>The first thing to note is the <code>MemberType</code>. Instead of a <code>NoteProperty</code>, we are using the type <code>AliasProperty</code>. This will let the <code>Add-Member</code> cmdlet know we are simply adding an alternate name for an existing property.</p>
<p>The <code>Name</code> parameter is the name for the alias. The <code>Value</code> is the name of the already existing property.</p>
<p>You'll also note I added a switch to <code>Add-Member</code>, <code>PassThru</code>. In our previous examples, leaving this off ran the code but displayed no output. If want to see the results though, you can add the <code>PassThru</code> switch and the new values will be displayed in the terminal, as you saw in the <em>Result</em> section above.</p>
<p>Our alias added, you can see a new column <code>Description</code>. The value under it is identical to the one for comment.</p>
<p>Let's change the <code>Description</code> property and see what happens.</p>
<pre><code class="language-powershell">$myObject.Description = 'The Description'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment         Description
------   -----   -------         -----------
MySchema MyTable The Description The Description
</code></pre>
<p>As you can see, both <code>Comment</code> and <code>Description</code> hold the newly updated value. Your users can now use these property names interchangeably.</p>
<p>We can of course update our original function to add the alias at the time the object is created.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Build a hash table with the properties
  $properties = [ordered]@{ Schema = $Schema
                            Table = $Table
                            Comment = $Comment
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject `
                       -Property $properties

  Add-Member -InputObject $object `
             -MemberType AliasProperty `
             -Name 'Description' `
             -Value 'Comment'

  # Return the newly created object
  return $object
}

$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment   Description
------   -----   -------   -----------
MySchema MyTable MyComment MyComment
</code></pre>
<p>As you can see, the function generated an object that included our alias. In this example I also combined methods. I used a hash table to define our initial set of properties, then used <code>Add-Member</code> to add the alias. I could have also put the addition of the alias in the second version of the function, where each property was added one at a time.</p>
<h2>Conclusion</h2>
<p>In this post we learned how to create a basic object using PSCustomObject. We added some properties, and even created an alias for one.</p>
<p>Now you may be asking &quot;what about methods? Object can have methods too!&quot; And you would be correct. In the next post in the series we'll see how to add custom methods to our object.</p>
<p>In future posts we'll see how to create custom objects from bits of C# code. Then we'll see how to add our own properties and methods to an existing object created by PowerShell.</p>
<p>We'll then return to our discussion of PowerShell classes by looking at some advanced features of the built in PowerShell class type.</p>
<p>The demos in this series of blog posts was inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4310</wp:post_id>
  <wp:post_date>2022-01-10 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-10 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-09 19:21:03</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 01:21:03</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-pscustomobject</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="pscustomobect"><![CDATA[PSCustomObect]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4313]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67515828826]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1641826814]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1480555086527008778";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_372358761361709";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167030</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:08</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] class using the class keyword introduced in PowerShell 5. We then looked at using PSCustomObject to create new objects, then add methods to those objects. In the previous post, we used C# code to create our PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645897.907232;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641208.260847;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166867</wp:comment_id>
    <wp:comment_author><![CDATA[Creating Custom Objects with PSCustomObject &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/01/13/creating-custom-objects-with-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-01-13 07:00:18</wp:comment_date>
    <wp:comment_date_gmt>2022-01-13 13:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain shows us one method of working with classes in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642078818.623966;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642082667.601459;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166916</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:20</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the previous installment of this series, I covered the various ways to create objects using the PSCustomObject. We saw how [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431620.099342;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436449.483936;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166973</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:12</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] of this series, I covered the various ways to create objects using the PSCustomObject. We saw how to create it using the New-Object cmdlet, then how to add your custom properties to it using the Add-Member [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040754.850106;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036412.796746;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun-With-PowerShell-Objects-01-PSCustomObject</title>
  <link>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/fun-with-powershell-objects-01-pscustomobject/</link>
  <pubDate>Mon, 10 Jan 2022 01:12:37 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-01-pscustomobject.png</guid>
  <description/>
  <content:encoded><![CDATA[PSCustomObject Code Sample]]></content:encoded>
  <excerpt:encoded><![CDATA[PSCustomObject Code Sample]]></excerpt:encoded>
  <wp:post_id>4313</wp:post_id>
  <wp:post_date>2022-01-09 19:12:37</wp:post_date>
  <wp:post_date_gmt>2022-01-10 01:12:37</wp:post_date_gmt>
  <wp:post_modified>2022-01-09 19:13:04</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 01:13:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-01-pscustomobject</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4310</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-01-pscustomobject.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[PSCustomObject Sample]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Fun With PowerShell Objects - Adding Methods to PSCustomObject</title>
  <link>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</link>
  <pubDate>Mon, 17 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4317</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn the [previous installment](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/) of this series, I covered the various ways to create objects using the `PSCustomObject`. We saw how to create it using the `New-Object` cmdlet, then how to add your custom properties to it using the `Add-Member` cmdlet.\n\nIn this post we'll learn how to add our own _methods_ to our objects using _script blocks_. Before we go on, just a quick reminder on vocabulary.\n\nIn object oriented terminology, objects have properties and methods. From the perspective of the script writer who uses our object, they only know of the properties and methods we expose. They don't know, or care, how we implemented them.\n\nFrom the perspective of us, the authors of the code to create the object, it's a little different. What the end user calls properties we store in variables. We implement our objects methods using functions.\n\nWhen we are talking about our code in terms of writing our object, you will frequently see the terms _properties_ and _variables_ used interchangeably. Likewise you'll see the terms _method_ and _function_ used interchangeably.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Script Blocks\n\nBefore we get started, it's important to understand the concept of a _script block_. A script block is a piece of code encapsulated within squiggly braces {}. This code is meant to execute as a unit. Here's an example you've probably seen before.\n\n``` powershell\n$x = 1\nif ($x -eq 1)\n{ Write-Host 'Yep its one' }\n```\n\nThe code on the last line is the script block. This unit of code, within the squiggly braces, will execute should the `if` statement evaluates to true.\n\nIt's possible to define your own script blocks, and store them in a variable.\n\n``` powershell\n$hw = {\n        Clear-Host\n        \u0022Hello World\u0022\n      }\n```\n\nHere I've generated a simple block with two lines. The first clears the display, the second prints `Hello World`.\n\nNow you have a variable, `$hw`, holding a script block. How can we use this?\n\nFirst, we could execute the script block stored in the variable. To do so, we need to precede the name of the variable with an ampersand `\u0026amp;`. The ampersand is the PowerShell shortcut for _execute the code block contained in this variable_.\n\n``` powershell\n\u0026amp; $hw\n```\n\nResult:\n\n```\nHello World\n```\n\nAlthough it's difficult to show, the display did indeed clear before displaying our text.\n\nNote the space between the `\u0026amp;` and the variable name is optional, this works too.\n\n``` powershell\n\u0026amp;$hw\n```\n\nPersonally I think the space makes it a bit easier to read, not to mention it's easier for the eye to notice the `\u0026amp;`. Whichever way you go, I suggest picking a format and sticking to it.\n\nThere are some interesting ways we can use this concept. Of course we'll look at using script blocks to add new methods to an object in a moment, but another fun thing you can do is pass a script block into a function.\n\nA quick note, it is generally considered poor practice to have `Write-Host` statements within a function. Since this is just a simple demo though, we'll use them just to illustrate our concepts.\n\n``` powershell\nfunction Run-AScriptBlock($block)\n{\n  Write-Host 'About to run a script block'\n\n  \u0026amp; $block\n\n  Write-Host \u0022Block was run\u0022\n}\n\nRun-AScriptBlock $hw\n```\n\nResult:\n\n```\nHello World\nBlock was run\n```\n\nThe first line to display \u0022About to run....\u0022 did execute, but it was wiped out due to the `Clear-Host` in the script block.\n\nThe script block then displayed `Hello World`, and returned control to the function. The function then displayed \u0022Block was run\u0022 then exited.\n\nThe PowerShell testing tool, Pester, makes extensive use of this functionality to pass the code blocks being tested into Pester's unit testing functions.\n\nYour imagination is probably running wild at the various ways you can use this. For example, you could build a string of PowerShell code based on certain conditions, then once the string of code is complete execute it.\n\nAt this point you have a nice foundation on the concept of script blocks, so let's move on to the main topic of this post.\n\n## Starting Point\n\nThis post picks up where the previous one left off. If you recall, our previous post built a function to generate a custom object of type `PSCustomObject`. If you need an explanation please go back and read part 1 of this series, but to make it easy for you I'll reproduce the function needed to create the object we'll be working with.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject -Property $properties\n\n  Add-Member -InputObject $object `\n             -MemberType AliasProperty `\n             -Name 'Description' `\n             -Value 'Comment'\n\n  # Return the newly created object\n  return $object\n}\n\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n$myObject\n```\n\n## Adding a Method (aka Function) to an Object\n\nWith the knowledge above, combined with what we learned in the previous post, it turns out adding a simple function to an object is easy. First, we need to define our function in a script block. This function will combine the schema name and the table name with a period to separate the two.\n\n``` powershell\n$block = {\n           $st = \u0022$($this.Schema).$($this.Table)\u0022\n           return $st\n         }\n```\n\nIn this example I used _string interpolation_ to build my return string. (For more on string interpolation, see my post [Fun With PowerShell Strings](https://arcanecode.com/2021/07/12/fun-with-powershell-strings/).)\n\nNote my use of the `$this` keyword. Just like with objects generated by the more [modern classes](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) in PowerShell 5 and beyond, `$this` is used to represent the current instance of our custom object. Thus we'll be getting the schema and table names for the current object, stored in `$myObject`, and not one in another variable that was instantiated using the same code.\n\nIf you aren't a fan of string interpolation, you could have opted for concatenation with `$st = $this.Schema + '.' + $this.Table` to generate the return value, but interpolation is the generally accepted best practice for building strings.\n\nConcatenation is generally slower and takes more processing power than interpolation. Granted in this case it is barely measurable, but done over a dataset of millions of rows you might see an impact.\n\nWith the schema-table string (`$st`) built it is then returned.\n\nNow we will use the `Add-Member` cmdlet to add this function to our custom object. Assuming you have already run the function to create the `$myObject` variable, shown in the **Starting Point** section, you can use the following code to achieve our goal.\n\n``` powershell\nAdd-Member -InputObject $myObject `\n           -MemberType ScriptMethod `\n           -Name 'SchemaTable' `\n           -Value $block\n```\n\nI start by passing in the object I wish to add a member to, our `$myObject` variable.\n\nNext I indicate what type of member we are adding. `ScriptMethod` is the value to pass in to `MemberType` to indicate the data in the variable is a script block and should be manifested as a method.\n\nThe `Name` is next, in other words what we want to name this method. Finally into the `Value` parameter we pass in the variable holding the script block.\n\nOnce you add this new member, you can simply call it using the dot notation, with one important caveat. Because this is a method, you need to add parenthesis to the name of the method.\n\n``` powershell\n$myObject.SchemaTable()\n```\n\nResult:\n\n```\nMySchema.MyTable\n```\n\nUsing the parenthesis lets PowerShell make the distinction between a property and a method.\n\n## Parameters\n\nWhat's that? You in the back row raising your hand, what did you say? Parameters? You want to add parameters to your new method?\n\nWell, OK because you asked so nice.\n\nThis turns out to be pretty easy. We just need to add a `param` section within our script block.\n\n``` powershell\n$block = {\n           param ($DatabaseName)\n           $dst = \u0022$DatabaseName.$($this.Schema).$($this.Table)\u0022\n           return $dst\n         }\n```\n\nOn the first line of our script block we use the `param` keyword, then have a list of our parameters within parenthesis. Here we only have one, `$DatabaseName`, but we could have more separated by commas.\n\nI then build a string that uses the passed in database name, with the schema and table names already in the object, and finally return it.\n\nNext, I use `Add-Member` to add this function to our object just like I did with the previous example, the only difference being the name and the variable with our script block. Now we can call it.\n\n``` powershell\n$myObject.DatabaseSchemaTable('MyDBName')\n```\n\nResult:\n\n```\nMyDBName.MySchema.MyTable\n```\n\n## Conclusion\n\nThis post began with an explanation of _script blocks_. Using this knowledge we added new methods to our existing object. One even allowed us to pass in a parameter.\n\nIn in the next post we'll see how to create custom objects from bits of C# code. Later on we'll see how to add our own properties and methods to an existing object created by PowerShell.\n\nWell conclude this series by returning to our discussion of PowerShell classes by looking at some advanced features of the built in class construct.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In the <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">previous installment</a> of this series, I covered the various ways to create objects using the <code>PSCustomObject</code>. We saw how to create it using the <code>New-Object</code> cmdlet, then how to add your custom properties to it using the <code>Add-Member</code> cmdlet.</p>
<p>In this post we'll learn how to add our own <em>methods</em> to our objects using <em>script blocks</em>. Before we go on, just a quick reminder on vocabulary.</p>
<p>In object oriented terminology, objects have properties and methods. From the perspective of the script writer who uses our object, they only know of the properties and methods we expose. They don't know, or care, how we implemented them.</p>
<p>From the perspective of us, the authors of the code to create the object, it's a little different. What the end user calls properties we store in variables. We implement our objects methods using functions.</p>
<p>When we are talking about our code in terms of writing our object, you will frequently see the terms <em>properties</em> and <em>variables</em> used interchangeably. Likewise you'll see the terms <em>method</em> and <em>function</em> used interchangeably.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Script Blocks</h2>
<p>Before we get started, it's important to understand the concept of a <em>script block</em>. A script block is a piece of code encapsulated within squiggly braces {}. This code is meant to execute as a unit. Here's an example you've probably seen before.</p>
<pre><code class="language-powershell">$x = 1
if ($x -eq 1)
{ Write-Host 'Yep its one' }
</code></pre>
<p>The code on the last line is the script block. This unit of code, within the squiggly braces, will execute should the <code>if</code> statement evaluates to true.</p>
<p>It's possible to define your own script blocks, and store them in a variable.</p>
<pre><code class="language-powershell">$hw = {
        Clear-Host
        &quot;Hello World&quot;
      }
</code></pre>
<p>Here I've generated a simple block with two lines. The first clears the display, the second prints <code>Hello World</code>.</p>
<p>Now you have a variable, <code>$hw</code>, holding a script block. How can we use this?</p>
<p>First, we could execute the script block stored in the variable. To do so, we need to precede the name of the variable with an ampersand <code>&amp;</code>. The ampersand is the PowerShell shortcut for <em>execute the code block contained in this variable</em>.</p>
<pre><code class="language-powershell">&amp; $hw
</code></pre>
<p>Result:</p>
<pre><code>Hello World
</code></pre>
<p>Although it's difficult to show, the display did indeed clear before displaying our text.</p>
<p>Note the space between the <code>&amp;</code> and the variable name is optional, this works too.</p>
<pre><code class="language-powershell">&amp;$hw
</code></pre>
<p>Personally I think the space makes it a bit easier to read, not to mention it's easier for the eye to notice the <code>&amp;</code>. Whichever way you go, I suggest picking a format and sticking to it.</p>
<p>There are some interesting ways we can use this concept. Of course we'll look at using script blocks to add new methods to an object in a moment, but another fun thing you can do is pass a script block into a function.</p>
<p>A quick note, it is generally considered poor practice to have <code>Write-Host</code> statements within a function. Since this is just a simple demo though, we'll use them just to illustrate our concepts.</p>
<pre><code class="language-powershell">function Run-AScriptBlock($block)
{
  Write-Host 'About to run a script block'

  &amp; $block

  Write-Host &quot;Block was run&quot;
}

Run-AScriptBlock $hw
</code></pre>
<p>Result:</p>
<pre><code>Hello World
Block was run
</code></pre>
<p>The first line to display &quot;About to run....&quot; did execute, but it was wiped out due to the <code>Clear-Host</code> in the script block.</p>
<p>The script block then displayed <code>Hello World</code>, and returned control to the function. The function then displayed &quot;Block was run&quot; then exited.</p>
<p>The PowerShell testing tool, Pester, makes extensive use of this functionality to pass the code blocks being tested into Pester's unit testing functions.</p>
<p>Your imagination is probably running wild at the various ways you can use this. For example, you could build a string of PowerShell code based on certain conditions, then once the string of code is complete execute it.</p>
<p>At this point you have a nice foundation on the concept of script blocks, so let's move on to the main topic of this post.</p>
<h2>Starting Point</h2>
<p>This post picks up where the previous one left off. If you recall, our previous post built a function to generate a custom object of type <code>PSCustomObject</code>. If you need an explanation please go back and read part 1 of this series, but to make it easy for you I'll reproduce the function needed to create the object we'll be working with.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Build a hash table with the properties
  $properties = [ordered]@{ Schema = $Schema
                            Table = $Table
                            Comment = $Comment
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject -Property $properties

  Add-Member -InputObject $object `
             -MemberType AliasProperty `
             -Name 'Description' `
             -Value 'Comment'

  # Return the newly created object
  return $object
}

$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'
$myObject
</code></pre>
<h2>Adding a Method (aka Function) to an Object</h2>
<p>With the knowledge above, combined with what we learned in the previous post, it turns out adding a simple function to an object is easy. First, we need to define our function in a script block. This function will combine the schema name and the table name with a period to separate the two.</p>
<pre><code class="language-powershell">$block = {
           $st = &quot;$($this.Schema).$($this.Table)&quot;
           return $st
         }
</code></pre>
<p>In this example I used <em>string interpolation</em> to build my return string. (For more on string interpolation, see my post <a href="https://arcanecode.com/2021/07/12/fun-with-powershell-strings/">Fun With PowerShell Strings</a>.)</p>
<p>Note my use of the <code>$this</code> keyword. Just like with objects generated by the more <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">modern classes</a> in PowerShell 5 and beyond, <code>$this</code> is used to represent the current instance of our custom object. Thus we'll be getting the schema and table names for the current object, stored in <code>$myObject</code>, and not one in another variable that was instantiated using the same code.</p>
<p>If you aren't a fan of string interpolation, you could have opted for concatenation with <code>$st = $this.Schema + '.' + $this.Table</code> to generate the return value, but interpolation is the generally accepted best practice for building strings.</p>
<p>Concatenation is generally slower and takes more processing power than interpolation. Granted in this case it is barely measurable, but done over a dataset of millions of rows you might see an impact.</p>
<p>With the schema-table string (<code>$st</code>) built it is then returned.</p>
<p>Now we will use the <code>Add-Member</code> cmdlet to add this function to our custom object. Assuming you have already run the function to create the <code>$myObject</code> variable, shown in the <strong>Starting Point</strong> section, you can use the following code to achieve our goal.</p>
<pre><code class="language-powershell">Add-Member -InputObject $myObject `
           -MemberType ScriptMethod `
           -Name 'SchemaTable' `
           -Value $block
</code></pre>
<p>I start by passing in the object I wish to add a member to, our <code>$myObject</code> variable.</p>
<p>Next I indicate what type of member we are adding. <code>ScriptMethod</code> is the value to pass in to <code>MemberType</code> to indicate the data in the variable is a script block and should be manifested as a method.</p>
<p>The <code>Name</code> is next, in other words what we want to name this method. Finally into the <code>Value</code> parameter we pass in the variable holding the script block.</p>
<p>Once you add this new member, you can simply call it using the dot notation, with one important caveat. Because this is a method, you need to add parenthesis to the name of the method.</p>
<pre><code class="language-powershell">$myObject.SchemaTable()
</code></pre>
<p>Result:</p>
<pre><code>MySchema.MyTable
</code></pre>
<p>Using the parenthesis lets PowerShell make the distinction between a property and a method.</p>
<h2>Parameters</h2>
<p>What's that? You in the back row raising your hand, what did you say? Parameters? You want to add parameters to your new method?</p>
<p>Well, OK because you asked so nice.</p>
<p>This turns out to be pretty easy. We just need to add a <code>param</code> section within our script block.</p>
<pre><code class="language-powershell">$block = {
           param ($DatabaseName)
           $dst = &quot;$DatabaseName.$($this.Schema).$($this.Table)&quot;
           return $dst
         }
</code></pre>
<p>On the first line of our script block we use the <code>param</code> keyword, then have a list of our parameters within parenthesis. Here we only have one, <code>$DatabaseName</code>, but we could have more separated by commas.</p>
<p>I then build a string that uses the passed in database name, with the schema and table names already in the object, and finally return it.</p>
<p>Next, I use <code>Add-Member</code> to add this function to our object just like I did with the previous example, the only difference being the name and the variable with our script block. Now we can call it.</p>
<pre><code class="language-powershell">$myObject.DatabaseSchemaTable('MyDBName')
</code></pre>
<p>Result:</p>
<pre><code>MyDBName.MySchema.MyTable
</code></pre>
<h2>Conclusion</h2>
<p>This post began with an explanation of <em>script blocks</em>. Using this knowledge we added new methods to our existing object. One even allowed us to pass in a parameter.</p>
<p>In in the next post we'll see how to create custom objects from bits of C# code. Later on we'll see how to add our own properties and methods to an existing object created by PowerShell.</p>
<p>Well conclude this series by returning to our discussion of PowerShell classes by looking at some advanced features of the built in class construct.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4317</wp:post_id>
  <wp:post_date>2022-01-17 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-17 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 15:01:33</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 21:01:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-adding-methods-to-pscustomobject</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="methods"><![CDATA[Methods]]></category>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="pscustomobect"><![CDATA[PSCustomObect]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4318]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67794557812]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1642431617]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1483091815725154305";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_376657574265161";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167031</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:10</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] introduced in PowerShell 5. We then looked at using PSCustomObject to create new objects, then add methods to those objects. In the previous post, we used C# code to create our PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.116471;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641210.902687;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166947</wp:comment_id>
    <wp:comment_author><![CDATA[Adding Methods to a PSCustomObject &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/01/21/adding-methods-to-a-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-01-21 07:10:15</wp:comment_date>
    <wp:comment_date_gmt>2022-01-21 13:10:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain builds on a prior post: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642770615.091866;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642774767.407533;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166964</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 03/2022 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19856-Die-KW-032022-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2022-01-23 16:44:41</wp:comment_date>
    <wp:comment_date_gmt>2022-01-23 22:44:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Hier wird euch gezeigt, wie ihr an eure eigenen PowerShell Objekte Methoden bastelt. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642977881.115415;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642982963.278308;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166974</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:14</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] how to add your custom properties to it using the Add-Member cmdlet. In the subsequent post we saw how to add new methods to [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040755.038429;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036414.843293;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun-With-PowerShell-Objects-02-PSCustomObject-Methods</title>
  <link>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/fun-with-powershell-objects-02-pscustomobject-methods/</link>
  <pubDate>Mon, 10 Jan 2022 20:58:30 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-02-pscustomobject-methods.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4318</wp:post_id>
  <wp:post_date>2022-01-10 14:58:30</wp:post_date>
  <wp:post_date_gmt>2022-01-10 20:58:30</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 14:58:30</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 20:58:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-02-pscustomobject-methods</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4317</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-02-pscustomobject-methods.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Objects - Creating Objects from C#</title>
  <link>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</link>
  <pubDate>Mon, 24 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4321</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nThis is the next installment in my series on creating objects in PowerShell. In [the first installment](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) we showed how to create an object using the `class` type introduced in PowerShell 5. That covered the basics, and in the last installment of this series we'll cover some advanced techniques.\n\nIn the last two installment of this series, I covered the various ways to create objects using the `PSCustomObject`. We saw [how to create](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/) it using the `New-Object` cmdlet, then how to add your custom properties to it using the `Add-Member` cmdlet. In the subsequent post we saw [how to add new methods](https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/) to it.\n\nIn this post, we'll cover something new, creating an object based on C# code!\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Why C#\n\nYou may be asking yourself, why integrate C# code into PowerShell? Why not just define our objects using PowerShell? There are several reasons, especially if you are working with a team of C# developers, or are a C# developer yourself.\n\nFirst, it can make testing your C# classes easy. You can code the class and save it in a _.CS_ file. Then run some simple PowerShell to create a new object from your class and test its various properties and methods. This lets you make changes easily and test again. All without having to create a full blown C# project just to test.\n\nIt also allows for code reuse. Let's say your C# developers have created a library to do some calculations, and you need to use one of the methods from that library, but that library expects you to pass in an object based on a class.\n\nLet's further the example, perhaps you have the task of reading in a CSV file, doing a calculation for each row, then outputting another CSV file, or maybe even a JSON file. This is a one time use, so you don't want to go to the effort of creating a full blown C# project.\n\nUsing the techniques in this demo, you could simply access the C# file in which the class was defined, and generate an object from it in PowerShell. Then all you'd have to do is populate the object and pass it into the library to do the calculation, and output the result.\n\nThese are just a few simple examples, I'm sure you'll come up with many more as the need arises. I'll be honest, this isn't something you will need to do a great deal, but when you do you'll appreciate knowing how.\n\n## Embedding a C# Class in your PowerShell\n\nIn this first method, we'll define a standard C# class within a _here string_ then add it as a new data type in PowerShell. Once it exists as a type, we can then generate new objects from it. Let's take a look at a very simple class definition.\n\n``` powershell\n$code = @\u0022\nusing System;\n\npublic class SchemaTable\n{\n  public string DatabaseName;\n\n  public string SchemaTableName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;  // Setup a return variable\n\n    retVal = pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public SchemaTableName\n\n  public string FullName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;  // Setup a return variable\n\n    retVal = this.DatabaseName + \u0022.\u0022 + pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public FullName\n\n} // class SchemaTable\n\n\u0022@\n```\n\nIf you've read this far I'm going to assume you are familiar with C#, at least the basics of it, so I'll keep this explanation at a high level.\n\nWe start by declaring a class named `SchemaTable`. The next line declares a variable (which will become a property) called `DatabaseName`.\n\nI then create the first of two functions (which will become our methods). The `SchemaTableName` simply takes the two passed in values of `pSchema` and `pTable` and concatenates them together with a period between them.\n\nThe second, `FullName`, takes the value in `DatabaseName` and concatenates them with the schema and table name parameters, again using a period as a separator in the return string.\n\nNext, we need to add this class as a new data _type_ in PowerShell. You are already familiar with many data types, such as int, string, and more. We simply want to add a new data type to our PowerShell environment.\n\nTo do so, we will use the `Add-Type` cmdlet.\n\n``` powershell\nAdd-Type -TypeDefinition $code `\n         -Language CSharp\n```\n\nThe first parameter, `TypeDefinition`, takes the C# code we defined in the here string. The second, `Language`, is pretty obvious. We simply need to let PowerShell know what language this code was written in.\n\nAs of right now, the only supported language is C#. Because of this, if you leave off the `-Language CSharp` parameter, it will default to C# as the language. I included it here for completeness, but will omit it for future examples in this post.\n\nSo now we've defined a class in C#, and have added it as a new data type in PowerShell. How then do we create an object from it?\n\nWe'll turn to our old friend, `New-Object`.\n\n``` powershell\n$result = New-Object -TypeName SchemaTable\n```\n\nThat's it, that simple one line will create our new object based on the C# code we defined in the `$code` variable. You can even use `Get-Member` to display its properties and methods like you would with any other object.\n\n``` powershell\n$result | Get-Member\n```\n\nResult:\n\n```\nName            MemberType Definition\n\u002d\u002d\u002d\u002d            \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\nEquals          Method     bool Equals(System.Object obj)\nFullName        Method     string FullName(string pSchema, string pTable)\nGetHashCode     Method     int GetHashCode()\nGetType         Method     type GetType()\nSchemaTableName Method     string SchemaTableName(string pSchema, string pTable)\nToString        Method     string ToString()\nDatabaseName    Property   string DatabaseName {get;set;}\n```\n\nIt contains the standard methods and properties built into all objects, but it also has the three we defined: `FullName`, `SchemaTableName`, and `DatabaseName`.\n\nWe can use these properties and methods just like ones in any other object. Let's set the `DatabaseName` property, then display it.\n\n``` powershell\n$result.DatabaseName = 'MyDB'\n$result.DatabaseName\n```\n\nResult:\n\n```\nMyDB\n```\n\nLikewise, we can access the methods we created. Here's the `SchemaTableName` method.\n\n``` powershell\n$result.SchemaTableName('ASchema', 'ATable')\n```\n\nResult:\n\n```\nASchema.ATable\n```\n\nAnd for completeness, the `FullName` method.\n\n``` powershell\n$result.FullName('ASchema', 'ATable')\n```\n\nResult:\n\n```\nMyDB.ASchema.ATable\n```\n\n## C# Classes with Static Methods\n\nIn the [original post](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) in this series on basic PowerShell classes, I mentioned the concept of _static_ methods and properties. As static method or property is simply one that can be called without having to generate a new object.\n\nWhile we'll circle back around to discuss implementing static methods and properties in PowerShell classes in the final post in this series, it is likely you'll encounter C# classes with static methods and properties. As such we'll go ahead and cover them here, while we are talking C#.\n\nIn the code below, I've defined a class with one method, and labeled it as static. In reality you will encounter many classes that have a mix of static and non-static members, but for this post we'll keep the example simple.\n\n``` powershell\n$code = @\u0022\nusing System;\n\npublic class StaticSchemaTable\n{\n  public static string FullName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;\n\n    retVal = pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public static FullName\n} // class StaticSchemaTable\n\u0022@\n```\n\nAs you can see, I've simply used the `static` keyword as part of the `FullName` function declaration. I also changed the name of the class, otherwise the code is the same as the previous demo.\n\nNow we need to add this as a new type in our current PowerShell session.\n\n``` powershell\nAdd-Type -TypeDefinition $code\n```\n\nCalling our static method requires different syntax. First, it won't be necessary to create an object from it. Second, we'll need to use the full name of our class in brackets, followed by two colons. We then indicate the name of the static function to call, and pass in any parameters.\n\n``` powershell\n$result = [StaticSchemaTable]::FullName('MySchema', 'myTable')\n$result\n```\n\nResult:\n\n```\nMySchema.myTable\n```\n\nStatic methods and parameters aren't something that's used a great deal, but they are used so you should know how to handle them.\n\n## Creating an Object from A C# File\n\nWhile it is certainly possible to embed C# code right in your PowerShell, this could lead to some issues. The moment a developer makes a change to their _.cs_ file, you are now out of sync. You don't want to have to keep cutting and pasting all the time.\n\nIt makes far more sense, then, to simply access the C# file with the class definition, and load it at run time.\n\nFirst, you need to create a C# file with the sample code. Here is what I put in my _.cs_ file:\n\n``` csharp\nusing System;\n\npublic class StaticSchemaTableInFile\n{\n  public static string FullName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;\n\n    retVal = pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public static FullName\n} // class StaticSchemaTableInFile\n```\n\nThis is the same static class you just saw, with the minor change to the class name.\n\nIn the next sample, I simply build the path to the file name, then use the `Get-Content` to read it.\n\n``` powershell\n$csPath = 'C:\\Users\\arcan\\OneDrive\\BlogPosts\\Markdown\\'\n$file = \u0022$($csPath)Fun-With-PowerShell-Objects-Part 3.cs\u0022\n$code = Get-Content $file | Out-String\n```\n\n`Get-Content` will read the contents of the file. By default `Get-Content` reads it as an array with each line in the file being an element, so we'll have to pipe it through the `Out-String` cmdlet to convert it to a single string. This string is then stored in the `$code` variable. Of course you'll need to update the path and file variables you used on your computer.\n\nNow we do just like the previous demo, call `Add-Type` then run it.\n\n``` powershell\nAdd-Type -TypeDefinition $code\n$result = [StaticSchemaTableInFile]::FullName('mySchema', 'myTable')\n$result\n```\n\nResult:\n\n```\nmySchema.myTable\n```\n\nAgain, I reused the example from the static demo but we could also have used the first example, or any standard C# file containing class definitions.\n\n## Other Ways To Add Types\n\nWhile outside the scope of this post, I did want to mention there are two other ways you can add new data types to your PowerShell scripts. First, `Add-Type` will let you load types stored in an _assmebly_, in other words a **.dll** file.\n\nSecond, if you are running on a Windows computer you can add types stored in native Windows APIs. If you want to learn more about these, I'll refer you to the [Add-Type Documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2) at Microsoft.\n\n## Persistance\n\nOne last thing you need to be aware of. When you add a type it does _not_ persist between sessions. The moment you close your command window or VSCode, that type goes away. You'll need to recreate it the next time you run your script.\n\nThis is probably a good thing, as it's doubtful you will need to use these types on a daily basis. Should you need to, though, you'll have to edit your PowerShell profile and have them added within it.\n\n## Conclusion\n\nIn this post we saw how to create custom objects from C# classes. They could be embedded in our PowerShell code, or stored in external files. The subject of _static_ methods and properties were mentioned, along with a demo on how to use them.\n\nIn the next post we'll see a very useful technique, and cover the ability to add our own custom methods and properties to existing objects that others created, including ones built right into PowerShell.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>This is the next installment in my series on creating objects in PowerShell. In <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">the first installment</a> we showed how to create an object using the <code>class</code> type introduced in PowerShell 5. That covered the basics, and in the last installment of this series we'll cover some advanced techniques.</p>
<p>In the last two installment of this series, I covered the various ways to create objects using the <code>PSCustomObject</code>. We saw <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">how to create</a> it using the <code>New-Object</code> cmdlet, then how to add your custom properties to it using the <code>Add-Member</code> cmdlet. In the subsequent post we saw <a href="https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/">how to add new methods</a> to it.</p>
<p>In this post, we'll cover something new, creating an object based on C# code!</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Why C#</h2>
<p>You may be asking yourself, why integrate C# code into PowerShell? Why not just define our objects using PowerShell? There are several reasons, especially if you are working with a team of C# developers, or are a C# developer yourself.</p>
<p>First, it can make testing your C# classes easy. You can code the class and save it in a <em>.CS</em> file. Then run some simple PowerShell to create a new object from your class and test its various properties and methods. This lets you make changes easily and test again. All without having to create a full blown C# project just to test.</p>
<p>It also allows for code reuse. Let's say your C# developers have created a library to do some calculations, and you need to use one of the methods from that library, but that library expects you to pass in an object based on a class.</p>
<p>Let's further the example, perhaps you have the task of reading in a CSV file, doing a calculation for each row, then outputting another CSV file, or maybe even a JSON file. This is a one time use, so you don't want to go to the effort of creating a full blown C# project.</p>
<p>Using the techniques in this demo, you could simply access the C# file in which the class was defined, and generate an object from it in PowerShell. Then all you'd have to do is populate the object and pass it into the library to do the calculation, and output the result.</p>
<p>These are just a few simple examples, I'm sure you'll come up with many more as the need arises. I'll be honest, this isn't something you will need to do a great deal, but when you do you'll appreciate knowing how.</p>
<h2>Embedding a C# Class in your PowerShell</h2>
<p>In this first method, we'll define a standard C# class within a <em>here string</em> then add it as a new data type in PowerShell. Once it exists as a type, we can then generate new objects from it. Let's take a look at a very simple class definition.</p>
<pre><code class="language-powershell">$code = @&quot;
using System;

public class SchemaTable
{
  public string DatabaseName;

  public string SchemaTableName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;  // Setup a return variable

    retVal = pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public SchemaTableName

  public string FullName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;  // Setup a return variable

    retVal = this.DatabaseName + &quot;.&quot; + pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public FullName

} // class SchemaTable

&quot;@
</code></pre>
<p>If you've read this far I'm going to assume you are familiar with C#, at least the basics of it, so I'll keep this explanation at a high level.</p>
<p>We start by declaring a class named <code>SchemaTable</code>. The next line declares a variable (which will become a property) called <code>DatabaseName</code>.</p>
<p>I then create the first of two functions (which will become our methods). The <code>SchemaTableName</code> simply takes the two passed in values of <code>pSchema</code> and <code>pTable</code> and concatenates them together with a period between them.</p>
<p>The second, <code>FullName</code>, takes the value in <code>DatabaseName</code> and concatenates them with the schema and table name parameters, again using a period as a separator in the return string.</p>
<p>Next, we need to add this class as a new data <em>type</em> in PowerShell. You are already familiar with many data types, such as int, string, and more. We simply want to add a new data type to our PowerShell environment.</p>
<p>To do so, we will use the <code>Add-Type</code> cmdlet.</p>
<pre><code class="language-powershell">Add-Type -TypeDefinition $code `
         -Language CSharp
</code></pre>
<p>The first parameter, <code>TypeDefinition</code>, takes the C# code we defined in the here string. The second, <code>Language</code>, is pretty obvious. We simply need to let PowerShell know what language this code was written in.</p>
<p>As of right now, the only supported language is C#. Because of this, if you leave off the <code>-Language CSharp</code> parameter, it will default to C# as the language. I included it here for completeness, but will omit it for future examples in this post.</p>
<p>So now we've defined a class in C#, and have added it as a new data type in PowerShell. How then do we create an object from it?</p>
<p>We'll turn to our old friend, <code>New-Object</code>.</p>
<pre><code class="language-powershell">$result = New-Object -TypeName SchemaTable
</code></pre>
<p>That's it, that simple one line will create our new object based on the C# code we defined in the <code>$code</code> variable. You can even use <code>Get-Member</code> to display its properties and methods like you would with any other object.</p>
<pre><code class="language-powershell">$result | Get-Member
</code></pre>
<p>Result:</p>
<pre><code>Name            MemberType Definition
----            ---------- ----------
Equals          Method     bool Equals(System.Object obj)
FullName        Method     string FullName(string pSchema, string pTable)
GetHashCode     Method     int GetHashCode()
GetType         Method     type GetType()
SchemaTableName Method     string SchemaTableName(string pSchema, string pTable)
ToString        Method     string ToString()
DatabaseName    Property   string DatabaseName {get;set;}
</code></pre>
<p>It contains the standard methods and properties built into all objects, but it also has the three we defined: <code>FullName</code>, <code>SchemaTableName</code>, and <code>DatabaseName</code>.</p>
<p>We can use these properties and methods just like ones in any other object. Let's set the <code>DatabaseName</code> property, then display it.</p>
<pre><code class="language-powershell">$result.DatabaseName = 'MyDB'
$result.DatabaseName
</code></pre>
<p>Result:</p>
<pre><code>MyDB
</code></pre>
<p>Likewise, we can access the methods we created. Here's the <code>SchemaTableName</code> method.</p>
<pre><code class="language-powershell">$result.SchemaTableName('ASchema', 'ATable')
</code></pre>
<p>Result:</p>
<pre><code>ASchema.ATable
</code></pre>
<p>And for completeness, the <code>FullName</code> method.</p>
<pre><code class="language-powershell">$result.FullName('ASchema', 'ATable')
</code></pre>
<p>Result:</p>
<pre><code>MyDB.ASchema.ATable
</code></pre>
<h2>C# Classes with Static Methods</h2>
<p>In the <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">original post</a> in this series on basic PowerShell classes, I mentioned the concept of <em>static</em> methods and properties. As static method or property is simply one that can be called without having to generate a new object.</p>
<p>While we'll circle back around to discuss implementing static methods and properties in PowerShell classes in the final post in this series, it is likely you'll encounter C# classes with static methods and properties. As such we'll go ahead and cover them here, while we are talking C#.</p>
<p>In the code below, I've defined a class with one method, and labeled it as static. In reality you will encounter many classes that have a mix of static and non-static members, but for this post we'll keep the example simple.</p>
<pre><code class="language-powershell">$code = @&quot;
using System;

public class StaticSchemaTable
{
  public static string FullName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;

    retVal = pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public static FullName
} // class StaticSchemaTable
&quot;@
</code></pre>
<p>As you can see, I've simply used the <code>static</code> keyword as part of the <code>FullName</code> function declaration. I also changed the name of the class, otherwise the code is the same as the previous demo.</p>
<p>Now we need to add this as a new type in our current PowerShell session.</p>
<pre><code class="language-powershell">Add-Type -TypeDefinition $code
</code></pre>
<p>Calling our static method requires different syntax. First, it won't be necessary to create an object from it. Second, we'll need to use the full name of our class in brackets, followed by two colons. We then indicate the name of the static function to call, and pass in any parameters.</p>
<pre><code class="language-powershell">$result = [StaticSchemaTable]::FullName('MySchema', 'myTable')
$result
</code></pre>
<p>Result:</p>
<pre><code>MySchema.myTable
</code></pre>
<p>Static methods and parameters aren't something that's used a great deal, but they are used so you should know how to handle them.</p>
<h2>Creating an Object from A C# File</h2>
<p>While it is certainly possible to embed C# code right in your PowerShell, this could lead to some issues. The moment a developer makes a change to their <em>.cs</em> file, you are now out of sync. You don't want to have to keep cutting and pasting all the time.</p>
<p>It makes far more sense, then, to simply access the C# file with the class definition, and load it at run time.</p>
<p>First, you need to create a C# file with the sample code. Here is what I put in my <em>.cs</em> file:</p>
<pre><code class="language-csharp">using System;

public class StaticSchemaTableInFile
{
  public static string FullName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;

    retVal = pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public static FullName
} // class StaticSchemaTableInFile
</code></pre>
<p>This is the same static class you just saw, with the minor change to the class name.</p>
<p>In the next sample, I simply build the path to the file name, then use the <code>Get-Content</code> to read it.</p>
<pre><code class="language-powershell">$csPath = 'C:\Users\arcan\OneDrive\BlogPosts\Markdown\'
$file = &quot;$($csPath)Fun-With-PowerShell-Objects-Part 3.cs&quot;
$code = Get-Content $file | Out-String
</code></pre>
<p><code>Get-Content</code> will read the contents of the file. By default <code>Get-Content</code> reads it as an array with each line in the file being an element, so we'll have to pipe it through the <code>Out-String</code> cmdlet to convert it to a single string. This string is then stored in the <code>$code</code> variable. Of course you'll need to update the path and file variables you used on your computer.</p>
<p>Now we do just like the previous demo, call <code>Add-Type</code> then run it.</p>
<pre><code class="language-powershell">Add-Type -TypeDefinition $code
$result = [StaticSchemaTableInFile]::FullName('mySchema', 'myTable')
$result
</code></pre>
<p>Result:</p>
<pre><code>mySchema.myTable
</code></pre>
<p>Again, I reused the example from the static demo but we could also have used the first example, or any standard C# file containing class definitions.</p>
<h2>Other Ways To Add Types</h2>
<p>While outside the scope of this post, I did want to mention there are two other ways you can add new data types to your PowerShell scripts. First, <code>Add-Type</code> will let you load types stored in an <em>assmebly</em>, in other words a <strong>.dll</strong> file.</p>
<p>Second, if you are running on a Windows computer you can add types stored in native Windows APIs. If you want to learn more about these, I'll refer you to the <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2">Add-Type Documentation</a> at Microsoft.</p>
<h2>Persistance</h2>
<p>One last thing you need to be aware of. When you add a type it does <em>not</em> persist between sessions. The moment you close your command window or VSCode, that type goes away. You'll need to recreate it the next time you run your script.</p>
<p>This is probably a good thing, as it's doubtful you will need to use these types on a daily basis. Should you need to, though, you'll have to edit your PowerShell profile and have them added within it.</p>
<h2>Conclusion</h2>
<p>In this post we saw how to create custom objects from C# classes. They could be embedded in our PowerShell code, or stored in external files. The subject of <em>static</em> methods and properties were mentioned, along with a demo on how to use them.</p>
<p>In the next post we'll see a very useful technique, and cover the ability to add our own custom methods and properties to existing objects that others created, including ones built right into PowerShell.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4321</wp:post_id>
  <wp:post_date>2022-01-24 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-24 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 16:06:17</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 22:06:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-creating-objects-from-c</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="category" nicename="c-sharp"><![CDATA[C Sharp]]></category>
  <category domain="category" nicename="c"><![CDATA[C#]]></category>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4322]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68092666760]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1485628490141552640";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_381006680496917";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1643036409]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167032</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:12</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] looked at using PSCustomObject to create new objects, then add methods to those objects. In the previous post, we used C# code to create our PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.308705;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641212.964138;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166981</wp:comment_id>
    <wp:comment_author><![CDATA[Creating Powershell Objects from C# &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/01/25/creating-powershell-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-01-25 07:00:10</wp:comment_date>
    <wp:comment_date_gmt>2022-01-25 13:00:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain mixes languages: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643115610.659552;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643119346.332143;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun-With-PowerShell-Objects-03-Custom-Objects-From-CSharp</title>
  <link>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/fun-with-powershell-objects-03-custom-objects-from-csharp/</link>
  <pubDate>Mon, 10 Jan 2022 21:56:08 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-03-custom-objects-from-csharp.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4322</wp:post_id>
  <wp:post_date>2022-01-10 15:56:08</wp:post_date>
  <wp:post_date_gmt>2022-01-10 21:56:08</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 15:56:08</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 21:56:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-03-custom-objects-from-csharp</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4321</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-03-custom-objects-from-csharp.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Objects - Modifying Existing Objects</title>
  <link>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</link>
  <pubDate>Mon, 31 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4325</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nSo far we've covered a lot in this series on PowerShell Objects. We began by [creating a class using the class keyword](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) introduced in PowerShell 5. We then looked at using PSCustomObject to [create new objects](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/), then [add methods](https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/) to those objects. In the [previous post](https://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/), we used C# code to create our PowerShell objects.\n\nIn this installment, we'll see how to add properties and methods to _existing_ objects created by someone else. For this example we'll use objects returned by the `Get-ChildItem` cmdlet, but we could use any objects.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nIn the code samples be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Getting The Objects to Work With\n\nAs stated in the Introduction, we will use the objects returned by the `Get-ChildItem` cmdlet to add a new property and method to. We'll set our location (in my case to the folder where these samples are stored), call the `Get-ChildItem` cmdlet and store the result in a variable, `$items`.\n\n``` powershell\nSet-Location C:\\Users\\arcan\\OneDrive\\BlogPosts\\Markdown\n$items = Get-ChildItem\n```\n\nLet's look a the first item in the `$items` collection to see what its datatype is.\n\n``` powershell\n$items[0].GetType()\n```\n\nResult:\n\n```\nIsPublic IsSerial Name     BaseType\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d     \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\nTrue     False    FileInfo System.IO.FileSystemInfo\n```\n\nAs you can see, each item is of type `FileInfo`. Each object contains information about the corresponding file it represents. You can find a full list of properties and methods for the `FileInfo` class in the online [Microsoft Documentation for FileInfo](https://docs.microsoft.com/en-us/dotnet/api/system.io.fileinfo?view=net-6.0).\n\n## Coding Our New Method\n\nFor this example, we are going to iterate over our collection of `FileInfo` objects. To each one, we'll be adding one property and one method. The property will just be a number that can be used to uniquely identify each object. We'll look more at that momentarily.\n\nThe method we'll add will analyze the existing `Extension` property of the `FileInfo` object. As I'm sure you know, the extension is the data that occurs after the period in the file name, and is used to identify the type  of file it is.\n\nHere is the script block for this method.\n\n``` powershell\n# Define the custom script property\n$script = {\n\n  switch ($this.Extension)\n  {\n    '.cs'   {$retValue = 'C#'}\n    '.md'   {$retValue = 'Markdown'}\n    '.ps1'  {$retValue = 'Script'}\n    '.psd1' {$retValue = 'Module Definition'}\n    '.psm1' {$retValue = 'Module'}\n    '.xml'  {$retValue = 'XML File'}\n    '.pptx' {$retValue = 'PowerPoint'}\n    '.csv'  {$retValue = 'Comma Separated Values file'}\n    '.json' {$retValue = 'JavaScript Object Notation data'}\n    default {$retValue = 'Sorry dude, no clue.'}\n  }\n\n  return $retValue\n}\n```\n\nWithin the `switch` statement, I use `$this` to access the current object. It then access the `Extension` property of the current object.\n\nIt then goes down the list, comparing the extension value to the text to the left of the squiggly brace. If it finds a match, it will run the code inside the script block. This simply sets a return value variable to a more human friendly text representation of the file type.\n\nIf no match is found, it runs the code by the `default` value. For more in the switch statement, see my post [Fun With PowerShell Logic Branching](https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/).\n\n## Adding The Property and Method to the FileInfo Object\n\nNow that our script is defined, it's time to add it as well as a property to our `FileInfo` objects. Let's see the code, then we'll break it down.\n\n```powershell\n# Create an item count variable\n$itemCount = 0\n\n# Iterate over each DirectoryInfo object in the $items collection\nforeach($item in $items)\n{\n  # Add a note property, setting it to the current item counter\n  $itemCount++\n  $item | Add-Member –MemberType NoteProperty `\n                     –Name ItemNumber `\n                     –Value $itemCount\n\n  # Add script property to the individual file object\n  Add-Member -InputObject $item `\n             -MemberType ScriptMethod `\n             -Name 'ScriptType' `\n             -Value $script\n\n  # Now display the already existing Name property along with the\n  # property and method we just added.\n  \u0022$($item.ItemNumber): $($item.Name) = $($item.ScriptType())\u0022\n}\n```\n\nWe begin by creating a variable, `$itemCount`. Within the `foreach` loop we'll increment it, then use it as our index for the `ItemNumber` property.\n\nThe `foreach` loop is entered, where we iterate over the collection of `FileInfo` objects stored in `$items`. Each time through the loop, the current item is copied into the `$item` variable. For more info on `foreach`, see my post [Fun With PowerShell Loops](https://arcanecode.com/2021/08/23/fun-with-powershell-loops/).\n\nThe next line is straightforward, we simply increment the `$itemCount` by one.\n\nYou've seen the `Add-Member` cmdlet used in recent posts on adding properties and methods to a `PSCustomObject`, so I won't delve deep into it here.\n\nThe first call to `Add-Member` takes the current `FileInfo` object, stored in `$item`, and adds a new property we'll name `ItemNumber`. When we add it, we'll go ahead and assign the value in `$itemCount`. Note that this property could be updated at a future time, although we won't need to for this example.\n\nWe then call `Add-Member` a second time, adding in the script you saw earlier and naming it `ScriptType`.\n\nFinally, we use string interpolation to build a nicely formatted string with the item number, the name of the file (a native property of the `FileInfo` object), and finally we call the method we just added `ScriptType`.\n\nHere is the final output of our effort.\n\nResult:\n\n```\n1: blog-template.md = Markdown\n2: fun-with-powershell-classes-the-basics.md = Markdown\n3: fun-with-powershell-classes-the-basics.ps1 = Script\n4: fun-with-powershell-enum-flags-header.png = Sorry dude, no clue.\n5: Fun-With-PowerShell-Enum-Flags.md = Markdown\n6: Fun-With-PowerShell-Enums.md = Markdown\n7: Fun-With-PowerShell-Objects-Part 1.md = Markdown\n8: Fun-With-PowerShell-Objects-Part 1.ps1 = Script\n9: Fun-With-PowerShell-Objects-Part 2.md = Markdown\n10: Fun-With-PowerShell-Objects-Part 2.ps1 = Script\n11: Fun-With-PowerShell-Objects-Part 3.cs = C#\n12: Fun-With-PowerShell-Objects-Part 3.md = Markdown\n13: Fun-With-PowerShell-Objects-Part 3.ps1 = Script\n14: Fun-With-PowerShell-Objects-Part 4.md = Markdown\n15: Fun-With-PowerShell-Objects-Part 4.ps1 = Script\n16: fun-with-powershell-objects-part-1.png = Sorry dude, no clue.\n17: Fun-With-PowerShell-Providers.md = Markdown\n18: Fun-With-PowerShell-Write-Debug.md = Markdown\n19: Fun-With-PowerShell-Write-Verbose-and-Write-Debug.md = Markdown\n20: Fun-With-VSCode-Code-Snippets.md = Markdown\n21: IMG_0965.JPG = Sorry dude, no clue.\n22: more-fun-with-powershell-enums-header.png = Sorry dude, no clue.\n23: More-Fun-With-PowerShell-Enums.md = Markdown\n24: More-Fun-With-PowerShell-Enums.ps1 = Script\n25: security-for-apartment-dwellers-01.png = Sorry dude, no clue.\n26: Security-for-Apartment-Dwellers-header.png = Sorry dude, no clue.\n27: Security-for-Apartment-Dwellers.md = Markdown\n```\n\nI author these blog posts in markdown within VSCode first, prior to copying them into my WordPress based blog. This folder contains a markdown file for each post, most of which have one or more accompanying code files associated with it.\n\nI deliberately omitted the image type extensions (.jpg, .png) from the switch statement so you could see the default option being taken.\n\n## Persistance\n\nThere is an important fact you need to recall when using this technique. The new property and method only exist for the set of `FileInfo` objects contained in our `$items` collection. If I were to get another collection, perhaps using `$moreItems = Get-ChildItem`, the `FileInfo` objects stored in `$moreItems` will **NOT** have our `ItemNumber` and `ScriptType` in them.\n\nYou will have to explicitly add custom properties and methods to objects each time you need them.\n\n## Conclusion\n\nAs you can see, this technique offers many possibilities. You could define a script block at the top of your script that does a complex calculation, or perhaps formats data for easier reading by the end user. Then you simply add this script block to the objects you generate.\n\nThis makes your code much more readable. The complex part is at the top where we define the script block, out of the way of your loops.\n\nIt can also promote code reuse. You can create a separate script with many script blocks that you commonly use. You call that script from the one you are currently developing, and you instantly have a set of new properties and methods that can be added to the set of objects you are working with.\n\nThis method provides for extensibility with objects you did not author, or have the source code for. Perhaps you have a compiled PowerShell module that came from a vendor, but it lacks that one method that would, for your unique situation, make it much easier to work with. You can now code that method for yourself and use it.\n\nAs time goes on I'm sure you'll find many situations you can use these techniques to solve problems.\n\nIn the next three installments of this series we'll return to the PowerShell _class_ type. We'll look at some of the advanced abilities that it offers.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>So far we've covered a lot in this series on PowerShell Objects. We began by <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">creating a class using the class keyword</a> introduced in PowerShell 5. We then looked at using PSCustomObject to <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">create new objects</a>, then <a href="https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/">add methods</a> to those objects. In the <a href="https://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/">previous post</a>, we used C# code to create our PowerShell objects.</p>
<p>In this installment, we'll see how to add properties and methods to <em>existing</em> objects created by someone else. For this example we'll use objects returned by the <code>Get-ChildItem</code> cmdlet, but we could use any objects.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>In the code samples be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Getting The Objects to Work With</h2>
<p>As stated in the Introduction, we will use the objects returned by the <code>Get-ChildItem</code> cmdlet to add a new property and method to. We'll set our location (in my case to the folder where these samples are stored), call the <code>Get-ChildItem</code> cmdlet and store the result in a variable, <code>$items</code>.</p>
<pre><code class="language-powershell">Set-Location C:\Users\arcan\OneDrive\BlogPosts\Markdown
$items = Get-ChildItem
</code></pre>
<p>Let's look a the first item in the <code>$items</code> collection to see what its datatype is.</p>
<pre><code class="language-powershell">$items[0].GetType()
</code></pre>
<p>Result:</p>
<pre><code>IsPublic IsSerial Name     BaseType
-------- -------- ----     --------
True     False    FileInfo System.IO.FileSystemInfo
</code></pre>
<p>As you can see, each item is of type <code>FileInfo</code>. Each object contains information about the corresponding file it represents. You can find a full list of properties and methods for the <code>FileInfo</code> class in the online <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.fileinfo?view=net-6.0">Microsoft Documentation for FileInfo</a>.</p>
<h2>Coding Our New Method</h2>
<p>For this example, we are going to iterate over our collection of <code>FileInfo</code> objects. To each one, we'll be adding one property and one method. The property will just be a number that can be used to uniquely identify each object. We'll look more at that momentarily.</p>
<p>The method we'll add will analyze the existing <code>Extension</code> property of the <code>FileInfo</code> object. As I'm sure you know, the extension is the data that occurs after the period in the file name, and is used to identify the type  of file it is.</p>
<p>Here is the script block for this method.</p>
<pre><code class="language-powershell"># Define the custom script property
$script = {

  switch ($this.Extension)
  {
    '.cs'   {$retValue = 'C#'}
    '.md'   {$retValue = 'Markdown'}
    '.ps1'  {$retValue = 'Script'}
    '.psd1' {$retValue = 'Module Definition'}
    '.psm1' {$retValue = 'Module'}
    '.xml'  {$retValue = 'XML File'}
    '.pptx' {$retValue = 'PowerPoint'}
    '.csv'  {$retValue = 'Comma Separated Values file'}
    '.json' {$retValue = 'JavaScript Object Notation data'}
    default {$retValue = 'Sorry dude, no clue.'}
  }

  return $retValue
}
</code></pre>
<p>Within the <code>switch</code> statement, I use <code>$this</code> to access the current object. It then access the <code>Extension</code> property of the current object.</p>
<p>It then goes down the list, comparing the extension value to the text to the left of the squiggly brace. If it finds a match, it will run the code inside the script block. This simply sets a return value variable to a more human friendly text representation of the file type.</p>
<p>If no match is found, it runs the code by the <code>default</code> value. For more in the switch statement, see my post <a href="https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/">Fun With PowerShell Logic Branching</a>.</p>
<h2>Adding The Property and Method to the FileInfo Object</h2>
<p>Now that our script is defined, it's time to add it as well as a property to our <code>FileInfo</code> objects. Let's see the code, then we'll break it down.</p>
<pre><code class="language-powershell"># Create an item count variable
$itemCount = 0

# Iterate over each DirectoryInfo object in the $items collection
foreach($item in $items)
{
  # Add a note property, setting it to the current item counter
  $itemCount++
  $item | Add-Member –MemberType NoteProperty `
                     –Name ItemNumber `
                     –Value $itemCount

  # Add script property to the individual file object
  Add-Member -InputObject $item `
             -MemberType ScriptMethod `
             -Name 'ScriptType' `
             -Value $script

  # Now display the already existing Name property along with the
  # property and method we just added.
  &quot;$($item.ItemNumber): $($item.Name) = $($item.ScriptType())&quot;
}
</code></pre>
<p>We begin by creating a variable, <code>$itemCount</code>. Within the <code>foreach</code> loop we'll increment it, then use it as our index for the <code>ItemNumber</code> property.</p>
<p>The <code>foreach</code> loop is entered, where we iterate over the collection of <code>FileInfo</code> objects stored in <code>$items</code>. Each time through the loop, the current item is copied into the <code>$item</code> variable. For more info on <code>foreach</code>, see my post <a href="https://arcanecode.com/2021/08/23/fun-with-powershell-loops/">Fun With PowerShell Loops</a>.</p>
<p>The next line is straightforward, we simply increment the <code>$itemCount</code> by one.</p>
<p>You've seen the <code>Add-Member</code> cmdlet used in recent posts on adding properties and methods to a <code>PSCustomObject</code>, so I won't delve deep into it here.</p>
<p>The first call to <code>Add-Member</code> takes the current <code>FileInfo</code> object, stored in <code>$item</code>, and adds a new property we'll name <code>ItemNumber</code>. When we add it, we'll go ahead and assign the value in <code>$itemCount</code>. Note that this property could be updated at a future time, although we won't need to for this example.</p>
<p>We then call <code>Add-Member</code> a second time, adding in the script you saw earlier and naming it <code>ScriptType</code>.</p>
<p>Finally, we use string interpolation to build a nicely formatted string with the item number, the name of the file (a native property of the <code>FileInfo</code> object), and finally we call the method we just added <code>ScriptType</code>.</p>
<p>Here is the final output of our effort.</p>
<p>Result:</p>
<pre><code>1: blog-template.md = Markdown
2: fun-with-powershell-classes-the-basics.md = Markdown
3: fun-with-powershell-classes-the-basics.ps1 = Script
4: fun-with-powershell-enum-flags-header.png = Sorry dude, no clue.
5: Fun-With-PowerShell-Enum-Flags.md = Markdown
6: Fun-With-PowerShell-Enums.md = Markdown
7: Fun-With-PowerShell-Objects-Part 1.md = Markdown
8: Fun-With-PowerShell-Objects-Part 1.ps1 = Script
9: Fun-With-PowerShell-Objects-Part 2.md = Markdown
10: Fun-With-PowerShell-Objects-Part 2.ps1 = Script
11: Fun-With-PowerShell-Objects-Part 3.cs = C#
12: Fun-With-PowerShell-Objects-Part 3.md = Markdown
13: Fun-With-PowerShell-Objects-Part 3.ps1 = Script
14: Fun-With-PowerShell-Objects-Part 4.md = Markdown
15: Fun-With-PowerShell-Objects-Part 4.ps1 = Script
16: fun-with-powershell-objects-part-1.png = Sorry dude, no clue.
17: Fun-With-PowerShell-Providers.md = Markdown
18: Fun-With-PowerShell-Write-Debug.md = Markdown
19: Fun-With-PowerShell-Write-Verbose-and-Write-Debug.md = Markdown
20: Fun-With-VSCode-Code-Snippets.md = Markdown
21: IMG_0965.JPG = Sorry dude, no clue.
22: more-fun-with-powershell-enums-header.png = Sorry dude, no clue.
23: More-Fun-With-PowerShell-Enums.md = Markdown
24: More-Fun-With-PowerShell-Enums.ps1 = Script
25: security-for-apartment-dwellers-01.png = Sorry dude, no clue.
26: Security-for-Apartment-Dwellers-header.png = Sorry dude, no clue.
27: Security-for-Apartment-Dwellers.md = Markdown
</code></pre>
<p>I author these blog posts in markdown within VSCode first, prior to copying them into my WordPress based blog. This folder contains a markdown file for each post, most of which have one or more accompanying code files associated with it.</p>
<p>I deliberately omitted the image type extensions (.jpg, .png) from the switch statement so you could see the default option being taken.</p>
<h2>Persistance</h2>
<p>There is an important fact you need to recall when using this technique. The new property and method only exist for the set of <code>FileInfo</code> objects contained in our <code>$items</code> collection. If I were to get another collection, perhaps using <code>$moreItems = Get-ChildItem</code>, the <code>FileInfo</code> objects stored in <code>$moreItems</code> will <strong>NOT</strong> have our <code>ItemNumber</code> and <code>ScriptType</code> in them.</p>
<p>You will have to explicitly add custom properties and methods to objects each time you need them.</p>
<h2>Conclusion</h2>
<p>As you can see, this technique offers many possibilities. You could define a script block at the top of your script that does a complex calculation, or perhaps formats data for easier reading by the end user. Then you simply add this script block to the objects you generate.</p>
<p>This makes your code much more readable. The complex part is at the top where we define the script block, out of the way of your loops.</p>
<p>It can also promote code reuse. You can create a separate script with many script blocks that you commonly use. You call that script from the one you are currently developing, and you instantly have a set of new properties and methods that can be added to the set of objects you are working with.</p>
<p>This method provides for extensibility with objects you did not author, or have the source code for. Perhaps you have a compiled PowerShell module that came from a vendor, but it lacks that one method that would, for your unique situation, make it much easier to work with. You can now code that method for yourself and use it.</p>
<p>As time goes on I'm sure you'll find many situations you can use these techniques to solve problems.</p>
<p>In the next three installments of this series we'll return to the PowerShell <em>class</em> type. We'll look at some of the advanced abilities that it offers.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4325</wp:post_id>
  <wp:post_date>2022-01-31 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-31 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 16:53:57</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 22:53:57</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-modifying-existing-objects</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="get-childitem"><![CDATA[Get-ChildItem]]></category>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4326]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68392132310]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1643641203]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1488165190814375944";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_385107956753456";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167068</wp:comment_id>
    <wp:comment_author><![CDATA[Modifying Existing Objects with Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/02/03/modifying-existing-objects-with-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-02-03 07:06:24</wp:comment_date>
    <wp:comment_date_gmt>2022-02-03 13:06:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain dives a bit further into objects in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643893584.669101;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643898812.408272;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Fun-With-PowerShell-Objects-04-Modifying-Existing-Objects</title>
  <link>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/fun-with-powershell-objects-04-modifying-existing-objects/</link>
  <pubDate>Mon, 10 Jan 2022 22:49:20 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-04-modifying-existing-objects.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4326</wp:post_id>
  <wp:post_date>2022-01-10 16:49:20</wp:post_date>
  <wp:post_date_gmt>2022-01-10 22:49:20</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 16:49:20</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 22:49:20</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-04-modifying-existing-objects</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4325</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-04-modifying-existing-objects.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Classes - Static Properties and Methods</title>
  <link>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/</link>
  <pubDate>Mon, 07 Feb 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4330</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nOver the last few articles we've been covering PowerShell objects. The first article in the series, [Fun With PowerShell Classes - The Basics](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/), covered the basics of using of the PowerShell class construct introduced in PowerShell version 5.\n\nIf you've not read it I'd suggest you do so now as we'll be building on it in this article, as well as in the next two, as we explore the advanced capabilities of PowerShell classes. In this post we'll cover the concept of _static_ properties and methods.\n\nLet me mention that for all of the examples we'll display the code, then under it the result of our code if applicable. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAt the end of the line in many code samples you may notice a backtick \\` character. This is PowerShell's _line continuation_ character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Starting Point\n\nJust as a refresher, here is the class we originally developed.\n\n``` powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n}\n```\n\nWe can create a new instance of the class by calling the static new method built into all PowerShell defined classes. Once created we can start assigning values to its properties.\n\n``` powershell\n$twit = [Twitterer]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterHandle\n```\n\nWith that reminder, let's start diving in to some advanced features offered by classes.\n\n## Static Properties\n\nIn a previous post on [creating PowerShell objects from C# code](http://), I introduced the concept of _static_ properties and methods. A static property or method is one that can be called without having to create a new instance of an object from the class.\n\nTo call a static method or property, use the name of the class in brackets, then two colons, then the name of the property or method you want to call. In fact, you've already done this in creating a new instance of a class when you used `[Twitterer]::new()`.\n\nIt's easy to create your own static properties and methods. Let's create a new version of our class, and name it `TwittererRedux`. (Redux is a fancy word meaning 'bring back'.) Then, we'll add a new static property to it.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n}\n```\n\nIn the properties area we add one new property, `Version`. At the front we added the keyword `static`. This, of course, is the indicator this property is available even without creating a new instance of the class.\n\nHaving a version number is a fairly common and useful thing to include in a class. Let's see it in use. First though, make sure you've executed the above class definition for `TwitterRedux` to make sure it is memory.\n\n``` powershell\n[TwittererRedux]::Version\n```\n\nResult:\n\n```\n2022.01.07.002\n```\n\nOther examples of things you might wish to manifest as static properties include the author name, contact information, copyright, or perhaps a link to documentation or github where your class is stored.\n\nLet's turn now to the creation of a static method.\n\n## Static Methods\n\nIn our original version of the class we have a method called `OpenTwitter`. This accessed the objects function `TwitterURL`, which returned the formatted Twitter URL for the users handle, stored in the objects `TwitterHandle` property. Finally it opened up the Twitter page in the default browser.\n\nIt could be useful to have a function that would do something similar, only without having to go to the effort of creating a class, then populating the `TwitterHandle` property just so we could call this function.\n\nWe'll do so by adding a new, static function to the class.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2021.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\nWe call the new method similar to the way we accessed our property, when we called the `new` method to create the class.\n\n``` powershell\n[TwittererRedux]::OpenTwitterPage('ArcaneCode')\n```\n\nIf your coding went well, your default browser should open to my Twitter page (or whosever you passed in).\n\n## Restrictions on Static Properties and Methods\n\nThere is one restriction when working with static properties and methods, but it is one you need to know about.\n\n\u0026gt; Static properties and methods must be self contained, and cannot reference other properties and methods of the class.\n\nThis makes sense if you think about it a moment. You are only accessing the class definition, i.e. the blue print. Normal properties and methods only exist once an object has been created from a class. While it makes sense, it isn't intuitively obvious so I wanted to point it out.\n\n## A Note on Defining Classes\n\nI just wanted to point out a little \u0022gotcha\u0022 when working with classes. Within a single PowerShell script (i.e. PS1 file) you can only define a class once. Normally this is not a big issue.\n\nHowever, if you are developing a class it's possible you might want multiple versions of it. For example, at the top of the script you might want your original version.\n\nUnder it you might want basically the same code, but you've added a new method, or perhaps changed the code to an existing method. You want to do this for testing, so you can compare one version versus the other.\n\nPowerShell, or more precisely VSCode or the PowerShell IDE, will generate an error for the second, third, or more versions in your code warning you it has already been defined.\n\nThe fix is pretty simple, you could just comment out all but one of the class definitions, leaving the one you are working with uncommented. Alternatively, you could just create multiple PS1 files and work with different versions in each. VSCode is especially nice for this as it lets you have your PS1 files side by side.\n\n## Conclusion\n\nStatic properties and methods are not difficult to implement, and can be quite useful. As you create your classes, think about situations where they may benefit from a static property or method.\n\nIn the next installment of this series we'll continue our examination of the PowerShell _class_ type by diving into _overloads_.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>Over the last few articles we've been covering PowerShell objects. The first article in the series, <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">Fun With PowerShell Classes - The Basics</a>, covered the basics of using of the PowerShell class construct introduced in PowerShell version 5.</p>
<p>If you've not read it I'd suggest you do so now as we'll be building on it in this article, as well as in the next two, as we explore the advanced capabilities of PowerShell classes. In this post we'll cover the concept of <em>static</em> properties and methods.</p>
<p>Let me mention that for all of the examples we'll display the code, then under it the result of our code if applicable. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>At the end of the line in many code samples you may notice a backtick ` character. This is PowerShell's <em>line continuation</em> character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Starting Point</h2>
<p>Just as a refresher, here is the class we originally developed.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

}
</code></pre>
<p>We can create a new instance of the class by calling the static new method built into all PowerShell defined classes. Once created we can start assigning values to its properties.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterHandle
</code></pre>
<p>With that reminder, let's start diving in to some advanced features offered by classes.</p>
<h2>Static Properties</h2>
<p>In a previous post on <a href="http://">creating PowerShell objects from C# code</a>, I introduced the concept of <em>static</em> properties and methods. A static property or method is one that can be called without having to create a new instance of an object from the class.</p>
<p>To call a static method or property, use the name of the class in brackets, then two colons, then the name of the property or method you want to call. In fact, you've already done this in creating a new instance of a class when you used <code>[Twitterer]::new()</code>.</p>
<p>It's easy to create your own static properties and methods. Let's create a new version of our class, and name it <code>TwittererRedux</code>. (Redux is a fancy word meaning 'bring back'.) Then, we'll add a new static property to it.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

}
</code></pre>
<p>In the properties area we add one new property, <code>Version</code>. At the front we added the keyword <code>static</code>. This, of course, is the indicator this property is available even without creating a new instance of the class.</p>
<p>Having a version number is a fairly common and useful thing to include in a class. Let's see it in use. First though, make sure you've executed the above class definition for <code>TwitterRedux</code> to make sure it is memory.</p>
<pre><code class="language-powershell">[TwittererRedux]::Version
</code></pre>
<p>Result:</p>
<pre><code>2022.01.07.002
</code></pre>
<p>Other examples of things you might wish to manifest as static properties include the author name, contact information, copyright, or perhaps a link to documentation or github where your class is stored.</p>
<p>Let's turn now to the creation of a static method.</p>
<h2>Static Methods</h2>
<p>In our original version of the class we have a method called <code>OpenTwitter</code>. This accessed the objects function <code>TwitterURL</code>, which returned the formatted Twitter URL for the users handle, stored in the objects <code>TwitterHandle</code> property. Finally it opened up the Twitter page in the default browser.</p>
<p>It could be useful to have a function that would do something similar, only without having to go to the effort of creating a class, then populating the <code>TwitterHandle</code> property just so we could call this function.</p>
<p>We'll do so by adding a new, static function to the class.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2021.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<p>We call the new method similar to the way we accessed our property, when we called the <code>new</code> method to create the class.</p>
<pre><code class="language-powershell">[TwittererRedux]::OpenTwitterPage('ArcaneCode')
</code></pre>
<p>If your coding went well, your default browser should open to my Twitter page (or whosever you passed in).</p>
<h2>Restrictions on Static Properties and Methods</h2>
<p>There is one restriction when working with static properties and methods, but it is one you need to know about.</p>
<p>&gt; Static properties and methods must be self contained, and cannot reference other properties and methods of the class.</p>
<p>This makes sense if you think about it a moment. You are only accessing the class definition, i.e. the blue print. Normal properties and methods only exist once an object has been created from a class. While it makes sense, it isn't intuitively obvious so I wanted to point it out.</p>
<h2>A Note on Defining Classes</h2>
<p>I just wanted to point out a little &quot;gotcha&quot; when working with classes. Within a single PowerShell script (i.e. PS1 file) you can only define a class once. Normally this is not a big issue.</p>
<p>However, if you are developing a class it's possible you might want multiple versions of it. For example, at the top of the script you might want your original version.</p>
<p>Under it you might want basically the same code, but you've added a new method, or perhaps changed the code to an existing method. You want to do this for testing, so you can compare one version versus the other.</p>
<p>PowerShell, or more precisely VSCode or the PowerShell IDE, will generate an error for the second, third, or more versions in your code warning you it has already been defined.</p>
<p>The fix is pretty simple, you could just comment out all but one of the class definitions, leaving the one you are working with uncommented. Alternatively, you could just create multiple PS1 files and work with different versions in each. VSCode is especially nice for this as it lets you have your PS1 files side by side.</p>
<h2>Conclusion</h2>
<p>Static properties and methods are not difficult to implement, and can be quite useful. As you create your classes, think about situations where they may benefit from a static property or method.</p>
<p>In the next installment of this series we'll continue our examination of the PowerShell <em>class</em> type by diving into <em>overloads</em>.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4330</wp:post_id>
  <wp:post_date>2022-02-07 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-02-07 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 16:11:09</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 22:11:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-static-properties-and-methods</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="class"><![CDATA[Class]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="static-method"><![CDATA[Static Method]]></category>
  <category domain="post_tag" nicename="static-property"><![CDATA[Static Property]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4332]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68678357121]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1644246021]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1490701979097739277";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_389269809670604";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167167</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Overloading &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.208</wp:comment_author_IP>
    <wp:comment_date>2022-02-14 09:00:04</wp:comment_date>
    <wp:comment_date_gmt>2022-02-14 15:00:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] is the next installment in our series of advanced techniques for PowerShell classes. In the previous installment we saw how to implement static properties and methods. In this one, we&#8217;ll see how to overload [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644850804.284993;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644855367.785154;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167243</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.114.41</wp:comment_author_IP>
    <wp:comment_date>2022-02-21 09:00:21</wp:comment_date>
    <wp:comment_date_gmt>2022-02-21 15:00:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645459376.454744;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645455622.13982;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:68:"Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code";s:18:"comment_author_url";s:74:"http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:134:"[&#8230;] our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:12:"192.0.114.41";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:12:"192.0.114.41";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:91:"http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-classes-02-static</title>
  <link>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/fun-with-powershell-classes-02-static/</link>
  <pubDate>Tue, 11 Jan 2022 21:31:14 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-02-static.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4332</wp:post_id>
  <wp:post_date>2022-01-11 15:31:14</wp:post_date>
  <wp:post_date_gmt>2022-01-11 21:31:14</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 15:31:14</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 21:31:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-02-static</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4330</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-02-static.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Classes - Overloading</title>
  <link>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/</link>
  <pubDate>Mon, 14 Feb 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4336</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nThis is the next installment in our series of advanced techniques for PowerShell classes. In the [previous installment](https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/) we saw how to implement _static_ properties and methods. In this one, we'll see how to _overload_ your methods.\n\nWe'll take a deeper look at overloading in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, many of the code samples have lines which end in a backtick \\`, PowerShell's _line continuation_ character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nIn VSCode you can highlight snippet of code then press F8 to execute it. In the IDE, use F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Starting Point\n\nFor easy reference, here is our demo class as we left it at the end of the previous post.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\n## The Need to Overload a Method\n\nAbout half way into our class definition we have a method named `TwitterURL`. This function is pretty simple, it takes the value in the `TwitterHandle` property, composes the URL to the Twitter site for it, then returns it.\n\nHere is what it would look like in action.\n\n``` powershell\n$twit = [TwittererRedux]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterURL()\n```\n\nResult:\n\n```\nhttp://twitter.com/ArcaneCode\n```\n\nWhat if we had a lot of handles we wanted to get URLs for. It would be a two step process for each one, first assigning the handle to the `TwitterHandle` property, then calling the `TwitterURL` method.\n\n``` powershell\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'N4IXT'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'ArcaneTC'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'BuckWoodyMSFT'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'tradney'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'VKCsh'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'TechTrainerTime'\n$twit.TwitterURL()\n```\n\nOf course these could all be put into an array, or read in from a file and run through a `foreach` loop, even so it still takes two calls to our `$twit` object. Wouldn't it be nice to set the TwitterHandle property and return the URL all in one method call?\n\nBut what to call the method? We could go with `SetHandleAndGetURL`, or perhaps `UpdateAndGetTwitter`, or even `HeyHeresAMethodToSetTheTwitterHandleAndGetTheURL`.\n\nBut in fact we already have a great name in TwitterURL. Its short and explains just what it does. It's too bad we can't use it more than once.\n\nOh wait, we can!\n\n## Implementing an Overloaded Method\n\nTo create an overload, create a new function within your class and use the same name. To differentiate, you need to have it accept a different number of parameters. Let's make this clearer by the example below.\n\n``` powershell\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n```\n\nAt the top is our original function. Below it is the overloaded version. In it I pass in a single parameter, the `$TwitterHandle`. PowerShell can use this to determine which version of the function to call. \n\nIf you execute the `TwitterURL` method with no parameters, the version of the function at the top is executed.\n\nWhen you call `TwitterURL` and pass in a parameter, the version of the function at the bottom gets run. In here I first access the `TwitterHandle` property of the current object (represented by `$this`) and update it from the parameter `$twitterHandle`.\n\nNext, I called the original function to get the properly formatted URL from the (newly updated) `TwitterHandle` property.\n\nI chose to do it this way to demonstrate it is possible to call the original version of a function  from its overloaded version. It's certainly not required though, as the code to format the URL could have been copied from the original function. The downside to this however is if I make a change to one area, I have to make it to both.\n\nAlso be aware that setting the `TwitterHandle` property may be considered a _side effect_ by some. It's not intuitively obvious this will happen, and some users may think this to be a bug. It's important then to make sure you document this thoroughly in your documentation.\n\nLet's see it in action. First, here is the complete class with the new overloaded function added.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Overloaded Function that returns a string\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\nAfter running this to get the updated class definition in memory let's call it both ways.\n\n``` powershell\n# Create a new instance\n$twit = [TwittererRedux]::new()\n\n# Assign the handle, then call TwitterURL\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterURL()\n```\n\nResult:\n\n```\nhttps://twitter.com/ArcaneCode\n```\n\nNow let's call the overloaded version.\n\n``` powershell\n# Now call the overloaded version\n$twit.TwitterURL('N4IXT')\n```\n\nResult:\n\n```\nhttps://twitter.com/N4IXT\n```\n\nWe can also check the `TwitterHandle` property to ensure it has been updated.\n\n``` powershell\n$twit.TwitterHandle\n```\n\nResult:\n\n```\nN4IXT\n```\n\nWe could have added additional overloads with more parameters. We could have defined `[string] TwitterURL($twitterHandle, $anotherParameter)`, for example.\n\n## Other Ways to Differentiate an Overload\n\nIn the previous section I stated PowerShell differentiates overloads by the number of parameters passed into our function. There is one other way PowerShell can differentiate, and that is by the _data type_ of each parameter. Let's look at this simple example.\n\n``` powershell\nclass over\n{\n  [string] hello()\n    { return 'hello world' }\n\n  [string] hello([string] $name)\n    { return \u0022hello string of $name\u0022}\n\n  [string] hello([int] $number)\n    { return \u0022hello integer of $number\u0022}\n}\n```\n\nAs you can see, my class has three overloads. In the second two, we pass in a single parameter. What makes them different though is the data type for the parameter. In the first we use a string, the second an integer. To be accurate then, we need to say PowerShell can tell which overload to call by the number of parameters **and** the data type of each.\n\nAs should be obvious, you will need to strongly type all of your parameters for this to work, but when it comes to classes that's not a bad idea anyway.\n\nJust as proof, let's see these working.\n\n``` powershell\n$o = [over]::new()\n$o.hello()\n$o.hello('mom')\n$o.hello(33)\n```\n\nResult:\n\n```\nhello world\nhello string of mom\nhello integer of 33\n```\n\nYou can also mix and match, with multiple data types and parameters. For example...\n\n``` powershell\nhello([string] $name, [int] $number)\nhello([int] $number,  [string] $name)\n```\n\nBoth of these are both valid. Just to reiterate, what you could **not** do is:\n\n``` powershell\nhello([string] $nameA, [int] $number)\nhello([string] $nameB, [int] $anotherNumber)\n```\n\nPowerShell can't make the distinction between the two, as they have the same number of parameters _and_ data types in the same order.\n\n## Conclusion\n\nOverloads can be very useful when working with classes. They allow you to continue to use method names you are familiar with yet alter them to meet your changing needs.\n\nIn our next installment we'll cover the topic of class _constructors_, a way to populate properties when you instantiate your new object from the class definition.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>This is the next installment in our series of advanced techniques for PowerShell classes. In the <a href="https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/">previous installment</a> we saw how to implement <em>static</em> properties and methods. In this one, we'll see how to <em>overload</em> your methods.</p>
<p>We'll take a deeper look at overloading in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, many of the code samples have lines which end in a backtick `, PowerShell's <em>line continuation</em> character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>In VSCode you can highlight snippet of code then press F8 to execute it. In the IDE, use F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Starting Point</h2>
<p>For easy reference, here is our demo class as we left it at the end of the previous post.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<h2>The Need to Overload a Method</h2>
<p>About half way into our class definition we have a method named <code>TwitterURL</code>. This function is pretty simple, it takes the value in the <code>TwitterHandle</code> property, composes the URL to the Twitter site for it, then returns it.</p>
<p>Here is what it would look like in action.</p>
<pre><code class="language-powershell">$twit = [TwittererRedux]::new()
$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterURL()
</code></pre>
<p>Result:</p>
<pre><code>http://twitter.com/ArcaneCode
</code></pre>
<p>What if we had a lot of handles we wanted to get URLs for. It would be a two step process for each one, first assigning the handle to the <code>TwitterHandle</code> property, then calling the <code>TwitterURL</code> method.</p>
<pre><code class="language-powershell">$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterURL()
$twit.TwitterHandle = 'N4IXT'
$twit.TwitterURL()
$twit.TwitterHandle = 'ArcaneTC'
$twit.TwitterURL()
$twit.TwitterHandle = 'BuckWoodyMSFT'
$twit.TwitterURL()
$twit.TwitterHandle = 'tradney'
$twit.TwitterURL()
$twit.TwitterHandle = 'VKCsh'
$twit.TwitterURL()
$twit.TwitterHandle = 'TechTrainerTime'
$twit.TwitterURL()
</code></pre>
<p>Of course these could all be put into an array, or read in from a file and run through a <code>foreach</code> loop, even so it still takes two calls to our <code>$twit</code> object. Wouldn't it be nice to set the TwitterHandle property and return the URL all in one method call?</p>
<p>But what to call the method? We could go with <code>SetHandleAndGetURL</code>, or perhaps <code>UpdateAndGetTwitter</code>, or even <code>HeyHeresAMethodToSetTheTwitterHandleAndGetTheURL</code>.</p>
<p>But in fact we already have a great name in TwitterURL. Its short and explains just what it does. It's too bad we can't use it more than once.</p>
<p>Oh wait, we can!</p>
<h2>Implementing an Overloaded Method</h2>
<p>To create an overload, create a new function within your class and use the same name. To differentiate, you need to have it accept a different number of parameters. Let's make this clearer by the example below.</p>
<pre><code class="language-powershell">  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }
</code></pre>
<p>At the top is our original function. Below it is the overloaded version. In it I pass in a single parameter, the <code>$TwitterHandle</code>. PowerShell can use this to determine which version of the function to call.</p>
<p>If you execute the <code>TwitterURL</code> method with no parameters, the version of the function at the top is executed.</p>
<p>When you call <code>TwitterURL</code> and pass in a parameter, the version of the function at the bottom gets run. In here I first access the <code>TwitterHandle</code> property of the current object (represented by <code>$this</code>) and update it from the parameter <code>$twitterHandle</code>.</p>
<p>Next, I called the original function to get the properly formatted URL from the (newly updated) <code>TwitterHandle</code> property.</p>
<p>I chose to do it this way to demonstrate it is possible to call the original version of a function  from its overloaded version. It's certainly not required though, as the code to format the URL could have been copied from the original function. The downside to this however is if I make a change to one area, I have to make it to both.</p>
<p>Also be aware that setting the <code>TwitterHandle</code> property may be considered a <em>side effect</em> by some. It's not intuitively obvious this will happen, and some users may think this to be a bug. It's important then to make sure you document this thoroughly in your documentation.</p>
<p>Let's see it in action. First, here is the complete class with the new overloaded function added.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Overloaded Function that returns a string
  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<p>After running this to get the updated class definition in memory let's call it both ways.</p>
<pre><code class="language-powershell"># Create a new instance
$twit = [TwittererRedux]::new()

# Assign the handle, then call TwitterURL
$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterURL()
</code></pre>
<p>Result:</p>
<pre><code>https://twitter.com/ArcaneCode
</code></pre>
<p>Now let's call the overloaded version.</p>
<pre><code class="language-powershell"># Now call the overloaded version
$twit.TwitterURL('N4IXT')
</code></pre>
<p>Result:</p>
<pre><code>https://twitter.com/N4IXT
</code></pre>
<p>We can also check the <code>TwitterHandle</code> property to ensure it has been updated.</p>
<pre><code class="language-powershell">$twit.TwitterHandle
</code></pre>
<p>Result:</p>
<pre><code>N4IXT
</code></pre>
<p>We could have added additional overloads with more parameters. We could have defined <code>[string] TwitterURL($twitterHandle, $anotherParameter)</code>, for example.</p>
<h2>Other Ways to Differentiate an Overload</h2>
<p>In the previous section I stated PowerShell differentiates overloads by the number of parameters passed into our function. There is one other way PowerShell can differentiate, and that is by the <em>data type</em> of each parameter. Let's look at this simple example.</p>
<pre><code class="language-powershell">class over
{
  [string] hello()
    { return 'hello world' }

  [string] hello([string] $name)
    { return &quot;hello string of $name&quot;}

  [string] hello([int] $number)
    { return &quot;hello integer of $number&quot;}
}
</code></pre>
<p>As you can see, my class has three overloads. In the second two, we pass in a single parameter. What makes them different though is the data type for the parameter. In the first we use a string, the second an integer. To be accurate then, we need to say PowerShell can tell which overload to call by the number of parameters <strong>and</strong> the data type of each.</p>
<p>As should be obvious, you will need to strongly type all of your parameters for this to work, but when it comes to classes that's not a bad idea anyway.</p>
<p>Just as proof, let's see these working.</p>
<pre><code class="language-powershell">$o = [over]::new()
$o.hello()
$o.hello('mom')
$o.hello(33)
</code></pre>
<p>Result:</p>
<pre><code>hello world
hello string of mom
hello integer of 33
</code></pre>
<p>You can also mix and match, with multiple data types and parameters. For example...</p>
<pre><code class="language-powershell">hello([string] $name, [int] $number)
hello([int] $number,  [string] $name)
</code></pre>
<p>Both of these are both valid. Just to reiterate, what you could <strong>not</strong> do is:</p>
<pre><code class="language-powershell">hello([string] $nameA, [int] $number)
hello([string] $nameB, [int] $anotherNumber)
</code></pre>
<p>PowerShell can't make the distinction between the two, as they have the same number of parameters <em>and</em> data types in the same order.</p>
<h2>Conclusion</h2>
<p>Overloads can be very useful when working with classes. They allow you to continue to use method names you are familiar with yet alter them to meet your changing needs.</p>
<p>In our next installment we'll cover the topic of class <em>constructors</em>, a way to populate properties when you instantiate your new object from the class definition.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4336</wp:post_id>
  <wp:post_date>2022-02-14 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-02-14 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 17:40:47</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 23:40:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-overloading</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="classes"><![CDATA[Classes]]></category>
  <category domain="post_tag" nicename="overloading"><![CDATA[Overloading]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0bfcfea2e526082524007e688ed76255</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><a class="twitter-timeline" data-width="500" data-height="750" data-dnt="true" href="https://twitter.com/N4IXT?ref_src=twsrc%5Etfw">Tweets by N4IXT</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_0bfcfea2e526082524007e688ed76255</wp:meta_key>
    <wp:meta_value><![CDATA[1641943874]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4338]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7c413786b28bde31d098c0332036eb2e</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><a class="twitter-timeline" data-width="474" data-height="711" data-dnt="true" href="https://twitter.com/N4IXT?ref_src=twsrc%5Etfw">Tweets by N4IXT</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_7c413786b28bde31d098c0332036eb2e</wp:meta_key>
    <wp:meta_value><![CDATA[1641943935]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1493238611311009792";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_393453675918884";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68985682647]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1644850802]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167181</wp:comment_id>
    <wp:comment_author><![CDATA[Overloading Methods in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/02/15/overloading-methods-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-02-15 07:00:29</wp:comment_date>
    <wp:comment_date_gmt>2022-02-15 13:00:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues a series on classes in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644935356.655802;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644930029.804596;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167238</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 07/2022 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19860-Die-KW-072022-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2022-02-20 16:10:47</wp:comment_date>
    <wp:comment_date_gmt>2022-02-20 22:10:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Hier wird euch Overloading in der PowerShell erklärt. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645395047.992617;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645400127.682784;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167169</wp:comment_id>
    <wp:comment_author><![CDATA[krismalygmailcom]]></wp:comment_author>
    <wp:comment_author_email>kris.maly@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>209.85.208.48</wp:comment_author_IP>
    <wp:comment_date>2022-02-14 09:09:52</wp:comment_date>
    <wp:comment_date_gmt>2022-02-14 15:09:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for educating the community and appreciate your volunteering. 

Thanks Kris]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>207301889</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1644851392.167035;s:5:"event";s:9:"check-ham";s:4:"user";s:16:"krismalygmailcom";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_by_email_id</wp:meta_key>
      <wp:meta_value><![CDATA[8718788]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644855368.07595;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167244</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.114.41</wp:comment_author_IP>
    <wp:comment_date>2022-02-21 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-02-21 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method overloading. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645455625.360108;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:68:"Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code";s:18:"comment_author_url";s:74:"http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:150:"[&#8230;] In our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method overloading. [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:12:"192.0.114.41";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:12:"192.0.114.41";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:73:"http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645459376.64934;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>fun-with-powershell-classes-03-overload</title>
  <link>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/fun-with-powershell-classes-03-overload/</link>
  <pubDate>Tue, 11 Jan 2022 23:32:04 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-03-overload.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4338</wp:post_id>
  <wp:post_date>2022-01-11 17:32:04</wp:post_date>
  <wp:post_date_gmt>2022-01-11 23:32:04</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 17:32:04</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 23:32:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-03-overload</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4336</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-03-overload.png</wp:attachment_url>
</item>
<item>
  <title>Fun With PowerShell Classes - Constructors</title>
  <link>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</link>
  <pubDate>Mon, 21 Feb 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4342</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn our previous two posts, we covered the use of [static properties and methods in classes](https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/), then saw how to use [method overloading](https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/).\n\nThis is our final post of the series, and will cover the use of _constructors_. Constructors are functions that execute automatically when a class is instantiated.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nYou may notice a backtick \\` character at the end of many lines in the code samples. This is PowerShell's _line continuation_ character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. I have a section dedicated to the line continuation character in my post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) if you want to learn more.\n\nTo run a snippet of code highlight the lines (or parts of a line) you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Starting Point\n\nAs a reminder, this is our demo class `TwittererRedux` as we left it at the end of the last post. We'll start from it in this post.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Overloaded Function that returns a string\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n\n# Create a new instance and update the handle\n$twit = [TwittererRedux]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n\n```\n\n## Constructors\n\nIn the original version of our class, we created a new instance of the class by calling the `::new()` static method. Then, we assigned a value to our `TwitterHandle` property. Wouldn't it have been nice to do it all in one step?\n\nWell that is possible through the use of a _constructor_. A constructor is a function that gets run automatically when the object is instantiated, as part of the `::new()` static method. Every class gets a constructor automatically, it's just empty.\n\nBelow is an example of our class with a constructor. For brevity I'm omitting most of the class code, and will reproduce the full class sample at the end of this post.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # ... rest of class goes here\n```\n\nA constructor is a function, with the exact same name as the class. As you can see in the sample above, `TwitterRedux` is both the name of the class, as well as of the function.\n\nIn this case the function is empty, it doesn't do anything, which is what the behavior of the default constructor should be.\n\nHaving constructors allows us to create more compact code. For example, in previous examples we create a new instance of our class, then assign a handle to the TwitterHandle property on the next line. Using a constructor we can provide the ability to compress our code, creating a new instance and assigning the `TwitterHandle` value all in one step.\n\nTo do so, we need to create another function with the same name as our class, TwittererRedux.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Constructor passing in Twitter Handle\n  TwittererRedux ([string]$TwitterHandle)\n  {\n    $this.TwitterHandle = $TwitterHandle\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # ... rest of class goes here\n```\n\nThis technique uses overloading, as discussed in [a previous post](http://). Here we have added a single parameter, `$TwitterHandle`. Within the function we take the value passed in and assign it to the `TwitterHandle` property for the current instance, represented by `$this`.\n\nBefore I go on, I need to mention an important rule. **When you override a constructor, you must manually add the _default constructor_!** You can see that was done in the above sample.\n\nSo how do we use it? Pretty simple actually, when we instantiate our object by using `new`, we pass in the value.\n\n``` powershell\n# Create a new instance using an overloaded constructor\n$twit = [TwittererRedux]::new('ArcaneCode')\n\n# Display the result\n$twit.TwitterHandle\n```\n\nResult:\n\n```\nArcaneCode\n```\n\nHere when we called `new`, instead of leaving the parameter area empty we passed in a single string value. PowerShell then followed the rules of overloading as seen in the [previous post](https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/). It looked over the set of constructors and found one that had a single parameter of type string and executed the code associated with it.\n\nLet's further expand by adding another constructor so we can assign both the handle and the name when we instantiate a new object from our class.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Constructor passing in Twitter Handle\n  TwittererRedux ([string]$TwitterHandle)\n  {\n    $this.TwitterHandle = $TwitterHandle\n  }\n\n  # Constructor passing in Twitter Handle and Name\n  TwittererRedux ([string]$TwitterHandle, [string]$Name)\n  {\n    $this.TwitterHandle = $TwitterHandle\n    $this.Name = $Name\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # ... rest of class goes here\n```\n\nIn our second constructor we have two string parameters, which will be assigned to the handle and name properties of the current object.\n\n``` powershell\n$twit = [TwittererRedux]::new('ArcaneCode', 'Mr. Code')\n$twit.TwitterHandle\n$twit.Name\n```\n\nResult:\n\n```\nArcaneCode\nMr. Code\n```\n\n## The Final Version\n\nAs promised, here is the final version of our TwitterRedux class.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Constructor passing in Twitter Handle\n  TwittererRedux ([string]$TwitterHandle)\n  {\n    $this.TwitterHandle = $TwitterHandle\n  }\n\n  # Constructor passing in Twitter Handle and Name\n  TwittererRedux ([string]$TwitterHandle, [string]$Name)\n  {\n    $this.TwitterHandle = $TwitterHandle\n    $this.Name = $Name\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Overloaded Function that returns a string\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\n## Constructors vs Overloading\n\nConstructors are very similar to overloading a function, but not exactly the same.\n\nJust like overloading, each constructor declaration must be different in terms of the number of parameters and their data types.\n\nUnlike overloads, you have access to the properties and methods of the object. This is what let us assign values to our properties when we created the new instance of the object.\n\n## Conclusion\n\nConstructors can aid in making our code more compact, and allowing us to assign values when we instantiate new objects. Be cautious though, it can be tempting to make far more constructors than you need. Ensure that your constructors cover only the most common situations, otherwise you'll have a confusing mess that you have to document and maintain.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In our previous two posts, we covered the use of <a href="https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/">static properties and methods in classes</a>, then saw how to use <a href="https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/">method overloading</a>.</p>
<p>This is our final post of the series, and will cover the use of <em>constructors</em>. Constructors are functions that execute automatically when a class is instantiated.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>You may notice a backtick ` character at the end of many lines in the code samples. This is PowerShell's <em>line continuation</em> character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. I have a section dedicated to the line continuation character in my post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> if you want to learn more.</p>
<p>To run a snippet of code highlight the lines (or parts of a line) you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Starting Point</h2>
<p>As a reminder, this is our demo class <code>TwittererRedux</code> as we left it at the end of the last post. We'll start from it in this post.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Overloaded Function that returns a string
  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}

# Create a new instance and update the handle
$twit = [TwittererRedux]::new()
$twit.TwitterHandle = 'ArcaneCode'

</code></pre>
<h2>Constructors</h2>
<p>In the original version of our class, we created a new instance of the class by calling the <code>::new()</code> static method. Then, we assigned a value to our <code>TwitterHandle</code> property. Wouldn't it have been nice to do it all in one step?</p>
<p>Well that is possible through the use of a <em>constructor</em>. A constructor is a function that gets run automatically when the object is instantiated, as part of the <code>::new()</code> static method. Every class gets a constructor automatically, it's just empty.</p>
<p>Below is an example of our class with a constructor. For brevity I'm omitting most of the class code, and will reproduce the full class sample at the end of this post.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Create a property
  [string]$TwitterHandle

  # ... rest of class goes here
</code></pre>
<p>A constructor is a function, with the exact same name as the class. As you can see in the sample above, <code>TwitterRedux</code> is both the name of the class, as well as of the function.</p>
<p>In this case the function is empty, it doesn't do anything, which is what the behavior of the default constructor should be.</p>
<p>Having constructors allows us to create more compact code. For example, in previous examples we create a new instance of our class, then assign a handle to the TwitterHandle property on the next line. Using a constructor we can provide the ability to compress our code, creating a new instance and assigning the <code>TwitterHandle</code> value all in one step.</p>
<p>To do so, we need to create another function with the same name as our class, TwittererRedux.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Constructor passing in Twitter Handle
  TwittererRedux ([string]$TwitterHandle)
  {
    $this.TwitterHandle = $TwitterHandle
  }

  # Create a property
  [string]$TwitterHandle

  # ... rest of class goes here
</code></pre>
<p>This technique uses overloading, as discussed in <a href="http://">a previous post</a>. Here we have added a single parameter, <code>$TwitterHandle</code>. Within the function we take the value passed in and assign it to the <code>TwitterHandle</code> property for the current instance, represented by <code>$this</code>.</p>
<p>Before I go on, I need to mention an important rule. <strong>When you override a constructor, you must manually add the <em>default constructor</em>!</strong> You can see that was done in the above sample.</p>
<p>So how do we use it? Pretty simple actually, when we instantiate our object by using <code>new</code>, we pass in the value.</p>
<pre><code class="language-powershell"># Create a new instance using an overloaded constructor
$twit = [TwittererRedux]::new('ArcaneCode')

# Display the result
$twit.TwitterHandle
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
</code></pre>
<p>Here when we called <code>new</code>, instead of leaving the parameter area empty we passed in a single string value. PowerShell then followed the rules of overloading as seen in the <a href="https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/">previous post</a>. It looked over the set of constructors and found one that had a single parameter of type string and executed the code associated with it.</p>
<p>Let's further expand by adding another constructor so we can assign both the handle and the name when we instantiate a new object from our class.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Constructor passing in Twitter Handle
  TwittererRedux ([string]$TwitterHandle)
  {
    $this.TwitterHandle = $TwitterHandle
  }

  # Constructor passing in Twitter Handle and Name
  TwittererRedux ([string]$TwitterHandle, [string]$Name)
  {
    $this.TwitterHandle = $TwitterHandle
    $this.Name = $Name
  }

  # Create a property
  [string]$TwitterHandle

  # ... rest of class goes here
</code></pre>
<p>In our second constructor we have two string parameters, which will be assigned to the handle and name properties of the current object.</p>
<pre><code class="language-powershell">$twit = [TwittererRedux]::new('ArcaneCode', 'Mr. Code')
$twit.TwitterHandle
$twit.Name
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
Mr. Code
</code></pre>
<h2>The Final Version</h2>
<p>As promised, here is the final version of our TwitterRedux class.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Constructor passing in Twitter Handle
  TwittererRedux ([string]$TwitterHandle)
  {
    $this.TwitterHandle = $TwitterHandle
  }

  # Constructor passing in Twitter Handle and Name
  TwittererRedux ([string]$TwitterHandle, [string]$Name)
  {
    $this.TwitterHandle = $TwitterHandle
    $this.Name = $Name
  }

  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Overloaded Function that returns a string
  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<h2>Constructors vs Overloading</h2>
<p>Constructors are very similar to overloading a function, but not exactly the same.</p>
<p>Just like overloading, each constructor declaration must be different in terms of the number of parameters and their data types.</p>
<p>Unlike overloads, you have access to the properties and methods of the object. This is what let us assign values to our properties when we created the new instance of the object.</p>
<h2>Conclusion</h2>
<p>Constructors can aid in making our code more compact, and allowing us to assign values when we instantiate new objects. Be cautious though, it can be tempting to make far more constructors than you need. Ensure that your constructors cover only the most common situations, otherwise you'll have a confusing mess that you have to document and maintain.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4342</wp:post_id>
  <wp:post_date>2022-02-21 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-02-21 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 18:10:14</wp:post_modified>
  <wp:post_modified_gmt>2022-01-12 00:10:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-constructors</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="classes"><![CDATA[Classes]]></category>
  <category domain="post_tag" nicename="constructors"><![CDATA[Constructors]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4344]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[69289091099]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1645455619]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1495775396486213632";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_397694485494803";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>fun-with-powershell-classes-04-constructor</title>
  <link>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/fun-with-powershell-classes-04-constructor/</link>
  <pubDate>Wed, 12 Jan 2022 00:06:37 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-04-constructor.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4344</wp:post_id>
  <wp:post_date>2022-01-11 18:06:37</wp:post_date>
  <wp:post_date_gmt>2022-01-12 00:06:37</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 18:06:37</wp:post_modified>
  <wp:post_modified_gmt>2022-01-12 00:06:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-04-constructor</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4342</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-04-constructor.png</wp:attachment_url>
</item>
  </channel>
</rss>
