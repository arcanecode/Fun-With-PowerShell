<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2022-04-02 00:38"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Arcane Code</title>
<link>http://arcanecode.com</link>
<description/>
<pubDate>Sat, 02 Apr 2022 00:38:26 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://arcanecode.com</wp:base_blog_url>
<wp:author>
  <wp:author_id>344266</wp:author_id>
  <wp:author_login>arcanecode</wp:author_login>
  <wp:author_email>arcanecode@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[arcanecode]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[Robert]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[Cain]]></wp:author_last_name>
</wp:author>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://s0.wp.com/i/buttonw-com.png</url>
		<title>Arcane Code</title>
		<link>http://arcanecode.com</link>
	</image>
	<item>
  <title><![CDATA[VSCode User Snippets for PowerShell and MarkDown]]></title>
  <link>http://arcanecode.com/2020/09/29/vscode-user-snippets-for-powershell-and-markdown/</link>
  <pubDate>Tue, 29 Sep 2020 22:27:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.wordpress.com/?p=2795</guid>
  <description/>
  <content:encoded><![CDATA[<p>I’ve been working a lot on a new course for Pluralsight, Everyday PowerShell 7 for Developers. I’ve been cranking out a lot of code as a result, PowerShell, obviously, as well as Markdown for documentation.</p><p>I’m finding the use of VSCode’s User Snippets to be extremely useful for developing this course. Snippets have allowed me to store my most often used code as templates, quickly manifesting new sections of code.</p><p>In PowerShell I’m finding these especially useful for writing Pester tests. Most tests fall into a few simple patterns, using a snippet I can quickly create the bulk of my test, leaving me to fill in the few remaining pieces.</p><p>If you know Markdown, you know some of the syntax can be a bit arcane. Using snippets makes it easy to insert commonly used ones, such as being able to type in a snippet name of mdlink and get the correct syntax to appear for a hyperlink.</p><p>It also helps with consistency. A small example, for doing italics in Markdown, you can use a singe underscore or a single asterisk. For bold, two underscores or asterisks. </p><p>I decided (for no particular reason) to use underscores for italics and asterisks for bold. If it’s been a while since I wrote Markdown though, I may not always remember. So I setup mditalic and mdbold to insert the correct formatting for me.</p><p>I’ve placed my snippets in a repository on my github site:</p><p><a title="https://github.com/arcanecode/VSCode_User_Snippets" href="https://github.com/arcanecode/VSCode_User_Snippets">https://github.com/arcanecode/VSCode_User_Snippets</a></p><p>If you aren’t familiar with how to use User Snippets, I have a quick overview in a Markdown file in the repository. </p><p>Speaking of Markdown, there is one issue with VSCode. By default, intellisense is not enabled in VSCode for Markdown. While snippets can be used without intellisense, it’s much easier to use them with intellisense turned on.</p><p>In the repository I have a Markdown&nbsp; file with information on how to turn intellisense on in VSCode for Markdown files.</p><p>Be aware there are also user snippets available through the Extensions Marketplace in VSCode. Just go into the Extensions, and enter Snippet into the search bar.&nbsp; I just didn’t happen to find any that quite suited my needs, hence I created my own.</p><p>You’re welcome to copy and use the user snippets, just some or all of them, as you need. Do be aware some of them have my name and websites, such as the author info snippet I use for the bottom of all my Markdown files, or the header snippet for the top of my PowerShell files.</p><p>I hope you find user snippets as helpful as I do.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2795</wp:post_id>
  <wp:post_date>2020-09-29 16:27:00</wp:post_date>
  <wp:post_date_gmt>2020-09-29 22:27:00</wp:post_date_gmt>
  <wp:post_modified>2020-09-29 16:27:00</wp:post_modified>
  <wp:post_modified_gmt>2020-09-29 22:27:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>vscode-user-snippets-for-powershell-and-markdown</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="markdown"><![CDATA[Markdown]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="vscode"><![CDATA[VSCode]]></category>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1601418421]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[49379478209]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Two New PowerShell Courses for Developers on Pluralsight]]></title>
  <link>http://arcanecode.com/2020/12/05/two-new-powershell-courses-for-developers-on-pluralsight/</link>
  <pubDate>Sat, 05 Dec 2020 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.wordpress.com/?p=2797</guid>
  <description/>
  <content:encoded><![CDATA[<p>I’m proud to announce I have not one but two, yes TWO new PowerShell courses available on Pluralsight, targeted for developers. These two courses are designed to work in harmony, to show developers how they can leverage PowerShell to automate and assist in their daily work.</p><p>The first is “<a href="https://app.pluralsight.com/library/courses/powershell-developers-quick-start-linux-macos-windows/table-of-contents" target="_blank">PowerShell 7 Quick Start for Developers on Linux, macOS, and Windows</a>”. It leverages your knowledge as a developer to bring you up to speed on the PowerShell language. It doesn’t waste time explaining concepts you already know, like variables and loops. It simply shows you how to do things in PowerShell.</p><p>The second course is “<a href="https://app.pluralsight.com/library/courses/everyday-powershell-developers-linux-macos-windows/table-of-contents" target="_blank">Everyday PowerShell for Developers on Linux, macOS, and Windows</a>”. It begins showing how to combine PowerShell with Docker to create a PHP container and test a simple website. It then proceeds to create an Azure SQL database and load data in it.</p><p>In the second you are taught how to code your own classes and modules by creating a simple module that leverages a USPS website API to lookup a zip code and return the city and state it belongs to.</p><p>In the final part of the course you are shown how to use the new <a href="https://github.com/arcanecode/DataFabricator" target="_blank">DataFabricator</a> module to generate realistic looking, but fake data for use in testing your applications.</p><p>While originally developed with PowerShell 7.0.3, all code in the course was tested and videoed using PowerShell 7.1.0.</p><p>Additionally, the code was tested on a variety of platforms, including Ubuntu 20.04, 20.10, Windows 10, H1 and H2, macOS Catalina and even macOS Big Sur.</p><p>If you don’t have a Pluralsight subscription, just go to the Pluralsight page and click the <a href="https://www.pluralsight.com/pricing/free-trial" target="_blank">Try for Free</a> link to get a free 10 day trial.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2797</wp:post_id>
  <wp:post_date>2020-12-05 10:00:00</wp:post_date>
  <wp:post_date_gmt>2020-12-05 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-04 20:50:01</wp:post_modified>
  <wp:post_modified_gmt>2020-12-05 02:50:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>two-new-powershell-courses-for-developers-on-pluralsight</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
  <category domain="category" nicename="development"><![CDATA[Development]]></category>
  <category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
  <category domain="category" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="programming"><![CDATA[Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[51864223363]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1607184119]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Iterate Over A Hashtable in PowerShell]]></title>
  <link>http://arcanecode.com/2020/12/14/iterate-over-a-hashtable-in-powershell/</link>
  <pubDate>Mon, 14 Dec 2020 16:01:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2799</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Iterating over an array in PowerShell using a foreach loop is pretty simple. You might think you can do the same thing with a hash table using the same syntax, but if you do you’ll get nothing back. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is possible to loop over a hash table though, using one of two methods.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, let's create a simple hashtable.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>$hash = @{
'About Arcane Code' = 'http://arcanecode.me'
'ArcaneCode Blog' = 'https://arcanecode.com'
'ArcaneCode RedGate Articles' = 'http://arcanecode.red'
'ArcaneCode Github Repository' = 'http://arcanerepo.com'
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the first method, the one that I prefer, you can use the <strong><em>GetEnumerator </em></strong>method of the hash table object.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>foreach ($h in $hash.GetEnumerator() )
{
  Write-Host "$($h.Name) : $($h.Value)"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Within the loop, you can use the <strong><em>Name </em></strong>property to get the key part of the hash, and the <strong><em>Value </em></strong>property to retrieve the value. Here is the output:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>ArcaneCode Blog : https://arcanecode.com 
ArcaneCode Github Repository : http://arcanerepo.com 
About Arcane Code : http://arcanecode.me 
ArcaneCode RedGate Articles : http://arcanecode.red</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the second method, instead of iterating over the hash table itself, we loop over the <strong><em>Keys </em></strong>of the hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>foreach ($h in $hash.Keys) 
{
  Write-Host "$h: $($hash.Item($h))"
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>For each key, we retrieve it's value from the hash table using the key to indicate the item we want. We could have shortened this slightly, but skipping the <strong><em>Item </em></strong>and just referencing the value by the key, using this syntax:</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>foreach ($h in $hash.Keys) 
{
  Write-Host "$h: $($hash.$h)"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Both of these methods produce the same output as our original version.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"style":{"typography":{"fontSize":"10px"}}} -->
<pre class="wp-block-code" style="font-size:10px;"><code>ArcaneCode Blog : https://arcanecode.com 
ArcaneCode Github Repository : http://arcanerepo.com 
About Arcane Code : http://arcanecode.me 
ArcaneCode RedGate Articles : http://arcanecode.red</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There you go, two simple ways in which you can iterate over a hash table in PowerShell. As I indicated, I prefer GetEnumerator because I have access to both the key and the value in a single variable within my loop. But feel free to use the method that works best for your situation.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2799</wp:post_id>
  <wp:post_date>2020-12-14 10:01:00</wp:post_date>
  <wp:post_date_gmt>2020-12-14 16:01:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-12 17:08:00</wp:post_modified>
  <wp:post_modified_gmt>2020-12-12 23:08:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>iterate-over-a-hashtable-in-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hashtable"><![CDATA[Hashtable]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[52218070530]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1607961731]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1338514632726745089";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2042362535906901";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167501</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Generating Markdown &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/03/28/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell-generating-markdown/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.68</wp:comment_author_IP>
    <wp:comment_date>2022-03-28 10:00:19</wp:comment_date>
    <wp:comment_date_gmt>2022-03-28 16:00:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Iterate Over A Hashtable in PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648483219.559826;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:146:"Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Generating Markdown &#8211; Arcane Code";s:18:"comment_author_url";s:144:"http://arcanecode.com/2022/03/28/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell-generating-markdown/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:58:"[&#8230;] Iterate Over A Hashtable in PowerShell [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:11:"192.0.86.68";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:11:"192.0.86.68";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:72:"http://arcanecode.com/2020/12/14/iterate-over-a-hashtable-in-powershell/";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648488376.072569;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fixing the Failed To Acquire Token Error When Logging Into Azure from PowerShell]]></title>
  <link>http://arcanecode.com/2020/12/21/fixing-the-failed-to-acquire-token-error-when-logging-into-azure-from-powershell/</link>
  <pubDate>Mon, 21 Dec 2020 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2813</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>When I haven't used Azure from PowerShell in some time, I'll get an error "failed to acquire token" when using cmdlets such as Get-AzSubscription or Get-AzContext.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To add to the confusion, sometimes Connect-AzAccount appears to work and log me in, but I'll still get the error.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Under the hood, the Azure cmdlets are caching some connection tokens. Fixing this issue is pretty simple, although not intuitive or easy to find the solution. All you have to do is issue the following cmdlet:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Clear-AzContext</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This will remove old tokens from your system. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After issuing the clear command, just end your current PowerShell session, then login again using Connect-AzAccount and  you should be good to go.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2813</wp:post_id>
  <wp:post_date>2020-12-21 10:00:00</wp:post_date>
  <wp:post_date_gmt>2020-12-21 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-12 17:08:15</wp:post_modified>
  <wp:post_modified_gmt>2020-12-12 23:08:15</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fixing-the-failed-to-acquire-token-error-when-logging-into-azure-from-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="azure"><![CDATA[Azure]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[52493818950]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1608566406]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1341050825897066500";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2047893328687155";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Adjust the Screen Resolution of an Ubuntu Hyper-V Virtual Machine]]></title>
  <link>http://arcanecode.com/2020/12/28/adjust-the-screen-resolution-of-an-ubuntu-hyper-v-virtual-machine/</link>
  <pubDate>Mon, 28 Dec 2020 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2820</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I use Ubuntu for a lot of the courses I teach, due to its popularity. While I have some computers running it "bare metal" as they say, in order to test different scenarios, as well as record my Pluralsight courses, I also setup virtual machines within Hyper-V.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's a bit annoying though, as it doesn't seem to allow the guest extensions to easily resize the VM. (I create my VMs from the downloaded ISOs as opposed to using the pre-built images in the Hyper-V store). But it can be done! All you need is a few quick edits to the grub file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Start by opening up a terminal window. Then you can use your favorite editor to open the grub file. I'm using VIM in this example, but you could substitute nano or another text editor of your choice. (I'll assume you know how to use your editor to edit and save changes.)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo vim /etc/default/grub</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now scroll down and find the line that begins with GRUB_CMDLINE_LINUX_DEFAULT. To the end of it, append the following string:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>video=hyperv_fb:1280x720</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Or use 1920x1080, 2560x1440, or whatever resolution you prefer. The line should look something like the following, all on one line without any wrapping.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>GRUB_CMDLINE_LINUX_DEFAULT="quiet splash video=hyperv_fb:1280x720"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Looking good, but you're not quite done yet. You'll need to append the same to the next line so it looks similar to the following, again all on one line with no wrapping.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>GRUB_CMDLINE_LINUX="quiet splash video=hyperv_fb:1280x720"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Of course, you'll want to make sure the resolution you select matches on both lines, 1920x1080, etc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now save the contents and exit your editor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next, and this is an important step, you <em><strong>have</strong></em> to update grub using the following command:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo update-grub</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you skip this step, you won't see your resolution updated.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, you'll need to reboot. I've not had great success with doing a reboot of Ubuntu running in Hyper-V, it frequently hangs, so I suggest doing a power off, then start Ubuntu again in Hyper-V.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When it does reboot, you should be running at your new resolution. </p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2820</wp:post_id>
  <wp:post_date>2020-12-28 10:00:00</wp:post_date>
  <wp:post_date_gmt>2020-12-28 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-12 17:08:39</wp:post_modified>
  <wp:post_modified_gmt>2020-12-12 23:08:39</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>adjust-the-screen-resolution-of-an-ubuntu-hyper-v-virtual-machine</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hyper-v"><![CDATA[Hyper-V]]></category>
  <category domain="category" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
  <category domain="post_tag" nicename="virtual-machine"><![CDATA[Virtual Machine]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[52747709537]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1609171211]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1343587559956480001";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2053576641452157";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167204</wp:comment_id>
    <wp:comment_author><![CDATA[ZeV]]></wp:comment_author>
    <wp:comment_author_email>trickybusiness@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>195.169.240.1</wp:comment_author_IP>
    <wp:comment_date>2022-02-17 09:22:50</wp:comment_date>
    <wp:comment_date_gmt>2022-02-17 15:22:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the instructions. The adjustment worked like a charm. Is it also possible to add more resolutions instead of only one (in my case 1920x1080 on the laptop). I work with an external monitor (3440x1440) and i would like to be able to switch between screens / resolutions. Can this be achieved by adding the sec. resolution seperated by a comma? e.g.. video=hyperv_fb:1920x1080, 3440x1440

Thanks!]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645115330.938807;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645111371.342398;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166627</wp:comment_id>
    <wp:comment_author><![CDATA[Dale Huhtala]]></wp:comment_author>
    <wp:comment_author_email>dalehuhtala@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.151.49.37</wp:comment_author_IP>
    <wp:comment_date>2021-12-24 13:43:51</wp:comment_date>
    <wp:comment_date_gmt>2021-12-24 19:43:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nope, doesn't work - VIM command not found. I was just going to play around with Ubuntu to see how much it has improved over the years. Since I can't even change the resolution of the display without a series of line commands, it clearly hasn't improved any, so test failed.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1640375033.022927;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1640380025.693644;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167085</wp:comment_id>
    <wp:comment_author><![CDATA[PJgvntofly]]></wp:comment_author>
    <wp:comment_author_email>chris.gass.177@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>50.125.81.83</wp:comment_author_IP>
    <wp:comment_date>2022-02-05 16:15:09</wp:comment_date>
    <wp:comment_date_gmt>2022-02-05 22:15:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This isn't working for me. No change after a shutting down the VM and a reboot of the host machine.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644099310.878507;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644104175.706322;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167251</wp:comment_id>
    <wp:comment_author><![CDATA[Rod Barnes]]></wp:comment_author>
    <wp:comment_author_email>IronRod3@protonmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>172.86.129.100</wp:comment_author_IP>
    <wp:comment_date>2022-02-21 19:15:48</wp:comment_date>
    <wp:comment_date_gmt>2022-02-22 01:15:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Just found this and was able to address the issue on both my Ubuntu and Lubuntu VMs under Hyper-V.  Thank you very much.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645492549.787001;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645496769.671513;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166200</wp:comment_id>
    <wp:comment_author><![CDATA[Jack]]></wp:comment_author>
    <wp:comment_author_email>shugarD@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>73.148.137.168</wp:comment_author_IP>
    <wp:comment_date>2021-11-10 17:24:44</wp:comment_date>
    <wp:comment_date_gmt>2021-11-10 23:24:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Didn't work, doesn't work...]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636586684.805582;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636591998.710698;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165943</wp:comment_id>
    <wp:comment_author><![CDATA[Droid]]></wp:comment_author>
    <wp:comment_author_email>hendrik_unique@gmx.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>176.95.136.20</wp:comment_author_IP>
    <wp:comment_date>2021-10-18 04:18:21</wp:comment_date>
    <wp:comment_date_gmt>2021-10-18 10:18:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Worked for me, even with rebooting from inside the machine.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634552302.503367;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634556394.306351;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165607</wp:comment_id>
    <wp:comment_author><![CDATA[Andrew]]></wp:comment_author>
    <wp:comment_author_email>bentone39@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>121.200.6.115</wp:comment_author_IP>
    <wp:comment_date>2021-09-11 22:39:15</wp:comment_date>
    <wp:comment_date_gmt>2021-09-12 04:39:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Worked perfectly for me.  Couldn't find a solution to setting screen resolution anywhere and found this.  Clear precise instructions and worked first time.  Thank you Arcanecode]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631421556.842308;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631425775.79874;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165148</wp:comment_id>
    <wp:comment_author><![CDATA[virtualizeme]]></wp:comment_author>
    <wp:comment_author_email>mrgilbert@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>73.134.30.27</wp:comment_author_IP>
    <wp:comment_date>2021-07-27 19:26:28</wp:comment_date>
    <wp:comment_date_gmt>2021-07-28 01:26:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This worked for me although I had to use nedit since vim either wasn't' installed or on the path.  
It still seems pretty archaic that a Hyper-V VM only allows one fixed display resolution when every other VM I use allows for dynamically changing the display resolution.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1627435588.884553;s:5:"event";s:9:"check-ham";s:4:"user";s:19:"mrgilberthotmailcom";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1627440712.694019;s:5:"event";s:9:"check-ham";s:4:"user";s:19:"mrgilberthotmailcom";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[61248344664]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1627503763]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1627503763]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1627503764.001554;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165150</wp:comment_id>
    <wp:comment_author><![CDATA[arcanecode]]></wp:comment_author>
    <wp:comment_author_email>arcanecode@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://arcanecode.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>107.77.235.118</wp:comment_author_IP>
    <wp:comment_date>2021-07-28 14:24:21</wp:comment_date>
    <wp:comment_date_gmt>2021-07-28 20:24:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree, I wish it were something Microsoft would work on. Dynamically changing works in some OS's, but not Ubuntu apparently. You'd think with as much love as Microsoft is showing for Linux these days it's something they could make a priority out of. ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>comment</wp:comment_type>
    <wp:comment_parent>165148</wp:comment_parent>
    <wp:comment_user_id>344266</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[61248386609]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1627503861]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1627503861]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1627503861.391529;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165576</wp:comment_id>
    <wp:comment_author><![CDATA[ubuntuBrutus]]></wp:comment_author>
    <wp:comment_author_email>vpmry@outlook.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>72.94.164.13</wp:comment_author_IP>
    <wp:comment_date>2021-09-07 08:05:33</wp:comment_date>
    <wp:comment_date_gmt>2021-09-07 14:05:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If I'm not mistaken the images from hyper-v's quick create allow for dynamic resizing since they can use the "enhanced session" feature of hyper-v -- you may have already alluded to this, actually. I think there are ways to add this feature to the stock images but I've not tested it out myself.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>165150</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631023534.201994;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631027306.682749;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>164903</wp:comment_id>
    <wp:comment_author><![CDATA[Thom]]></wp:comment_author>
    <wp:comment_author_email>larnuuk@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>89.238.176.173</wp:comment_author_IP>
    <wp:comment_date>2021-06-30 16:01:24</wp:comment_date>
    <wp:comment_date_gmt>2021-06-30 22:01:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've tried this, it doesn't appear to work anymore. After changing grub all you get is a black screen, the VM is dead. You're not even able to switch to a command line interface. This was after 3 attempts (2 installs and 1 return to checkpoint).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1625090484.308421;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1625095142.637953;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1626913922]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626913922]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626913922.301852;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166244</wp:comment_id>
    <wp:comment_author><![CDATA[jamesw0rld]]></wp:comment_author>
    <wp:comment_author_email>registered@wearetheworlds.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>217.39.145.221</wp:comment_author_IP>
    <wp:comment_date>2021-11-20 03:56:51</wp:comment_date>
    <wp:comment_date_gmt>2021-11-20 09:56:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks, this worked perfectly for me on Windows 10 (20H2) with Ubuntu 20.04.3 LTS.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>20474510</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637402212.008829;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"jamesw0rld";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1637406222.759729;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"jamesw0rld";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165223</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron]]></wp:comment_author>
    <wp:comment_author_email>baile185@purdue.edu</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.46.220.158</wp:comment_author_IP>
    <wp:comment_date>2021-08-03 11:57:32</wp:comment_date>
    <wp:comment_date_gmt>2021-08-03 17:57:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the note on the reboot. I've experienced the same black screen. 

However, the change still isn't working for me either. I've used the update statement to apply the new settings. I've gone back and verified both lines include the new setting. I'm running Ubuntu 20.04.2 LTS. Anything else I can try? 

Used linux for a 1 day in hopes of moving my IDE to it, but I'm already starting to hate it. Even installing Chrome is a major pain.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628018616.579915;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628013453.40107;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165513</wp:comment_id>
    <wp:comment_author><![CDATA[DRivenMadBy Stuff]]></wp:comment_author>
    <wp:comment_author_email>fred@george.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>94.5.82.75</wp:comment_author_IP>
    <wp:comment_date>2021-08-30 06:41:20</wp:comment_date>
    <wp:comment_date_gmt>2021-08-30 12:41:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Worked for me as of Aug 21 happily, with thanks]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630331957.660839;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630327280.492259;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165096</wp:comment_id>
    <wp:comment_author><![CDATA[arcanecode]]></wp:comment_author>
    <wp:comment_author_email>arcanecode@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://arcanecode.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>108.221.34.116</wp:comment_author_IP>
    <wp:comment_date>2021-07-21 18:34:41</wp:comment_date>
    <wp:comment_date_gmt>2021-07-22 00:34:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have found that rebooting the VM after the change doesn't work. Actually, it's not just this change, rebooting in general doesn't seem to work with current Ubuntu versions in Hyper-V. 

You must do a full shutdown, then restart the VM. Then it should work. It seems to be a quirk in Hyper-V.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>comment</wp:comment_type>
    <wp:comment_parent>164903</wp:comment_parent>
    <wp:comment_user_id>344266</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1626914081]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914081]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914081.279029;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Suppress Write-Verbose When Calling A function in PowerShell]]></title>
  <link>http://arcanecode.com/2021/01/04/suppress-write-verbose-when-calling-a-function-in-powershell/</link>
  <pubDate>Mon, 04 Jan 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2833</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In a project for one of my recent Pluralsight courses, "<a href="https://www.pluralsight.com/courses/everyday-powershell-developers-linux-macos-windows" target="_blank" rel="noreferrer noopener">Everyday PowerShell for Developers on Linux, macOS, and Windows</a>", I had created some functions in my <a rel="noreferrer noopener" href="https://github.com/arcanecode/DataFabricator" target="_blank">DataFabricator </a>module. Some of these called many child functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I wanted to be able to call the parent function using Verbose in order to track progress. As you may be aware though, when you call a parent function using Verbose, it carries down to all of the functions it calls. This caused a large volume of verbose messages making it difficult to find the information I wanted. Hence I needed to suppress verbose in the called functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's see how. First let's create two simple functions that don't suppress verbose messages.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Parent1()
{
  &#091;CmdletBinding()]
  param()

  Write-Verbose "Verbose: Parent1"
  Write-Host "Parent1"
  Child1
}

function Child1()
{
  &#091;CmdletBinding()]
  param()

  Write-Verbose "Verbose: Child1"
  Write-Host "Child1"
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When we call the parent function with the verbose switch, we get the expected output.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Parent1 -Verbose

VERBOSE: Verbose: Parent1
Parent1
VERBOSE: Verbose: Child1
Child1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now let's create an alternate version of the parent function. To suppress verbose on a called child function, all that is needed is to add the verbose switch, but followed by a colon and a $false.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Parent2()
{
  &#091;CmdletBinding()]
  param()

  Write-Verbose "Verbose: Parent2"
  Write-Host "Parent2"
  Child1 -Verbose:$false
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here is the output when we call the new Parent2.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Parent2 -Verbose

VERBOSE: Verbose: Parent2
Parent2
Child1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the verbose statements in the Child1 function do not trigger. All that was needed was to add "-Verbose:$false" as a switch when calling Child2.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And that's all there is to it, using this simple technique you can suppress verbose messages when calling a child function, whether verbose was used to call the parent or not.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2833</wp:post_id>
  <wp:post_date>2021-01-04 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-01-04 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-14 17:39:36</wp:post_modified>
  <wp:post_modified_gmt>2020-12-14 23:39:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>suppress-write-verbose-when-calling-a-function-in-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="write-verbose"><![CDATA[Write-Verbose]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[53012726053]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1609776021]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1346124316249911297";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2059329030876918";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Exclude A File From Git Source Code Control in VSCode]]></title>
  <link>http://arcanecode.com/2021/01/11/exclude-a-file-from-git-source-code-control-in-vscode/</link>
  <pubDate>Mon, 11 Jan 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2843</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Like many developers, I use VSCode for my projects. Primarily PowerShell, but also other things like the PHP code used for my <a rel="noreferrer noopener" href="https://w4shl.com" target="_blank">ham radio club website</a> or markdown projects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It can be useful to have extra files, that I don't need or want to have saved in Git. One example, I often have a "scratchpad.ps1" file. It's a place I can prototype code, test out ideas, before I copy them into my main project. If this file gets lost, or damaged, I don't really care as it's just temporary.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another example stems from my need to demonstrate code on video, for my Pluralsight courses, or live at SQL Saturdays and code camps. I often need to login to a website or database, and don't want to have my credentials hard coded in my script for everyone to see.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To solve this, I simply place my needed information in a text file, then use Get-Content (with the -Raw switch) to read it into a variable. I don't want this text file though to be placed in my public github repositories.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Excluding a file is simple. In the root folder of your source controlled project is a folder named <strong>.git</strong>. (Note the period on the front,  also note that on some operating systems it may be hidden by default.) Under it is another folder called <strong>info</strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In <strong>.git/info</strong> is a file called <strong>exclude </strong>(with no extension). To it, simply add the names of the files you want to exclude from source control. Here's an example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.&#091;oa]
# *~
uid.txt
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The lines that begin with a pound sign (#) are comments, and are included by git.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Under it is the file I added, uid.txt. This file is will now be excluded from any git commits, and will not be uploaded to github or whatever tool you use for git. You can see this in the VSCode file tree, the file will appear in an off color font. In a dark mode theme, this will be a gray.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2850,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2020/12/excludegit.jpg"><img src="https://arcanecode.files.wordpress.com/2020/12/excludegit.jpg?w=380" alt="" class="wp-image-2850" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The arrow points to the uid.txt file that was excluded from the project.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's all there is to it. Now you can include extra files, such as scratch pads, notes, or even passwords that you don't need (or want) to have as part of your git repository. Just keep in mind it's your responsibility to back these files up.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2843</wp:post_id>
  <wp:post_date>2021-01-11 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-01-11 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-14 17:38:07</wp:post_modified>
  <wp:post_modified_gmt>2020-12-14 23:38:07</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>exclude-a-file-from-git-source-code-control-in-vscode</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="git"><![CDATA[Git]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="category" nicename="vscode"><![CDATA[VSCode]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[53302946702]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1610380807]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1338629361960947712";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2042613245881830";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[SQL Server 2016 Reporting Services Cookbook On Sale Until Jan 13, 2021]]></title>
  <link>http://arcanecode.com/2020/12/18/sql-server-2016-reporting-services-cookbook-on-sale-until-jan-13-2021/</link>
  <pubDate>Fri, 18 Dec 2020 20:35:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2853</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:media-text {"mediaId":2857,"mediaType":"image"} -->
<div class="wp-block-media-text alignwide is-stacked-on-mobile"><figure class="wp-block-media-text__media"><img src="https://arcanecode.files.wordpress.com/2020/12/ssrscookbook.png?w=250" alt="" class="wp-image-2857 size-full" /></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"placeholder":"Content\u2026"} -->
<p>My last book, SQL Server 2016 Reporting Services Cookbook, is on sale until January 13th, 2021. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"placeholder":"Content\u2026"} -->
<p>You can get the E-Book version for just $5 (US) when ordering direct from my publisher.</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:paragraph -->
<p>Now you may be thinking, "2016? That's oooooold!" But in fact little has changed in Reporting Services since the 2016 release. All of the topics and techniques are still just as valid in SQL Server 2019. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To order your copy of the book, just jump on over to <a rel="noreferrer noopener" href="https://www.packtpub.com/product/sql-server-2016-reporting-services-cookbook/9781786461810?utm_source=authoremail&amp;utm_medium=email&amp;utm_campaign=5dollar2020&amp;utm_term=Robert-Cain" target="_blank">SQL Server 2016 Reporting Services Cookbook | Packt (packtpub.com)</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Hurry though, offer is only good until January 13, 2021</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2853</wp:post_id>
  <wp:post_date>2020-12-18 14:35:00</wp:post_date>
  <wp:post_date_gmt>2020-12-18 20:35:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-18 14:33:44</wp:post_modified>
  <wp:post_modified_gmt>2020-12-18 20:33:44</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sql-server-2016-reporting-services-cookbook-on-sale-until-jan-13-2021</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="book"><![CDATA[Book]]></category>
  <category domain="post_tag" nicename="packt"><![CDATA[PACKT]]></category>
  <category domain="category" nicename="sql-server"><![CDATA[SQL Server]]></category>
  <category domain="category" nicename="sql-server-reporting-services"><![CDATA[SQL Server Reporting Services]]></category>
  <category domain="category" nicename="ssrs"><![CDATA[SSRS]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[52392047350]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1608323715]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1340032903640657921";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2045723208904167";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Moving A File in Apple macOS]]></title>
  <link>http://arcanecode.com/2021/01/18/moving-a-file-in-apple-macos/</link>
  <pubDate>Mon, 18 Jan 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2861</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I've been using Windows since version 2, before that MSDOS all the way back to the earliest version. Thus working in the Microsoft world is very comfortable to me. My earliest exposure to Microsoft was with GWBASIC running on a Radio Shack (Tandy) TRS-80 Model 1.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I've been regularly using various distros of Linux for at least five years, perhaps longer, before that I used various UNIX or UNIX based systems. One of the earliest was CP/M on my Commdore 128, or later AmigaOS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>macOS is relatively new to me, I bought my first Mac about 3 years ago. The macOS GUI is very different in terms of commands from Windows or Linux. There are many things that aren't intuitive to someone coming from another platform. Even though they may seem easy to an experienced Apple user, they took me some time to figure out. I thought I'd spend a few blog post helping out others who are experienced computer users, but relatively new to macOS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One that befuddled me at first was very simple, moving a file to a different folder. Turns out it's fairly simple when you know how.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, open Finder and go to the file you want to move. Right click and pick Copy.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2865,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2020/12/move-file-01.png"><img src="https://arcanecode.files.wordpress.com/2020/12/move-file-01.png?w=705" alt="" class="wp-image-2865" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now go to the folder you want to move the file to. If you right click, you'll see the Paste option you may have seen before.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2867,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2020/12/move-file-02.png"><img src="https://arcanecode.files.wordpress.com/2020/12/move-file-02.png?w=705" alt="" class="wp-image-2867" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now here comes the secret. Press and hold the <em><strong>OPTION</strong></em> key. When you do, the menu will update.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2869,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2020/12/move-file-03.png"><img src="https://arcanecode.files.wordpress.com/2020/12/move-file-03.png?w=705" alt="" class="wp-image-2869" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While the OPTION key is being held down, the Paste option changes to <em><strong>Move Item Here</strong></em>. Click on it and the file will be moved.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I stated before, this may seem normal to a long time Apple user, but having menus change by holding a key isn't something normally done in Windows or most Linux distros. As a new macOS user, it never occurred to me to hold down the OPTION key.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using the OPTION key can unlock all kinds of new menu options, as you will see in upcoming posts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note this technique works in Big Sur, Catalina, as well the last several versions of macOS before that.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[How to move a file in Apple macOS]]></excerpt:encoded>
  <wp:post_id>2861</wp:post_id>
  <wp:post_date>2021-01-18 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-01-18 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-21 18:28:36</wp:post_modified>
  <wp:post_modified_gmt>2020-12-22 00:28:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>moving-a-file-in-apple-macos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="post_tag" nicename="big-sur"><![CDATA[Big Sur]]></category>
  <category domain="post_tag" nicename="catalina"><![CDATA[Catalina]]></category>
  <category domain="category" nicename="macos"><![CDATA[macOS]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[2869]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[53598457575]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1610985601]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1351197663530778628";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2070933943049760";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Skip The Countdown When Shutting Down Apple macOS]]></title>
  <link>http://arcanecode.com/2021/01/25/skip-the-countdown-when-shutting-down-apple-macos/</link>
  <pubDate>Mon, 25 Jan 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2873</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I'm sure any macOS user knows how to shut down their Apple computer. Just go to the Apple menu in the upper left, click on it, and pick Shut Down...</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2875,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2020/12/skip-countdown-01.png"><img src="https://arcanecode.files.wordpress.com/2020/12/skip-countdown-01.png?w=271" alt="" class="wp-image-2875" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Doing so pops up a dialog with a count down timer. You can skip the 60 second count down timer by clicking the Shut Down button.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's possible though to skip this dialog and shut down your Mac immediately. The trick to this is, as with my previous blog post, using the <strong><em>OPTION</em></strong> key.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With the above menu open, simply hold down the <strong><em>OPTION</em></strong> button. When you do the menu updates.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2879,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2020/12/skip-countdown-02.png"><img src="https://arcanecode.files.wordpress.com/2020/12/skip-countdown-02.png?w=275" alt="" class="wp-image-2879" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The change is very subtle, so look closely. The three periods after "Shut Down" disappear. Now when you click shut down, the shut down dialog is by-passed. Your macBook will now shut down immediately.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This technique works on Big Sur, Catalina, as well as several previous versions of macOS.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2873</wp:post_id>
  <wp:post_date>2021-01-25 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-01-25 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-21 19:04:53</wp:post_modified>
  <wp:post_modified_gmt>2020-12-22 01:04:53</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>skip-the-countdown-when-shutting-down-apple-macos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="big-sur"><![CDATA[Big Sur]]></category>
  <category domain="post_tag" nicename="catalina"><![CDATA[Catalina]]></category>
  <category domain="category" nicename="macos"><![CDATA[macOS]]></category>
  <category domain="post_tag" nicename="shut-down"><![CDATA[Shut Down]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[2879]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[53887671566]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1611590401]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1353734380011855874";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2076464922496662";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Closing All Finder Windows at Once in Apple macOS]]></title>
  <link>http://arcanecode.com/2021/02/01/closing-all-finder-windows-at-once-in-apple-macos/</link>
  <pubDate>Mon, 01 Feb 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2882</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>It's not uncommon for me to have multiple Finder windows open at once on my Mac. Often I'm cleaning up my drive, moving files from downloads to where I want them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When I'm done, I naturally want to close all my Finder windows. Normally, if you go to the File menu in Finder, you'll see an option to close the current window.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2886,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2020/12/close-all-finder-windows-01.png"><img src="https://arcanecode.files.wordpress.com/2020/12/close-all-finder-windows-01.png?w=421" alt="" class="wp-image-2886" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It can be annoying, and potentially time-consuming to go to every Finder window and close it. Even if I close using the red X button, I still have to go to each Finder window. It'd be nice to just close them all at once. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is yet another instance where the <strong><em>OPTION</em></strong> key will be our friend. Simply hold down the <strong><em>OPTION</em></strong> key and the menu option will update.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2888,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2020/12/close-all-finder-windows-02.png"><img src="https://arcanecode.files.wordpress.com/2020/12/close-all-finder-windows-02.png?w=440" alt="" class="wp-image-2888" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can simply click <strong><em>Close All</em></strong> and all open Finder windows will be exited. Alternatively, you can also press <strong>CMD+OPTION+W</strong> on the keyboard and all your Finder windows will be closed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As an added bonus, this not only works in Finder but with any application that allows you to have multiple copies of the program open. For example, I opened up multiple copies of BBEdit and using the OPTION key enabled the Close All Windows choice. Do note though, the shortcut key may vary with each application.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This technique works on Big Sur, Catalina, and other recent versions of Apple macOS.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2882</wp:post_id>
  <wp:post_date>2021-02-01 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-02-01 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2020-12-21 19:48:23</wp:post_modified>
  <wp:post_modified_gmt>2020-12-22 01:48:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>closing-all-finder-windows-at-once-in-apple-macos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="finder"><![CDATA[Finder]]></category>
  <category domain="category" nicename="macos"><![CDATA[macOS]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[2888]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[54200175773]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1612195228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1356271207629291521";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2082047035271784";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Supressing "The certificate Couldn't Be Verified" message Using the Microsoft Remote Desktop Application on Apple macOS]]></title>
  <link>http://arcanecode.com/2021/02/15/supressing-the-certificate-couldnt-be-verified-message-using-the-microsoft-remote-desktop-application-on-apple-macos/</link>
  <pubDate>Mon, 15 Feb 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2891</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my previous blog post, <em><a href="https://arcanecode.com/2021/02/08/using-the-microsoft-remote-desktop-application-on-apple-macos/">Using the Microsoft Remote Desktop Application on Apple MacOS</a></em>, I showed how easy it is to connect to one of your Windows computers from your Mac.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> I frequently use the Microsoft Remote Desktop application on my Apple MacBook Pro to connect to one of my Windows computers. It presents a nice interface that's easy to use and setup.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you've added your computer to the Microsoft Remote Desktop application (you'll find the instructions in my previous post), all you have to do is double click on it to access your remote computer. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is the launching point, note that for security reasons in all of the images in this article I've blurred out the name of my computer and replaced it with <em>&lt;name&gt;</em>. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2894,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-certif-message-01.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-certif-message-01.png?w=599" alt="" class="wp-image-2894" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>There is one irritating behavior. When connecting to a computer it frequently displays the following message: "<strong>You are connecting to the RDP host <em>&lt;name&gt;</em>. The certificate couldn't be verified back to a root certificate. Your connection may not be secure. Do you want to continue?</strong>" </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Having to stop every time and click <em>Continue </em>is really annoying. Especially if you are on your home network, connecting to a computer you own and trust. There's an easy fix though!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Suppressing the Warning Message</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":2896,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-certif-message-02.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-certif-message-02.png?w=587" alt="" class="wp-image-2896" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Simply click the Show Certificate button to display the certificate information.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2898,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-certif-message-03.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-certif-message-03.png?w=587" alt="" class="wp-image-2898" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Once you review, simply put a check mark in the "<em>Always trust..</em>." checkbox (pointed to by the arrow) then click <em>Continue</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since you are changing the trust certificates for your MacBook (or other Apple Mac computer, like the Mac Mini), macOS will prompt you to enter your admin password. Do so, then continue.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>From here on out, all you need to do to connect to your remote computer is double click on it, and (if you've not saved it within the remote desktop program) enter your credentials. No more having to click to continue past the "certificate couldn't be verified" message.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I'll wrap this up with two quick notes. First, this works on the last several versions of macOS including Big Sur. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, while I've used Windows as the example, this will work with any OS (such as various Linux distros) that support RDP (Remote Desktop Protocol). Sadly, macOS does not support RDP so you cannot connect to another Mac from the Microsoft Remote Desktop application.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2891</wp:post_id>
  <wp:post_date>2021-02-15 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-02-15 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-02-03 14:08:22</wp:post_modified>
  <wp:post_modified_gmt>2021-02-03 20:08:22</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>supressing-the-certificate-couldnt-be-verified-message-using-the-microsoft-remote-desktop-application-on-apple-macos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="category" nicename="macos"><![CDATA[macOS]]></category>
  <category domain="category" nicename="microsoft"><![CDATA[Microsoft]]></category>
  <category domain="post_tag" nicename="remote-desktop"><![CDATA[Remote Desktop]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <category domain="post_tag" nicename="windows-10"><![CDATA[Windows 10]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[2896]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[54810657218]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1613404804]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1361344538485411840";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2093072867502534";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167071</wp:comment_id>
    <wp:comment_author><![CDATA[Dale Roe]]></wp:comment_author>
    <wp:comment_author_email>daleroe@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/dalejroe</wp:comment_author_url>
    <wp:comment_author_IP>216.54.129.12</wp:comment_author_IP>
    <wp:comment_date>2022-02-03 11:21:59</wp:comment_date>
    <wp:comment_date_gmt>2022-02-03 17:21:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi. I've tried this a hundred times. I'm never asked to authenticate with my password, and the checked box never sticks. It's aggravating. I'm on a M1 MacBook Air running macOS Monterrey, logging into a corporate Windows 10 machine. This also does not stick on my Intel Macs, going back at least two Apple operating systems.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1643908919.099411;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"dalejroe";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1643913919.661678;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"dalejroe";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167072</wp:comment_id>
    <wp:comment_author><![CDATA[Dale J. Roe]]></wp:comment_author>
    <wp:comment_author_email>daleroe@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>216.54.129.12</wp:comment_author_IP>
    <wp:comment_date>2022-02-03 11:22:32</wp:comment_date>
    <wp:comment_date_gmt>2022-02-03 17:22:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi. I've tried this a hundred times. I'm never asked to authenticate with my password, and the checked box never sticks. It's aggravating. I'm on a M1 MacBook Air running macOS Monterrey, logging into a corporate Windows 10 machine. This also does not stick on my Intel Macs, going back at least two Apple operating systems.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>71504177</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1643908953.026969;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"dalejroe";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1643913919.905722;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"dalejroe";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Using the Microsoft Remote Desktop Application on Apple macOS]]></title>
  <link>http://arcanecode.com/2021/02/08/using-the-microsoft-remote-desktop-application-on-apple-macos/</link>
  <pubDate>Mon, 08 Feb 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2901</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2><strong>Introduction</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I use many computers in my daily life, including Windows, Apple Mac's, and Linux computers running a variety of distros. It's very convenient for me to be able to remote into another computer from whichever computer I happen to be on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On my MacBook (although this would work on any Apple machine running macOS, such as a Mac Mini), the <em>Microsoft Remote Desktop</em> application is a fantastic program for remoting to another computer. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While primarily designed for accessing a Windows machine, it will work with most computers that support the RDP (Remote Desktop Protocol) such as many Linux distros. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that it will <em>not </em>let you connect to another Apple Mac, as macOS does not support the Remote Desktop Protocol. You can go from a Mac to Windows (or some Linux) computers using the Remote Desktop application, but not to another Mac.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Microsoft Remote Desktop is free, and in the Apple App Store. Just do a search for Microsoft Remote Desktop, get and install it. But don't open it quite yet, as we have to configure the computer you are going to connect to.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Configure Your Windows Computer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I'm going to assume you are connecting to a Windows 10 Pro computer. Click on the Start button, the pick Settings. In the Windows Settings, pick <em>System</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the System page, scroll down in the menu on the left and click on <em>Remote Desktop</em>. (You can click on the image below, or any of the ones in this article, to see them in their full resolution).</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2935,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-01.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-01.png?w=1024" alt="" class="wp-image-2935" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You'll first need to toggle on the <em>Enable Remote Desktop</em> setting, as I've done here.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next, look under "How to connect to this PC". This has the name you need to enter into the Microsoft Remote Desktop app. In this image it shows <em>&lt;name&gt;</em>, but for you it will show the name of the computer. Note that for security reasons, I've replaced the actual name of my computers with simply <em>&lt;name&gt;</em> in the screen captures.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, at the bottom look at the <em>User accounts </em>section. By default, if you are an administer on the computer, you are automatically able to remote to the computer. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you want a standard user, in other words a non-admin user, to be able to remote in you'll need to add them using the "<em>Select users that can remotely access this PC</em>" link.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At this point you've now setup your Windows computer to be remoted into. Note you only have to do this once on this computer, after that it can be remoted to from other computers.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Adding a PC to Microsoft Remote Desktop on your Mac</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now return to your Mac. Assuming you've installed the Microsoft Remote Desktop application, open it.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2906,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-02.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-02.png?w=599" alt="" class="wp-image-2906" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The first time in, you'll see the big "<em>Add PC</em>" button right in the middle. After you've added the first machine, using the instructions here, you can add more computers using the plus button (pointed at by the big red arrow) and pick "Add PC" in the menu.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You'll then be shown the Add PC window. Start by entering the name of the computer you want to connect to. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After entering the computers name, you'll see the <em>User account</em> line, which by default is set to <em>Ask when required</em>. In this mode you will be prompted for your login credentials every time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As an alternative, you can save your credentials by picking <em>Add User Account...</em> in the <em>User account </em>drop down. You'll then be prompted for your Username and Password. You can also create a "friendly name" for the account. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, if you were setting up a connection to your wife's computer, you'd have to give her full user name, perhaps it's her e-mail address. In the friendly name could just enter "She who must be obeyed's computer".</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2908,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-03.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-03.png?w=441" alt="" class="wp-image-2908" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>One nice thing Microsoft Remote Desktop does is save your credentials. Then when you add more computers that use these same credentials you can just pick it from the <em>User account</em> drop down and not have to recreate them every time. This is especially nice for when you use your same Microsoft credential to login to multiple Windows computer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you add the user account, or leave it at the default to ask each time, you're ready to look at some of the options in Remote Desktop. It's worth your time to understand these, as it will affect your experience when working with remote computers.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2928,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-04-1.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-04-1.png?w=470" alt="" class="wp-image-2928" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Friendly name can be helpful if the computer has a cryptic name. Often when a PC is purchased the default name is something like WINRPXM457JB. Most home users don't realize they can rename their computer and leave it at the default. Using the friendly name you can enter "She who must be obeyed's computer" and know what machine it is. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I find this even more helpful in work environments where they use naming conventions like "HR-PC-001", "HR-PC-002", etc. You could instead use meaningful names like "Anna's computer", "Jack's computer", or "The nice lady who brings us donuts computer".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you have a lot of computers you connect to, you may want to group them. By default, there's one group "Saved PCs". You may want to create groups such as "My computers", "Wife's computers", "Kid's computers" and so on. This is totally optional, but the more computers you need to work with the more useful it will become.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Gateway option is used in corporate environments that have setup Remote Desktop Gateway servers. Since this article is geared toward home users, it shouldn't affect you. If you are in a corporate environment and need to remote in, your friendly neighborhood system administrator will be able to tell you if you need a gateway, and if so what do you need to enter here.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The other options are pretty straight forward, so let's click on the Display tab.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Display Options</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":2929,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-05-1.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-05-1.png?w=470" alt="" class="wp-image-2929" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here you have some choices on how the remote machine is displayed on your Mac. One notable one is "<em>Use all monitors</em>". If your Mac has multiple monitors connected to it, you may want to have the remote computer displayed on all of them. To do so, check this box. If you do some of the other options become disabled.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Alternatively, you may want the remote computer only on one monitor so you can still access your Apple computer on the other monitors. Leaving this unchecked allows this.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you don't select <em>Use all monitors</em>, you then have the choice to start the remote session in full screen, or show it in a window.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up are quality settings, such as the color depth or optimizing for Retina displays. Note that the higher settings you pick, the more bandwidth and processing power it will take.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my selection, shown above, I chose to use all monitors at a high quality. Make your own selections then click on the Devices &amp; Audio tab.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Devices &amp; Audio Options</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":2930,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-06-1.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-06-1.png?w=470" alt="" class="wp-image-2930" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This tab controls what gets shared between the host computer, your Mac, and the remote computer (typically a Windows computer).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If, for example, you started a video playing on your remote computer, the "Play sound" option controls where you hear the audio. The default, <em>On this computer </em>simply means the Mac running Microsoft Remote Desktop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I generally go with the default options, shown here, then go to the Folders tab.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Folder Options</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Using the folders tab, you gain the ability to transfer files between your Mac and the computer you are remote controlling.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2931,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-07-1.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-07-1.png?w=470" alt="" class="wp-image-2931" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Start by checking the "<em>Redirect folders</em>" option. Then in the lower left click the <strong><em>+</em></strong> button. In the dialog that pops up, select one of the folders on your Mac. After you've connected to your remote computer, this will show up as a folder in your remote computer. Here's what it looks like on Windows, after you have remoted in.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2940,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-07a.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-07a.png?w=1024" alt="" class="wp-image-2940" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You'll see the name of the folder you picked, in this example the <em>Documents</em> folder, the text <em>on my</em>, then the name of your Mac, in this case represented by <em>&lt;my mac&gt;</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>From here you can double click to open the Mac's folder in File Explorer, and begin copying files back and forth. Do note there is a "Read Only" checkbox in the Add PC dialog's folder options. If you check it, on the Windows computer you connect to will be able to read and copy files <em>from </em>the Mac, but will not be able to copy files <em>to</em> the Mac.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using redirect folders is optional, and only needed if you wish to move files between the two computers. To be honest, I seldom use this option as I'm a  heavy user of Microsoft OneDrive. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If I need something, I simply save it into my OneDrive on the remote computer, then I can open it in my OneDrive folder on my Mac, and vice versa. If you aren't a user of OneDrive or a similar service then this will be a useful tool for you, should you need to share files.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OK, you're all done, just click the Add button. This computer will now be added to your Microsoft Remote Desktop window.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Connect To a Remote PC</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":2922,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-08.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-setup-08.png?w=599" alt="" class="wp-image-2922" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can connect by simply double clicking on the block with the computer's name (in this example represented by &lt;name&gt;).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note the two icons in the upper right of the computer box. The pencil icon can be used to edit the settings we just saw. The trashcan can be used to remove this computer from your remote desktop application.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you double click on the computer, you may be shown a message "<em>You are connecting to the RDP host &lt;name&gt;. The certificate couldn't be verified back to a root certificate. Your connection may not be secure. Do you want to continue?</em>"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are connecting to your own computer, that you trust, likely on your home network, then you can click the Continue button. In a future post we'll show you how to resolve this so it will skip this dialog.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you have connected, you'll see the remote computer, probably full screen (unless you changed the property back in the Display options). </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Exiting a Remote Desktop Session</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I will say, it's not at all intuitive how to switch back to your Apple macOS desktop, or how to exit a remote desktop session once you are in it. Since I've shown you how to get into a remote desktop session, I should take a  moment and show you how to get out of it. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To switch back to your macOS machine, simply use the CTRL key, plus the left arrow to swap to the previous desktop. Using CTRL plus right arrow will go back to the Remote Desktop session.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are using the virtual desktops feature in macOS, you can use CTRL and the left or right arrows to move past the remote desktop session to other macOS virtual desktops, then go back to the remote desktop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To exit a remote desktop session, while you are looking at your remote computer simply drag your cursor to the very top of the screen and let it sit there a few seconds.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Apple menu bar will pop up. You can then use the Window menu, and click Close. Alternatively you can click the Red X button in the Remote Desktop window to close the session.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also note it's possible to connect to multiple computers at the same time. You can use either the CTRL and left/right arrow to swap between them, or in the Window menu pick a different remote desktop to connect to.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Network Connectivity</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Please note that both the Apple Mac and the computer you are remoting to must be on the same network. Typically this will be your home network, or perhaps a work network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By default, Remote Desktop won't work if, for example, you go to a coffee shop with your Mac and your Windows computer is still at home.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is possible to work around this by setting up a VPN connection back to your home network. Setting that up, however, is beyond the scope of this already long blog post.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Summary</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, you saw how to install and configure Microsoft Remote Desktop on Apple's macOS and connect to a Windows Computer. The screen captures were from macOS Big Sur and Windows 10, but I've also tested it with Catalina and Mojave.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2901</wp:post_id>
  <wp:post_date>2021-02-08 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-02-08 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-02-03 13:41:27</wp:post_modified>
  <wp:post_modified_gmt>2021-02-03 19:41:27</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-the-microsoft-remote-desktop-application-on-apple-macos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="post_tag" nicename="macos"><![CDATA[macOS]]></category>
  <category domain="category" nicename="microsoft"><![CDATA[Microsoft]]></category>
  <category domain="post_tag" nicename="remote-dekstop"><![CDATA[Remote Dekstop]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <category domain="post_tag" nicename="windows-10"><![CDATA[Windows 10]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[2906]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[54499672422]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1358807879424348163";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2087614294715058";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1612800019]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>163388</wp:comment_id>
    <wp:comment_author><![CDATA[Using the Microsoft Remote Desktop Application on Apple macOS — Arcane Code &#8211; All About Writing and more]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://allaboutwritingandmore.com/2021/02/09/using-the-microsoft-remote-desktop-application-on-apple-macos-arcane-code/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.84.133</wp:comment_author_IP>
    <wp:comment_date>2021-02-09 00:13:50</wp:comment_date>
    <wp:comment_date_gmt>2021-02-09 06:13:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Using the Microsoft Remote Desktop Application on Apple macOS — Arcane Code [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_user_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_user</wp:meta_key>
      <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1612877267]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1612877267.981403;s:5:"event";s:10:"report-ham";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1612855463.65912;s:5:"event";s:10:"check-spam";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[true]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1612851230.877674;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>163436</wp:comment_id>
    <wp:comment_author><![CDATA[Supressing &#8220;The certificate Couldn&#8217;t Be Verified&#8221; message Using the Microsoft Remote Desktop Application on Apple macOS | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/02/15/supressing-the-certificate-couldnt-be-verified-message-using-the-microsoft-remote-desktop-application-on-apple-macos/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.10</wp:comment_author_IP>
    <wp:comment_date>2021-02-15 10:00:07</wp:comment_date>
    <wp:comment_date_gmt>2021-02-15 16:00:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my previous blog post, Using the Microsoft Remote Desktop Application on Apple MacOS, I showed how easy it is to connect to one of your Windows computers from your [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1614461383]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1614461383.624238;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1613404807.05993;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1613409840.121016;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>163487</wp:comment_id>
    <wp:comment_author><![CDATA[Having Multiple Entries for the Same PC in Microsoft Remote Desktop Application on Apple macOS | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/02/22/having-multiple-entries-for-the-same-pc-in-microsoft-remote-desktop-application-on-apple-macos/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.114.4</wp:comment_author_IP>
    <wp:comment_date>2021-02-22 10:00:36</wp:comment_date>
    <wp:comment_date_gmt>2021-02-22 16:00:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a previous blog post, Using the Microsoft Remote Desktop Application on Apple macOS, I showed how easy it was to remote control a Windows computer from your [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1614461379]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1614461379.558157;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1614014970.494514;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1614009636.841725;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Having Multiple Entries for the Same PC in Microsoft Remote Desktop Application on Apple macOS]]></title>
  <link>http://arcanecode.com/2021/02/22/having-multiple-entries-for-the-same-pc-in-microsoft-remote-desktop-application-on-apple-macos/</link>
  <pubDate>Mon, 22 Feb 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2958</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In a previous blog post, <a href="https://arcanecode.com/2021/02/08/using-the-microsoft-remote-desktop-application-on-apple-macos/">Using the Microsoft Remote Desktop Application on Apple macOS</a>, I showed how easy it was to remote control a Windows computer from your Mac.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One question I get asked is "Can I have multiple entries for the same computer?" The answer is yes!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This, of course, leads to another question, "Why would you want to?"</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Reasons for Multiple Entries</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are a number of valid reasons for wanting multiple entries in Remote Desktop to the same computer. Let's cover a couple by using examples.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, let's say you have a Windows 10 computer in the family room where your child plays games and does school work. Wisely you have setup their account as a "standard user". </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You have an account as well, as an administrator, to handle  administrative tasks such as installing software, making sure updates are being processed and the like.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You could setup entries in Microsoft Remote Desktop, one for each user  that logs into the computer. This allows you to have one entry to login as yourself, and a second to login using your offspring's ID.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now when your child comes to ask you to install the latest updates to Minecraft on the family computer, you can simply remote to it from your Mac using their ID, and install the updates providing your admin user ID and password. You'll also have the entry to login as yourself, so you can apply updates and do maintenance.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For the second reason, you may wish to access your remote PC with different sets of option. In the blog post I mentioned earlier, I set it up to use all the monitors on my Mac.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Every so often though, I want to have my remote Windows computer running in a window. This allows me to see something on my remote machine, while still having my macOS desktop available.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One example, in my previous post I showed how to configure Windows to allow for remote access. I did so by having the Windows machine in a window on my Mac on one monitor, while creating the post in Safari on my macBook on a second monitor. This let me have them side by side, making it easy to create the instructions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Rather than having to change the settings each time, I have two entries for my main Windows computer. The first, which you saw created in the first blog post in this series, opens the Windows machine using all monitors. The second opens it up in just a window.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Those are just two reasons, I'm sure you'll be able to come up with many more.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Adding a Second Entry for the Windows PC</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First, I'm going to assume you've already read my first article, <a href="https://arcanecode.com/2021/02/08/using-the-microsoft-remote-desktop-application-on-apple-macos/">Using the Microsoft Remote Desktop Application on Apple macOS</a>. If you haven't, please take a moment now to do so.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With Microsoft Remote Desktop open on your Mac, click the + button at the top, then pick Add PC in the drop down.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2966,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-01.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-01.png?w=599" alt="" class="wp-image-2966" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Note that for security reasons, in the screen shots I've replaced with the actual name of my computer with <em>&lt;name&gt;</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2968,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-02.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-02.png?w=470" alt="" class="wp-image-2968" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Start with the name of the computer in the <em>PC name</em>, and pick the user account to login in as, or leave it as "<em>Ask when required</em>".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we want to use the <em>Friendly name</em> to indicate not just the computer name, but also how this is used. For this example I'm going to have my remote machine display in a window, so I've entered <em>&lt;name&gt; in a Window</em>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next we'll need to configure it to show up in a window, so click on the Display tab.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2971,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-03.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-03.png?w=470" alt="" class="wp-image-2971" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here I will uncheck the default of <em>Start session in a full screen</em>, then check on <em>Fit session to window</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then, at the bottom I checked on <em>Update the session resolution on resize</em>. This way when I resize the window on my Mac, it will resize the computer I'm remoting into so the desktop will fit the window.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can change the Devices &amp; Audio and Folders if you wish. Since I've already covered those in the first article I'll just click on the Add button.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Update the Existing Connection</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before we open the new connection, we should update the friendly name of the existing one to make it clear what the difference is. To do so, click on the pencil icon in the upper right of the connection created in the first article.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Go to the <em>Friendly name</em> field, and enter the name of the computer followed by (for this situation) All Monitors, then click Save. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below you can see it now reads <em>&lt;name&gt; All Monitors</em>, and beside it the new entry we just added for <em>&lt;name&gt; in a Window</em>. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2973,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-04.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-04.png?w=599" alt="" class="wp-image-2973" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>It's now very easy to tell the difference in the two connections.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Launching the New Connection</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's now launch the new connection by double clicking on it.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2976,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-05.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-05.png?w=1024" alt="" class="wp-image-2976" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here you can see a new window appears on my Mac, showing my Windows desktop. (Note that you can see a bigger version of any of the images in my blog posts by double clicking on it).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can see the window with the full Windows 10 desktop, including the Windows task bar. You can also see the macOS toolbar across the bottom, as well as the Mac menu bar at the top.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also resize the window. If you checked the <em>Update the session resolution on resize</em> option, the resizing the window will also resize the Windows desktop as you see below.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2980,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-06.png"><img src="https://arcanecode.files.wordpress.com/2021/02/mac-rdp-second-06.png?w=1024" alt="" class="wp-image-2980" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can see my Windows 10 desktop now fits nicely into my resized window.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Please note you can only have one connection to a computer active at a time. If I am in the windowed version of my connection, then go back to the Microsoft Remote Desktop connection window and double click on the <em>&lt;name&gt; All Monitors</em>, it will disconnect the <em>&lt;name&gt; in a Window</em> session then launch the all monitors version.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Any time you launch a connection, it will disconnect any existing connection, if there is one, in favor of the newly launched one.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this article we showed how to create multiple connections to the same computer in the Microsoft Remote Desktop application on macOS. This works with Big Sur as well as previous versions of macOS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We also covered various reasons why you might wish to create multiple connections within Remote Desktop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Armed with this information you can now create multiple connections to the same computer to fit the ways in which you want to use the remote computer.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2958</wp:post_id>
  <wp:post_date>2021-02-22 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-02-22 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-02-03 18:02:26</wp:post_modified>
  <wp:post_modified_gmt>2021-02-04 00:02:26</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>having-multiple-entries-for-the-same-pc-in-microsoft-remote-desktop-application-on-apple-macos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="post_tag" nicename="macos"><![CDATA[macOS]]></category>
  <category domain="category" nicename="microsoft"><![CDATA[Microsoft]]></category>
  <category domain="post_tag" nicename="remote-desktop"><![CDATA[Remote Desktop]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <category domain="post_tag" nicename="windows-10"><![CDATA[Windows 10]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[2976]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[55127109362]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1614009633]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1363881375175045122";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2098585390284615";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>163639</wp:comment_id>
    <wp:comment_author><![CDATA[Rob S.]]></wp:comment_author>
    <wp:comment_author_email>robbiems89@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://ivci.com/</wp:comment_author_url>
    <wp:comment_author_IP>173.3.28.20</wp:comment_author_IP>
    <wp:comment_date>2021-03-18 09:06:53</wp:comment_date>
    <wp:comment_date_gmt>2021-03-18 15:06:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Having multiple entries or accounts is smart, especially for families that share the same home computer. It ensures that everyone has their own account and preferences set.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1616080014.500921;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1616085800]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1616085330.373788;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1616085800]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1616085801.467482;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Tips for the Disorganized Laptop Traveler]]></title>
  <link>http://arcanecode.com/2021/03/01/tips-for-the-disorganized-laptop-traveler/</link>
  <pubDate>Mon, 01 Mar 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.com/?p=2985</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I realize with the current (as of the time I write this) COVID lockdown, people aren't doing a lot of traveling. But things are beginning to open back up, and will continue to do so as the year progresses.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In a former job I traveled a LOT. In addition I frequented user groups and conferences, giving presentations. Over time I've picked up a few handy, and inexpensive tips and tricks for keeping your laptop bag organized. So I thought I'd do a bit something different with this post and share some of these tips with you.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Keeping It Together</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I have a lot of laptops, I admit I'm a bit of a gear nerd. Most folks though, have at least one, along with a tablet of some type, plus various accessories. How do you keep the power supplies plus all the associated cords neat and together?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I use pencil bags available in my local big box store in the school supply area.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2989,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9545.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9545.jpg?w=768" alt="" class="wp-image-2989" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>These bags are inexpensive, typically around $3, come in a variety of colors, and hold a lot. Each laptop I have has a bag associated with it, which holds the power supply plus any extra cables I use with it.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2991,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9546.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9546.jpg?w=768" alt="" class="wp-image-2991" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see, this is the (after market) power brick for my Dell Inspiron, along with two USB cables (one Apple and one Micro-USB) that I often need with that computer. When I'm ready to go somewhere, I just reach into a box and grab the bag for the laptop I'm taking with me.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition, we all seem to have lots of spare cables. I've used these bags to organize my cables, one for Micro-USB, another for USB-C, and so on.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What's In The Bag?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>So how do I remember what's in each bag? Well at first I bought the book "How To Be a Psychic for Fun and Profit", so I could use my magical abilities to just discern what was in each pouch. But the book didn't make much sense, until I realized what'd I had actually bought was "How to Be Psychotic for Fun and Profit". So I abandoned that and went with an alternate solution.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2993,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9547.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9547.jpg?w=733" alt="" class="wp-image-2993" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>I purchased small tags, these are typically sold as tags for keys. You'll find them in the office supply section of stores. On each tag I write what's in the bag, making it easy to identify.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>They are inexpensive, so if I decide to reuse a bag for something else I can take off the tag, throw it away and put on a new one. They can also be used to identify other devices.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2995,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9548.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9548.jpg?w=768" alt="" class="wp-image-2995" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here I've attached one to each of my USB keys, to let me quickly identify the size. For other keys in my collection I might also write down what's on there, for example "Backup for XYZ Project".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>It Just Needs More Power</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One of the first things I do after I get a new laptop is hop on Amazon or swing by my used computer store and purchase spare power supplies for my laptop. This lets me keep one on my desk, one in a bag, and sometimes I'll get one more to put by my recliner.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When I get a power supply, I use a Sharpie to write which laptop the power supply goes with.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3018,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9555.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9555.jpg?w=768" alt="" class="wp-image-3018" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now I don't have to think about which laptop this supply goes with.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's gotten a bit easier these days as many laptops are now powered with USB-C. This makes it much easier to share supplies. Earlier I showed the <a href="https://www.amazon.com/gp/product/B07DGTFQTD/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;psc=1" target="_blank" rel="noreferrer noopener">power supply </a>I travel with for my Dell Inspiron. I actually have two of these, one for my Dell, and a second for my 2017 Apple MacBook.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3020,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9556.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9556.jpg?w=768" alt="" class="wp-image-3020" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This model provides 87 Watts to the laptop, plenty to power not just the laptop but any accessories I want to plug into the laptop like a USB monitor, hard drives, and the like.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition this power supply also has four USB A ports which I can use to recharge my iPads, Android tablets, iPhone, etc. This is especially nice in places like coffee shops or hotels where plugs may be limited.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Power To The People</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another thing I do to help address the problem of limited plugs is carry a small extension cord.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":2997,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9549.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9549.jpg?w=768" alt="" class="wp-image-2997" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>These are two I had handy. One is setup for devices with three prongs, the other two, I pick the one to use depending on what equipment I'm bringing with me.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Both are 9 feet long, which may seem a bit excessive but I have learned from experience wall plugs are not always where they are convenient. I can't tell you the number of hotel rooms I've been in where the desk was no where close to the plug.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There may also be competition for an available plug. The small coffee shop I frequent has very few plugs. I've found I can make new friends by using an extension cord and offering to share it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Hold It Together</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In order to manage the mess of wires that accompanies any electronic device, I use Velcro cable ties.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3000,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9550.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9550.jpg?w=768" alt="" class="wp-image-3000" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>These things are great. EVERY cord that comes into my house gets one. As you would expect, all my cables, laptop power cords, etc get these. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But I also put them on the power cords for my TV, lamps, power tools, fans, all my ham radio gear, you name it if it's a cord it gets one of these straps.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Rising to the Occasion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hand issues seem to run rampant in the tech community, being on a keyboard all day can take a toll. Something you can do to help your hands is get a laptop riser.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3003,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9551.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9551.jpg?w=768" alt="" class="wp-image-3003" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>These are two different types I have, but there are many others you can pick from. On the left is a pair of wedges, they seem similar to door stops. They are nice because you can spread them out for any size laptop, and raise the laptop to different heights.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the right is a riser that folds up nice and small, but the legs can extend out for whatever size you want. The L shapes on the front (closest to the lower edge of the photo) keep the laptop from sliding off. Note, if you have an extremely thin laptop your wrists may brush against the tops of the Ls.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Either way, it can raise your keyboard up and make it much more comfortable and ergonomic for typing, especially for long periods of time.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Which End is Up?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Cables ends like USB-C or Apple's lightning are a real blessing as you don't have to figure out which end is up. Micro-USB however, is another story.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I'm sure you are aware, Micro-USB has one edge longer than the other. As I've aged, with my poor old eyes it can be hard for me to tell which side is the longer one, especially in dim light. I've come up with a simple solution though.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3007,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9553.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9553.jpg?w=768" alt="" class="wp-image-3007" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>I've taken a silver Sharpie marker, and drawn a line on the side of the cable that corresponds to the long side of the connector. For white cables, I use a black Sharpie. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For the devices I plug into, I draw a corresponding line where the long side plugs into.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3009,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9552.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9552.jpg?w=768" alt="" class="wp-image-3009" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here you can see I've drawn a black line by the port where the long side of the Micro-USB goes. This makes it extremely easy to plug my Micro-USB cables into the various devices I use, I just align the two lines and away I go, quick and easy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You could also decide to draw the line on the short side of the Micro-USB connector, rather than the long side. Just be consistent once you make the choice.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition to silver and black, I've found the orange and red Sharpie markers work pretty well too.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>I'm a Big Fan</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One last piece of gear I keep in my bag is a small fan.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3012,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/02/img_9554.jpg"><img src="https://arcanecode.files.wordpress.com/2021/02/img_9554.jpg?w=768" alt="" class="wp-image-3012" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This fan has a battery and can be recharged over Micro-USB. As a matter of fact the previous photo is the back of this fan.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I can't tell you how many stuffy conference rooms I've been stuck in. At my local coffee shop, sometimes sitting in front of the window can get really  hot when the afternoon sun starts coming in. Even a small fan like this can make a huge difference.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This fan is small, about the size of my hand (although I admit I've got big hands). I like this model, it has three speeds and can run even when the battery is being recharged. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These fans come in a variety of sizes, shapes, and prices, so pick one that fits your budget and laptop bag.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this article I've laid out a few tips that I hope will make your life a bit easier, and help get your tech gear organized.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you have tips and tricks you want to share do so in the comments below, or let me know if you'd like to see more blog posts like these.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2985</wp:post_id>
  <wp:post_date>2021-03-01 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-03-01 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-02-24 15:30:45</wp:post_modified>
  <wp:post_modified_gmt>2021-02-24 21:30:45</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tips-for-the-disorganized-laptop-traveler</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="accesories"><![CDATA[Accesories]]></category>
  <category domain="category" nicename="hardware"><![CDATA[Hardware]]></category>
  <category domain="post_tag" nicename="laptop"><![CDATA[Laptop]]></category>
  <category domain="post_tag" nicename="organization"><![CDATA[Organization]]></category>
  <category domain="post_tag" nicename="travel"><![CDATA[Travel]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3007]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[55416581159]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1614614440]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1366418116016824322";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2103952886414532";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>163581</wp:comment_id>
    <wp:comment_author><![CDATA[Rob]]></wp:comment_author>
    <wp:comment_author_email>robbiems89@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://ivci.com/</wp:comment_author_url>
    <wp:comment_author_IP>173.3.28.20</wp:comment_author_IP>
    <wp:comment_date>2021-03-05 10:07:11</wp:comment_date>
    <wp:comment_date_gmt>2021-03-05 16:07:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[When you're traveling with a laptop in tow, it's always important to invest in a messenger bag with several compartments. These ensure that everything from chargers to headphones and beyond will be stored neatly and become less likely to be lost.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1614960432.178184;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1614973420]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1614964325.627462;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1614973420]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1614973420.555467;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Sharing a Drive Between Windows, macOS and Linux]]></title>
  <link>http://arcanecode.com/2021/03/08/sharing-a-drive-between-windows-macos-and-linux/</link>
  <pubDate>Mon, 08 Mar 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3034</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I have a lot of computers, on which I use a variety of operating systems. Some run Windows 10, my Apple macBooks all run macOS, and on others I have a variety of Linux distros, primarily Ubuntu based.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I would like the ability to share external drives, such as thumb drives or external SSD drives, between them. To get that compatibility across OS's, I need to format those drives in a file format called exFAT.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>exFAT is a replacement for the older FAT32, but has the benefits of other file systems such as NTFS. I can have long file names, and store files bigger than four gigabytes in size to name a few.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Windows and macOS both support exFAT out of the box. I can just plug in an exFAT drive into them, and both will let me read and write to them. (Note that not all drives come formatted as exFAT, you may need to reformat them to the exFAT system). Linux, however is another story.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To allow Linux to read an exFAT drive you need to install the exfat-utils utility. On Ubuntu based distros it's pretty easy, just open up a terminal and enter the following command, all on one line.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">sudo apt-get install exfat-fuse exfat-utils</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>For other distros you can use their native installer, such as yum, to install the exfat-utils. After that you can simply plug an exFAT thumb drive or SSD into your Linux box and it will know how to read and write to the drive.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3034</wp:post_id>
  <wp:post_date>2021-03-08 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-03-08 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-02-27 18:09:42</wp:post_modified>
  <wp:post_modified_gmt>2021-02-28 00:09:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sharing-a-drive-between-windows-macos-and-linux</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="exfat"><![CDATA[exFAT]]></category>
  <category domain="post_tag" nicename="exfat-utils"><![CDATA[exfat-utils]]></category>
  <category domain="category" nicename="hardware"><![CDATA[Hardware]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="macos"><![CDATA[macOS]]></category>
  <category domain="post_tag" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1368954851225436160";}s:8:"facebook";a:1:{i:25585797;s:53:"https://facebook.com/711316812344820_2109502245859596";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[55696720551]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1615219246]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[2995]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>163597</wp:comment_id>
    <wp:comment_author><![CDATA[Formatting A Drive as exFAT on Windows, macOS and Linux | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/03/09/formatting-a-drive-as-exfat-on-windows-macos-and-linux/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.168</wp:comment_author_IP>
    <wp:comment_date>2021-03-09 21:21:13</wp:comment_date>
    <wp:comment_date_gmt>2021-03-10 03:21:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my previous blog post, Sharing a Drive Between Windows, macOS and Linux, I described how to setup the three operating systems to read a drive that had been formatted as [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1615346473.900687;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1615351439.416489;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1617402495]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1617402495.484829;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Working From Home - Permanently]]></title>
  <link>http://arcanecode.com/2021/03/22/working-from-home-permanently/</link>
  <pubDate>Mon, 22 Mar 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3040</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When the current COVID crisis hit, there were a lot of posts and questions about working from home. But of late I'm seeing an interesting trend of posts on social media from people who have been working from home, but were just told they'll be working from home <em>permanently</em>. They will never return to the office, at least that of their current employer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These folks have been "getting by" with temporary setups. Using a laptop on the kitchen table, or on a desk in the corner of the bedroom. Now that they've been told this will be a permanent situation, they are looking for suggestions and advice on how to setup a permanent home work area.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As someone who has worked from home for the majority of the last decade, I thought I'd share a few tips and tricks. Granted some of these may seem obvious, but since the questions are being asked I'm hopeful at least one or two of my suggestions may help the new breed of work-from-home people.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some of these suggestions involve tech, but some also involve your daily workflow. Let's get started!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Multiple Monitors</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3046,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/wfh-monitors.jpg"><img src="https://arcanecode.files.wordpress.com/2021/03/wfh-monitors.jpg?w=1024" alt="" class="wp-image-3046" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>One of the best things you can do is have more than one monitor. Now granted, I went a bit over the top having a rack with six monitors, as you can see above.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my case I do a lot of video recording and editing for all of <a rel="noreferrer noopener" href="https://www.pluralsight.com/authors/robert-cain" target="_blank">my Pluralsight courses</a>. In the big 32 inch monitor at the bottom center I hold the content I'm recording. In the lower right I put my notes that pertain to what I'm recording. The left side gets my recording software.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the upper left I put my audio editing software. Upper right gets my web browser so I can quickly look things up that may arise as I record. Finally the upper middle is for miscellaneous stuff.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Having six monitors has increased my workflow as I don't have to cycle through applications, everything is right there where I can see it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I admit, most people don't need this setup. However I would suggest at least two monitors, or even better three, as an ideal work setup. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If your main machine is a laptop you should have at least one external monitor port. You can get more through either an external GPU box (if your laptop supports it) or one of the many USB-to-Video adapters on the market. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most monitors support multiple inputs, and you can use buttons on the monitor to swap between inputs (in my case, multiple laptops).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As an alternative to multiple monitors, I'm also seeing people using a 4K TV. The 4K resolution amounts to having four 1920x1080 monitors in a square. Using software like the <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/windows/powertoys/" target="_blank">Windows PowerToys </a>you can easily snap an application to one of the four areas, or you can use the full area when you want to.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Racking Your Laptops</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3050,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/wfh-laptops.jpg"><img src="https://arcanecode.files.wordpress.com/2021/03/wfh-laptops.jpg?w=331" alt="" class="wp-image-3050" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>I use multiple laptops, as I work in multiple environments. I have a Lenovo P51 on the bottom, in the middle is my Apple MacBook. On top is another Lenovo that I am running Linux Kubuntu KDE Neon on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My laptops are stacked on a wire shelf that I got from my local big box store. I like the wire rack as it helps with air flow around the computers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I really like these shelves, they are affordable, easy to configure, and hold a lot of weight. My home office doubles as my "ham shack" (amateur radio), here's a shot of the back wall and a little bit of the side.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3054,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/wfh-rack-1.jpg"><img src="https://arcanecode.files.wordpress.com/2021/03/wfh-rack-1.jpg?w=960" alt="" class="wp-image-3054" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The wire racks on the back wall hold my antique radios as well as some of my "antique" or classic computers like my Commodore 128 or the older "egg bowl" Mac. To the right of the Mac are my modern ham radios.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I use zip ties to hold each tower together so it winds up being a solid unit. Just be sure to have good, sturdy tables that hold a lot of weight.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Get A Good Keyboard</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3056,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/wfh-keyboard.jpg"><img src="https://arcanecode.files.wordpress.com/2021/03/wfh-keyboard.jpg?w=1024" alt="" class="wp-image-3056" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You are on your computer all day, and most laptop keyboards are not that great. (Although I do love the keyboard on my Lenovo P51). Using a bad keyboard can lead to many health issues with your hands. In addition, if you have multiple monitors using an external keyboard makes it much easier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This keyboard is part of the Logitech line which (although it's a bit hard to tell from my mediocre pic) does have a slight curve to it making it more ergonomic. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The big thing for me is the ability to Bluetooth connect it to multiple computers. This is connected to the three laptops you saw in a previous pic. I can just use the 1, 2, and 3 keys to quickly swap between computers (I use the buttons on the monitors buttons to swap inputs between the three laptops).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As someone who has suffered from hand issues, I find a regular mouse painful to use after a while. For years I've been a fan of the Logitech trackballs. I was amazed at how quickly I became used to them. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Pictured is a Logitech MX Ergo, which unfortunately can only pair to two computers so I have another older model trackball for use with the third machine.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You may wonder about the scrap of a yellow post it note over two of the keys. I work in PowerShell within VSCode a lot, and frequently use the F5 and F8 keys. I'm also one of those people who likes to work with the lights on very low, and with my old eyes distinguishing between the function keys can be difficult.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using the little scrap of post it notes can make it easy for me to find my often used F5/F8 keys.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Use A Good Headset</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Do you participate in online calls (Zoom, Skype, etc.) all day? Then for crying out loud, get a good headset!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It drives me nuts to be in meetings with people who use the built in mic and speakers on their laptop. These are NOT quality, and often sound like the person is in the bottom of a barrel. A very echo-ey barrel.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The wired earbuds some people use are a little better, but not by much. The microphone is tiny and comes across as very "tinny" for lack of a better word.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3058,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/wfh-headset.jpg"><img src="https://arcanecode.files.wordpress.com/2021/03/wfh-headset.jpg?w=684" alt="" class="wp-image-3058" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>My headset of choice is the HyperX Cloud Stinger Core Wireless. You can get them from both <a rel="noreferrer noopener" href="https://www.bestbuy.com/site/hyperx-cloud-stinger-core-wireless-7-1-surround-sound-gaming-headset-for-pc-black/6407588.p?skuId=6407588" target="_blank">Best Buy </a>and <a rel="noreferrer noopener" href="https://www.amazon.com/HyperX-Cloud-Stinger-Core-Lightweight/dp/B08634653D/ref=sr_1_1_sspa?dchild=1&amp;keywords=HyperX+-+Cloud+Stinger+Core+Wireless+gaming+headset&amp;qid=1615245538&amp;sr=8-1-spons&amp;psc=1&amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFBM0MzTDlBVTA2N0kmZW5jcnlwdGVkSWQ9QTAxMTIxMTUyNlFRQTlCM0NNRFMxJmVuY3J5cHRlZEFkSWQ9QTAzMTI3MTMyUk1VOUVKNUdVRkpOJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==" target="_blank">Amazon</a>, for about $80 (US currency). They have two big advantages over other headsets.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, they are wireless. Drives me nuts to have a wire I can easily get tangled up in. Plus, and I admit this is a duh moment, I've stood up multiple times with the old wired headsets forgetting about the wire and jerking the headset off my head.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, and more important, is the muting. To mute my microphone, all I have to do is lift the boom up. That's it, no having to fumble for a button on the headset. Just lift it up, it's muted, lower it back down and people can hear me. It makes calls so much easier, I can hear people clearly, and they have clear audio of me.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>They are so good I use them on a weekly <a rel="noreferrer noopener" href="https://www.youtube.com/channel/UC4qYM4ZIwaEKg0Ti0ah-OJA" target="_blank">Minecraft stream </a>my friend Marc runs on YouTube. (I participate as ArcaneMining). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I will add, for recording my Pluralsight videos I use a Yeti podcaster microphone on a large boom arm. It gives excellent quality, however that is very much overkill (unless of course you are also recording Pluralsight videos).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Trust me, you will have a much better experience and the people you meet with will thank you. Plus they are at a price point that makes them affordable to most people.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Along with the headset also consider an external camera. While most laptop cameras are decent, I really get tired of looking up people's noses during a call. You can place it on top of your external monitor for a much better view.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm fond of my Logitech C922, runs about $100 on <a href="https://www.amazon.com/Logitech-Stream-Streaming-Recording-Included/dp/B01MTTMPKT/ref=sr_1_3?crid=3ICYOVY35G9DZ&amp;dchild=1&amp;keywords=logitech+c922&amp;qid=1615428083&amp;sprefix=logit%2Caps%2C274&amp;sr=8-3" target="_blank" rel="noreferrer noopener">Amazon</a>, but there are many similar cameras of good quality.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Isolate Yourself</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now we'll shift from tech to workflow related items. The first of these is to isolate yourself.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you live alone this is easy, but if you have a bunch of people in your house it can be important to find a place you can isolate and have quiet time to think. Put your home office in a place where you can close the door, and make it understood when the door is closed to consider it a "do not disturb" sign.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I can understand there will be situations where you can't isolate all day. But try to find set times where it's clear to others in your household that you should be left alone. When the door is open, they are free to come in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Not only will this make you more productive, but it will avoid embarrassing situations like a kid running through the background of a Zoom call in only their underwear.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Move</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It's important you take breaks through the day to move. To get up from your desk and walk around. I know personally I will get so focused on what I'm doing that time flies by, then I realize three hours have flown by without me moving from my chair. When I finally stand up, well my creaky old man body reminds me.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Use some kind of app or device to remind you on a regular basis to move. My Apple Watch will buzz every hour reminding me to stand up, and will even track how often I actually do it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are also apps for the various brands of smart phones, plus I'd imagine many freeware apps for your computer. If nothing else get a good old fashioned timer from the kitchen section of your favorite big box store.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another advantage to the wireless headphones I mentioned earlier in this post is the ability to get up and move during an audio call. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Have Laptop Will Travel</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>An advantage of having a laptop for your main computer is it's (surprise) portable!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finding time to work at alternate locations can help keep work enjoyable. Perhaps once a week, take your laptop down to your local coffee shop (assuming it's open), sit and work there with a cup of coffee for a bit. (Hint, good earbuds and music on your phone can help drown out the other noisy patrons.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Go outside! I often carry my laptop onto my back porch to enjoy fresh air and sunshine while I work. There's also a nice park nearby, I sometimes work from there using my phone as a Wi-Fi hotspot.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Don't think you need to stay all day. Sometimes just two or three hours can be energizing and very productive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course this assumes you aren't doing a meeting, but most of us have time in the day or week with no meetings scheduled.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And because you are the go doesn't mean you have to give up multiple monitors.  If you have an iPad, and a modern MacBook the sidecar feature will let you use the iPad as a second monitor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are on Windows, or an older MacBook, there is a nice piece of software called <a rel="noreferrer noopener" href="https://www.duetdisplay.com/" target="_blank">Duet Display </a>that will let you connect your iPad to your computer (via the USB cable) and use it as an external monitor.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If your tablet is Android based, Splashtop offers a free piece of software called <a href="https://www.splashtop.com/wiredxdisplay" target="_blank" rel="noreferrer noopener">Wired XDisplay</a> for both Windows and Mac that enables your Android tablet as an external display.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Set Boundaries</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Of all the pieces of advice I can offer, this by far is the most important.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, set boundaries with others in your household. Make it clear when you are working from home, you are WORKING. Just because you are at the house doesn't mean you can "go ahead and do some laundry", cut the grass, dust, make dinner, or any of the other typical household chores.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This goes for you, as well. When you work, focus on your work. When you are not working is the time for the other chores.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's also important to set boundaries with coworkers. Make sure they understand when you are available for meetings and when you shouldn't be disturbed. Use your company work calendar to indicate when you are available for meetings. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>They also need to understand you can't just hop up on a moments notice to come into the office for "a quick meeting". </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Don't be afraid to say NO! Push back for phone / online meetings. I used to work for a company that let us work from home two days a week. Even though I had it on my work calendar I was constantly having project managers schedule two hour "in person" meetings on my work from home days.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I finally started pushing back, saying I wouldn't be in the office that day but give me a conference call line and I'd be on the call. Of course they'd say "we really want you here".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'd then ask "what value is provided from me being there versus on the phone"? "How will the meeting be different or less productive if I'm on a call?"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If they couldn't provide a good answer, a really good answer, I'd tell them I'll be there on the phone call talk to ya then. (Of course I also had a great boss who supported me, you may not be so lucky.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, set boundaries with your time. Designate the hours you will work each day. When you are working, make it clear to your family you aren't available to do household tasks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When it's outside work hours, make it clear to your coworkers you are off. It is far too easy to wind up working far more hours than you normally would when working in an office. When (for example) 5 pm hits get up and walk away from your computer, and don't go back until the next morning.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post I've shared some tips for people who are moving to a work from home situation based on my years of experience doing just that. I really love working from home, and I think you will as well if you setup a comfortable environment, with the right equipment, and having set boundaries with your family and co-workers.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3040</wp:post_id>
  <wp:post_date>2021-03-22 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-03-22 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-03-10 20:46:25</wp:post_modified>
  <wp:post_modified_gmt>2021-03-11 02:46:25</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>working-from-home-permanently</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="hardware"><![CDATA[Hardware]]></category>
  <category domain="post_tag" nicename="work-from-home"><![CDATA[work from home]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3054]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[56252720688]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1374028352043020294";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_183106463620274";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1616428863]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166182</wp:comment_id>
    <wp:comment_author><![CDATA[Solved: CMD Key Combos Not Working with Logitech K850 and MacOS Monterrey | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/11/09/solved-cmd-key-combos-not-working-with-logitech-k850-and-macos-monterrey/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.79</wp:comment_author_IP>
    <wp:comment_date>2021-11-09 10:00:46</wp:comment_date>
    <wp:comment_date_gmt>2021-11-09 16:00:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] this year I did a blog post, Working From Home &#8211; Permanently, in which I recommend using a good keyboard especially when you have multiple [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636473647.022347;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636478621.413471;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Formatting A Drive as exFAT on Windows, macOS and Linux]]></title>
  <link>http://arcanecode.com/2021/03/15/formatting-a-drive-as-exfat-on-windows-macos-and-linux/</link>
  <pubDate>Mon, 15 Mar 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3078</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my previous blog post, <a rel="noreferrer noopener" href="https://arcanecode.com/2021/03/08/sharing-a-drive-between-windows-macos-and-linux/" target="_blank">Sharing a Drive Between Windows, macOS and Linux</a>, I described how to setup the three operating systems to read a drive that had been formatted as exFAT. The exFAT format is readable by all three, and making it easy to share files between different operating systems. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A natural question that follows is, "how do I format a drive as exFAT?"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this article I'll show how to format an external drive as exFAT. I'll be using an 8gb thumb drive, but I've used this technique with both thumb drives as well as the larger external multi-terabyte hard drives.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Windows</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Windows is the easiest of the three to format a drive for exFAT. First, insert the drive into a USB port. This will typically open the Windows File Explorer, but if not, open it.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3082,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-win-01.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-win-01.png?w=624" alt="" class="wp-image-3082" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now right click on the drive letter for the USB drive, and click on Format. The format dialog will appear.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3084,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-win-02.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-win-02.png?w=253" alt="" class="wp-image-3084" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the second drop down you can pick the file system. Use it to select exFAT. You can also enter a new volume label if you want. Simply click the Start button to kick off the format process.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You will of course get a warning that all the data on the drive will be lost, simply click on OK to proceed.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3086,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-win-03.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-win-03.png?w=455" alt="" class="wp-image-3086" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Once done Windows will let you know. Just click OK and your drive is ready to use.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Apple macOS</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There's a few more steps to formatting a drive to exFAT in macOS, but it's still pretty simple. Start by opening Finder, then go to the Applications. In Applications, open the Utilities folder.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3088,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-01.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-01.png?w=1024" alt="" class="wp-image-3088" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Inside the Utilities, launch the Disk Utility. If you've not done so, connect the USB drive you want to format as exFAT.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3090,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-02.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-02.png?w=1024" alt="" class="wp-image-3090" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>On the left side of the Disk Utility is a list of drives, click on the USB drive in the list.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3092,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-03.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-03.png?w=1024" alt="" class="wp-image-3092" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Above the drive info area are a series of command buttons. Click on the Erase button. Note you need to click on the icon, not the Erase label.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3094,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-04.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-04.png?w=1024" alt="" class="wp-image-3094" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the dialog that appears, you can change the label if you wish. The important box is the Format one. You can use the blue arrow to bring up the list, and change it to exFAT.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once exFAT is selected, you can click the Erase button on the lower right.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3096,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-05.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-macos-05.png?w=1024" alt="" class="wp-image-3096" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Once done, macOS will let you know. Just click Done, and the drive will be ready for you to use.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I've used this technique with macOS versions from High Sierra onward.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Linux</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For this section, I'm using screen shots from my Kubuntu 20.10 computer. The techniques will work with most Ubuntu/Debian based installs. To make it more portable to other versions, we'll do most of it using the command line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note, these instructions assume you've already followed the instructions in my <a rel="noreferrer noopener" href="https://arcanecode.com/2021/03/08/sharing-a-drive-between-windows-macos-and-linux/" target="_blank">previous blog post</a>, and installed the exFAT utilities.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Start by opening up a terminal window, and entering the following command:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>df</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Your output will look something like this:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Filesystem     1K-blocks     Used Available Use% Mounted on
tmpfs             805596     1752    803844   1% /run
/dev/sda2      244568380 18388480 213686844   8% /
tmpfs            4027972      128   4027844   1% /dev/shm
tmpfs               5120        4      5116   1% /run/lock
tmpfs               4096        0      4096   0% /sys/fs/cgroup
/dev/sda1         523248     7984    515264   2% /boot/efi
tmpfs             805592      108    805484   1% /run/user/1000
/dev/sdb1        7815648       96   7815552   1% /media/arcanecode/4ECB-E340</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>For this exercise, I'll be using the <code>/dev/sdb1</code> drive which is my 8gb thumb drive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Before we can proceed, we'll have to unmount the drive. The command is simple.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo umount /dev/sdb1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now that the drive has been unmounted, we can format it using the <code>mkfs </code>utility.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo mkfs.exfat /dev/sdb1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Once formatting is complete, we can check its status using the <code>fsck </code>command.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo fsck /dev/sdb1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Your output will vary depending on the drive you formatted, but it will resemble something like this:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>fsck from util-linux 2.36
exfatfsck 1.3.0
Checking file system on /dev/sdb1.
File system version           1.0
Sector size                 512 bytes
Cluster size                 32 KB
Volume size                7633 MB
Used space                 3041 KB
Available space            7631 MB
Totally 1 directories and 3 files.
File system checking finished. No errors found.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>A benefit of using <code>fsck </code>is that will also remount the drive for you, making it ready to use.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can verify it again using your systems file explorer. Here I'm using Dolphin, the explorer built into Kubuntu. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3103,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-kubuntu-02.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-kubuntu-02.png?w=856" alt="" class="wp-image-3103" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Navigate to the drive, right click on it, and pick Properties.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3105,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/format-exfat-kubuntu-03.png"><img src="https://arcanecode.files.wordpress.com/2021/03/format-exfat-kubuntu-03.png?w=457" alt="" class="wp-image-3105" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the properties window it will show you the file system. As you can see, it has been formatted to exFAT.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we saw how to format a drive for exFAT on three operating systems. You can now format a drive using any of the OS's, and be able to use it across all of them.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3078</wp:post_id>
  <wp:post_date>2021-03-15 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-03-15 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-03-09 21:21:15</wp:post_modified>
  <wp:post_modified_gmt>2021-03-10 03:21:15</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>formatting-a-drive-as-exfat-on-windows-macos-and-linux</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="post_tag" nicename="exfat"><![CDATA[exFAT]]></category>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="macos"><![CDATA[macOS]]></category>
  <category domain="category" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1615824012]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[55970089431]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1369488480045260801";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_174908541106733";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3092]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Expanding The Size of a Hyper-V Virtual Disk]]></title>
  <link>http://arcanecode.com/2021/03/29/expanding-the-size-of-a-hyper-v-virtual-disk/</link>
  <pubDate>Mon, 29 Mar 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3116</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are tasks that we all do, but rarely. It's helpful to have a reference to go back to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Expanding the size of a Virtual Hard Disk, or VHDX file, is one of those. I use Hyper-V quite a bit to create virtual machines for testing, development, and the like. Every so often though I'll underestimate the amount of space I'll need for a machine.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As it turns out expanding the drive size isn't terribly difficult, but there's quite a few steps involved. This post will server as a reminder to myself, and hopefully guide others, in expanding the size of a VM drive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll break this into two parts. In the first half, we'll see how to expand the drive within Hyper-V. This will expand the VHDX file to a new larger size.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the second half, we'll go into the Windows running in the VM to tell it to use the newly expanded space.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Expanding the Drive in Hyper-V</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Begin by opening Hyper-V. In the Hyper-V manager, click on <em>Edit Disk </em>in the Actions.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3121,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-01.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-01.png?w=1024" alt="" class="wp-image-3121" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This will open the <strong>Edit Virtual Hard Disk Wizard</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3123,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-02.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-02.png?w=709" alt="" class="wp-image-3123" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If this is the first time you've run the wizard, you'll see a welcoming screen. If you see this, I'd suggest clicking on "<strong>Do not show this page again</strong>" and clicking <em>Next</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3125,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-03.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-03.png?w=709" alt="" class="wp-image-3125" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now use the <em>Browse...</em> button to locate the VHDX file you wish to modify. Once you've done that, click <em>Next</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3127,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-04.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-04.png?w=709" alt="" class="wp-image-3127" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now we'll select the action, in this case we'll pick the <strong>Expand </strong>option and click <em>Next</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3129,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-05.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-05.png?w=709" alt="" class="wp-image-3129" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now we'll enter a new size for the drive. It shows the current size as 250 GB, so I've entered 500 so I can double the size. Obviously you'll enter a size appropriate to your needs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once done, click <em>Next</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3131,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-06.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-06.png?w=709" alt="" class="wp-image-3131" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>On the final page of the wizard it shows what is about to happen. It lists the name of the VHDX file we're working on, what the action is (Expand), and what the size will be of the new drive. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Just click <em>Finish </em>and the VHDX file will be updated.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Accessing The Expanded Space in Windows</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this example we'll be using Windows 10 inside our Virtual Machine. Go ahead and start, then connect to your Windows 10 Virtual Machine.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you go into File Explorer you'll see something interesting.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3135,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-07.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-07.png?w=326" alt="" class="wp-image-3135" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Even though we expanded the VHDX to 500 GB, our virtual machine still thinks the C drive is 249 GB. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What we need to do is expand the already existing drive into the newly allocated space.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3137,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-08.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-08.png?w=388" alt="" class="wp-image-3137" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the Windows 10 menu, go down to <strong>Windows Administrative Tools</strong>, then pick <strong>Computer Management</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3139,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-09.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-09.png?w=978" alt="" class="wp-image-3139" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Computer Management window has a tree on the left. If the Storage tree is not expanded, do so and click on the <strong>Disk Management </strong>branch.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the screen capture above, you can see the orange arrow is pointing to the existing C drive area. To the right of that a green arrow points to the newly added but still unallocated space.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Right click in the C: drive area, and in the menu that appears select <em>Extend Volume…</em></p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3141,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-10.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-10.png?w=495" alt="" class="wp-image-3141" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The <strong>Extend Volume Wizard</strong> now appears, just click <em>Next </em>to proceed past the welcome screen.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3142,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-11.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-11.png?w=494" alt="" class="wp-image-3142" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>By default the wizard will put the only unallocated partition in the selected area, but if you have more than one unallocated partition you can select a different one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At the bottom, the "Total volume size will" show the total amount of space on the new drive, once the unallocated space has been added.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next line shows the maximum space in the unallocated partition.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final line allows you to select the total amount of space to pull from the unallocated area. By default it is set to the max space in the unallocated area, but if for some reason you want to save some of that you can lower the amount.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this case I'll take the default options and click <em>Next</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3145,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-12.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-12.png?w=496" alt="" class="wp-image-3145" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You've now reached the final screen of the wizard, just click <em>Finish </em>to have it do its work.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3147,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-13.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-13.png?w=970" alt="" class="wp-image-3147" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Computer Management window now shows the expanded C drive. You can now close the Computer Management window.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you go back to the File Explorer and refresh it, your C drive will now show the new size.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3149,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-14.png"><img src="https://arcanecode.files.wordpress.com/2021/03/expand-hyper-v-disk-14.png?w=319" alt="" class="wp-image-3149" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this article, we expanded the size of a Hyper-V virtual hard disk (VHDX) that hosted a Windows 10 installation. As you saw, it was pretty simple to do, but did require a few steps.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Hopefully you'll find this useful in working with your Hyper-V machines.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3116</wp:post_id>
  <wp:post_date>2021-03-29 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-03-29 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-03-10 21:51:30</wp:post_modified>
  <wp:post_modified_gmt>2021-03-11 03:51:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>expanding-the-size-of-a-hyper-v-virtual-disk</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hyper-v"><![CDATA[Hyper-V]]></category>
  <category domain="post_tag" nicename="vhdx"><![CDATA[VHDX]]></category>
  <category domain="post_tag" nicename="virtual-machine"><![CDATA[Virtual Machine]]></category>
  <category domain="category" nicename="virtualization"><![CDATA[Virtualization]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3139]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[56532484966]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1617033614]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1376564868980092935";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_187707639826823";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Solving "An error happened while reading data from the provider" When Connecting to SQL Server From Visual Studio 2019]]></title>
  <link>http://arcanecode.com/2021/04/05/solving-an-error-happened-while-reading-data-from-the-provider-when-connecting-to-sql-server-from-visual-studio-2019/</link>
  <pubDate>Mon, 05 Apr 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3157</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Recently I was working on a SQL Server Analysis Services Tabular project in Visual Studio 2019. In attempting to connect to a SQL Server database to import data, I got the following error.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>An error happened while reading data from the provider: 'Could not load file or assembly 'System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. Either a required impersonation level was not provided, or the provided impersonation level is invalid. (Exception from HRESULT: 0x80070542)'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's see the steps I went through to get to this point...</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Reproducing the Error</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Start by opening your SSAS Tabular project in Visual Studio 2019. In the Tabular Model Explorer, right click on <em>Data Sources</em>, then pick <em>New Data Source</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the <strong>Get Data </strong>window, pick <em>Database</em>, then "<em>SQL Server database</em>" and click <em>Connect</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the "<em>SQL Server database</em>" window, enter the name of the server, for example "localhost". Click <em>OK</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the credential window, with the default of Windows credential, use <em>Impersonate Account </em>for the <em>Impersonation Mode</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Enter your credentials and click <em>OK</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You get a dialog titled "<strong>Unable to connect</strong>". </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3162,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/ssas-tabular-connection-issue-01.png"><img src="https://arcanecode.files.wordpress.com/2021/04/ssas-tabular-connection-issue-01.png?w=458" alt="" class="wp-image-3162" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You get this, despite knowing you've entered your credentials correctly. I actually found the solution in a PowerBI issue on Stack Overflow, they were having a similar problem.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Solution</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The solution, as it turned out, worked for both PowerBI and Visual Studio 2019. Simply run Visual Studio 2019 in administrator mode.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3165,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/ssas-tabular-connection-issue-02.png"><img src="https://arcanecode.files.wordpress.com/2021/04/ssas-tabular-connection-issue-02.png?w=365" alt="" class="wp-image-3165" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the pic above, I have VS2019 in my toolbar. I right clicked on the icon, then in the menu right clicked on Visual Studio 2019. I then picked the <strong>Run as administrator </strong>option.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Following the steps in the Reproducing... section above I entered my credentials and clicked OK.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After clicking on OK, instead of the error I got an Encryption Support error, that it was unable to connect using an encrypted connection. I believe that was because, in my case, Visual Studio and SQL Server are both on the same box, in a development VM. As such, I'd not bothered with the overhead of setting up encrypted connection support in SQL Server. In this case I was OK with that so just clicked OK.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now the Navigator window appeared, and I was able pick a database to import from.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I hope this simple fix works for you. I know I spent forever looking for an answer, and was lucky that trying the same solution that worked for PowerBI, running in admin mode, also worked for Visual Studio 2019.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Solving the "Error Authenticating" when Impersonating an Account for SSAS Tabular in Visual Studio 2019]]></excerpt:encoded>
  <wp:post_id>3157</wp:post_id>
  <wp:post_date>2021-04-05 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-04-05 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-04-02 17:05:04</wp:post_modified>
  <wp:post_modified_gmt>2021-04-02 23:05:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>solving-an-error-happened-while-reading-data-from-the-provider-when-connecting-to-sql-server-from-visual-studio-2019</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powerbi"><![CDATA[PowerBI]]></category>
  <category domain="category" nicename="sql-server"><![CDATA[SQL Server]]></category>
  <category domain="post_tag" nicename="sql-server-2019"><![CDATA[SQL Server 2019]]></category>
  <category domain="category" nicename="sql-server-analysis-services"><![CDATA[SQL Server Analysis Services]]></category>
  <category domain="category" nicename="ssas"><![CDATA[SSAS]]></category>
  <category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
  <category domain="post_tag" nicename="visual-studio-2019"><![CDATA[Visual Studio 2019]]></category>
  <category domain="post_tag" nicename="vs2019"><![CDATA[VS2019]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3162]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[56806456200]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1617638429]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1379101647436136453";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_192198169377770";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167420</wp:comment_id>
    <wp:comment_author><![CDATA[jones]]></wp:comment_author>
    <wp:comment_author_email>fishinlobbys@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.144.49.109</wp:comment_author_IP>
    <wp:comment_date>2022-03-17 00:48:05</wp:comment_date>
    <wp:comment_date_gmt>2022-03-17 06:48:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You're a lifesaver Arcane. Thank you for making this post. Frustatingly trying to figure out what's wrong with my local server. I'm a student.

For those who may read it in the years to come and learning local server...

1. Make sure your local db in ssms accepts sql server log in. Right click your server in ssms&gt;properties&gt;security tab&gt;select SQL Server and Window Authentication mode.
2. Set up your system admin account. Click Security folder&gt;Logins&gt;SA&gt;properties&gt;set password&gt;status tab&gt;enable login.
3. Log in SSAS. Data Sources&gt;SQL Server DB&gt;enter db name, next&gt;Go to Databases Tab (not the Window Tab you land in)&gt;enter SA as user and your password.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1647503450.814719;s:5:"event";s:9:"check-ham";s:4:"user";s:23:"amateurhourstudiosfilms";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1647499686.612515;s:5:"event";s:9:"check-ham";s:4:"user";s:23:"amateurhourstudiosfilms";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:17:{s:14:"comment_author";s:5:"jones";s:20:"comment_author_email";s:22:"fishinlobbys@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:664:"You're a lifesaver Arcane. Thank you for making this post. Frustatingly trying to figure out what's wrong with my local server. I'm a student.

For those who may read it in the years to come and learning local server...

1. Make sure your local db in ssms accepts sql server log in. Right click your server in ssms>properties>security tab>select SQL Server and Window Authentication mode.
2. Set up your system admin account. Click Security folder>Logins>SA>properties>set password>status tab>enable login.
3. Log in SSAS. Data Sources>SQL Server DB>enter db name, next>Go to Databases Tab (not the Window Tab you land in)>enter SA as user and your password.";s:12:"comment_type";s:0:"";s:7:"user_ID";i:0;s:7:"user_id";i:0;s:17:"comment_author_IP";s:13:"68.144.49.109";s:13:"comment_agent";s:114:"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36";s:7:"user_ip";s:13:"68.144.49.109";s:10:"user_agent";s:114:"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36";s:4:"blog";s:31:"http://arcanecode.wordpress.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:161:"https://arcanecode.wordpress.com/2021/04/05/solving-an-error-happened-while-reading-data-from-the-provider-when-connecting-to-sql-server-from-visual-studio-2019/";s:19:"POST_ak_hp_textarea";s:0:"";s:10:"POST_ak_js";s:13:"1647499166650";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165151</wp:comment_id>
    <wp:comment_author><![CDATA[arcanecode]]></wp:comment_author>
    <wp:comment_author_email>arcanecode@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://arcanecode.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>107.77.235.118</wp:comment_author_IP>
    <wp:comment_date>2021-07-28 14:25:58</wp:comment_date>
    <wp:comment_date_gmt>2021-07-28 20:25:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I agree, but it was the only way I found to work around the issue. I'm always open to other solutions.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>comment</wp:comment_type>
    <wp:comment_parent>164780</wp:comment_parent>
    <wp:comment_user_id>344266</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1627503958]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1627503958]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1627503958.929706;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>164780</wp:comment_id>
    <wp:comment_author><![CDATA[Alejandro Mihanovich]]></wp:comment_author>
    <wp:comment_author_email>amihanov@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>191.85.168.235</wp:comment_author_IP>
    <wp:comment_date>2021-06-11 08:11:52</wp:comment_date>
    <wp:comment_date_gmt>2021-06-11 14:11:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It makes no sense to run as an admin only to connect to a local database...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623425986.88534;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623420712.871519;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1627503910]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1627503910]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1627503911.007893;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166205</wp:comment_id>
    <wp:comment_author><![CDATA[O'Boise]]></wp:comment_author>
    <wp:comment_author_email>gluthb@co.larimer.co.us</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>165.225.10.92</wp:comment_author_IP>
    <wp:comment_date>2021-11-11 09:28:09</wp:comment_date>
    <wp:comment_date_gmt>2021-11-11 15:28:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This led me down a different trail as I'm using excel, but it did work running as administrator. It seems the question is going to be what in the.net framework had its permissions adjusted so that it only runs with the administrator set up. I'm having the same problem with the Microsoft Office excel access my SQL database, if I come up with anything I'll post back here]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636648899.747235;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636644489.472629;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[What is My COM Port?]]></title>
  <link>http://arcanecode.com/2021/04/12/what-is-my-com-port/</link>
  <pubDate>Mon, 12 Apr 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3178</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I'm a ham radio operator, and I recently gave a presentation to my local club on how to program your radio using software. To do this, we need to connect our radios using a USB cable.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most of the radios use a concept called a VCP or Virtual COM Port. You install the VCP driver, then can connect your USB cable to your computer, plug the other end into the radio, and launch the software.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The software will want to know, what is the COM port number you are using. I have a variety of radios, and it seems each cable wants to use a different COM port, and every so often the cable will wind up using a different COM port than it did last time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how do you find out your COM port? Well it's pretty easy if you know where to look.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Finding Your COM Port</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The best place to find this is in the Windows Device Manager. Click on the magnifying glass next to the Start menu icon.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3183,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/what-is-my-com-port-01.png"><img src="https://arcanecode.files.wordpress.com/2021/04/what-is-my-com-port-01.png?w=825" alt="" class="wp-image-3183" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>I have my Windows toolbar set to hide the search entry box, but some systems will have a text box right next to the search. Which ever way yours is configured, start to type "device manager" into the search.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You should see a pop up like you do in the image above when it finds the Device Manager application. Just click on it to run it.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3186,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/what-is-my-com-port-02.png"><img src="https://arcanecode.files.wordpress.com/2021/04/what-is-my-com-port-02.png?w=781" alt="" class="wp-image-3186" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Scroll down in Device Manager until you find the entry for "<strong>Ports (COM &amp; LPT)</strong>". Click the arrow beside it in order to expand the list, and you should now see the COM port for your cable, in this case COM10.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that your cable will need to be plugged in for the entry to appear.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There you go, I told you it was easy, the trick is knowing where to look. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While I did write this with my fellow amateur radio operators in mind, there are all kinds of devices that need to use a COM port to access them from your PC. Using this quick guide you can easily find where to look to get the right COM port number for your situation.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[How to find the COM port your cable wants to use!]]></excerpt:encoded>
  <wp:post_id>3178</wp:post_id>
  <wp:post_date>2021-04-12 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-04-12 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-04-09 16:32:18</wp:post_modified>
  <wp:post_modified_gmt>2021-04-09 22:32:18</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-is-my-com-port</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="com-port"><![CDATA[COM Port]]></category>
  <category domain="post_tag" nicename="ham-radio"><![CDATA[Ham Radio]]></category>
  <category domain="post_tag" nicename="usb"><![CDATA[USB]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <category domain="post_tag" nicename="windows-10"><![CDATA[Windows 10]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3186]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[57079254173]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1618243205]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1381638263505477633";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_196877355576518";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Connecting to SSAS from Report Builder Query Designer - A Connection Cannot Be Made]]></title>
  <link>http://arcanecode.com/2021/04/19/connecting-to-ssas-from-report-builder-query-designer-a-connection-cannot-be-made/</link>
  <pubDate>Mon, 19 Apr 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3191</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Recently I was attempting to create a dataset in the SQL Server Reporting Services Report Portal. I created my data source, then launched Report Builder to create my Dataset.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Report Builder connected to my SQL Server Analysis Services Tabular database OK, the Test Connection button worked, but when I tried to go into the query designer I kept getting the error:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>A connection cannot be made. Ensure that the server is running.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I knew my server was running, I could connect to it and run queries from SSMS (SQL Server Management Studio). I found some solutions that suggested I change my SQL Server Browser service to log on using the Local System account. Tried it, didn't work.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I found another solution recommending I add a firewall rule to allow inbound traffic on port 2383, but no love there either.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Solution</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It turned out it was all related to the way I'd formatted my data source connection string in the SSRS Report Portal. I had entered it as:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Data Source = acdev;initial catalog = WWI-SSAS-Tabular</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When I used the Test Connection button in the Report Portal, it worked fine. It even let me connect when I launched Report Builder. But when I tried to launch the query designer in Report Builder, it gave me the aforementioned error:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> <em>A connection cannot be made. Ensure that the server is running. </em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I came upon my solution by launching Report Builder, and telling it I wanted a data source embedded in my report. On my first attempt I simply copied what you saw above from the Report Builder, and was faced with the same crushing disappointing result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the second try I used the Report Builder feature to actually build my connection string. Report Builder produced:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Data Source=acdev;Initial Catalog=WWI-SSAS-Tabular</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And by golly, it worked! I was able to use the query builder to create a DAX query. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To be sure I was still sane, I went back to the Report Builder and replaced my connection string with the one above. Still in the Report Portal, I added a new Dataset which launched Report Builder. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I picked the Data Source I'd just updated in the Report Portal, and this time I was able to get into query builder, create a new query, and save it back to the server as a dataset.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I can only guess it was the extra spaces around the equal signs that were messing things up. I'd added the spaces thinking it made it a bit more readable. Readable, but as it turns out non-functional. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some of you maybe going "you big dummy" at this point, and perhaps justifiably. I still think it's odd though that the test connection buttons in multiple tools all worked, yet the query designer crashed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Regardless, I'm happy I was finally able to find the solution. I'd spent almost five hours on this, so hopefully this will save you a little time and get you back to creating queries.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3191</wp:post_id>
  <wp:post_date>2021-04-19 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-04-19 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-04-13 11:37:20</wp:post_modified>
  <wp:post_modified_gmt>2021-04-13 17:37:20</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>connecting-to-ssas-from-report-builder-query-designer-a-connection-cannot-be-made</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="connection-string"><![CDATA[Connection String]]></category>
  <category domain="category" nicename="report-builder"><![CDATA[Report Builder]]></category>
  <category domain="category" nicename="sql-server"><![CDATA[SQL Server]]></category>
  <category domain="category" nicename="sql-server-analysis-services"><![CDATA[SQL Server Analysis Services]]></category>
  <category domain="category" nicename="sql-server-reporting-services"><![CDATA[SQL Server Reporting Services]]></category>
  <category domain="category" nicename="ssas"><![CDATA[SSAS]]></category>
  <category domain="category" nicename="ssrs"><![CDATA[SSRS]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>amp_status</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1618848017]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[57350048991]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1384175031589085187";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_201320558465531";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Cut and Copy Fast and Easy with PopClip for macOS]]></title>
  <link>http://arcanecode.com/2021/04/26/cut-and-copy-fast-and-easy-with-popclip-for-macos/</link>
  <pubDate>Mon, 26 Apr 2021 15:06:48 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3202</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Everyone has little tools they find useful, tools that make using their computers easier. Often they are time savers, even ones that only save a second or two will add up over time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I thought I'd spend a few posts talking about some of my favorites. In this first post we'll talk about a tool to make cutting and copying text into the clipboard fast and easy on an Apple Mac - <a href="https://apps.apple.com/us/app/popclip/id445189367?mt=12" target="_blank" rel="noreferrer noopener">PopClip</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>PopClip for macOS</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Cut and / or Copy of text is something we all do a thousand times a day. Even though it's fast action, anything we can do to make it even faster adds up by the end of the day. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the Apple Mac, I found PopClip to be a fantastic tool. It's available in Apple's App store, for the reasonable cost of $12.99.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3207,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/cutcopy001.png"><img src="https://arcanecode.files.wordpress.com/2021/04/cutcopy001.png?w=1024" alt="" class="wp-image-3207" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>So how does it work? Well it's pretty simple. Start by highlighting text, here I've opened the basic text editor on my MacBook and highlighted part of a sentence.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3209,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/cutcopy002.png"><img src="https://arcanecode.files.wordpress.com/2021/04/cutcopy002.png?w=623" alt="" class="wp-image-3209" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When you highlight text, you will see a little toolbar automatically appears or "pops up", without having to right click or take any other action. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here PopClip is giving us the option of cutting and copying the text. I also happened to have something in the clipboard, so the option to paste that in also appears.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The magnifying glass will launch our default browser and use your default search engine and do a search on the selected text.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>But wait, there's more!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In addition to the standard cut / copy / paste, PopClip offers a vast array of extensions. In the following screen shot, I've added the braces extension.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3211,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/cutcopy003.png"><img src="https://arcanecode.files.wordpress.com/2021/04/cutcopy003.png?w=623" alt="" class="wp-image-3211" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>With the braces extension added, you can now see additional options added to PopClip's bar. For this shot, instead of clicking copy I'll be clicking on the Square Brackets button.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3213,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/cutcopy004.png"><img src="https://arcanecode.files.wordpress.com/2021/04/cutcopy004.png?w=623" alt="" class="wp-image-3213" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This will copy the the text into my clipboard, adding brackets around it. Then when I paste it, the pasted text now is surrounded by brackets as you can see above.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The braces are just one of over a hundred extensions available to you with PopClip.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I realize it may seem simple, but once you try it you will be amazed at how much nicer cut and copy becomes on your Mac. In addition the vast array of extensions will make other operations you frequently do, such as surrounding text with braces, fast.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the next post we'll look at a similar tool for Windows, then over the next few posts highlight some other tools I find very useful in my daily life.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3202</wp:post_id>
  <wp:post_date>2021-04-26 09:06:48</wp:post_date>
  <wp:post_date_gmt>2021-04-26 15:06:48</wp:post_date_gmt>
  <wp:post_modified>2021-04-26 09:06:48</wp:post_modified>
  <wp:post_modified_gmt>2021-04-26 15:06:48</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cut-and-copy-fast-and-easy-with-popclip-for-macos</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="macos"><![CDATA[macOS]]></category>
  <category domain="post_tag" nicename="productivity"><![CDATA[Productivity]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[57631083645]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3207]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1619449609]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1386698284778106880";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_205613918036195";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>163989</wp:comment_id>
    <wp:comment_author><![CDATA[Cut and Copy Fast and Easy with Pantherbar for Windows | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/05/03/cut-and-copy-fast-and-easy-with-pantherbar-for-windows/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.188</wp:comment_author_IP>
    <wp:comment_date>2021-05-03 10:00:08</wp:comment_date>
    <wp:comment_date_gmt>2021-05-03 16:00:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a previous post, I showed a tool to make Cut and Copy easy on macOS. In this post we&#8217;ll look at a tool, [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1620057608.823434;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1620062668.571084;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1627503669]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1627503669.123619;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Stop Discord from Automatically Running When Windows Starts]]></title>
  <link>http://arcanecode.com/2021/04/29/stop-discord-from-automatically-running-when-windows-starts/</link>
  <pubDate>Thu, 29 Apr 2021 23:01:22 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3216</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I use Discord as part of the weekly YouTube Minecraft stream I participate in, <a rel="noreferrer noopener" href="https://www.youtube.com/user/AdultsOnlyMinecraft" target="_blank">Adults Only Minecraft</a> (which is actually family friendly), run by my friend Marc.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of late though, Discord has been misbehaving. Even though I have it set not to auto load when Windows launches, it ignores the setting and still runs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While I like Discord, I only use it once a week or so, and don't want it running in the background all the time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this bonus post, let's see how to fix this problem.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Check Your Discord Settings</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First, let me state that not everyone is experiencing this issue, or needs the solution I'll outline here. Let's start with the simple solution first.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Open Discord, then your settings. Scroll down to Windows Settings, as you see below.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3219,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/discord001.png"><img src="https://arcanecode.files.wordpress.com/2021/04/discord001.png?w=1024" alt="" class="wp-image-3219" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The toggle, pointed at by the arrow, indicates whether Discord should launch with Windows. If yours is on, and you don't want it to auto launch, just click on it to turn it off as seen in this image.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Exit Discord, reboot, and if Discord does NOT launch, you're done!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my case however, that did not correct the issue. If that was the case for you too, proceed to the next section.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Disabling Discord Autorun in Windows</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the past, people have written instructions to go into Task Manager, expand into the detailed display, go to the Startup tab, and disable Discord. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Over time though, Discord changed things so their application no longer appears here. To fix, we'll need to go download another tool called Autoruns.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Go to <a href="https://sysinternals.com" target="_blank" rel="noreferrer noopener">https://sysinternals.com</a>, this will redirect you to a Microsoft web page (Microsoft bought SysInternals quite a few years back).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once there, click the Downloads link on the left. SysInternals is a rich suite of tools, and you can certainly download all of them, but the only one you need for this task is Autoruns. Simply scroll down until you see it appear.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3222,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/discord002.png"><img src="https://arcanecode.files.wordpress.com/2021/04/discord002.png?w=1024" alt="" class="wp-image-3222" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Click on the link to take you to the Autoruns info page, the download link is at the very top. Click on it to download the Autoruns.zip file to a folder on your hard drive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unzip the contents and it will expand several files. No installation is needed, these will simply run from wherever you put them. If you are on a 64 bit operating system, and pretty much anyone with a modern computer is, the file to double click on is Autoruns64.exe. If you are on an older 32 bit computer, you can run Autoruns.exe.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A little side note, after running the application the listing area uses an incredibly small 4 point font. Easy to fix, in the menu click Options, Font, and pick a bigger font size. For this image I went with a 12 point font.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At the top is a filter box, pointed at by the green arrow in the image below.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3224,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/04/discord003.png"><img src="https://arcanecode.files.wordpress.com/2021/04/discord003.png?w=1024" alt="" class="wp-image-3224" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Enter the word Discord into it. Autoruns should then filter the list to just the entry for Discord.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now simply uncheck the box, pointed at by the orange arrow in the image above.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's it!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OK, you are done. Close Autoruns, and reboot your computer. When you do, Discord should no longer start up automatically.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Discord Updates</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Note, it is always possible after an update from Discord, they will reset this to turn it back on. If you suddenly find Discord starting up again when Windows boots, then just follow the instructions again to disable Discord in the Autoruns app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's also possible at some point in the future Discord may correct this issue. Occasionally, perhaps once a month, check this back on then reboot to see if Discord still launches or not.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Don't get me wrong, I like Discord a lot, and use it weekly. It's a great tool for gaming. However, when I'm not playing Minecraft I don't want it running in the background all the time, taking up resources.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If that's the case for you then hopefully this post will aid you in correcting the issue.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Stop Discord from running automatically when Windows launches.]]></excerpt:encoded>
  <wp:post_id>3216</wp:post_id>
  <wp:post_date>2021-04-29 17:01:22</wp:post_date>
  <wp:post_date_gmt>2021-04-29 23:01:22</wp:post_date_gmt>
  <wp:post_modified>2021-04-29 17:01:22</wp:post_modified>
  <wp:post_modified_gmt>2021-04-29 23:01:22</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>stop-discord-from-automatically-running-when-windows-starts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="discord"><![CDATA[Discord]]></category>
  <category domain="category" nicename="minecraft"><![CDATA[Minecraft]]></category>
  <category domain="category" nicename="sysinternals"><![CDATA[SysInternals]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3219]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[57777305798]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1387904874348691457";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_207730571157863";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1619737284]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166483</wp:comment_id>
    <wp:comment_author><![CDATA[charn]]></wp:comment_author>
    <wp:comment_author_email>Irah9603@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>103.105.101.100</wp:comment_author_IP>
    <wp:comment_date>2021-12-12 20:40:43</wp:comment_date>
    <wp:comment_date_gmt>2021-12-13 02:40:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[thank you, it is very helpful and exact to the problem]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639368535.524;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639363244.12785;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166274</wp:comment_id>
    <wp:comment_author><![CDATA[How To Change Discord To Not Auto Load - DiscordWire]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://discordwire.com/how-to-change-discord-to-not-auto-load/</wp:comment_author_url>
    <wp:comment_author_IP>159.65.177.208</wp:comment_author_IP>
    <wp:comment_date>2021-11-22 22:42:37</wp:comment_date>
    <wp:comment_date_gmt>2021-11-23 04:42:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Stop Discord from Automatically Running When Windows&nbsp;Starts [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637642558.51967;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637647155.572856;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166162</wp:comment_id>
    <wp:comment_author><![CDATA[How To Make Discord Not Launch On Startup - DiscordWire]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://discordwire.com/how-to-make-discord-not-launch-on-startup/</wp:comment_author_url>
    <wp:comment_author_IP>159.65.177.208</wp:comment_author_IP>
    <wp:comment_date>2021-11-07 12:11:58</wp:comment_date>
    <wp:comment_date_gmt>2021-11-07 18:11:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Stop Discord from Automatically Running When Windows&nbsp;Starts [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636308718.696629;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636312805.536706;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166399</wp:comment_id>
    <wp:comment_author><![CDATA[Discord No Longer Starts All Of A Suddcen - DiscordWire]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://discordwire.com/discord-no-longer-starts-all-of-a-suddcen/</wp:comment_author_url>
    <wp:comment_author_IP>159.65.177.208</wp:comment_author_IP>
    <wp:comment_date>2021-11-30 12:46:53</wp:comment_date>
    <wp:comment_date_gmt>2021-11-30 18:46:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Stop Discord from Automatically Running When Windows&nbsp;Starts [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638303388.550932;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638298014.113743;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166209</wp:comment_id>
    <wp:comment_author><![CDATA[How To Stop Discord From Running On Startup - DiscordWire]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://discordwire.com/how-to-stop-discord-from-running-on-startup/</wp:comment_author_url>
    <wp:comment_author_IP>159.65.177.208</wp:comment_author_IP>
    <wp:comment_date>2021-11-11 20:08:02</wp:comment_date>
    <wp:comment_date_gmt>2021-11-12 02:08:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Stop Discord from Automatically Running When Windows&nbsp;Starts [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636682883.424122;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636686902.520349;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Cut and Copy Fast and Easy with Pantherbar for Windows]]></title>
  <link>http://arcanecode.com/2021/05/03/cut-and-copy-fast-and-easy-with-pantherbar-for-windows/</link>
  <pubDate>Mon, 03 May 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3230</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In a <a rel="noreferrer noopener" href="https://arcanecode.com/2021/04/26/cut-and-copy-fast-and-easy-with-popclip-for-macos/" target="_blank">previous post</a>, I showed a tool to make Cut and Copy easy on macOS. In this post we'll look at a tool, Pantherbar, to provide similar capability on Windows.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Pantherbar</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3235,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/cutcopy005.png"><img src="https://arcanecode.files.wordpress.com/2021/05/cutcopy005.png?w=1024" alt="" class="wp-image-3235" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Pantherbar is available in the Microsoft Store. It has a free version, as well as a paid one at the reasonable price of $4.99 (US).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Similar to PopClip when you highlight text, it pops up a toolbar.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3237,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/cutcopy006.png"><img src="https://arcanecode.files.wordpress.com/2021/05/cutcopy006.png?w=658" alt="" class="wp-image-3237" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see from the image above, Pantherbar appears with several icons. The left most is copy, next is cut. If you have anything in the clipboard the paste icon appears next.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The magnifying glass will launch a search in your default browser. By default it is Google, but through the settings you can change the search engine. Finally is the share with windows icon.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Extensions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pantherbar has a rich set of extensions you can add to it. You can view the full list at <a href="http://pantherbar-app.com/extensions" target="_blank" rel="noreferrer noopener">http://pantherbar-app.com/extensions</a> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the free version you can have two extensions active. In the paid version, you can have as many as you want.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this next example, I've loaded three extensions. In the image below I've highlighted some text in notepad.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3241,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/cutcopy007.png"><img src="https://arcanecode.files.wordpress.com/2021/05/cutcopy007.png?w=605" alt="" class="wp-image-3241" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The three new ones on the right are character count (handy for composing a tweet), reverse the text, and remove spaces. In the image below I've clicked the reverse text option.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3243,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/cutcopy008.png"><img src="https://arcanecode.files.wordpress.com/2021/05/cutcopy008.png?w=306" alt="" class="wp-image-3243" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see, the text is reversed immediately, replacing what had been selected.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note this is a little different than the behavior of PopClip on macOS. PopClip copies the modified text to the clipboard. Pantherbar immediately pastes the new text in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To be honest, I prefer this behavior. The majority of the time I'm going to put the corrected text where I had selected, so this saves a few steps.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pantherbar is a useful addition to your Windows toolkit. With its rich set of extensions, you can save a lot of time performing common tasks. You can try it for free, and if you decide to buy the price is very reasonable.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Do note that this, nor the PopClip blog post, are paid posts in anyway. I just like the tools and was happy to pay for them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To my knowledge there is no similar extension on the Linux platform, at least for the Ubuntu based distros I tend to use. As I understand it, the current graphics engine makes this kind of extension difficult. It's hoped though that once the Wayland engine gets into wide spread  use tools similar to Pantherbar or PopClip will become available on Linux.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you know of one that exists, by all means leave a comment. I'd love to check it out!</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3230</wp:post_id>
  <wp:post_date>2021-05-03 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-05-03 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-05-02 22:00:59</wp:post_modified>
  <wp:post_modified_gmt>2021-05-03 04:00:59</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cut-and-copy-fast-and-easy-with-pantherbar-for-windows</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3235]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[57918824785]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1620057606]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1389248413271826435";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_210052234259030";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Microsoft To Do]]></title>
  <link>http://arcanecode.com/2021/05/10/microsoft-to-do/</link>
  <pubDate>Mon, 10 May 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3249</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This post continues my series on useful tools and utilities. Here we'll be covering Microsoft's To Do application.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There's a famous quote "If you don't write it down, it doesn't exist." A "To Do" list is a great way to capture tasks or information you need to remember. Some people use paper, or a variety of other devices or applications. For me, Microsoft To Do is the place to capture this information.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some of you may remember Wunderlist. Microsoft bought Wunderlist a few years back, and have transformed it into Microsoft To Do.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Multi Platform</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I use a variety of devices and platforms on a regular basis. One of the things I find useful about Microsoft To Do is the availability of apps on almost all platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are apps for Windows, macOS, Android, and iOS. On Linux (or other platforms), you can access Microsoft To Do in any web browser. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I also found a <a rel="noreferrer noopener" href="https://www.maketecheasier.com/manage-microsoft-to-do-in-linux/" target="_blank">blog post</a> that describes an application called AO that runs on most Linux distros. It's basically a wrapper around the To Do web page. I use it on my Kubuntu laptop for working with Microsoft To Do.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Using Microsoft To Do</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I'll quickly illustrate the various uses of To Do with some screen shots. (Note that you can see a bigger version of any of these images by clicking on them.) The first one shows the basic layout of To Do.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3256,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/todo001.png"><img src="https://arcanecode.files.wordpress.com/2021/05/todo001.png?w=1024" alt="" class="wp-image-3256" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The default view of To Do is "My Day". To Do allows you to designate tasks for immediate action called "My Day". More on that in a moment, but here you can see one task for a new Pluralsight course I'm currently working on, the SQL Server Mobile Report Publisher.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The menu of actions appears down the left side of the application. To add a new list, simply click the "+ New List button". This is very simple, it just brings up a page and you can start typing in your tasks.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can rearrange the list by clicking and dragging the tasks into any order. Note that by default new tasks are added to the top of the list, but you can go into the settings menu to change this behavior so new tasks are added to the bottom (which is what I do).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Simple Lists</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Microsoft To Do can be used for simple lists. Here you can see a grocery list.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3258,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/todo002.png"><img src="https://arcanecode.files.wordpress.com/2021/05/todo002.png?w=1024" alt="" class="wp-image-3258" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To Do makes generating a grocery list like this easy. I can enter my list on my computer, where I have a full keyboard. To Do then syncs my list to all of my devices. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When I pull out my phone in the grocer store, I can simply mark each item off as I put it in my grocery cart. Completed items are moved to the bottom of the list, making it easy to see the items I still need to get.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When I get home, I can either delete each completed task individually, or right click on the "Completed" header and delete them all at once.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Projects</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another use for To Do is project tracking.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3262,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/todo003.png"><img src="https://arcanecode.files.wordpress.com/2021/05/todo003.png?w=1024" alt="" class="wp-image-3262" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here is the list for my current project, the Mobile Report Publisher course I'm working on. This list is a high level view of the tasks I need to complete for the course.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For each task, I can create a list of sub tasks that need to be completed.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3264,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/todo004.png"><img src="https://arcanecode.files.wordpress.com/2021/05/todo004.png?w=1024" alt="" class="wp-image-3264" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When I click on the task, a pane pops out on the right. I can enter a series of steps for setting up my virtual machine. Installing Win 10, Installing basic tools, and more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is the detailed information for another task in the list, Create Data Source in the Report Portal.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3266,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/todo005.png"><img src="https://arcanecode.files.wordpress.com/2021/05/todo005.png?w=1024" alt="" class="wp-image-3266" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This task only has one step. However, I've clicked on the "Add to My Day" which will add the task to the "My Day" screen To Do opens to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With To Do I can also set a Due Date. To Do makes it easy, I can set it today, tomorrow, next week, or I can pick a specific date. I can also set a reminder, so To Do will remind me when a task is coming up.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I can get an overview of all my tasks with due dates by clicking on the Planned link on the left side of To Do.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3269,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/todo006.png"><img src="https://arcanecode.files.wordpress.com/2021/05/todo006.png?w=1024" alt="" class="wp-image-3269" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here you can see the one task I planned with a due date. The nice thing about the planned tab is that it shows tasks coming due across all your lists. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, I could have assigned a due date for an item in my grocery list so I'd be sure to have an ingredient for a planned meal. Or perhaps I have another list for planned blog posts. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All tasks with due dates that haven't been marked as complete will show up here on planned, making it easy for me to get an overview of upcoming tasks no matter what list they are on.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>To Do and Multiple Accounts</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To Do allows you to manage multiple accounts. By clicking on the account name it will show you a list of all To Do accounts you've logged into.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3272,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/todo007.png"><img src="https://arcanecode.files.wordpress.com/2021/05/todo007.png?w=1024" alt="" class="wp-image-3272" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here you can see I have two accounts logged in, one I use for work, the other for personal items such as grocery lists. This makes it nice as I don't have to mix work and personal lists.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's also useful when I work with multiple clients, when the client provides me an account to use in their organization. I can easily keep each client's task list separate from each other a well as my personal lists.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>List Management</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The final item I'd like to show is list management, accessible by right clicking on a list.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3275,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/todo008.png"><img src="https://arcanecode.files.wordpress.com/2021/05/todo008.png?w=1024" alt="" class="wp-image-3275" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Some items are pretty obvious, such as deleting or renaming a list. You can also duplicate a list, or print it out.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The biggest feature I like is the "Share list" option. You can share a list with another Microsoft To Do user. A good example is the grocery list. I share mine with my entire family. When another family member needs a grocery item, they can simply add it to the list.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There's no need to tell me, or send a text, or anything else. When I get to the store, there's the item on the list. If it's something odd or unusual, they can click on the item and in the pop out pane on the right add a note to the item to explain why it is needed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another use is for small projects with your coworkers. You can assign a task to another person. They will see the task as assigned to them, and as they mark the task, or each step in a task, complete the others that the list has been shared with will be updated automatically.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This makes it nice for a project manager, as they can easily see the teams progress for each task.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As you can see, Microsoft To Do is a great tool for managing lists, or for tracking progress of your smaller projects. The multi-platform capability makes your data easily accessible across any device you are using.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are many more uses you can put To Do to. I've used it for managing home repair projects. I even have some lists for favorite recipes, that list includes the ingredients as well as cooking instructions.  </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you can think of more uses for Microsoft To Do, then by all means leave a comment so we can all learn.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3249</wp:post_id>
  <wp:post_date>2021-05-10 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-05-10 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-05-09 21:13:16</wp:post_modified>
  <wp:post_modified_gmt>2021-05-10 03:13:16</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>microsoft-to-do</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="microsoft"><![CDATA[Microsoft]]></category>
  <category domain="post_tag" nicename="microsoft-to-do"><![CDATA[Microsoft To Do]]></category>
  <category domain="post_tag" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="category" nicename="tools"><![CDATA[Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3256]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[58198642672]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1620662410]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1391785141421420547";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_214535687144018";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>164063</wp:comment_id>
    <wp:comment_author><![CDATA[Standard Notes &#8211; A Secure, Multi Platform Note Taking App | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/05/17/standard-notes-a-secure-multi-platform-note-taking-app/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.10</wp:comment_author_IP>
    <wp:comment_date>2021-05-17 09:00:33</wp:comment_date>
    <wp:comment_date_gmt>2021-05-17 15:00:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] I stated in my previous post on Microsoft To Do, I have a strong preference for apps that work across multiple platforms. Standard Notes has apps [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1621263633.366455;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1621267655.545898;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914165]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914165.831223;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Standard Notes - A Secure, Multi Platform Note Taking App]]></title>
  <link>http://arcanecode.com/2021/05/17/standard-notes-a-secure-multi-platform-note-taking-app/</link>
  <pubDate>Mon, 17 May 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3283</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With this post I'll continue my series on useful tools and utilities. In this post I'll talk about an outstanding application called Standard Notes. You can find and download Standard Notes from its website, <a rel="noreferrer noopener" href="https://standardnotes.org/" target="_blank">https://standardnotes.org/</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now, I know what you are thinking, "Yet another note taking app? What makes this so special?"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well as it turns out a lot. Let me start by covering some of its special characteristics, then we'll get a short overview on how to use it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Multi Platform</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As I stated in my previous post on <a rel="noreferrer noopener" href="https://arcanecode.com/2021/05/10/microsoft-to-do/" target="_blank">Microsoft To Do</a>, I have a strong preference for apps that work across multiple platforms. Standard Notes has apps for Windows, macOS, and almost every Linux Distro. In addition, it also has mobile apps for Android as well as iOS, both phone and tablet.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition, you can also login to the Standard Notes with your web browser and access your notes that way. Handy for when you are using a computer or device that you can't or don't want to install the Standard Notes application on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The notes you enter are synced across all of your devices, much like Microsoft To Do. Enter a note on your Mac, and it will be there on your Android device, or any combination of the platforms I just mentioned.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Open Source</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Standard Notes is an open source project. All of the source code is available for you to inspect, and even contribute to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The syncing ability is handled by Standard Notes using their sync server software. The Standard Notes sync server is also an open source project that you can download. As such you can stand up your own private sync server and use it to sync all of your notes. Very useful if you are super concerned about security, or want to stand up your own Standard Notes server for your companies private use.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This also has some very positive implications to the longevity of Standard Notes. Let's say the owners of Standard Notes win a bazillion dollars in the lottery. They hang up a "going out of business" sign on their website and head off to a remote island in the Bahamas for an early retirement.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You (or your company) could download the server project and spin up your own sync server. You can restore your backup to the new server, make an adjustment in the app to point to your private sync server and you are back in business. This capability should make any business more confident in adopting Standard Notes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I mentioned backups, by default Standard Notes will perform an automated backup on a regular basis. You can (and should!) also do a periodic manual backup via the Account menu.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Encrypted Notes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Speaking of security, the biggest benefit to Standard Notes is encryption.  It uses industry standard encryption, not something they made up themselves.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All of your note data is encrypted on your device. It is then sent to the sync server over an encrypted connection. As Standard Notes doesn't have your password they have no way to decrypt the data. Even if someone got access to their servers, all the data will be gibberish.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>They do make it clear, if you forget your password, they have no way of helping you. You need to make sure to store your password in a safe place like your password vault.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Freemium Model</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Standard Notes uses what is known as a "freemium" model. The base application is free. You can take an unlimited number of notes, and these will be synced for you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the free model, you are restricted to text only  notes. In addition, you are stuck with the basic color scheme of a white or gray background with black text.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With the paid model, you gain access to different color themes. It also enables you to use the rich set of extensions Standard Notes offers. Most of these extensions are around various editors. One is a code editor, that gives syntax highlighting for a huge array of languages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is another editor which gives you a "Word" like environment to do bold, italic, and the like. There is also a MarkDown editor if you prefer to edit and save MarkDown data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another editor I use a lot is the checklist. It lets you create check lists, and once you mark an item complete it moves to the bottom under completed tasks. This can be useful when the contents of your checklist are sensitive and need to be kept extra secure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The premium model is done with subscriptions of 1, 3, and 5 years. The 5 year model works out to less than $3 (US) a month (at the time of this writing), which is very reasonable and funds their sync servers and development.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Setting Up Standard Notes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The Standard Notes website has instructions for downloading and installing it on the variety of platforms it supports, so I will refer you to it for your computer or device.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you open Standard Notes the first time, it will open up with the Account pane. Note that for all the images in this post you can click on it to open up a bigger version.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3293,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/stdnotes001.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/stdnotes001.png?w=1024" alt="" class="wp-image-3293" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You'll need to start by clicking the Register button to create an account. When you do, it will prompt you for an email address and password. It will then send you an email just to confirm you are a real person.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3296,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/stdnotes002.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/stdnotes002.png?w=1024" alt="" class="wp-image-3296" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Note the big <strong>No Password Reset </strong>box, warning you that if you lose your password, there is nothing the Standard Notes group can do to help you. I highly advise the use of a password manager, such as LastPass, which will be the subject of a future blog post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also note that the combination of your email and password is used to generate your security encryption keys. <strong>This means your email address will be case sensitive</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>YourName@email.com, yourname@email.com, and YOURNAME@EMAIL.COM are all different. When you login to your other devices, you must key in both your email address and password in <em>exactly </em>the same case you use to create your account.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Using Standard Notes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here is the Standard Notes app with some sample notes I've created.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3298,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/stdnotes003.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/stdnotes003.png?w=1024" alt="" class="wp-image-3298" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The left side panel is the <strong>Views</strong> panel. You can organize your notes into groups called <strong>Tags</strong> in Standard Notes. You can enter any text you want for a tag name.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Additionally a note can have multiple tags associated with it. This will let the same note appear in multiple tag views.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The center column is the list of notes. If you click on a tag, the list of notes is filtered to show just the ones with that tag. In addition to the name of the note, it also has the first few words of the note and the last date the note was modified on (although you can change this in the settings).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the example above, I have a note called "Harbor Freight Shopping List". Under the title of the note I have two tags, Ham (referring to my Ham Radio hobby) and Lists. I could click in this area to type in the name of another tag if I wish.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this next example, I've clicked on the Household tag in the Views pane.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3301,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/stdnotes004.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/stdnotes004.png?w=1024" alt="" class="wp-image-3301" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see, my list of notes is now reduced to just two, the ones who have the tag Household assigned to them.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Uses for Standard Notes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The uses for Standard Notes are only limited by your imagination. Because your notes are encrypted, you could use it to store information like phone numbers, vehicle VIN numbers, even passwords (although I'd suggest a more robust password manager of some type, such as <a href="https://www.lastpass.com/" target="_blank" rel="noreferrer noopener">LastPass</a>).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It could also be used to store all kinds of tips and tricks. Items that don't necessarily need to be encrypted, but you'd like to store and have handy in the future. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anytime I have to do a search to figure out how to do something, I make a note so I can refer back to it in the future.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Premium Benefits</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As a big fan of Standard Notes, I have purchased the premium subscription. I first did a one year subscription to see if I liked it, but got hooked so when it was time to renew I went with the five year subscription and haven't regretted it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here you can see my Standard Notes paid subscription with one of the color themes applied.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3306,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/stdnotes005.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/stdnotes005.png?w=1024" alt="" class="wp-image-3306" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see from my list of tags on the left, I have a LOT of notes in Standard Notes. Here you can see a PowerShell script to remind me how to use the StringBuilder in PowerShell. I'm using the code editor, and have selected the PowerShell language. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is just one of the many languages available, pretty much every programming language is included.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I also use Standard Notes for check lists, regular notes, and more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition to the editors, the extensions also provide for various color themes, plus a selection of enhancements to Standard Notes. One developers may find useful is the GitHub Push extension, allowing you to push a note up to GitHub.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Want an extension but don't see it? The <a rel="noreferrer noopener" href="https://github.com/standardnotes/" target="_blank">Standard Notes site on GitHub </a>has instructions for authoring your own extensions. This is also where you can access the source code for Standard Notes, the Standard Notes server, and more. You can also log issues, make suggestions for improvements and new features, and check for solutions to past issues.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also note that your premium subscription unlocks the premium features on <em>all </em>of your devices. There is no limit to the number of devices or computers you can have Standard Notes (even with your premium subscription) running on.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Passcode Lock</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another useful feature is the <em>Passcode Lock</em>. This is similar to the pin login feature of Windows 10. You can turn on Passcode Lock in the Account menu area.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you launch Standard Notes it will prompt you for the Passcode Lock. The lock can be any combination of letters, numbers, and special characters you want. I use a long complex gibberish password for my Standard Notes account, but use a little easier to remember and type Passcode Lock.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I consider this a "nosy person" feature. It keeps a nosy family member or coworker from walking up to your computer while you are getting coffee and snooping at what's in your Standard Notes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition, you can set an Autolock timer. After a certain amount of time Standard Notes will lock itself. By default Autolock is set to Off.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It also has an Immediate setting, which locks Standard Notes the minute you click away from it. There are also timers for 1 minute, 5 minutes, and 1 hour.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also remove the Passcode Lock when you decide you no longer need it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On iOS, you can also lock Standard Notes using either Face ID or the Fingerprint reader. I would imagine Android tablets/phones that support biometric security also have this feature, but my Android tablet lacks biometric security so I'm unable to test this.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Other Notable Features</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I just wanted to mention a few other useful features.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You have the ability to sort the list of notes in a variety of ways. By default it uses most recent at the top, but you can also sort alphabetically. You can also reverse the sort so oldest is first, or titles are sorted Z to A.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also <em>Pin </em>notes so they will always appear at the top of the note list, regardless of what sort order you select. In addition to pinning, a note can be <em>Locked</em>, which puts it into a read only state. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also get rid of a note by selecting <em>Move to Trash</em>, then go to the trash can and choose to delete all notes in the trash can or just individual ones.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final feature I'll mention is the ability to <em>Archive </em>a note. Let's say you have a note on how to do something in Ubuntu 16.04. It's highly unlikely you'll need to use this on a normal basis, and don't want to see it cluttering up your list.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, the information is valuable, and on the off chance you may need it you really don't want to trash it. This is where the Archive feature comes in. In any note, simply pick Archive in its Options menu. The note will no longer appear in the list view or searches.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can easily bring it back though. First, in the list view's options menu you can turn on the appearance of Archived notes. Later you can use the same option to again suppress the appearance of Archived notes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you suddenly find that previously archived note is useful, you can pick the note, then in the note editors options menu just <em>Unarchive </em>it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Standard Notes Version</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The instructions in this post are valid at the time I wrote it, using Standard Notes version 3.6.9. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Standard Notes is under continual development, so depending on when you read this there may be some subtle differences between your version and the one I'm using for this post. The core concepts should remain constant though.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Standard Disclaimer</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I just want to be clear this is in no way a paid for post. Nor do I receive any discount for talking about it. I paid my own money for it just like everyone else. I just love the tool and wanted to share it with others.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Give Standard Notes a try. You can do so for free, and I think once you do you will quickly find it an indispensable tool in your kit. It's a tool I use <em>literally </em>every single day.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3283</wp:post_id>
  <wp:post_date>2021-05-17 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-05-17 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-05-16 13:15:31</wp:post_modified>
  <wp:post_modified_gmt>2021-05-16 19:15:31</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>standard-notes-a-secure-multi-platform-note-taking-app</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="post_tag" nicename="standard-notes"><![CDATA[Standard Notes]]></category>
  <category domain="category" nicename="tools"><![CDATA[Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3306]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[58472031789]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1621263631]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1394306845402177540";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_219706483293605";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>164445</wp:comment_id>
    <wp:comment_author><![CDATA[Veracrypt &#8211; A Powerful Encryption Utility | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/05/24/veracrypt-a-powerful-encryption-utility/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.63</wp:comment_author_IP>
    <wp:comment_date>2021-05-24 09:00:19</wp:comment_date>
    <wp:comment_date_gmt>2021-05-24 15:00:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] I&#8217;d also suggest storing the password in your password manager. I use LastPass (which I&#8217;ll blog about in the near future). It has a Secure Note feature which I store my drive passwords in. You could also put them in Standard Notes, the subject of my previous blog post. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1621868419.784888;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1621872597.621752;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914155]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914155.632458;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Veracrypt - A Powerful Encryption Utility]]></title>
  <link>http://arcanecode.com/2021/05/24/veracrypt-a-powerful-encryption-utility/</link>
  <pubDate>Mon, 24 May 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3323</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I'm a huge podcast junkie. I'm subscribed to almost 200 podcasts on a variety of subjects, the majority of which are tech related.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One podcast I listen to is <a rel="noreferrer noopener" href="https://grumpyoldbens.com/category/podcast/" target="_blank">Grumpy Old Bens</a>. The hosts discuss technology in relation to current news events. In an episode earlier this year they were discussing how to protect the data on your computer should, for example, you need to bring your laptop to a computer repair shop, forget it is there, and the owner decide to look through your drive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One of the tools they mentioned is <a rel="noreferrer noopener" href="https://www.veracrypt.fr/code/VeraCrypt/" target="_blank">VeraCrypt</a>. I've used VeraCrypt for years, and before that its predecessor, TrueCrypt.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Multi Platform</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As with the other tools I've described in this series, VeraCrypt is multi platform with versions for Windows, macOS, and a wide variety of Linux distros.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Sadly there are no versions for portable devices such as iOS or Android.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Be aware what you encrypt is portable between platforms. If I encrypt something using VeraCrypt on macOS, I can later open it on Linux for example, or Windows.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Open Source</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>VeraCrypt is an open source application. Their website allows you to download all the source code. This allows you to inspect the source code and even build your own version of VeraCrypt from it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>How VeraCrypt Works</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>VeraCrypt has two modes of operation. First, it can encrypt an entire drive. This can be your main hard drive, a secondary drive, or one you plug in such as an external USB hard drive, USB thumb drive, or even an SD or MicroSD card you've placed in your computers card reader.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It uses industry standard encryption methods, and there are a wide variety you can select from, to scramble the contents of the drive to make it unreadable. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a matter of fact, if you plug in an encrypted USB drive Windows will pop up an error message that you must format the drive for it to be used. Naturally you will want to cancel out of it, but this makes the drive more secure. An unknowing person will pop it in, and just assume the drive is bad. They'll either throw it away or just reformat it, either way your data is kept out of their hands.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To use the encrypted drive, you'll need to open the VeraCrypt software and select the drive to mount. Provide your password, and it will make it available. We'll cover the steps more closely in a moment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second mode will let you create an encrypted file container. This is a single, encrypted file on your hard drive. Once you mount it, VeraCrypt will add a new drive letter to your system (on Windows) or mount point on other platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can move files in and out of this "drive", create folders, or use it like any other drive. When you Unmount it, the files are no longer accessible.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>How to Encrypt a Drive - Step 1</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I'll assume you've gone to the <a rel="noreferrer noopener" href="https://www.veracrypt.fr/en/Downloads.html" target="_blank">VeraCrypt Downloads </a>page, and have downloaded VeraCrypt for your operating system. For this demo, I'll be using Windows.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Begin by opening VeraCrypt. (As with all my posts, you can open the image to see the full sized view).</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3335,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt001.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt001.png?w=565" alt="" class="wp-image-3335" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Begin the process by clicking on <strong>Create Volume</strong>. This will launch the VeraCrypt Volume Creation Wizard.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 2 - Pick the item to encrypt</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3339,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt002.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt002.png?w=677" alt="" class="wp-image-3339" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>For this demo, I want to encrypt an entire drive, specifically an 8 GB thumb drive I've plugged into a USB port. As such, I need to pick the second option, <strong>Encrypt a non-system partition/drive</strong>, then click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 3 - Volume Type</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3342,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt003.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt003.png?w=677" alt="" class="wp-image-3342" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We're now asked if we want a standard volume or a hidden one. I'll take about hidden volumes later in this post, so for now we'll go with a <strong>Standard VeraCrypt volume </strong>and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 4 - Volume Location</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3344,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt004.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt004.png?w=677" alt="" class="wp-image-3344" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now we need to select the drive to encrypt, in this case our thumb drive. Click on the <strong>Select Device</strong> button so we can get its exact ID.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3347,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt005.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt005.png?w=460" alt="" class="wp-image-3347" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The laptop I'm writing this post on is configured to dual boot between Windows 10 and Kubuntu 21.04. It has two physical drives. The first one listed is a second 1 TB drive I use for storing VMs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second drive, listed as Hard Disk 1, is the 2 TB drive with its various partitions. I have one partition for Windows (C:), one for Kubuntu (listed as Partition 5). The remaining 1.2 TB partition is shared between Kubuntu and Windows. There's a few other partitions for the GRUB booter and other recovery items.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now here's where we need to be careful. There is a listing for Harddisk 2, of 8 GB, and as your recall my thumb drive that I want to encrypt is 8 GB. This partition though is actually a recovery partition.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Any external drives I want to encrypt will be listed as a <strong>Removeable Disks</strong>. In the image above (surrounded by the red square) is my 8 GB thumb drive. I'd previously formatted for NTFS it and it is empty.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><em>MAKE SURE YOU PICK THE RIGHT DRIVE!</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You take full responsibility for picking the right drive, if you pick the wrong one I take no responsibility.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So with the thumb drive now picked, I'll click on <strong>OK</strong>. Then back on the Volume Location screen I'll click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 5 - Volume Creation Mode</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3351,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt006.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt006.png?w=677" alt="" class="wp-image-3351" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Next you are given a choice. In the first option, it will delete the contents of the drive and create an encrypted drive. If your drive is empty this is by far the fastest method.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If there is data on the drive you want to keep, then you should pick the second option. It will retain the files and put them into the drive once it is encrypted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because this option is slow, I would suggest moving any files to another drive, encrypting it, then moving them back when done. Even if you choose this option, I would highly suggest you <strong><em>backup everything </em></strong>just in case something catastrophic occurs such as a power outage or blue screen during the process.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because my drive is empty, I'll take the default and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 6 - Encryption Option</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3354,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt007.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt007.png?w=677" alt="" class="wp-image-3354" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In this step you are asked what encryption algorithm you want to use. I've clicked the drop down so you can see the long list. For most instances, the default of AES using the SHA-512 is sufficient, but I have encountered clients who require a specific encryption algorithm be used. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The good part is that all of these are industry standards that have been vetted by security experts. For this demo I will use the default of AES and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 7 - Volume Size</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3357,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt008.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt008.png?w=677" alt="" class="wp-image-3357" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If we were creating a container we would have the opportunity to select a size for it. In this case we are doing an entire drive, so VeraCrypt just informs us of the device name and the size of it as a confirmation we've picked the drive we wanted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is correct for this demo, so we'll just click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 8 - Volume Password</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3360,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt009.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt009.png?w=677" alt="" class="wp-image-3360" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the next screen you'll enter the password that will be used to decrypt the drive. You can also check the <strong>Display password</strong> box so you can see what you are typing, which I highly recommend.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because this is a demo, I've used a trivial password of <strong>MySuperSecurePassword1!</strong> but obviously you will want to use something much stronger. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'd also suggest storing the password in your password manager. I use <a href="https://www.lastpass.com/" target="_blank" rel="noreferrer noopener">LastPass </a>(which I'll blog about in the near future). It has a Secure Note feature which I store my drive passwords in. You could also put them in Standard Notes, the <a href="https://arcanecode.com/?p=3283" target="_blank" rel="noreferrer noopener">subject of my previous blog post</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you have entered your super secure password, click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 9 - Large Files</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3364,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt010.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt010.png?w=677" alt="" class="wp-image-3364" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>If the drive or container you are creating is larger that 4 GB then you will be asked if you want to store files bigger than 4 GB on it. (If the container or drive is 4 GB or smaller this step is skipped.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This will determine how VeraCrypt formats the drive. The default is No, but I almost always change it to <strong>Yes</strong>, just in case.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After changing it to Yes, I clicked <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Step 10 - Format it!</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3367,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt011.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt011.png?w=677" alt="" class="wp-image-3367" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Without getting too technical, one of the key factors for good encryption is having a random pool of data that can be used in generating the encryption key.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>VeraCrypt gets this from the movement of your mouse around the window. As you jiggle your mouse around randomly, the bar at the bottom will change color from red, to yellow, then green. For best results, keep moving your mouse around until the bar is solid green all the way across the bottom. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once it is solid green you can click on Format to begin the process.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3371,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt012.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt012.png?w=406" alt="" class="wp-image-3371" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>After clicking format, you are given the warning that any data on the drive will be lost, are we sure we want to proceed?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are sure, take a deep breath then click on <strong>Yes</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3374,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt013.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt013.png?w=677" alt="" class="wp-image-3374" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Volume Format screen now updates to show the progress. You'll find it in the center, highlighted by the red rectangle in the above image.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The green is a progress bar, and you can see the exact percentage and speed below. To the very right is the time left, 21 minutes when I took this screen shot.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Be aware even on a fast computer this type of encryption can be a slow process. This small 8 GB drive takes about 20 minutes. A multi-terabyte drive can spend several hours encrypting. For that reason, on large drives, I'd suggest kicking off the process then going to bed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When formatting is done, you will be provided this informational message:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3383,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt014.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt014.png?w=413" alt="" class="wp-image-3383" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>My thumb drive was assigned drive F when it was plugged in, this message just says be sure to pick a drive letter other than F (or another used one) when you go to mount it. Just click OK to dismiss the message.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you do, VeraCrypt will let you know the volume was created successfully. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3385,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt015.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt015.png?w=677" alt="" class="wp-image-3385" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You're then returned to the wizard, where you can create another drive or exit. In our case we'll click <strong>Exit</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>All done, let's use it!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now that formatting is complete, let's see how to mount our new drive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I mentioned before, when you plug in the VeraCrypt encrypted drive, Windows and other operating systems will complain the device needs to be formatted before it can be used. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Be sure to cancel out of it!</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once you've told your operating system to go away and that you know what you are doing, bring up VeraCrypt.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3387,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt016.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt016.png?w=565" alt="" class="wp-image-3387" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Because we'll be mounting a thumb drive, we'll need to click on the <strong>Select Device</strong> button.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3389,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt017.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt017.png?w=460" alt="" class="wp-image-3389" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We will need to scroll down to our list of removable disks, and pick our thumb drive then click <strong>OK</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3392,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt018.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt018.png?w=565" alt="" class="wp-image-3392" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>With the device filled out, next go to the list of drive letters above and pick out a drive letter that is unused. for this demo I've picked the Z: drive. (Note this will differ for other operating systems.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now just click on <strong>Mount</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3395,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt019.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt019.png?w=497" alt="" class="wp-image-3395" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Note I check on the Display password box so we can see what we're typing, and I've entered our super secure password. Before we click OK, I just want to call your attention to the <strong>Mount Options</strong> button.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3397,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt020.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt020.png?w=467" alt="" class="wp-image-3397" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>One option that may be useful is the mount as read only. This is also where you can setup hidden volume protection, which we'll talk about later. For now we can cancel, then back on the password entry window click OK to mount our drive.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3399,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt021.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt021.png?w=565" alt="" class="wp-image-3399" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see VeraCrypt now updates to show our Z drive is now mapped to our thumb drive! It shows up as the Z drive in explorer and we can begin to use it like any other drive.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3402,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt022.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt022.png?w=795" alt="" class="wp-image-3402" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We can now copy files into our encrypted drive using your operating systems file explorer.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Creating an Encrypted Container</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As previously described, an encrypted container is a single file which can be used to store data securely. As the steps to create one are almost identical to encrypting a drive, we'll only highlight the differences here.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We'll start on the main screen by clicking <strong>Create Volume</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the VeraCrypt Volume Creation Wizard this time take the <strong>Create an encrypted file container</strong> option and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the Volume Type screen, pick <strong>Standard VeraCrypt volume</strong> and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3408,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt023-1.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt023-1.png?w=677" alt="" class="wp-image-3408" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>On the Volume Location screen, I've entered <strong>C:\Temp\demo.hc</strong> for the file to store my encrypted data in. VeraCrypt uses <strong>hc</strong> for its default extension, although if you wanted added protection you could give it a different extension. Once that was entered I clicked <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next step is the Encryption Options, I'll take the default of AES and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3410,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt024.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt024.png?w=677" alt="" class="wp-image-3410" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Next up is the volume size, how big do we want our container. You can size it in terms of kilobytes, megabytes, gigabytes, or terabytes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this demo, I am making it 100 MB in size. I've created containers of several hundred gigabytes for storing client data. I've also created some as small as 10 MB because I wanted to securely email information to someone (who I'd given the password to over the phone).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For now, we'll go with the 100 MB and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up is the Volume Password screen, I'll be using the same MySuperSecurePassword1! that I used in the previous demo and clicking next.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final step is the Volume Format, where I'll jiggle the mouse around a while to create a random data pool to be used in encryption. Once it is green I'll click <strong>Format</strong> and let it format my encrypted file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because this is so small formatting goes very fast. When done I'll just click <strong>Exit</strong> to end the wizard.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Mounting a File</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Start with the main VeraCrypt dialog. Then click Select File to locate the C:\Temp\demo.hc file (or whatever your file name is).</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3413,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt025.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt025.png?w=565" alt="" class="wp-image-3413" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>I'll then pick an unused drive letter, in this case the Y drive, and click <strong>Mount</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll enter my super secure password and click OK and my encrypted file container will now be mounted as a drive!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3415,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt026.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt026.png?w=565" alt="" class="wp-image-3415" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Your Y drive will now appear in your file explorer, ready to use.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3417,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/veracrypt027.png"><img src="https://arcanecode.files.wordpress.com/2021/05/veracrypt027.png?w=795" alt="" class="wp-image-3417" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Dismount Your Drives</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When you are done using your encrypted drive or container, be sure to dismount it when you are done. This will ensure the container is safely shut down and you won't lose any data.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Hidden Containers</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hidden VeraCrypt containers is an advanced subject I'll save for a future blog post as this has already gotten very long.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In short though, VeraCrypt lets you embed one container in another. Let's take our 8 gig thumb drive as an example.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the wizard, when you select the hidden container option, it will first walk you through the creation of a regular container. In this case our 8 gig thumb drive. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You could then copy some files into it that look like something sensitive. Perhaps some spread sheets with your family budget, or images of receipts. Stuff you might want to plausibly remain hidden, but if it got out wouldn't be overly damaging.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It would then walk you through creating a hidden container. You could specify you wanted 5 of the 8 gig devoted to the hidden partition. Into it you could place your important data such as copies of birth certificates, marriage licenses, that kind of thing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The idea is if a bad guy forces you to give up your password, you give them the password to the "outer" or regular drive. All they see is the spreadsheets and receipts you placed there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The bad guys think they have the info, and have no way of telling you have a hidden partition setup.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you want to use the hidden partition, you simply supply the password to the hidden area instead of the regular one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I said this is a bit of an advanced topic, so we'll cover it more in the near future.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>VeraCrypt Version</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Please note the information in this post is valid as of the date I wrote the post. For it I used VeraCrypt Version 1.24-Update 7.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The interface and functionality of VeraCrypt has remained steady over the years so I don't expect any significant changes, but things on the internet stay forever. If you are reading this five years into the future expect some minor differences between the post and what you see in your version of VeraCrypt.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With the proliferation of hackers and other bad guys, keeping data secure is more important than ever. I create containers for each of my clients to keep their data secure, and separate from other clients. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Additionally I have containers for my family documents such as copies of birth certificates, social security cards, and the like. Made small enough these can be easily stored in places like OneDrive or DropBox for easy retrieval.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As stated, in upcoming posts I'll cover hidden containers, as well as how to script the mounting and unmounting of your containers.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3323</wp:post_id>
  <wp:post_date>2021-05-24 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-05-24 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-05-16 13:08:49</wp:post_modified>
  <wp:post_modified_gmt>2021-05-16 19:08:49</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>veracrypt-a-powerful-encryption-utility</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="encryption"><![CDATA[Encryption]]></category>
  <category domain="post_tag" nicename="security"><![CDATA[Security]]></category>
  <category domain="category" nicename="tools"><![CDATA[Tools]]></category>
  <category domain="post_tag" nicename="veracrypt"><![CDATA[VeraCrypt]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3415]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[58762676988]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1621868411]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1396843479549030401";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_224358919495028";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>164799</wp:comment_id>
    <wp:comment_author><![CDATA[VeraCrypt On The Command Line for Windows | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/06/14/veracrypt-on-the-command-line-for-windows/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.92</wp:comment_author_IP>
    <wp:comment_date>2021-06-14 08:00:20</wp:comment_date>
    <wp:comment_date_gmt>2021-06-14 14:00:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] VeraCrypt encryption utility. If you&#8217;ve not kept up, in my first post of the series, &#8220;VeraCrypt &#8211; A Powerful Encryption Utility&#8220;, I covered the basics of VeraCrypt including how to get it, use it through the GUI, and how [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623679220.689918;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623683786.767979;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914113]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914113.555455;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>164702</wp:comment_id>
    <wp:comment_author><![CDATA[Creating and Using Hidden Containers in VeraCrypt | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/05/31/creating-and-using-hidden-containers-in-veracrypt/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.29</wp:comment_author_IP>
    <wp:comment_date>2021-05-31 09:00:47</wp:comment_date>
    <wp:comment_date_gmt>2021-05-31 15:00:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my previous post I explained the fundamentals of the powerful encryption tool, VeraCrypt. If you are not familiar [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1622473247.817087;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1622477966.535578;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914147.11685;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914147]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>164741</wp:comment_id>
    <wp:comment_author><![CDATA[Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/06/07/3504/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.147</wp:comment_author_IP>
    <wp:comment_date>2021-06-07 09:00:55</wp:comment_date>
    <wp:comment_date_gmt>2021-06-07 15:00:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Naturally, you&#8217;ll have to have VeraCrypt installed. You can find out more in my first post of the series, VeraCrypt &#8211; A Powerful Encryption Utility. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623081725.449904;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623078055.753638;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914135]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914135.544973;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Creating and Using Hidden Containers in VeraCrypt]]></title>
  <link>http://arcanecode.com/2021/05/31/creating-and-using-hidden-containers-in-veracrypt/</link>
  <pubDate>Mon, 31 May 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3434</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my <a href="https://arcanecode.com/2021/05/24/veracrypt-a-powerful-encryption-utility/" target="_blank" rel="noreferrer noopener">previous post </a>I explained the fundamentals of the powerful encryption tool, VeraCrypt. If you are not familiar with VeraCrypt, I'd suggest going back and reading it first so that this post will make some sense.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post I'll cover how to use VeraCrypt's hidden containers feature, explaining what it is for then seeing step by step screen shots on how to set it up and use it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>What Are Hidden Containers For?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's say you have a Bitcoin wallet with a sizable amount of money. You travel a lot, and are concerned with someone tampering with your data. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Often times a countries border agents will want to search your computer. I'm not casting aspersions on anyone's honesty, but you never know.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now you could setup a standard VeraCrypt container, but what if a tech savvy person noticed it? They could demand you give up your password to the vault. At some point you would wind up giving in, giving access to data you didn't want shared (your Bitcoin wallet). This is where hidden containers come into play.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>VeraCrypt allows you to create a container inside a container. Into what VeraCrypt refers to as the "outer" container, you can place information that looks important, but in reality isn't.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can then create the inner or "hidden" container, giving it a different password. To anyone who inspects the outer container, there is no way to tell it contains a hidden container.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the above scenario, you simply give up, after some fake complaining of course, the password to the outer container. You interrogator will have no way  to tell there's more in there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you want to get to the hidden area, you mount it using the password to your hidden container. Let's see how to setup a hidden container, then how to use it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Setting up a Hidden Container</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's start by opening VeraCrypt.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3442,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va001.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va001.png?w=565" alt="" class="wp-image-3442" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Begin the process by clicking the <strong>Create Volume</strong> button.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3443,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va002.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va002.png?w=677" alt="" class="wp-image-3443" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>For this demo I'll use an encrypted file container, but these steps will also work when you encrypt a non-system partition/drive, as we did in my <a rel="noreferrer noopener" href="https://arcanecode.com/2021/05/24/veracrypt-a-powerful-encryption-utility/" target="_blank">previous post </a>using a USB thumb drive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm going to take the default of the encrypted file container and click the <strong>Next</strong> button.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3444,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va003.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va003.png?w=677" alt="" class="wp-image-3444" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now we begin creating a hidden container by changing the option to <strong>Hidden VeraCrypt Volume</strong> and clicking <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3445,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va004.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va004.png?w=677" alt="" class="wp-image-3445" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now we begin specifying how we'll be creating our container. In Normal Mode it assumes we have no container. This is the most common method, and what we'll use here.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Direct Mode, VeraCrypt will let us add a hidden container to an already existing container. The steps are similar, although since a container already exists it will skip over the next few screens picking up where we start configuring the hidden container.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this demo we'll keep the default of <strong>Normal Mode</strong> and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3446,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va005.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va005.png?w=677" alt="" class="wp-image-3446" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now we need to specify where to store the new file container. Here I just typed in <em>C:\Temp\DemoHidden.hc</em> and clicked <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3447,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va006.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va006.png?w=677" alt="" class="wp-image-3447" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now we begin the process of configuring the Outer volume. Just click <strong>Next</strong> to proceed.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3448,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va007.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va007.png?w=677" alt="" class="wp-image-3448" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here we'll select the encryption method. These were discussed in the previous post, so for this demo I'll just take the default of AES and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3449,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va008.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va008.png?w=677" alt="" class="wp-image-3449" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now we need to specify how big to make the entire container. This will need to be big enough to hold the data we want to put in our hidden container, as well as the space to put our "fake" data we are willing to give up.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this demo I'm making it a small 250 megabytes, just to go quickly, but you can make this any size you need.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3450,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va009.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va009.png?w=677" alt="" class="wp-image-3450" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now we'll enter the password for the outer container. Follow the same rules for password generation you normally would. Also keep in mind the outer and (when you create it in just a moment) hidden passwords will need to be different.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I've checked on the Display Password box so you can see it, and am using the same <em>MySuperSecurePassword1!</em> password I used in the previous post. Once the password is entered, click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3451,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va010.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va010.png?w=677" alt="" class="wp-image-3451" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now you jiggle the mouse around to generate some random data VeraCrypt can use to create the real encryption key. Keep going until the bar at the bottom goes green all the way across. Once it does, you can click <strong>Format</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3452,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va011.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va011.png?w=677" alt="" class="wp-image-3452" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When formatting is complete, VeraCrypt is ready for you to copy your fake data into it. Click on the Open Outer Volume button and a file manager for your operating system will open. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here in Windows it's the Windows File Explorer, on macOS it will be Finder, and on Linux it will be the file manager for your particular distro.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3453,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va012.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va012.png?w=677" alt="" class="wp-image-3453" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Once it has opened, copy some fake files you've prepared to put in here. Remember this should be data that looks realistic, but isn't.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One idea might be an Excel Spreadsheet with a family budget, only with fake numbers. Another might be a text file with some realistic looking but fake credit card numbers. Again, data that looks real but isn't so if someone takes it you won't be hurt financially or otherwise.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this demo I'm simply using the same pic I currently (at the time of this writing) use on my <a rel="noreferrer noopener" href="https://twitter.com/arcanecode" target="_blank">Twitter account </a>so you can easily see what is in the outer container.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Be aware this isn't  your only chance, at the end of this post I'll show how to open the outer container again so you can add, remove or update files in it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once done, close the file explorer, return to VeraCrypt and click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3454,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va013.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va013.png?w=677" alt="" class="wp-image-3454" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now VeraCrypt lets you know it's time for configure the hidden volume. Simply click <strong>Next</strong> to proceed.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3455,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va014.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va014.png?w=677" alt="" class="wp-image-3455" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You are now asked what encryption method to use on the hidden volume. It is indeed possible to use a different encryption method for the hidden area than you did on the outer container. Doing so isn't a bad idea, as it can make it more difficult for an advanced hacker to break in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this demo I'll stick to AES, but feel free to pick something different if you wish, then click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3456,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va015.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va015.png?w=677" alt="" class="wp-image-3456" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Next you need to let VeraCrypt know how much space you want to reserve for the hidden container. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>VeraCrypt examines what you have in the outer area, then lets you know how much of the free space you can use for the hidden area. Typically you don't want to max it out, so you can go update the outer area from time to time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here I'm going to use half of my space for the hidden area, in this case 125 megabytes. I enter that, then click <strong>Next</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3457,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va016.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va016.png?w=677" alt="" class="wp-image-3457" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>It's time to enter a password for your hidden volume. Please note, <em>the password for the hidden volume <strong>must </strong>be different than the outer volume!</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here I will use <em>MySuperSecurePassword2!</em> for illustration purposes, changing the number 1 used in the outer volume to a 2. In real life this would be very easy for someone to guess, so be sure to pick a password that is wildly different from the outer one.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3458,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va017.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va017.png?w=677" alt="" class="wp-image-3458" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Next we need to format the hidden area. As usual, jiggle the mouse around until the green bar is all the way across the bottom and click <strong>Format</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3459,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va018.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va018.png?w=412" alt="" class="wp-image-3459" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When formatting is complete you are presented with the above informational message. In short, it says if you open the outer volume without taking precautions (which I'll show in a moment) you can accidentally overwrite the hidden partition.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Simply click OK to dismiss the message.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3460,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va019.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va019.png?w=677" alt="" class="wp-image-3460" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>OK, you are all done with the creation. Simply click Exit to leave the wizard.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now let's see how to use the hidden container.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Accessing A Hidden Container</h2>
<!-- /wp:heading -->

<!-- wp:image {"align":"center","id":3461,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va020.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va020.png?w=565" alt="" class="wp-image-3461" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Accessing a hidden container is no different than accessing a regular container that doesn't have a hidden one. Simply enter the path to the file (or select the device, such as a thumb drive), pick an unused drive letter, and click <strong>Mount</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3462,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va021.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va021.png?w=497" alt="" class="wp-image-3462" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Enter the hidden volumes password, as I did here using the MySuperSecurePassword2!, and click <strong>OK</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3463,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va022.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va022.png?w=569" alt="" class="wp-image-3463" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can now open the drive letter (in this example W:) in your file explorer and copy files into your hidden container. Here I've copied in a photo I took of the historic <a rel="noreferrer noopener" href="https://en.wikipedia.org/wiki/Boll_Weevil_Monument" target="_blank">Boll Weevil Monument</a> from my old home town of Enterprise AL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that this is the only picture here. The photo I use for Twitter doesn't appear, as it is part of the outer volume.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you are done, you can close your file explorer, return to VeraCrypt and <strong>Dismount </strong>the hidden container.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Accessing the Outer Container</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>What if you need to access the files in the outer container? For example, you may wish to copy updated fake data into it in order to keep it looking realistic. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is possible to get to the outer container, but you need to take a few extra steps to prevent over writing the data in your hidden container.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As normal, enter the file name for your container (or select the device), pick a drive letter, then click <strong>Mount</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3464,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va023.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va023.png?w=497" alt="" class="wp-image-3464" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When the mount dialog appears, enter your password to the <em>outer </em>container. But <strong>WAIT</strong>!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Before you click OK, you need to click on the <strong>Mount Options</strong> button.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3465,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va024.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va024.png?w=467" alt="" class="wp-image-3465" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Go down to the bottom and check the box that says "<em>Protect hidden volume against damage caused by writing to the outer volume</em>".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now enter the password to the <em>hidden</em> volume, then click <strong>OK</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3466,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va025.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va025.png?w=412" alt="" class="wp-image-3466" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Now it displays another message warning against updating the hidden volume. It is possible, but <em><strong>not recommended</strong></em>, to have both the outer and hidden volume at the same time. Writing data to the hidden area could corrupt both the outer and inner areas.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As such I have a personal rule never to have both volumes open at the same time, and I highly suggest you stick to that rule.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now you can click <strong>OK</strong> to mount the outer volume. With the outer volume now mounted, you can now access it in your file explorer.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3467,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/05/va026.png" target="_blank"><img src="https://arcanecode.files.wordpress.com/2021/05/va026.png?w=569" alt="" class="wp-image-3467" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here you can see my Twitter photo I copied in originally. I can now update it, or copy in a few more files, up to the amount I have space for.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my case, I have a 250 MB container, but I've reserved 125 MB for the hidden space, leaving me roughly 125 MB to put data in the outer area (VeraCrypt does use a little space in the container for its data).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Backup To Prevent Unintentional Damage</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Remember how I said you could give the password to the outer container to an agent, or perhaps a bad guy?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Obviously you aren't going to tell them about the hidden container, as such they won't use the Mount Options to prevent overwriting the hidden area. Thus it is possible they could wind up destroying your hidden info.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To prevent this, be sure to make a backup of your container. Store it in a safe place away from home, such as a relatives house or your safety deposit box. This way a bad guy could go so far as to destroy your device and your data will still be safe.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Containers in Containers</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One last thing, be aware VeraCrypt has no problems storing encrypted containers inside other containers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, you could use VeraCrypt to encrypt a thumb drive. Then you could create a second file container, perhaps one with a hidden volume, and store it on the encrypted thumb drive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You could go so far as to give it a different extension, perhaps using .dat instead of the default .hc, so a casual observer would not know it is a VeraCrypt container. When you select a file to mount, VeraCrypt doesn't care what the extension is.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While this may seem a little paranoid, it is possible you may have a need for this level of protection so I just wanted you to be aware this option exists.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post I covered how to use the hidden container feature of VeraCrypt, one of it's advanced options. Using it you can protect your most sensitive data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the next and final post we'll see how to write scripts so you can automate the process of mounting and dismounting containers.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3434</wp:post_id>
  <wp:post_date>2021-05-31 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-05-31 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-05-16 17:17:21</wp:post_modified>
  <wp:post_modified_gmt>2021-05-16 23:17:21</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>creating-and-using-hidden-containers-in-veracrypt</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="productiivty"><![CDATA[Productiivty]]></category>
  <category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="category" nicename="security"><![CDATA[Security]]></category>
  <category domain="category" nicename="tools"><![CDATA[Tools]]></category>
  <category domain="post_tag" nicename="veracrypt"><![CDATA[VeraCrypt]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3443]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[59046210468]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1622473245]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1399380335222198284";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_228805839050336";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166131</wp:comment_id>
    <wp:comment_author><![CDATA[JdDoe]]></wp:comment_author>
    <wp:comment_author_email>pvt.j.d.doe@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>68.110.247.161</wp:comment_author_IP>
    <wp:comment_date>2021-11-03 11:29:35</wp:comment_date>
    <wp:comment_date_gmt>2021-11-03 17:29:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That was and is excellent info / how to..... about an ultra-needed app, and I thank you very much for that and the time it took to compile!]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1635964469.749138;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1635960575.550502;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>164800</wp:comment_id>
    <wp:comment_author><![CDATA[VeraCrypt On The Command Line for Windows | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/06/14/veracrypt-on-the-command-line-for-windows/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.92</wp:comment_author_IP>
    <wp:comment_date>2021-06-14 08:00:23</wp:comment_date>
    <wp:comment_date_gmt>2021-06-14 14:00:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the second post, &#8220;Creating and Using Hidden Containers in VeraCrypt&#8220;, I covered how to create a hidden container, adding an extra level of security to your [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623679223.027696;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623683786.851575;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914112]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914112.268511;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>164835</wp:comment_id>
    <wp:comment_author><![CDATA[VeraCrypt On the Command Line for Ubuntu Linux | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/06/21/veracrypt-on-the-command-line-for-ubuntu-linux/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2021-06-21 09:01:05</wp:comment_date>
    <wp:comment_date_gmt>2021-06-21 15:01:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] is the volume type, normal or hidden. In a previous blog post I cover hidden types, and if you are going to do a hidden volume I would suggest using the GUI in [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1624287665.734908;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1624292890.61765;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914107]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914107.726124;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>164742</wp:comment_id>
    <wp:comment_author><![CDATA[Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/06/07/3504/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.147</wp:comment_author_IP>
    <wp:comment_date>2021-06-07 09:00:58</wp:comment_date>
    <wp:comment_date_gmt>2021-06-07 15:00:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] is the volume type, normal or hidden. My previous blog post talks about hidden types, and if you are going to do a hidden volume I would suggest using the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623081725.52331;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623078058.211567;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914133]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914133.994749;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[VeraCrypt on the Command Line for macOS]]></title>
  <link>http://arcanecode.com/2021/06/07/3504/</link>
  <pubDate>Mon, 07 Jun 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3504</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Automation is the key to success, especially in the DevOps world. In addition, security is an ever increasing need in today's world of hacks and ransomware.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my last two posts I showed how to use the encryption utility, VeraCrypt, to create encrypted containers and drives to securely store data. In this, and the next two posts, we'll see how we can automate VeraCrypt from the command line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We'll cover the basics. Creating a container, mounting a container (aka volume), getting a list of mounted volumes, and finally dismounting your volumes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As it turns out, the command line syntax is a bit different for all the major operating systems. In this post we'll focus on macOS, in the next two posts we'll cover Windows and Linux. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Prerequisites</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Naturally, you'll have to have VeraCrypt installed. You can find out more in my first post of the series, <a href="https://arcanecode.com/2021/05/24/veracrypt-a-powerful-encryption-utility/" target="_blank" rel="noreferrer noopener">VeraCrypt - A Powerful Encryption Utility</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next requirement applies to macOS. In order for macOS to be able to read the variety of filesystems VeraCrypt supports, you need to install a free utility, <a rel="noreferrer noopener" href="https://osxfuse.github.io" target="_blank">macFUSE</a>. <br /><br />It's free, fast to install and takes very little in the way of system resources. It's compatible with macOS BigSur and Catalina, and probably older versions too, check their site if you have that need.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Code Samples</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While I will be providing samples here, you should also check out the project I have on GitHub that goes with this post, <a rel="noreferrer noopener" href="https://github.com/arcanecode/VeraCrypt-CommandLine-Examples" target="_blank">VeraCrypt-CommandLine-Examples</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll update it over time as needed, and it may be easier for you to download, or cut and paste from it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OK, let's get started!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Creating a Container</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>First off, let's look at the long line of code needed to create a container. Please note that while your blog reader may wrap the command below, it should be one line in your shell script.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/Applications/VeraCrypt.app/contents/MacOS/VeraCrypt --text --create "/Users/arcanecode/Documents/temp/vctest.vc" --size "200M" --password MySuperSecurePassword1! --volume-type normal --encryption AES --hash sha-512 --filesystem exfat --pim 0 --keyfiles "" --random-source /Users/arcanecode/Documents/temp/randomdata.txt</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>OK, that's a bit hard to read, so let me break it out into each part below.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> The first item is the path to the VeraCrypt application, assuming you installed it in the default location. <br /><br /><code>/Applications/VeraCrypt.app/contents/MacOS/VeraCrypt</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>--text</code> parameter says we want to use VeraCrypt in text mode, not GUI.  Note, the --text parameter must be the FIRST parameter you pass in, or it will not work. <br /><br /><code>--text</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We next tell VeraCrypt we want to create a new file container, and where it is to be stored at. For this demo, I've created a <strong>temp</strong> folder in my <strong>Documents</strong> directory. <br /><br />You'll want to change this to the location where you store your volumes. In addition, you'll also want to change the user folder from <strong>arcanecode</strong> to your username. <br /><br /><code>--create "/Users/arcanecode/Documents/temp/vctest.vc"</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next we indicate how big we want our container to be. If you just list a number, VeraCrypt assumes you mean bytes, but you can also affix M for megabytes, G gigabytes, K kilobytes, and so on.<br /><br />Here I'm going to keep it small for demo purposes and use 200 megabytes.<br /><br /><code>--size "200M"</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we provide our password. Normally you would not want to hard code it, but rather pass it into your script as a parameter. <br /><br />I wanted to keep this demo simple though, and focus on VeraCrypt so I've just hard coded it I'm using the same "super secure" password I've used in my last few posts.<br /><br /><code> --password MySuperSecurePassword1!</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next is the volume type, normal or hidden. My <a href="https://arcanecode.com/2021/05/31/creating-and-using-hidden-containers-in-veracrypt/" target="_blank" rel="noreferrer noopener">previous blog</a> post talks about hidden types, and if you are going to do a hidden volume I would suggest using the GUI in order to assure it is done right.<br /><br />For this demo we'll go with a normal volume<br /><br /><code>--volume-type normal</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we pick the encryption type. There are quite a few, so refer to the VeraCrypt documentation for a full list. Here we're using AES.<br /><br /><code>--encryption AES</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up, for the encryption method we picked it needs to know the hashing algorithm. For AES I suggest <strong>SHA-512</strong>.<br /><br /><code>--hash sha-512</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In order to keep this container portable across other OS's (Windows and Linux) we'll format using exfat. Be aware though that to use exfat on a Mac, you'll have to install macFUSE (see the prerequisites section above.)<br /><br /><code>--filesystem exfat</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The PIM is a special number that allows you to specify the number of  times hashing algorithm executes. It's a bit more complex than that, if you want full details see the <a rel="noreferrer noopener" href="https://documentation.help/VeraCrypt/Personal%20Iterations%20Multiplier%20(PIM).html" target="_blank">VeraCrypt documentation</a>. <br /><br />For now, we can pass it the value of 0 (zero), which tells it to use the default value for the PIM.<br /><br /><code>--pim 0</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can mount a volume in VeraCrypt using a keyfile, as opposed to a password. We've not done that here, so we'll just pass in an empty string to indicate we won't use a keyfile.<br /><br /><code>--keyfiles ""</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a final parameter, you need to provide random data for VeraCrypt to use when generating its hashes. It needs at least 320 characters, but you can give more.<br /><br /> I've provided a sample one as part of this demo (see the GitHub code samples), I just randomly smacked keys on my keyboard with my eyes closed. I'd suggest creating one of your own for production, but for just testing and learning (I'm assuming you'll throw away the vault when you are done) then the one here will be OK.<br /><br /><code>--random-source /Users/arcanecode/Documents/temp/randomdata.txt</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OK, that's everything you need to create a volume. Now that it's created, let's mount it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Mounting a VeraCrypt Volume</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here is the full command line to mount. (As before, it should be on a single line, ignore any wrapping done by your browser).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/Applications/VeraCrypt.app/contents/MacOS/VeraCrypt --text --mount "/Users/arcanecode/Documents/temp/vctest.vc" /Volumes/vctest --password MySuperSecurePassword1! --pim 0 --keyfiles "" --protect-hidden no --slot 1 --verbose</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's start breaking it down. First, as before, is the full path to the VeraCrypt app. <br /><br /><code>/Applications/VeraCrypt.app/contents/MacOS/VeraCrypt</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As with all of these commands, the <code>--text</code> parameter must come first to let VeraCrypt know we want to use text mode and not the GUI<br /><br /><code>--text</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The mount parameter actually has two values that need to be passed in.<br /><br />First we pass in the name of the file to mount.<br /><br />Second we need to provide a mount point. This will let macOS treat it like any other drive you might plug in. <br /><br />In macOS, use <strong>/Volumes</strong> then add on a name. For simplicity I usually use the name of the file (without any extension),  but it doesn't have to be.<br /><br />In reality though, it doesn't make a real difference as macOS overrides the name you provide, and instead uses "Untitled", "Untitled 2", and so on.<br /><br /><code>--mount "/Users/arcanecode/Documents/temp/vctest.vc" /Volumes/vctest</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next is our "super secure" password. If your password has spaces, you'll need to wrap this in double quote marks.<br /><br /><code>--password MySuperSecurePassword1!</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you overrode the default PIM when creating your volume, you'll need to provide it. Otherwise, we can pass it the value of 0 (zero), which tells it to use the default value<br /><br /><code>--pim 0</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you created your volume using a keyfile or files, provide them here. Otherwise, you can just pass in an empty string to indicate no keyfile is needed.<br /><br /><code>--keyfiles ""</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If this volume contained a hidden volume, you would need to let VeraCrypt know by using a value of yes, plus some other parameters.<br /><br />In this case there is no hidden partition in our volume, so we can just give a value of no.<br /><br /><code>--protect-hidden no</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OPTIONAL! <br />Slot is an optional parameter. If you look at the VeraCrypt GUI in macOS, down the left side are a series of slot numbers. If you omit this parameter, VeraCrypt will mount in the first empty slot.<br /><br />However you can specify a slot, which can be useful if you want to make sure certain volumes always mount in a specific slot. You can then use the slot number when you want to dismount your volumes.<br /><br /><code>--slot 1</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OPTIONAL! <br />Verbose is also an optional parameter, but I often include it just to see what is going on under the covers. You can use it with any of the commands in this post, I just included it on this one for example purposes.<br /><br />If you intend to make this into a script then I would suggest omitting it once your script is debugged and working.<br /><br /><code>--verbose</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OK, hopefully all is going well, and you've created and mounted your volume. Let's next see how to get a list, from the command line, of all your mounted volumes.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Listing Mounted Volumes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here's the command line to see what is mounted on your Mac.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/Applications/VeraCrypt.app/contents/MacOS/VeraCrypt --text --list</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As with other commands you have seen, we start with the full path to the VeraCrypt application. We then use <code>--text</code> to let VeraCrypt know not to use the GUI.<br /><br />We finish with <code>--list</code>, which tells VeraCrypt to display a list of all mounted containers. This will include the slot number, volume name, and mount directory.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mom always taught me to put away my toys when I was done playing with them, so in the next section we'll see how to unmount your volumes once you are done with them.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Dismounting VeraCrypt Volumes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are four ways to dismount a volume. Three of them will dismount a specific volume, the final will dismount all volumes. <br /><br />All ways follow the same pattern. Give the path to the VeraCrypt app, followed by the<code> --text</code> parameter to tell VeraCrypt not to launch the GUI.<br /><br />Finally we give the <code>--dismount</code> to let VeraCrypt know we want to unload our volume. The value passed into the --dismount parameter varies, and will be explained below.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Method 1: Slot Number</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/Applications/VeraCrypt.app/contents/MacOS/VeraCrypt --text --dismount --slot 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With the first method, you provide the slot number. If you mounted a volume and used the slot number parameter,  for example your personal file vault is always in slot 5, then this can be an easy way to dismount.<br /><br />On the other hand, if you let VeraCrypt load in the first available slot, you'll either have to look at the GUI, or run the list command in the previous section, to learn the slot number.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Method 2: Volume Name</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/Applications/VeraCrypt.app/contents/MacOS/VeraCrypt --text --dismount "/Volumes/Untitled"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Using the volume list command or looking at the "Mount Directory" column in the GUI, you can pass in that value to unmount. Because this is typically "Untitled", "Untitled 1" and so on, it can be of an issue trying to be reliable in unmounting the right volume.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Method 3: Volume File Name</h3>
<!-- /wp:heading -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/Applications/VeraCrypt.app/contents/MacOS/VeraCrypt --text --dismount "/Users/arcanecode/Documents/temp/vctest.vc"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This method is the most reliable. Since you know the name of the file you mounted, you can just provide the same file name to unmount. <br /><br />VeraCrypt doesn't care what slot it is loaded into, it uses the file name to find it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The winner - Method 3!</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For the reasons above, I <em>highly</em> suggest Method 3 be your go to method for dismounting volumes in your scripts. It is the most reliable, and easiest to understand when looking at the scripts.<br /><br />But wait, there's more!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Dismounting ALL Volumes</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There is one final method, you can dismount all of the VeraCrypt volumes you have mounted.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/Applications/VeraCrypt.app/contents/MacOS/VeraCrypt --text --dismount</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you use just the <code>--dismount</code> parameter, and pass in no values, then VeraCrypt will attempt to dismount ALL volumes you have loaded.<br /><br /> This can be a useful command to run when you're shutting down your Mac, to ensure all volumes are properly shutdown. <br /><br />If you don't have any volumes mounted, then VeraCrypt basically shrugs it's shoulders, does nothing, and ends.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we learned how to create, mount, and dismount VeraCrypt volumes from the command line in macOS. In addition, we also saw how to get a listing of volumes currently mounted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the next two posts we'll see how to do the same things, but in Windows, then Linux.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3504</wp:post_id>
  <wp:post_date>2021-06-07 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-06-07 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-06-13 15:31:30</wp:post_modified>
  <wp:post_modified_gmt>2021-06-13 21:31:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>3504</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="category" nicename="macos"><![CDATA[macOS]]></category>
  <category domain="category" nicename="security"><![CDATA[Security]]></category>
  <category domain="post_tag" nicename="veracrypt"><![CDATA[VeraCrypt]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1401917084901072900";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_233248655272721";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[59316597986]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1623078053]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5f1e3bce832b2427f0deec523333dde1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>164801</wp:comment_id>
    <wp:comment_author><![CDATA[VeraCrypt On The Command Line for Windows | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/06/14/veracrypt-on-the-command-line-for-windows/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.92</wp:comment_author_IP>
    <wp:comment_date>2021-06-14 08:00:25</wp:comment_date>
    <wp:comment_date_gmt>2021-06-14 14:00:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] previous post, &#8220;VeraCrypt on the Command Line for macOS&#8220;, showed how to call VeraCrypt from within a script on the macOS [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623679225.066845;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1623683786.928526;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626914109]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626914109.386577;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[VeraCrypt On The Command Line for Windows]]></title>
  <link>http://arcanecode.com/2021/06/14/veracrypt-on-the-command-line-for-windows/</link>
  <pubDate>Mon, 14 Jun 2021 14:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3545</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This is part of my ongoing series on the VeraCrypt encryption utility. If you've not kept up, in my first post of the series, "<a rel="noreferrer noopener" href="https://arcanecode.com/2021/05/24/veracrypt-a-powerful-encryption-utility/" target="_blank">VeraCrypt - A Powerful Encryption Utility</a>", I covered the basics of VeraCrypt including how to get it, use it through the GUI, and how the series was inspired by the <a href="https://grumpyoldbens.com/category/podcast/" target="_blank" rel="noreferrer noopener">Grumpy Old Bens</a> podcast.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the second post, "<a href="https://arcanecode.com/2021/05/31/creating-and-using-hidden-containers-in-veracrypt/" target="_blank" rel="noreferrer noopener">Creating and Using Hidden Containers in VeraCrypt</a>", I covered how to create a hidden container, adding an extra level of security to your containers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My previous post, "<a rel="noreferrer noopener" href="https://arcanecode.com/2021/06/07/3504/" target="_blank">VeraCrypt on the Command Line for macOS</a>", showed how to call VeraCrypt from within a script on the macOS platform.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The commands to call VeraCrypt from the command line are very different for each platform, As such, I've broken them out into individual blog posts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this entry you'll see how to call VeraCrypt on Windows 10. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Prerequisites</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Obviously, you'll need to have VeraCrypt installed. My first post in the series,  "<a rel="noreferrer noopener" href="https://arcanecode.com/2021/05/24/veracrypt-a-powerful-encryption-utility/" target="_blank">VeraCrypt - A Powerful Encryption Utility</a>", covers where to get it from.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this post, we'll also be using the CMD mode to execute the commands. Do note that on most installations of Windows these days, PowerShell has replaced CMD as the default terminal shell. If you open up a command window and see PowerShell, all you have to do is type in CMD and it enter, and you'll be switched to CMD mode.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Code Samples</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While I will be providing samples here, you should also check out the project I have on GitHub that goes with this post,&nbsp;<a rel="noreferrer noopener" href="https://github.com/arcanecode/VeraCrypt-CommandLine-Examples" target="_blank">VeraCrypt-CommandLine-Examples</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I’ll update it over time as needed, and it may be easier for you to download, or cut and paste from it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One item I want to mention, unlike the macOS version, the Windows version of VeraCrypt lacks the ability to list containers. So for this post we'll only be able to include creation, mounting and dismounting of containers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OK, let’s get started!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Creating a Container</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's begin by looking at the full command to create a container, then we will break it down to it's individual components. While your blog reader or webpage may wrap the line, in your script (or command line) it should all be entered as a single line of text.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"C:\Program Files\VeraCrypt\VeraCrypt Format.exe" /create "C:\temp\vctest.vc" /size "200M" /password MySuperSecurePassword1! /encryption AES /hash sha-512 /filesystem exfat /pim 0 /silent</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>First&nbsp;up&nbsp;is&nbsp;the&nbsp;command&nbsp;to&nbsp;call.&nbsp;If&nbsp;you&nbsp;installed&nbsp;VeraCrypt&nbsp;to&nbsp;the default&nbsp;folder,&nbsp;you'll&nbsp;find&nbsp;it&nbsp;in&nbsp;<code>C:\Program&nbsp;Files\VeraCrypt\</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The&nbsp;command&nbsp;to&nbsp;create&nbsp;a&nbsp;new&nbsp;volume&nbsp;is&nbsp;actually&nbsp;a&nbsp;separate&nbsp;executable than the rest&nbsp;of&nbsp;VeraCrypt.&nbsp;It&nbsp;is&nbsp;"<code>VeraCrypt&nbsp;Format.exe</code>"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note&nbsp;there&nbsp;is&nbsp;indeed&nbsp;a&nbsp;space&nbsp;in&nbsp;the&nbsp;file&nbsp;name!&nbsp;Thus&nbsp;you&nbsp;have&nbsp;to&nbsp;enclose the entire thing&nbsp;in&nbsp;double&nbsp;quotes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>"C:\Program&nbsp;Files\VeraCrypt\VeraCrypt&nbsp;Format.exe"</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next is the command to create a volume, <code>/create</code>. You follow it with the path and file name to create. If you omit the path it will create the volume in the current directory you are running the script from.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As with all file names, if it has a space you must include double quotes. Otherwise they are optional, but it doesn't hurt to have them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/create&nbsp;"C:\temp\vctest.vc"</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We now need to tell VeraCrypt how big to make the volume. VeraCrypt includes shortcuts for M (Megabytes), G (Gigabytes), T (Terabytes) and<br />K (Kilobytes). If you omit a letter, it assumes bytes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this demo we are making it small, so will use 200M to indicate 200 Megabytes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/size "200M"</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up is the password to use to encrypt the volume. In a "real world" situation, you should probably pass it into the script or get it using an alternate method.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To keep this demo simple, I'm just going to embed the password using the "super secure" password I've used throughout this series of blog posts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As with file names, if your password has spaces you'll need to enclose it in double quotes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/password&nbsp;MySuperSecurePassword1!</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we need to provide the encryption algorithm to use. VeraCrypt supports a vast array of algorithms, see their documentation for the supported list.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this demo, we'll use the popular AES.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/encryption&nbsp;AES</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Many algorithms require you to provide an encryption hashing method. For AES, we'll use the strong SHA-512.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/hash&nbsp;sha-512</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In order to keep this container portable across OS's we'll format using exfat. Be aware though that to use exfat on a Mac, you'll have to install macFUSE (see my <a href="https://arcanecode.com/2021/06/07/3504/" target="_blank" rel="noreferrer noopener">previous post</a> on macOS for more info).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/filesystem&nbsp;exfat</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The PIM is a special number that allows you to specify the number of times the hashing algorithm executes. It's a bit more complex than that, if you want full details see the VeraCrypt documentation at:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://documentation.help/VeraCrypt/Personal%20Iterations%20Multiplier%20(PIM).html" target="_blank" rel="noreferrer noopener">https://documentation.help/VeraCrypt/Personal%20Iterations%20Multiplier%20(PIM).html</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For now, we can pass it the value of 0, which tells it to use the default value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/pim&nbsp;0</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final parameter is <code>/silent</code>. By default VeraCrypt will display dialogs notifying you of its progress, as well as when it is complete.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In a scripting situation you would normally not want this, so we add the silent switch to suppress the messages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note this does have one side affect, if there are any errors those too are also suppressed, so you won't be aware of them. The most common of these would be the attempt to create a volume name that already exists.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/silent</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You now have everything you need to create a VeraCrypt volume. Note that there is one more parameter that we didn't use in the example, but you may want to know about.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/force</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Normally, if you are trying to create a new volume and that file already exists, VeraCrypt will pop up a dialog (assuming you've not used <code>/silent</code>) warning you the volume you are trying to create already exists. It will then give you the choice of canceling or overwriting the existing file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>/force</code> parameter suppresses the message and always overwrites the file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So hopefully you've now created your own volume using the commands in this section. Let's now see how to mount it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Mounting a VeraCrypt Volume</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Mounting is very simple, here is the full command, then we'll take a look at each part. As before, it should be all a single line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"C:\Program Files\VeraCrypt\VeraCrypt.exe" /volume "C:\temp\vctest.vc" /letter x /password MySuperSecurePassword1! /quit /silent
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We start with the command to VeraCrypt. This assumes you have installed to the default folder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>"C:\Program Files\VeraCrypt\VeraCrypt.exe"</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next we provide the <code>/volume</code> parameter, with the path to and the file name of the file to mount.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/volume "C:\temp\vctest.vc"</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Volumes in VeraCrypt appear as a drive letter to Windows. As such we need to provide a letter to use. Note if you use a drive letter<br />already in use, you'll get an error.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The letter can be provided in either or upper or lower case.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you don't know a drive letter, or don't care what letter is used, then you can omit this parameter completely. When you do, VeraCrypt will use the first available drive letter it finds.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/letter x</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up is the password to use to encrypt the volume. In a "real world" situation, you should probably pass it into the script, or get it using an alternate method.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To keep this demo simple, I'm just going to embed the password using the "super secure" password I've used throughout this series of blog posts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As with file names, if your password has spaces you'll need to enclose it in double quotes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/password MySuperSecurePassword1!</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next we provide the quit parameter. By default, if you omit it then the VeraCrypt dialog will remain on the screen. Using quit will close the<br />VeraCrypt dialog, something usually desired if you are running a script.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/quit</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally we'll add the <code>/silent</code> parameter. This has the same affect as it did in the create function, suppressing any dialogs. Be aware, that for <code>/silent</code> to work, you must also have used the <code>/quit</code> parameter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/silent</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At this point hopefully all went well, and you have created a volume as well as mounted it. Once you are done with a volume, you'll need to dismount it, the subject of the next section.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Dismounting VeraCrypt Volumes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The command to dismount a volume is the simplest of all.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"C:\Program Files\VeraCrypt\VeraCrypt.exe" /dismount H /quit /silent /force</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's look at the individual components of the command.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We start with the command to VeraCrypt. This assumes you have installed to the default folder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>"C:\Program Files\VeraCrypt\VeraCrypt.exe"</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next is the dismount parameter. You pass in the drive letter associated with the volume to dismount. As with mounting, the case of the drive letter does not matter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you omit the drive letter, VeraCrypt will dismount ALL currently mounted volumes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/dismount </code>X</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We now provide the quit parameter. By default, if you omit it then the VeraCrypt dialog will remain on the screen. Using quit will close the<br />VeraCrypt dialog, something usually desired if you are running a script.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/quit</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we append the <code>/silent</code> parameter, to suppress any dialogs as we did in the previous sections. As with mounting, for <code>/silent </code>to work we must also include <code>/quit</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/silent</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally we provide the force parameter. If some app is accessing the volume, for example Windows File Explorer, it will prevent VeraCrypt from dismounting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The force parameter tells VeraCrypt to shut down, no matter what. Your inclusion of force is up to you, depending on your situation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For the demo, we'll include it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>/force</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And that's all there is to it. It's a best practice to dismount all of your volumes when you are done with them, and especially before shutting down your computer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This will ensure any operations that are copying data to your encrypted volume have completed, ensuring the data does not get corrupted.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This post covered how to create, mount and dismount VeraCrypt volumes in Windows 10. The technique should also be applicable to Windows 7 and 8, if you are still on those platforms.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3545</wp:post_id>
  <wp:post_date>2021-06-14 08:00:00</wp:post_date>
  <wp:post_date_gmt>2021-06-14 14:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-06-13 19:38:05</wp:post_modified>
  <wp:post_modified_gmt>2021-06-14 01:38:05</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>veracrypt-on-the-command-line-for-windows</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="microsoft"><![CDATA[Microsoft]]></category>
  <category domain="category" nicename="security"><![CDATA[Security]]></category>
  <category domain="post_tag" nicename="veracrypt"><![CDATA[VeraCrypt]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5f1e3bce832b2427f0deec523333dde1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[59584031987]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1623679218]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1404438552541290498";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_237643304833256";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166812</wp:comment_id>
    <wp:comment_author><![CDATA[John Joghems]]></wp:comment_author>
    <wp:comment_author_email>john.joghems@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>159.48.55.53</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 08:08:17</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 14:08:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How can I select -in commandline- to create a Hidden volume ?]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641827784.242759;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641823697.160885;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166537</wp:comment_id>
    <wp:comment_author><![CDATA[XvTao]]></wp:comment_author>
    <wp:comment_author_email>15852858310@163.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>160.16.98.79</wp:comment_author_IP>
    <wp:comment_date>2021-12-20 00:04:59</wp:comment_date>
    <wp:comment_date_gmt>2021-12-20 06:04:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Excuse me, can you provide a source code of veracrypt console program for windows]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639984800.967689;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639980300.430338;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Setting Up an Ubuntu VM for Developers in Hyper-V]]></title>
  <link>http://arcanecode.com/2021/06/28/setting-up-an-ubuntu-vm-for-developers-in-hyper-v/</link>
  <pubDate>Mon, 28 Jun 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3586</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>On occasion I will need to setup a new Ubuntu virtual machine in Hyper-V, for doing development or creating new <a rel="noreferrer noopener" href="https://www.pluralsight.com/authors/robert-cain" target="_blank">courses for Pluralsight</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's not something I do every day though, so I have instructions to remind me of all the steps involved, what buttons to push, and so on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The problem is my instructions have been scattered across multiple files in a few repositories. Today I finally decided enough was enough.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Instructions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This is kind of an unusual blog post, in that it doesn't contain a lot of content. The instructions were rather long, and if I'd tried to do it as a blog post I'd have had to break it into multiple posts, making it difficult to follow, or have one blog post that was 3 miles long.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead, I've created a repository on my GitHub site, <a rel="noreferrer noopener" href="https://github.com/arcanecode/Setting-Up-an-Ubuntu-VM-for-Developers-in-Hyper-V" target="_blank">https://github.com/arcanecode/Setting-Up-an-Ubuntu-VM-for-Developers-in-Hyper-V</a>. There you will find the instructions broken down into small, easily digestible parts.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Buyer Beware</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I want to make it understood, this is not meant to be an in-depth tutorial. There aren't a lot of screen shots, nor do I take time to explain "why" (at least not often).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead think of it like a check list. If you are familiar with both Hyper-V and Ubuntu, you should not have any problems following the instructions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Decisions, Decisions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Many of the configuration choices I made were the result of this being in a VM. I turn off things like screen blanking, auto locking, and the like. I figure the host machine should be the one to manage these types of things.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition, the software I chose to install was a result of my needs. VSCode, PowerShell, Azure Data Studio, and gcc/g++ were the core tools installed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are too many other options out there. Python, PHP, Ruby, Java, Rust, and on and on and on. I feel these instructions will get you to the basic platform, then you can add on your specific language and other tools from there.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Into The Future</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I'll keep this updated when new versions of Ubuntu or Hyper-V are released that may invalidate the instructions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, it just screams for automation. I'd like to write some PowerShell Core to run on Windows to create and configure the VM, then a shell script to run inside Ubuntu to handle as much installation and configuration as possible. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I actually have some PowerShell Core samples for generating a Hyper-V VM, I just need to assemble them into a useable script. So that may be something I tackle in the near future.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conslusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Well this was a rather unusual post, as most of the info is over in my GitHub repository. Please check it out, let me know what you think. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Even if you don't have a big need for an Ubuntu VM, I'd be curious how you find the experience of most of the info being in GitHub. Was it easy to follow, well organized?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If this works out, I may do some future work where the bulk of the information is on my GitHub site, and my blog post provides a brief overview.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3586</wp:post_id>
  <wp:post_date>2021-06-28 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-06-28 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-06-14 20:08:49</wp:post_modified>
  <wp:post_modified_gmt>2021-06-15 02:08:49</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>setting-up-an-ubuntu-vm-for-developers-in-hyper-v</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hyper-v"><![CDATA[Hyper-V]]></category>
  <category domain="category" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
  <category domain="category" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3599]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1409527529799569411";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_246688610595392";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[60121014687]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1624892524]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Setting-Up-an-Ubuntu-VM-for-Developers-in-Hyper-V-001]]></title>
  <link>http://arcanecode.com/2021/06/28/setting-up-an-ubuntu-vm-for-developers-in-hyper-v/setting-up-an-ubuntu-vm-for-developers-in-hyper-v-001/</link>
  <pubDate>Tue, 15 Jun 2021 02:05:47 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/06/setting-up-an-ubuntu-vm-for-developers-in-hyper-v-001.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3599</wp:post_id>
  <wp:post_date>2021-06-14 20:05:47</wp:post_date>
  <wp:post_date_gmt>2021-06-15 02:05:47</wp:post_date_gmt>
  <wp:post_modified>2021-06-14 20:05:47</wp:post_modified>
  <wp:post_modified_gmt>2021-06-15 02:05:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>setting-up-an-ubuntu-vm-for-developers-in-hyper-v-001</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3586</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/06/setting-up-an-ubuntu-vm-for-developers-in-hyper-v-001.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/06/setting-up-an-ubuntu-vm-for-developers-in-hyper-v-001.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:920;s:6:"height";i:365;s:4:"file";s:127:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/06/setting-up-an-ubuntu-vm-for-developers-in-hyper-v-001.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:32560;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[VeraCrypt On the Command Line for Ubuntu Linux]]></title>
  <link>http://arcanecode.com/2021/06/21/veracrypt-on-the-command-line-for-ubuntu-linux/</link>
  <pubDate>Mon, 21 Jun 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3601</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this, the third post on using VeraCrypt from the command line, we'll cover how to use VeraCrypt from Linux, specifically Ubuntu 20.04.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We'll cover the basics. Creating a container, mounting a container (aka volume), getting a list of mounted volumes, and finally dismounting your volumes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I stated in previous posts, the command line syntax is a bit different for all the major operating systems. In this post we'll focus on Linux.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Prerequisites</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before you install VeraCrypt, you should be aware it has a dependency on the <code>libwxgtk3.0-gtk3-0v5</code> library, so we might as well install that first. From the terminal execute these commands.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo apt-get update -y
sudo apt-get install -y libwxgtk3.0-gtk3-0v5</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Next, in order to format a volume as exFat so it can be used across platforms, you'll need to install the exFat tools.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo apt-get install -y exfat-fuse exfat-utils</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now you'll need to install VeraCrypt. I went to <a href="https://veracrypt.fr/en/Downloads.html" target="_blank" rel="noreferrer noopener">https://veracrypt.fr/en/Downloads.html</a> and scrolled down to the Linux area. In the Ubuntu 20.04 area, I downloaded <code>veracrypt-1.24-Update7-Ubuntu-20.04-amd64.deb</code> file into my Downloads folder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the terminal, I moved to my Downloads folder then issued this command to install it:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo dpkg -i veracrypt-1.24-Update7-Ubuntu-20.04-amd64.deb</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>From here I went into Ubuntu's menu and launched VeraCrypt to validate it installed correctly.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Code Samples</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><br />While I will be providing samples here, you should also check out the project I have on GitHub that goes with this post, <a href="https://github.com/arcanecode/VeraCrypt-CommandLine-Examples" target="_blank" rel="noreferrer noopener">https://github.com/arcanecode/VeraCrypt-CommandLine-Examples</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll update it over time as needed, and it may be easier for you to download, or cut and paste from it.<br /><br />OK, let's get started!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Creating a Container</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before we begin I'd like to make two notes. First, I'll be storing the container in my Documents folder. So in the terminal be sure to <code>cd</code> into your Documents. This will make it easier as we won't have to specify full paths to our files.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, included in this demo is a <code>randomdata.txt</code> file. We'll explain its use shortly, but you'll need to copy this file into Documents as well, or when the time comes include the full path to it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's start by looking at the long line of code needed to create a container. Please note that while your blog reader may wrap the command below, it should be one line in your shell script or from the command line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt --text --create vctest.vc --size 200M --password MySuperSecurePassword1! --volume-type normal --encryption AES --hash sha-512 --filesystem exfat --pim 0 --keyfiles "" --random-source randomdata.txt</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>OK, that's a bit hard to read, so let me break it out into each part below.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first item is the veracrypt command, assuming you installed it in the default location. By default VeraCrypt installs in <code>/usr/bin</code>, but because <code>/usr/bin</code> is in the path you don't have to specify it when calling VeraCrypt. You do though, need to use all lowercase as Linux is case sensitive. In addition you'll need to call it using <code>sudo</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The <code>--text</code> parameter says we want to use VeraCrypt in text mode, not GUI. Note, the <code>--text</code> parameter must be the FIRST parameter you pass in, or it will not work.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--text</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We next tell VeraCrypt we want to create a new file container, and where it is to be stored at. For this demo, I'm just going to use the <strong>Documents</strong> directory. Be sure to <code>cd</code> into this folder from the terminal command line before issuing the full command. Otherwise, you can specify the full path to the <code>.vc</code> file you want to create.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--create vctest.vc</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Next we indicate how big we want our container to be. If you just list a number, VeraCrypt assumes you mean bytes, but you can also affix M for megabytes, G gigabytes, K kilobytes, and so on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here I'm going to keep it small for demo purposes and use 200 megabytes.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--size 200M</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now we provide our password. Normally you would not want to hard code it, but rather pass it into your script as a parameter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I wanted to keep this demo simple though, and focus on VeraCrypt so I've just hard coded it. I'm using the same "super secure" password I've used in my last few posts.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--password MySuperSecurePassword1!</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Next is the volume type, normal or hidden. In a <a href="https://arcanecode.com/2021/05/31/creating-and-using-hidden-containers-in-veracrypt/">previous blog post</a> I cover hidden types, and if you are going to do a hidden volume I would suggest using the GUI in order to assure it is done right.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For this demo we'll go with a normal volume.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--volume-type normal</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now we pick the encryption type. There are quite a few, so refer to the VeraCrypt documentation for a full list. Here we're using AES.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--encryption AES</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Next up, for the encryption method we picked it needs to know the hashing algorithm. For AES I suggest SHA-512.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--hash sha-512</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In order to keep this container portable across other OS's (Windows and macOS) we'll format using <code>exfat</code>. In order to format as exFAT, you'll need to have installed the exFAT utilities on your system (see the Prerequisites section above).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--filesystem exfat</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The PIM is a special number that allows you to specify the number of times hashing algorithm executes. It's a bit more complex than that, if you want full details see the <a href="https://documentation.help/VeraCrypt/Personal%20Iterations%20Multiplier%20(PIM).html">VeraCrypt documentation</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For now, we can pass it the value of 0 (zero), which tells it to use the default value for the PIM.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--pim 0</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can mount a volume in VeraCrypt using a keyfile, as opposed to a password. We've not done that here, so we'll just pass in an empty string to indicate we won't use a keyfile.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--keyfiles ""</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As a final parameter, you need to provide random data for VeraCrypt to use when generating its hashes. It needs at least 320 characters, but you can give more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I've provided a sample one as part of this demo (see the <a href="https://github.com/arcanecode/VeraCrypt-CommandLine-Examples" target="_blank" rel="noreferrer noopener">GitHub code samples</a>), I just picked up my keyboard and randomly smacked myself in the head until I got around 350 characters. I'd suggest creating one of your own for production, but for just testing and learning (I'm assuming you'll throw away the vault when you are done) then the one here will be OK.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As stated in the beginning of this section, either copy the <code>randomdata.txt</code> file into the folder where you are executing the commands from, in my case the Documents folder, or specify the full path to it in the command line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--random-source randomdata.txt</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>OK, that's everything you need to create a volume. Just run the command, or execute the script. Now that it's created, let's mount it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Mounting a VeraCrypt Volume</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here is the full command line to mount. (As before, it should be on a single line, ignore any wrapping done by your browser).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt --text --mount vctest.vc /mnt --password MySuperSecurePassword1! --pim 0 --keyfiles "" --protect-hidden no --slot 1 --verbose</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's start breaking it down. First, as before, is the call to the VeraCrypt app.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As with all of these commands, the <code>--text</code> parameter must come first to let VeraCrypt know we want to use text mode and not the GUI.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--text</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The mount parameter actually has two values that need to be passed in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First we pass in the name of the file to mount.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second we need to provide a mount point. This will let Linux treat it like any other drive you might plug in. In this example we will use <code>/mnt</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--mount vctest.vc /mnt</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Using <code>/mnt</code> works fine if you only have one volume to mount. If not, you'll have to create new mount points. This is pretty easy.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo mkdir /media/vc2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Placing these in the <code>/media</code> area is a common practice. From there you can name it anything you want. You could use vc followed by the slot number, or use the name of the file.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Then in your script, you can use:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--mount vctest.vc /media/vc2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Note that once you create the directory under /media it is persistent, you don't have to create it again. This does mean your <code>/media </code>will accumulate these mount points over time. Once you are sure you'll no longer need them consider using <code>rmdir</code> to remove them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You could of course use <code>/media</code> for all your volumes, and avoid using /mnt completely. Just be aware you'll have to create a name under /media first.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next is our "super secure" password. If your password has spaces, you'll need to wrap this in double quote marks.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--password MySuperSecurePassword1!</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you overrode the default PIM when creating your volume, you'll need to provide it. Otherwise, we can pass it the value of 0 (zero), which tells it to use the default value.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--pim 0</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you created your volume using a keyfile or files, provide them here. Otherwise, you can just pass in an empty string to indicate no keyfile is needed.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--keyfiles ""</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If this volume contained a hidden volume, you would need to let VeraCrypt know by using a value of yes, plus some other parameters.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this case there is no hidden partition in our volume, so we can just give a value of <code>no</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--protect-hidden no</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>OPTIONAL - Slot</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Slot is an optional parameter. If you look at the VeraCrypt, down the left side are a series of slot numbers. If you omit this parameter, VeraCrypt will mount in the first empty slot.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However you can specify a slot, which can be useful if you want to make sure certain volumes always mount in a specific slot. You can then use the slot number when you want to dismount your volumes.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--slot 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><strong>OPTIONAL - Verbose</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Verbose is also an optional parameter, but I often include it just to see what is going on under the covers. You can use it with any of the commands in this post, I just included it on this one for example purposes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you intend to make this into a script then I would suggest omitting it once your script is debugged and working.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>--verbose</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>OK, hopefully all is going well, and you've created and mounted your volume. Let's next see how to get a list, from the command line, of all your mounted volumes.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Listing Mounted Volumes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here's the command line to see what is mounted on your Ubuntu computer.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt --text --list</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As with other commands you have seen, we start by calling the VeraCrypt application. We then use <code>--text</code> to let VeraCrypt know not to use the GUI.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We finish with <code>--list</code>, which tells VeraCrypt to display a list of all mounted containers. This will include the slot number, volume name, and mount directory.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you've been following along, then running the list should produce an output like:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>1: /home/arcanecode/Documents/vctest.vc /dev/mapper/veracrypt1 /mnt</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Of course your folder will have your username, not <code>arcanecode</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mom always taught me to put away my toys when I was done playing with them, so in the next section we'll see how to dismount your volumes once you are done with them.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Dismounting VeraCrypt Volumes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are four ways to dismount a volume. Three of them will dismount a specific volume, the final will dismount all volumes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All methods follow the same pattern. Run <code>veracrypt</code> using <code>sudo</code>, followed by the <code>--text</code> parameter to tell VeraCrypt not to launch the GUI.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally we give the <code>--dismount</code> to let VeraCrypt know we want to unload our volume. The value passed into the <code>--dismount</code> parameter varies, and will be explained below.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Method 1: Slot Number</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt --text --dismount --slot 1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With the first method, you provide the slot number. If you mounted a volume and used the slot number parameter, for example your personal file vault is always in slot 5, then this can be an easy way to dismount.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the other hand, if you let VeraCrypt load in the first available slot, you'll either have to look at the GUI, or run the list command in the previous section, to learn the slot number.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Be aware there is no requirement to load slots in sequential order. Your first mount could go into slot 5, the second into slot 7, and third into slot 10, leaving the other slots empty.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Method 2: Mount Directory</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt --text --dismount /mnt</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Or if you created it under <code>/media</code>, it might look like:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt --text --dismount /media/vc2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Using the volume list command or looking at the "Mount Directory" column in the GUI, you can pass in that value to dismount. Because you may not always use the same mount point on all systems to mount, it can be of an issue trying to be reliable in dismounting the right volume.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Method 3: Volume File Name</strong></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt --text --dismount vctest.vc</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Alternatively you can use the full path to the volume.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt --text --dismount /home/arcanecode/Documents/vctest.vc</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This method is the most reliable. Since you know the name of the file you mounted, you can just provide the same file name to dismount.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>VeraCrypt doesn't care what slot it is loaded into, it uses the file name to find it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>The winner - Method 3!</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For the reasons above, I <em>highly </em>suggest Method 3 be your go to method for dismounting volumes in your scripts. It is the most reliable, and easiest to understand when looking at the scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But wait, there's more!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Dismounting ALL Volumes</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is one final method, you can dismount all of the VeraCrypt volumes you have mounted.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sudo veracrypt --text --dismount</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you use just the <code>--dismount</code> parameter, and pass in no values, then VeraCrypt will attempt to dismount ALL volumes you have loaded.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This can be a useful command to run when you're shutting down your computer, to ensure all volumes are properly shutdown.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you don't have any volumes mounted, then VeraCrypt basically shrugs it's shoulders, does nothing, and ends.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we learned how to create, mount, and dismount VeraCrypt volumes from the command line in Linux, specifically Ubuntu. In addition, we also saw how to get a listing of volumes currently mounted.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3601</wp:post_id>
  <wp:post_date>2021-06-21 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-06-21 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-06-20 19:03:35</wp:post_modified>
  <wp:post_modified_gmt>2021-06-21 01:03:35</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>veracrypt-on-the-command-line-for-ubuntu-linux</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="security"><![CDATA[Security]]></category>
  <category domain="category" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
  <category domain="post_tag" nicename="veracrypt"><![CDATA[VeraCrypt]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3631]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[59853584805]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1624287661]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1406990546615275525";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_242134201050833";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165564</wp:comment_id>
    <wp:comment_author><![CDATA[iamjerry]]></wp:comment_author>
    <wp:comment_author_email>agwarej80@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.tecreals.com</wp:comment_author_url>
    <wp:comment_author_IP>197.210.85.71</wp:comment_author_IP>
    <wp:comment_date>2021-09-04 08:03:29</wp:comment_date>
    <wp:comment_date_gmt>2021-09-04 14:03:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hii..

I just really wanted to say you have quite an amazing blog here. The way you write your articles makes it so easy for users to resonate. I  must say, I am really impressed. I too am a blogger and I know the kind of work you have to put into an article to make it this amazing. I really do hope you can take a second to check out my website @ <a>waptrick</a> (https://www.makeoverarena.com/waptrick-games-videos-mp3-download-www-waptrick-com/)]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>130392874</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1630764209.995393;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"madeboost";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1630769003.57417;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"madeboost";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165738</wp:comment_id>
    <wp:comment_author><![CDATA[Attempting to Create a Minimal Ubuntu System | Ray Woodcock&#039;s Latest]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://raywoodcockslatest.wordpress.com/2021/09/04/minimal-ubuntu/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.84.135</wp:comment_author_IP>
    <wp:comment_date>2021-09-20 16:14:16</wp:comment_date>
    <wp:comment_date_gmt>2021-09-20 22:14:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] was more troublesome. Using the Lubuntu installation (above) as an example, I found that it had dependency problems. To figure those out, I started with sudo apt install aptitude gdebi. Then I right-clicked on the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632176056.994152;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632180126.807629;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[va-linux-001]]></title>
  <link>http://arcanecode.com/2021/06/21/veracrypt-on-the-command-line-for-ubuntu-linux/va-linux-001/</link>
  <pubDate>Mon, 21 Jun 2021 00:50:28 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/06/va-linux-001.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3631</wp:post_id>
  <wp:post_date>2021-06-20 18:50:28</wp:post_date>
  <wp:post_date_gmt>2021-06-21 00:50:28</wp:post_date_gmt>
  <wp:post_modified>2021-06-20 18:50:28</wp:post_modified>
  <wp:post_modified_gmt>2021-06-21 00:50:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>va-linux-001</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3601</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/06/va-linux-001.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/06/va-linux-001.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:714;s:6:"height";i:598;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/06/va-linux-001.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:49002;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun with PowerShell Get-Random]]></title>
  <link>http://arcanecode.com/2021/07/05/fun-with-powershell-get-random/</link>
  <pubDate>Mon, 05 Jul 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3634</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Many people know about PowerShell's <code>Get-Random </code>cmdlet. Using it you can generate a random value. For example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Will output a value such as:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>64031951</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But did you know there's other features of Get-Random?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Numeric Ranges</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With Get-Random you can lock down the return result to a specific range. You can specify a minimum value as well as a maximum.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random -Minimum 100 -Maximum 200

122</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can run it numerous times and the return value will always be between 100 and 200.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You don't have to use both the minimum and maximum values, you can just use one or the other.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While be default it returns an unsigned 32 bit integer, you can also use it to return a random floating point value.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random -Minimum 10.5 -Maximum 20.9

11.9004625960255</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Get-Random and Arrays</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can also use Get-Random with Arrays. Let's say you have an array of integer values. You can pipe it through Get-Random and it will pick one value from the array for you.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 1, 3, 5, 7, 9
$array | Get-Random

7</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The cool thing about this is it works with any array. Let's say you have an array of states, and want to pick a state at random.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = (
  'Alabama', 'Alaska', 'Arizona',
  'Arkansas', 'California', 'Colorado',
  'Connecticut', 'Delaware', 'Florida',
  'Georgia', 'Hawaii', 'Idaho',
  'Illinois', 'Indiana', 'Iowa'
)
$array | Get-Random

Florida</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This also works with arrays that hold a collection of objects. Let's get a collection of file objects from our C:\Temp folder and let it pick one for us.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$files = Get-ChildItem -Path "C:\Temp"
$files | Get-Random

    Directory: C:\Temp

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----           1/14/2021  2:31 PM                curl-7.74.0</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Getting More Than One Random Item</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Get-Random also has a <code>-Count</code> parameter which you can use to get multiple values back. Let's use our state example, and let it return five states.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = (
  'Alabama', 'Alaska', 'Arizona',
  'Arkansas', 'California', 'Colorado',
  'Connecticut', 'Delaware', 'Florida',
  'Georgia', 'Hawaii', 'Idaho',
  'Illinois', 'Indiana', 'Iowa'
)
$array | Get-Random -Count 5

Idaho
Alaska
California
Delaware
Colorado</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This works with any type of array, or just random integers.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random -Count 3

1981714362
1664558041
1474367023</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>SetSeed</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Get-Random has one more parameter, <code>-SetSeed</code>. You can pass in a value, and when you do Get-Random will always return the same result for that seed.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Random -SetSeed 100

1881691673</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>No matter how many times you run Get-Random, as long as you use the same seed value, it will always return a result of 1881691673. This also works with other types of arrays such as the array of states we used earlier.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = (
  'Alabama', 'Alaska', 'Arizona',
  'Arkansas', 'California', 'Colorado',
  'Connecticut', 'Delaware', 'Florida',
  'Georgia', 'Hawaii', 'Idaho',
  'Illinois', 'Indiana', 'Iowa'
)
$array | Get-Random -SetSeed 33

Illinois</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Again, run this as much as you want and with the same SetSeed value it will always return the same state, in this case Illinois.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So why use SetSeed? One main use it testing. You want to create a set of reusable tests, for example using Pester, and want to validate you always get the same value back from your array.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we saw how to use Get-Random for a variety of purposes. Hopefully you'll find it as useful as I do!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">I have many PowerShell related courses on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.com/" target="_blank">https://pluralsight.com</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site. Once there just search for my name, Robert Cain, to see all the courses I have.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Learn how to use PowerShell's Get-Random cmdlet]]></excerpt:encoded>
  <wp:post_id>3634</wp:post_id>
  <wp:post_date>2021-07-05 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-07-05 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-15 15:39:08</wp:post_modified>
  <wp:post_modified_gmt>2021-07-15 21:39:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-get-random</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="get-random"><![CDATA[Get-Random]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3644]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[60385459786]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1625497228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1412063839848472588";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_251112836819636";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165736</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With the PowerShell Switch Parameter | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.149</wp:comment_author_IP>
    <wp:comment_date>2021-09-20 09:00:11</wp:comment_date>
    <wp:comment_date_gmt>2021-09-20 15:00:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] it&#8217;s actually quite easy. I started off the whole PowerShell series on my blog with a post Fun With PowerShell Get-Random. In it I described (among other things) how to use the Get-Random cmdlet to return a random value [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632150011.527621;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632153979.918811;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[get-random-image]]></title>
  <link>http://arcanecode.com/2021/07/05/fun-with-powershell-get-random/get-random-image/</link>
  <pubDate>Mon, 05 Jul 2021 03:12:57 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/get-random-image.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3644</wp:post_id>
  <wp:post_date>2021-07-04 21:12:57</wp:post_date>
  <wp:post_date_gmt>2021-07-05 03:12:57</wp:post_date_gmt>
  <wp:post_modified>2021-07-04 21:12:57</wp:post_modified>
  <wp:post_modified_gmt>2021-07-05 03:12:57</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>get-random-image</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3634</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/get-random-image.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/get-random-image.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:500;s:6:"height";i:128;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/get-random-image.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:5999;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Strings]]></title>
  <link>http://arcanecode.com/2021/07/12/fun-with-powershell-strings/</link>
  <pubDate>Mon, 12 Jul 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3646</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell has some of the best, most flexible string handling of any language I've used. In this post we'll look at some string basics, then some of the features that make it special.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note in these demos I'm using PowerShell Core 7.1.3 and VSCode. Everything here should also work in the PowerShell 5.1 and the PowerShell IDE.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Basic Strings in PowerShell</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Strings in PowerShell can be denoted with either single quote marks or double quote marks.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"This is a string"
'This is a string too!'
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you want to see the result, simply highlight the strings and press either F8 in VSCode, or F5 in the PowerShell IDE.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>This is a string
This is a string too!</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Multiline Strings, aka Here Strings</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell has the ability to create a multiline string, also known as a "<strong>here</strong>" string. To create a here string, use an @ sign, followed by a quotation mark (either single or double) then hit Enter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the next lines, enter the value for your string. Finally hit Enter, then on the next line put the closing quotation mark then another @ sign.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is important, the closing quotation mark and @ sign <strong>must</strong> be the first two characters on the line. If you attempt to indent them in any way the technique will not work!</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$heretext = @"
Some text here
Some more here
     a bit more

a blank line above
"@

$heretext

Some text here
Some more here
     a bit more

a blank line above</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Again, this works with single or double quotes. So what's a common use?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One common thing I use it for is SQL queries. Here's an example in a traditional language.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$sql = 'SELECT col1' `
     + '     , col2' `
     + '     , col3' `
     + '  FROM someTable ' `
     + ' WHERE col1 = ''a value'' '
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Note the single ` (back tick) mark at the end of each line. This is the line continuation character in PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As you can see, each line has to be connected with + signs. Now let's contrast it with a here string version.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$sql = @'
SELECT col1
     , col2
     , col3
  FROM someTable
 WHERE col1 = 'a value'
'@
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This is not only much more readable, but easier to work with. You can develop your SQL query in SQL Server Management Studio, or Azure Data Studio, then simply cut and paste it into PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another thing to notice, you can embed single or double quotes within a here string, and PowerShell will ignore them as denoting another string.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Embedded Quote Marks</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you need to embed a quotation mark in a string, you can simply double them up.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"ArcaneCode said ""PowerShell is awesome!"" and the crowd applauded."

ArcaneCode said "PowerShell is awesome!" and the crowd applauded.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This technique works with single quote marks as well. For example one's used in common words such as <em>shouldn't</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>'You shouldn''t miss the blog posts at arcanecode.com'

You shouldn't miss the blog posts at arcanecode.com</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>String Interpolation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You may be wondering what the difference between single and double quotes is. Double quotes allow you to use something called <strong>string interpolation</strong>. String interpolation will take any variables embedded in the string and expand them before returning the string.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's a simple example. First we get the number of items in the current folder. Then we copy the current folder location into another variable. Finally we create a string with these variables in it, surrounding the string in double quote marks.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$items = (Get-ChildItem).Count 

$loc = Get-Location

"There are $items items are in the folder $loc."

There are 3 items are in the folder C:\PSCore-QuickStart.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see in the result (the bottom line) it has taken the value in <code>$items</code>, a 3, and expanded it in the return result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Likewise, it has taken the value in <code>$loc</code> and expanded it to the name of the current folder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now see the result if single quote marks had been used.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$items = (Get-ChildItem).Count 

$loc = Get-Location

'There are $items items are in the folder $loc.'

There are $items items are in the folder $loc.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With single quotes, the string interpolation engine does not kick in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a rule of thumb then, only use double quotes if you have to have interpolation. Otherwise use single quotes so you don't incur the (admittedly minimal) amount of time for the string interpolation engine to needlessly process the string.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Escape Characters</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell also has the concept of escape characters. These are special characters you can embed in the string that provide additional formatting instructions. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that escape characters only work inside double quote marked strings. If you use single quotes for your strings, it will just display the escape character. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are four that are the most commonly used. Tab, Carriage Return, Line Feed, and escaping the $ (dollar sign) so it may be used.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Escape characters are preceded by a back tick <strong>`</strong> then the character. Let's look at the tab, which is a <strong>`t</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"`tThis is tabbed in"

        This is tabbed in</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The next is the carriage return line feed sequence, which is <code>`r`</code>n.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"Here is some text`r`nAnd some more text`r`n`r`nA blank line before this"

Here is some text
And some more text

A blank line before this</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You would most commonly use this when looping over data and building a new output string.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final escape character we'll look at allows you to embed a $ character in an double quoted string. Simply use a back tick followed by the dollar sign.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"The `$items variable is $items"

The $items variable is 3</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We've only covered four here, but note there are many more escape sequences you can use in PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post you saw all kinds of cool things you can do with PowerShell strings. With this knowledge you can take your PowerShell scripts to the next level, and be able to generate some creative output with your own PowerShell strings.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a rel="noreferrer noopener" href="https://www.pluralsight.com/courses/powershell-developers-quick-start-linux-macos-windows" target="_blank">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.com/" target="_blank">https://pluralsight.com</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site. Once there just search for my name, Robert Cain, to see all the courses I have.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun with PowerShell Strings]]></excerpt:encoded>
  <wp:post_id>3646</wp:post_id>
  <wp:post_date>2021-07-12 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-07-12 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-15 15:37:56</wp:post_modified>
  <wp:post_modified_gmt>2021-07-15 21:37:56</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-strings</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="strings"><![CDATA[Strings]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3667]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[60644954797]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1626102013]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1414600491544231936";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_255816513015935";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165792</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Write-Verbose | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.206</wp:comment_author_IP>
    <wp:comment_date>2021-09-27 09:00:18</wp:comment_date>
    <wp:comment_date_gmt>2021-09-27 15:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In my example though I want to display a multi line message. The first line will hold the name of the function, the second will be the start time. To accomplish this I am using a here string. If you aren&#8217;t familiar with here strings, see my post from July 12, 2021 named Fun With PowerShell Strings. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632754818.138482;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632758496.904622;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165078</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell String Formatting | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.99.201</wp:comment_author_IP>
    <wp:comment_date>2021-07-19 09:00:15</wp:comment_date>
    <wp:comment_date_gmt>2021-07-19 15:00:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] last Monday&#8217;s blog post, Fun With PowerShell Strings, I covered a lot of the basics around PowerShell Strings. One thing we didn&#8217;t get into though [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1626710433.467199;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1626706815.927476;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626913891]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626913891.119248;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165516</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Basic Functions | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.124</wp:comment_author_IP>
    <wp:comment_date>2021-08-30 09:00:12</wp:comment_date>
    <wp:comment_date_gmt>2021-08-30 15:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] The $() will force PowerShell to evaluate the expression, then string interpolation will replace it with the value before returning the final string. (For more on string interpolation, see my recent article Fun With PowerShell Strings.) [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630335612.327474;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630340763.733679;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166918</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In this example I used string interpolation to build my return string. (For more on string interpolation, see my post Fun With PowerShell Strings.) [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431624.451488;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436450.01065;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-strings]]></title>
  <link>http://arcanecode.com/2021/07/12/fun-with-powershell-strings/fun-with-powershell-strings/</link>
  <pubDate>Wed, 07 Jul 2021 02:12:40 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-strings.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3665</wp:post_id>
  <wp:post_date>2021-07-06 20:12:40</wp:post_date>
  <wp:post_date_gmt>2021-07-07 02:12:40</wp:post_date_gmt>
  <wp:post_modified>2021-07-06 20:12:40</wp:post_modified>
  <wp:post_modified_gmt>2021-07-07 02:12:40</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-strings</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3646</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-strings.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-strings.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:764;s:6:"height";i:168;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-strings.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:6759;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-strings]]></title>
  <link>http://arcanecode.com/2021/07/12/fun-with-powershell-strings/fun-with-powershell-strings-2/</link>
  <pubDate>Wed, 07 Jul 2021 02:14:40 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-strings-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3667</wp:post_id>
  <wp:post_date>2021-07-06 20:14:40</wp:post_date>
  <wp:post_date_gmt>2021-07-07 02:14:40</wp:post_date_gmt>
  <wp:post_modified>2021-07-06 20:14:40</wp:post_modified>
  <wp:post_modified_gmt>2021-07-07 02:14:40</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-strings-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3646</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-strings-1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-strings-1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:576;s:6:"height";i:174;s:4:"file";s:103:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-strings-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:6567;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Arrays]]></title>
  <link>http://arcanecode.com/2021/07/26/fun-with-powershell-arrays/</link>
  <pubDate>Mon, 26 Jul 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3668</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this article, we'll look at the different ways to use Arrays in PowerShell. We'll cover the basics, then move onto more advanced topics.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A quick note for my non-native English speaking friends, I use the term <em>aka</em> a few times. AKA is shortcut for "<em>also known as</em>", it's just a quick way to say "a is another word for b".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Array Basics</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The formal array to declare an array is to use <code>@()</code> around the contents, assigning it to a variable.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = @('Robert', 'Cain')
$array

Result:
Robert
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Note that in the output, each item (aka element) in the array is displayed on a single line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is a little easier way to create an array, you can omit the <code>@()</code> . If you are passing in more than one item, separated by a comma, PowerShell converts it to an array.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Robert', 'Cain'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you have a long list of items, you can break the list over multiple lines. As long as a comma is the last thing on the line PowerShell will assume the rest of the array contents continue on the next line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Robert',
         'Cain'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can access individual items in the array by using what is called positional notation. After the name of the array, use square brackets [] and inside put a number that indicates the position in the array.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Numbering begins at zero and goes to the maximum number of elements. (Well, technically the max number of elements minus one, but more on that in a moment.) If you try to use a number greater than the maximum number of elements, you will get an error.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Robert', 'Cain'
$array&#091;0]

Result:
Robert

$array&#091;1]

Result:
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Of course you can use variables in place of the numeric values for positional notation.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$x = 1
$array&#091;$x]

Result:
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So how do you know how many items are in an array? The array variable type has a <code>Count</code> property that can tell you that.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array.Count

Result:
2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There is also a property called <code>Length</code>, which returns the same thing. They can be used interchangeably, most people however use the <code>Count</code> property.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One thing to be careful of with <code>Count</code>, is that it returns the number of items in the array. But arrays start with position 0 (zero), so the last item in an array will be <code>Count - 1</code>, not <code>Count</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array&#091;$array.Count - 1]

Result:
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>PowerShell does provide a shortcut to get the last element. You can pass in a -1 (negative one) into the position, and it will get the last item.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array&#091; -1 ]

Result:
Cain</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Fun Tricks with Positional Notation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are a few fun tricks you can do with positional notation. So far, we've only used a single value in the square brackets to get a single value from the array. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Did you know you can pass in multiple numbers and get back multiple elements from the array in one command?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Zero', 'One', 'Two', 'Three',
         'Four', 'Five', 'Six', 'Seven'
$array&#091;2, 4, 6]

Result:
Two
Four
Six</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If you pass in the same number twice, you'll get that array item back twice in the results.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

$array = 'Zero', 'One', 'Two', 'Three',
         'Four', 'Five', 'Six', 'Seven'
$array&#091;2, 4, 2]

Result:
Two
Four
Two</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Finally, you can use PowerShell's range operator to return a series of values.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

$array = 'Zero', 'One', 'Two', 'Three',
         'Four', 'Five', 'Six', 'Seven'
$array&#091;1..4]

Result:
'One'
'Two'
'Three'
'Four'</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Adding Items to an Array</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Adding items is pretty easy, you can use the<code> +=</code> (plus equal) to add a new item into the array. In this example, we'll add two new items, then display the new array, and finally the count of items.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Robert', 'Cain'

$array += 'Arcane'
$array += 'Code'
$array

$array.Count

Result:
Robert
Cain
Arcane
Code
4</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here you can see are my original two items, followed by the new ones we just added. Finally the count, 4, is displayed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Updating an Array Element</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>What if we want to update a value in the array? Turns out that is as easy as adding a new one. Simply address the item to replace with positional notation, then assign a new value.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array&#091;0] = 'Mr.'
$array

Result:
Mr.
Cain
Arcane
Code</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Empty Arrays</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When you need to create an empty array, you use the formal array declaration syntax we saw in the first example, only you put nothing in it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$empty = @()
$empty

Result:
(Nothing is displayed because the array is empty)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So why would you need an empty array?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's say  you were looping over a collection of some type, and were building a new array to output. It might be a collection (aka array) of files, or records return from a SQL Server query.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You would create the empty array, enter the loop, extract and format the information you want then add it to the empty array using the += syntax.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Iterating Over Arrays</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are a few methods we can use to iterate, or loop over the contents of our arrays. The most common, and one I use the most, is a <code>foreach</code> loop.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>foreach($item in $array)
{
  "The current item is $item"
}

Result:
The current item is Mr.
The current item is Cain
The current item is Arcane
The current item is Code</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The next option is to pipe our array into the <code>ForEach-Object</code> cmdlet, passing a script block to the cmdlet with our instructions.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array | ForEach-Object { "Current Value: $PSItem"}

Result:
Current Value: Mr.
Current Value: Cain
Current Value: Arcane
Current Value: Code</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The variable <code>$PSItem</code> is a built in PowerShell variable, meant to represent the current item in a loop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, an Array datatype has a <code>ForEach</code> method built right in. You call the method, then as you did with the <code>ForEach-Object</code> cmdlet pass in a script block with the instructions.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array.ForEach({ "Current Value: $_"})

Result:
Current Value: Mr.
Current Value: Cain
Current Value: Arcane
Current Value: Code</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example we used the variable <code>$_ </code>to represent the current item. The <code>$_</code> was the original way to create a placeholder, later PowerShell added the <code>$PSItem</code> variable. <code>$PSItem</code> was introduced way back in version 3, so unless you are on a really really REALLY old version of PowerShell, you can use <code>$_</code> and <code>$PSItem</code> interchangeably.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Erasing the Contents of an Array</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Clearing out the contents of an array is easy, just call the array's <code>Clear</code> method.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array.Clear()
$array

Result:
(Nothing is displayed because the array is empty)</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Mixed Data Types</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Unlike a lot of other languages, the values going into an array can be a mix of data types. In the example below I'm going to load an array with some strings, integers, and a floating point type.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Arcane', 'Code', 33, 42,
         'Alabama', 3.14, 'In the Morning'
$array

Result:
Arcane
Code
33
42
Alabama
3.14
In the Morning</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Removing Items From Arrays</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We now move to a topic that doesn't have a happy answer. You cannot remove an item from an array. That said, you could create a brand new array, filtering out the unwanted elements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example, we pipe our array into the <code>Where-Object</code> cmdlet. We pass in a script block, in which we say only pass out items where the value of the current item is not equal (<code> -ne </code> ) to the state of Alabama. After that we display the results.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note too we are using another built in line continuation feature of PowerShell. If the pipe symbol, a <code>|</code> , is the last thing on the line PowerShell assumes what is on the next line is a continuation of the line above. (I like to indent the second line to the right of my equal sign, but it's not required.)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

$array = 'Arcane', 'Code', 33, 42,
         'Alabama', 3.14, 'In the Morning'
$newArray = $array |
            Where-Object { $PSItem -ne 'Alabama' }
$newArray

Result:
Arcane
Code
33
42
3.14
In the Morning</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the state of Alabama is no longer in our list.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Fun Operators - In and Compare</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are other operators in PowerShell that can let us do fun things with arrays.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, what if we need to know if an item is already in the array? There's actually two methods to handle that. In the first, we'll see if the item is in the array.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 'Arcane', 'Code', 33, 42,
         'Alabama', 3.14, 'In the Morning'
'Arcane' -in $array

Result:
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the second method we'll use the contains operator.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array -contains 'Code'

Result:
True</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>More Fun Operators - Join</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>What if you wanted to convert all of the elements in the array into a single string? To handle that we have the <code>join</code> operator. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After the join, you pass in a character to use to separate each element. You also have the option to pass in an empty string if you don't want anything separating your results.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the last example, you'll see that you can pass in more than one character to separate the results.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 1, 3, 5, 7, 9
$result = $array -join ' '
$result

Result: 1 3 5 7 9

$array = 1, 3, 5, 7, 9
$result = $array -join '-'
$result

Result: 1-3-5-7-9

$array = 1, 3, 5, 7, 9
$result = $array -join ','
$result

Result: 1,3,5,7,9

$array = 1, 3, 5, 7, 9
$result = $array -join ''
$result

Result: 13579

$result = $array -join ', '
$result

Result: 1, 3, 5, 7, 9
</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Even More Fun Operators - Replace, Match, Split</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are three more operators we'll cover here. The first is <code>Replace</code>, which will search through the array and replace one string with another.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$servers = 'HOLD-001', 'HOLD-002', 'SQL-001', 'SQL-002'
$newServers = $servers -replace 'HOLD', 'TEST'
$newServers

Result:
TEST-001
TEST-002
SQL-001
SQL-002</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You might use this to develop a script to run against your servers. When designing the script you might use a string like HOLD-001, HOLD-002, etc where HOLD is just a place holder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At runtime you pass a parameter into your script such as DVLP (development), TEST, or PROD (production) so you can use the same script in multiple environments.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next operator we'll look at is <code>match</code>. Match can be used as a filter. Let's take a look at this example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$servers = 'SRV-001', 'SRV-002', 'SQL-001', 'SQL-002'
$newServers = $servers -match 'SQL'
$newServers

Result:
SQL-001
SQL-002</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, only servers with SQL in the name were returned. This might be useful if you had a full list of all servers you wanted to iterate over, but in certain sections of your script you only wanted to do things to your SQL Servers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final operator to look at is <code>split</code>. You can use split to further divide the elements in your array into smaller parts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example we'll reuse our list of servers, but split the items based on a dash (or hyphen).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$servers = 'SRV-001', 'SRV-002', 'SQL-001', 'SQL-002'
$newServers = $servers -split '-'
$newServers

Result:
SRV
001
SRV
002
SQL
001
SQL
002</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here you can see each server name was split into two parts, each part becoming a new element in our output array. Also note that the character we split on, the dash, is discarded from the result set.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Iterating Over an Array of Objects</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Just like arrays of simple items like strings and integers, you can also loop over an array of objects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here, we'll get a list of files in my temp directory using the <code>Get-ChildItem</code> cmdlet.  We'll also use the empty array technique you saw earlier. A <code>foreach</code> loop will be used to go over each file object in the array and format a string with some of its properties, then add that string to our empty <code>$newFiles</code> array.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Set-Location "C:\Temp"
$files = Get-ChildItem
$newFiles = @()
foreach($file in $files)
{
  $newFiles += "$($file.Name) is $($file.Length) in size"
}
$newFiles

Result:
2019-ARRL-FieldDay-Rules-RevA.pdf is 111434 in size
ARRL-FIELD-DAY.adi is 76110 in size
azuredatastudio-windows-user-setup-1.13.1.exe is 91789368 in size
curl-7.74.0.zip is 6068670 in size
standard-notes-3.6.14-win.exe is 105761936 in size
SysinternalsSuite.zip is 41889407 in size
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Within my loop $file represents the current item in my <code>$files</code> array. Inside I access the properties of my file object. I could, for example, have used if <code>($file.Length -gt 1)</code> and done something useful.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this case I'm using string interpolation to display the value of a property. Note that because I want it to access the property, within the string I have to wrap it in <code>$()</code>, such as <code>$($file.Name)</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This forces PowerShell to first evaluate what is inside the <code>$()</code>, then return that into the string.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This post turned out longer than I'd intended, but there are so many fun things you can do with a PowerShell Array it was hard to stop at just a few.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With luck you'll have found some new techniques you can employ with arrays in your own PowerShell scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun with PowerShell Arrays]]></excerpt:encoded>
  <wp:post_id>3668</wp:post_id>
  <wp:post_date>2021-07-26 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-07-26 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-22 13:36:10</wp:post_modified>
  <wp:post_modified_gmt>2021-07-22 19:36:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-arrays</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="array"><![CDATA[Array]]></category>
  <category domain="post_tag" nicename="arrays"><![CDATA[Arrays]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3735]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[61162453764]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1627311614]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1419673926586744833";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_265197598744493";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167471</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.73</wp:comment_author_IP>
    <wp:comment_date>2022-03-24 10:00:13</wp:comment_date>
    <wp:comment_date_gmt>2022-03-24 16:00:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] First I create an empty array that will hold the output. To learn more about arrays, see my post Fun With PowerShell Arrays. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648142277.291486;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648137613.406821;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:118:"Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code";s:18:"comment_author_url";s:124:"http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:144:"[&#8230;] First I create an empty array that will hold the output. To learn more about arrays, see my post Fun With PowerShell Arrays. [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:11:"192.0.86.73";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:11:"192.0.86.73";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:60:"http://arcanecode.com/2021/07/26/fun-with-powershell-arrays/";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165172</wp:comment_id>
    <wp:comment_author><![CDATA[Fun with Arrays in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/07/30/fun-with-arrays-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-07-30 06:10:10</wp:comment_date>
    <wp:comment_date_gmt>2021-07-30 12:10:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain looks at how arrays operate in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1627647010.728232;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1627652057.744728;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-arrays]]></title>
  <link>http://arcanecode.com/2021/07/26/fun-with-powershell-arrays/fun-with-powershell-arrays/</link>
  <pubDate>Fri, 09 Jul 2021 20:18:50 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-arrays.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3735</wp:post_id>
  <wp:post_date>2021-07-09 14:18:50</wp:post_date>
  <wp:post_date_gmt>2021-07-09 20:18:50</wp:post_date_gmt>
  <wp:post_modified>2021-07-09 14:18:50</wp:post_modified>
  <wp:post_modified_gmt>2021-07-09 20:18:50</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-arrays</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3668</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-arrays.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-arrays.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:515;s:6:"height";i:194;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-arrays.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:8800;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Hash Tables]]></title>
  <link>http://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/</link>
  <pubDate>Mon, 02 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3737</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hash tables are powerful, flexible items. In some languages, hash tables are also called <em>dictionaries</em>. In this post we'll start with a few basics, then get into some fun things you can do with hash tables.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A quick note, some documentation calls them a <em>hash table</em>, others read <em>hashtable</em>, one word. For this post I'll use the two word <em>hash table</em>, but it's the same thing no matter what documentation or blog you read.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Hash Table Basics</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To create a hash table you will need to use the @{} syntax to create a set of key / value pairs.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash = @{'Key'                 = 'Value'
          'PowerShell'          = 'PowerShell.com'
          'Arcane Code'         = 'arcanecode.com'
          'Pluralsight'         = 'pluralsight.com'
          'GitHub - ArcaneCode' = 'github.com/arcanecode'
         }
$hash                  # Display all values

Result:
Name                           Value
----                           -----
Arcane Code                    arcanecode.com
Key                            Value
Pluralsight                    pluralsight.com
PowerShell                     PowerShell.com
GitHub - ArcaneCode            github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example I lined up the equal signs because, in my humble opinion, it's easier to read. But it's not required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Similar to an array, you can use positional notation to retrieve a value, only instead of a numeric value you pass in the key.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash&#091;'PowerShell']

Result:
PowerShell.com</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The hash table manifests each key as a property. This means instead of positional notation you can instead use . (dot) notation.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.PowerShell

Result:
PowerShell.com</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But Arcane, you may ask, some of those keys have spaces in them. How does that work?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well all you have to do is put the key in quotes.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.'Arcane Code'

Result:
arcanecode.com</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Well that was fun, but what about updating a value for a key? All you have to do is assign the new value.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.'Arcane Code' = 'ArcaneCode.me'
$hash

Result:
Name                           Value
----                           -----
GitHub - ArcaneCode            github.com/arcanecode
Key                            Value
PowerShell                     PowerShell.com
Pluralsight                    pluralsight.com
Arcane Code                    arcanecode.me</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see the value for the <code>'Arcane Code'</code> key has changed from <code>arcanecode.com</code> to <code>arcanecode.me</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition to updating, you will have times you want to add a new item to an array. Doing so isn't intuitive, but it's easy. Just use the hash table, provide the new key and assign the value to it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Ubuntu = 'Ubuntu.com'
$hash

Result:
Name                           Value
----                           -----
GitHub - ArcaneCode            github.com/arcanecode
Key                            Value
Ubuntu                         Ubuntu.com
PowerShell                     PowerShell.com
Pluralsight                    pluralsight.com
Arcane Code                    arcanecode.me</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Fun Properties and Methods of Hash Tables</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Hash tables have a variety of useful properties and methods you can call. The first, <code>Keys</code>, will return a list of all the keys.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Keys

Result:
GitHub - ArcaneCode
Key
PowerShell
Pluralsight
Arcane Code
Ubuntu
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you might guess, there's a corresponding property to return all the values.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Values

Result:
github.com/arcanecode
Value
PowerShell.com
pluralsight.com
arcanecode.me
Ubuntu.com</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Just like the array data type, hash tables also have a <code>Count</code> property to let you know how many key/value pairs are in the table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Count

Result:
6</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Earlier in this post I showed how to add a new key/value pair. Before adding, it would probably be a good idea to check and see if it is already there. There is a <code>ContainsKey</code> method that will do that.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.ContainsKey('Arcane Code')

Result:
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This method will return either <code>True</code> or <code>False</code> depending on the presence of the key.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Likewise, there is a method to check to see if a value is present.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.ContainsValue('pluralsight.com')

Result:
True</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>What if we'd wanted to use <code>ContainsKey</code> to see if a key was present, and if so we wanted to remove it? There is a <code>Remove</code> method that will delete a key/value pair from our hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Remove('Ubuntu')
$hash

Result:
Name                           Value
----                           -----
GitHub - ArcaneCode            github.com/arcanecode
Key                            Value
PowerShell                     PowerShell.com
Pluralsight                    pluralsight.com
Arcane Code                    arcanecode.me</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see in the results, the key / value pair for the Ubuntu entry is now gone.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final method we'll look at in this section will allow us to remove <em>all</em> key / value pairs from the hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash.Clear()
$hash

Result:
(Nothing is displayed because the hash table is empty)</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Creating an Empty Hash Table</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Much as with arrays, there are times you will want to create an empty hash table. You could then enter a loop that added new key / value pairs to the hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To declare an empty hash table, you simply assign <code>@{}</code> to a variable.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$empty = @{}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now you can assign values to it. Here we'll do it in individual lines, but as I indicated this technique is most useful in a loop.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$empty&#091;'Pluralsight'] = 'pluralsight.com'
$empty&#091;'DataFabricator'] = 'datafabricator.com'
$empty

Result:
Name                           Value
----                           -----
Pluralsight                    pluralsight.com
DataFabricator                 datafabricator.com</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Ordered Hash Tables</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's reset our hash table, then look at the output.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash = @{'Key'                 = 'Value'
          'PowerShell'          = 'PowerShell.com'
          'Arcane Code'         = 'arcanecode.com'
          'Pluralsight'         = 'pluralsight.com'
          'GitHub - ArcaneCode' = 'github.com/arcanecode'
         }
$hash

Result:
Name                           Value
----                           -----
Arcane Code                    arcanecode.com
Key                            Value
Pluralsight                    pluralsight.com
PowerShell                     PowerShell.com
GitHub - ArcaneCode            github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Look at the output carefully. The returned list is <em>not </em>in the same order we added them to the hash table. Most of the time you are referencing the hash table via a specific key, so the ordering isn't a concern.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if you needed them to be returned in the same order they were added in? Fortunately PowerShell has an <code>[ordered]</code> instruction  you can place before declaring the hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$hash = &#091;ordered]@{
  'Key'                 = 'Value'
  'PowerShell'          = 'PowerShell.com'
  'Arcane Code'         = 'arcanecode.com'
  'Pluralsight'         = 'pluralsight.com'
  'GitHub - ArcaneCode' = 'github.com/arcanecode'
}
$hash

Result:
Name                           Value
----                           -----
Key                            Value
PowerShell                     PowerShell.com
Arcane Code                    arcanecode.com
Pluralsight                    pluralsight.com
GitHub - ArcaneCode            github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the results are returned in the exact same order they were added to the hash table. This example also demonstrates you can begin the list of key / value pairs on the next line after the single squiggly bracket <code>{</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Iterating (Looping) Over a Hash Table</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It is possible to loop over the contents of a hash table. But it isn't quite as intuitive as it is with arrays. If you were to use <code>foreach($item in $hash)</code> you'd get an error, because PowerShell isn't sure if  you want to loop over the keys, values, or something else.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead, the hash table has a special method called <code>GetEnumerator</code> which will allow you to iterate over the table, returning one key / value pair each time through the loop.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>foreach($item in $hash.GetEnumerator())
{
  "$($item.Name) has a value of $($item.Value)"
}

Result:
Key has a value of Value
PowerShell has a value of PowerShell.com
Arcane Code has a value of arcanecode.com
Pluralsight has a value of pluralsight.com
GitHub - ArcaneCode has a value of github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This is the way I prefer to iterate over a hash table. Just my personal opinion, but I  think the code is cleaner and easier to read. That said, there is a second method you may like better.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In it you loop over the Key values, then reference the value from the hash table, using the key as the position. Do notice that instead of using the key[] notation, you have to reference the <code>Item</code> method then pass the key into it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>foreach($key in $hash.Keys)
{
  "$key value is $($hash.Item($key))"
}

Result:
Key value is Value
PowerShell value is PowerShell.com
Arcane Code value is arcanecode.com
Pluralsight value is pluralsight.com
GitHub - ArcaneCode value is github.com/arcanecode</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the result is the same either way. Use which ever method makes the most sense for you.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Splatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Right now you are probably asking yourself "Splatting? Hey Arcane, are you trying to confuse us with silly names?"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Fear not, splatting is a real thing. First, let's start with an example. Here, we are going to take the output of <code>GetChildItem</code> and pipe it to a cmdlet called <code>Join-String</code>. If you aren't familiar with it, <code>Join-String</code> will take a list of objects and join them to a single string.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem -Directory D:\ |
  Join-String -Property Name -Separator ', '

Result:
Backups_Temp, CamtasiaWorkspace, Hyper-V, ISOs, Mobile Report Publisher</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With splatting, we create a hash table, Each key is the name of a parameter that needs to be passed in, and the value is what we want to use for that parameter.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$splat = @{Property = 'Name'
           Separator = ', '
          }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here you can see the <code>Property</code> and <code>Separator</code> parameter names were passed in as keys, and the values are what we want to pass in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we can call our cmdlet, passing in the name of our hash table. Only, and this is <strong>important</strong>, instead of a <code>$</code> we use an <code>@</code> at the front of the name of our hash table.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem -Directory D:\ | Join-String @splat

Result:
Backups_Temp, CamtasiaWorkspace, Hyper-V, ISOs, Mobile Report Publisher</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Whenever PowerShell sees a @ in front of a name that corresponds to a hash table, it understand you are using a splat and expands each key / value pair into parameters. As you can see, it shortens the call to <code>Join-String</code> significantly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if we want to change the value of one of our parameters? That's easy, we just assign a new value. The rest of the hash table remains the same.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$splat.Separator = ' - '
Get-ChildItem -Directory D:\ | Join-String @splat

Result:
"Backups_Temp" - "CamtasiaWorkspace" - "Hyper-V" - "ISOs" - "Mobile Report Publisher"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>All of the parameters don't have to be included in the splat. For example, <code>Join-String</code> has a switch that, when included, will wrap each item in single quotes.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$splat = @{Property = 'Name'
           Separator = ', '
          }

Get-ChildItem -Directory D:\ |
  Join-String @splat -SingleQuote

Result:
'Backups_Temp', 'CamtasiaWorkspace', 'Hyper-V', 'ISOs', 'Mobile Report Publisher'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here I used a switch, but it could be another parameter with a value added after the splat.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if you wanted to include the switch in the hash table though? Switches don't have a value that is passed in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That turns out to be a simple answer, just include the switch as a key, and for the value use either <code>$True</code> or <code>$False</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$splat = @{Property = 'Name'
           Separator = ', '
           SingleQuote = $True
          }
Get-ChildItem -Directory D:\ | Join-String @splat

Result:
'Backups_Temp', 'CamtasiaWorkspace', 'Hyper-V', 'ISOs', 'Mobile Report Publisher'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You could also include the switch in the splat, but set the value to <code>$False </code>if you didn't want to use single quoted every time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>While this example only had a few parameters, I've worked with some cmdlets that had a dozen or more parameters that were required to pass in. SQL Server's cmdlets come to mind.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I often had scripts that had a dozen parameters, but the only one that changed with each call was the actual SQL command I was sending to the server. Using a splat let me reduce the amount of code significantly.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we saw a lot of fun things you can do with hash tables. A few were creating, updating, adding and removing values. We also covered iterating over a hash table, and even the very useful concept of splatting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now you can use these features in your own scripts where a hash table comes into play.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun with PowerShell Hash Tables]]></excerpt:encoded>
  <wp:post_id>3737</wp:post_id>
  <wp:post_date>2021-08-02 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-02 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:31:28</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:31:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-hash-tables</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="hash-table"><![CDATA[Hash Table]]></category>
  <category domain="post_tag" nicename="hashtables"><![CDATA[Hashtables]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="splatting"><![CDATA[Splatting]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3786]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[61415106203]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1627916426]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1422210692577382404";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_269865531611033";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166817</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] To add a list of properties to our object, we need to use a hash table. I define the hash table with three properties, Schema, Table, and Comment, and assign the parameter variables we passed in for their respective values. And yes, I do have a post on hash tables if you wish to know more about them, Fun With PowerShell Hash Tables. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.848899;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826824.12461;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165230</wp:comment_id>
    <wp:comment_author><![CDATA[Fun with Hash Tables in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/08/04/fun-with-hash-tables-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-08-04 06:10:10</wp:comment_date>
    <wp:comment_date_gmt>2021-08-04 12:10:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues a series on Powershell data structures: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628079010.725964;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628082899.633155;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-hash-tables]]></title>
  <link>http://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/fun-with-powershell-hash-tables/</link>
  <pubDate>Sat, 10 Jul 2021 00:57:39 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-hash-tables.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3786</wp:post_id>
  <wp:post_date>2021-07-09 18:57:39</wp:post_date>
  <wp:post_date_gmt>2021-07-10 00:57:39</wp:post_date_gmt>
  <wp:post_modified>2021-07-09 18:57:39</wp:post_modified>
  <wp:post_modified_gmt>2021-07-10 00:57:39</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-hash-tables</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3737</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-hash-tables.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-hash-tables.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:640;s:6:"height";i:292;s:4:"file";s:105:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-hash-tables.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:11466;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Logic Branching]]></title>
  <link>http://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/</link>
  <pubDate>Mon, 09 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3788</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we'll see how some of PowerShell's logic branching works. <em>Logic branching</em> is where you execute certain lines of code only when a condition is true. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In either environment, you can run your entire script by pressing F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Logic Branching - if</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>No, I don't mean "if" we want to do logic branching. <code>if</code> is a keyword in PowerShell. With it, you can pass in a condition, then execute code based on the value of the condition. This example will make it a bit more clear.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 2
if ($var -eq 1)
{
  Clear-Host
  'If branch'
}
else
{
  Clear-Host
  'else branch'
}

Result:
else branch</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Beside the <code>if</code> keyword are a set of parenthesis <code>( )</code>. In it, you create some kind of expression, but, and this is important, the result of the equation must be either <code>True</code> or <code>False</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example, I created a variable <code>$var</code> and set the value to <code>2</code>. Then, inside the parenthesis I used <code>$var - eq 1</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Following this I have a set of squiggly braces <code>{ }</code> with code inside it. In PowerShell, this is known as a <em>script block</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If my condition is true, it will execute the first script block. But what if you want to do something if it evaluates to false? That's where the next keyword comes in, <code>else</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Immediately after the script block associated with the <code>if</code>, you add the <code>else</code> keyword, followed by a second script block to be executed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the example above, the condition will evaluate to false, so the code in the else script block will run, displaying the result of "<code>else branch</code>".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PowerShell also supports another keyword, <code>elseif</code>. I almost hesitate to provide a demo, because most developers say if you need to fall into an <code>elseif</code>, you should then change your code to use another branching method, which we'll cover next. However for completeness let's see an example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 2
if ($var -eq 1)
{
  Clear-Host
  'If branch'
}
elseif ($var -eq 33)
{
  Clear-Host
  'elseif branch'
}
else
{
  Clear-Host
  'else branch'
}

Result:
else branch</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As before, we start with an <code>if ($var -eq 1)</code>, but following that is our <code>elseif</code>. It will then check the condition in the <code>elseif</code>, <code>($var -eq 33)</code>. If it doesn't find a match for it, it flows to the next section, the else.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Obviously if it finds a match, it executes the script block associated with the <code>elseif</code>.  Once done it skips over any following <code>elseif</code> or <code>else</code> statements and goes on to the following our entire <code>if</code> construct.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A few things, first you can have <code>elseif</code> statements without an <code>else</code>. However it's generally a good idea to have a default code handler should you not execute any of the other <code>if</code> / <code>elseif</code> statements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, you can have as many <code>elseif</code> statements as you want. But as the old saying goes, just because you can do something, doesn't mean you should. Most PowerShell developers (myself included) say if you have to resort to an <code>elseif</code>, you should really be using a <code>switch</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Speaking of the <code>switch</code>....</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>More Fun with Logic Branching - switch</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In addition to the <code>if</code> statement, there is another way to branch your code, the <code>switch</code> statement.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 42
switch  ($var)
{
  41 {'Forty One'}
  42 {'Forty Two'}
  43 {'Forty Three'}
  default {'default'}
}

Result:
Forty Two
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With the switch statement, you pass in a value. Unlike the <code>if</code>, the value does not need to evaluate to <code>True</code> or <code>False</code>, it can be any value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It will then execute the script block that follows, evaluating each value in the list. If it finds a match, it will execute the code in the script block that follows. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the example above, it finds a match on 42, and runs the code in the script block which prints out the text '<code>Forty Two</code>'.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One issue you may encounter is multiple matches.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 42
switch  ($var)
{
  41   {'Forty One'}
  42   {'Forty Two'}
  '42' {'Forty Two'}
  43   {'Forty Three'}
  default {'default"}
}

Result:
Forty Two
Forty Two</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here, it went down the list and found the first match of integer <code>42</code>. It executed the script block, and continued down the list.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It next found the string of <code>'42'</code>. It converted the string to the same datatype as what was passed in, an integer <code>42</code>, found a match, and executed that script block.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how to stop execution after the first match? That's where <code>break</code> comes in. When PowerShell finds <code>break</code> it will stop code  execution and exit to the next line after the <code>switch</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 42
switch  ($var)
{
  41   {'Forty One'; break}
  42   {'Forty Two'; break}
  '42' {'Forty Two'; break}
  43   {'Forty Three'; break}
  default {'default'; break}
}

'Exit to this point'

Result:
Forty Two
Exit to this point</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see from the results, the <code>switch</code> found the first match at the int <code>42</code>. The break statement said "skip the rest and go to the next line after", which prints out <code>Exit to this point</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This brings up the subject of type coercion. This is the converting of one data type before comparing to another.  In PowerShell, anytime it compares values of two different datatypes, it converts the datatype on the <em>right</em> to match the datatype on the <em>left</em>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, if you had an equation <code>if ( 33 -eq '33')</code> it will convert the string <code>'33'</code>, on the right side of the <code>-eq</code>, to the datatype on the left side of the <code>-eq</code>, an integer <code>42</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With the <code>switch</code> statement, the <em>left</em> value is the one being passed in, in this case the variable <code>$var</code>. The <em>right</em> side are the values switch is looking at, here <code>41, 42, 43</code>. This is something to keep in mind whenever you are writing your code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example, it won't make a difference.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = '42'
switch  ($var)
{
  41 {'Forty One'}
  42 {'Forty Two'}
  43 {'Forty Three'}
  default {'default'}
}

Result:
Forty Two</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The code went down the list, converting each value to a string. It took the int, <code>42</code> and converted it to a string. It then found a match with the original string of <code>42</code> in the <code>$var</code> variable and printed out the '<code>Forty Two</code>' as found in the script block.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's take a slightly different example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = '042'
switch  ($var)
{
  41 {'Forty One'}
  42 {'Forty Two'}
  43 {'Forty Three'}
  default {'default'}
}

Result:
default</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case it compared each value, but the string <code>042</code> doesn't match the converted int of <code>'42'</code> so it didn't match.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what's with the output of <code>default</code>? If the <code>switch</code> statement doesn't find a match, it will execute in the script block associated with <code>default</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>default</code> is optional, if you omit it and no match is found and the <code>switch</code> simply exits and continues to the next line after the switch.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a final point, I want to mention you don't have to contain everything in the switch's script blocks to a single line. This is perfectly valid code.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 42
switch  ($var)
{
  41   {
         'Forty One'
         break
       }
  42   {
         'Forty Two'
         break
       }
  '42' {
         'Forty Two'
         break
       }
  43   {
         'Forty Three'
         break
       }
  default {
            'default'
            break
          }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>While this example is a bit harder to read, you will encounter situations where trying to condense your script block to a single line will be difficult so don't hesitate to use multiple lines if it improves readability.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conslusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This post focused on the logic branching mechanisms built into PowerShell, <code>if</code> and <code>switch</code>. Hopefully this will give you a better understanding of your options for handling conditional code execution in PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun With PowerShell Logic Branching - if and switch]]></excerpt:encoded>
  <wp:post_id>3788</wp:post_id>
  <wp:post_date>2021-08-09 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-09 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:29:26</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:29:26</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-logic-branching</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="conditional-code-execution"><![CDATA[Conditional Code Execution]]></category>
  <category domain="post_tag" nicename="if"><![CDATA[if]]></category>
  <category domain="post_tag" nicename="logic-branching"><![CDATA[Logic Branching]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="switch"><![CDATA[switch]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3843]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[61669509062]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1628521226]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1424747406764265473";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_274402381157348";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165448</wp:comment_id>
    <wp:comment_author><![CDATA[Ed Eaglehouse]]></wp:comment_author>
    <wp:comment_author_email>eeaglehouse@buckeyemountain.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.buckeyemountain.com</wp:comment_author_url>
    <wp:comment_author_IP>74.219.116.250</wp:comment_author_IP>
    <wp:comment_date>2021-08-24 07:45:03</wp:comment_date>
    <wp:comment_date_gmt>2021-08-24 13:45:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["As developers we have to use our own judgement and pick the right construct for a particular situation." I agree. My point is this: there are usually many _right_ constructs but some offer better advantages than others, even if "better" simply means cleaner, more understandable code. Depending on the number of cases, even your switch statement on state name may be better served using a list or dictionary to provide a substitution. There is seldom a single "right" way to do something but you can choose what will be most advantageous.
I understand you're posting your blog to help the development community. I share your desire to help others. I've run into only a small number of authors who are blogging for financial gain; I think most people sincerely just want to help. Regardless of their reasons, I feel it is important to communicate clear ideas, so misspellings and poor grammar get in the way. I'll be the first to admit I'm guilty of missing mistakes in my own messages.
I'm not the best at responding quickly but I'll put my money where my mouth is and offer to proofread your posts, if you'd like. Nobody's perfect and everyone could use an editor. By the way, I hate PowerShell, so I'm particularly challenged by its unconventional syntax and is also why I'm so picky about the code.
Lastly, my intention was not to be condescending; my goal was to point out alternatives. I personally thank you for sharing your knowledge and insight. It helps us all.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>165394</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629812704.939429;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629816818.998031;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167034</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:16</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] If no match is found, it runs the code by the default value. For more in the switch statement, see my post Fun With PowerShell Logic Branching. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.722392;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641216.786389;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165394</wp:comment_id>
    <wp:comment_author><![CDATA[arcanecode]]></wp:comment_author>
    <wp:comment_author_email>arcanecode@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://arcanecode.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>108.221.34.116</wp:comment_author_IP>
    <wp:comment_date>2021-08-20 19:07:35</wp:comment_date>
    <wp:comment_date_gmt>2021-08-21 01:07:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[For a complex situation as you describe, I would completely agree the if/elseif is the better fit.

Let's take a different example though, where you have a script that reads data from a CSV file and inserts it into a database. There could be a set of business rules that need to be applied that the switch is the better fit for. Perhaps our CSV file has a column for the state name, and the database only wants the abbreviated form of the state. Here a switch makes far more sense.

As developers we have to use our own judgement and pick the right construct for a particular situation. General rules are just that, general, and should absolutely be broken if it makes sense as it did in your example.

As to your suggestion to get a proofreader, are you volunteering?

I provide these posts for free to the community and receive no direct compensation for them. As such, paying an editor does not make good financial sense for me. I've had people volunteer in the past, but after a few posts they fade away.

Additionally, I use a conversational tone for these posts as if the reader and I were sitting down having a one-on-one discussion. The overwhelming majority of people aren't going to notice a few grammatical slips here and there, instead focusing on the overall content. These are free blog posts, not a book that you've paid money for. I am sorry if they bother you, but you'll have to decide if the content is worth putting up with them or if you'll look elsewhere. Either way I appreciate the feedback.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>comment</wp:comment_type>
    <wp:comment_parent>165363</wp:comment_parent>
    <wp:comment_user_id>344266</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[62098559206]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1629508055]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1629508055]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1629508055.6201;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165735</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With the PowerShell Switch Parameter | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.149</wp:comment_author_IP>
    <wp:comment_date>2021-09-20 09:00:09</wp:comment_date>
    <wp:comment_date_gmt>2021-09-20 15:00:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] But then it occurred to me, not everyone may know what a switch parameter is. And to be clear, I&#8217;m not talking about the switch statement. I covered that in my post Fun With PowerShell Logic and Branching. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632150009.513843;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632153979.6842;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165286</wp:comment_id>
    <wp:comment_author><![CDATA[Logic Branching in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/08/10/logic-branching-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-08-10 06:10:29</wp:comment_date>
    <wp:comment_date_gmt>2021-08-10 12:10:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues to have fun with Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628597429.354202;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1628602614.57428;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166229</wp:comment_id>
    <wp:comment_author><![CDATA[Fun with PowerShell Enums | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.84.113</wp:comment_author_IP>
    <wp:comment_date>2021-11-15 10:00:35</wp:comment_date>
    <wp:comment_date_gmt>2021-11-15 16:00:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Returning False makes it easy to use an if statement and raise an error if the user tries to use an invalid value. For more on the if statement, see my post Fun with PowerShell Logic Branching. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636992036.005477;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636995991.540097;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165363</wp:comment_id>
    <wp:comment_author><![CDATA[Ed Eaglehouse]]></wp:comment_author>
    <wp:comment_author_email>eeaglehouse@buckeyemountain.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.buckeyemountain.com</wp:comment_author_url>
    <wp:comment_author_IP>74.219.116.250</wp:comment_author_IP>
    <wp:comment_date>2021-08-18 06:13:39</wp:comment_date>
    <wp:comment_date_gmt>2021-08-18 12:13:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If "most developers say if you need to fall into an elseif, you should then change your code to use another branching method," then most developers have never worked with complicated code. if-elseif will allow you to prioritize unrelated (or loosely related) conditions where switch will not. For example:
if (emergencyAlert -ne 0) { throwRedFlagException(); }
elseif (notificationCount -gt 0) { showNotifications(); }
else { displayMessage('Nothing to report'); }
It prioritizes the emergencyAlert condition. Only when that condition fails will it process the rest of the conditions in the if-elseif-else block. You can't do that with a single switch block.
And a suggestion: get someone to proofread your posts. Grammar and spelling errors provide a jarring experience and distract from your message.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629293006.818301;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[62098524114]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1629507948]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1629507948]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1629507948.074629;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629288821.540749;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Code Formatting]]></title>
  <link>http://arcanecode.com/2021/08/16/fun-with-powershell-code-formatting/</link>
  <pubDate>Mon, 16 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3818</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we'll take a look at some of PowerShell's rules around <em>code formatting</em>. Code formatting is how you can layout your code statements.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In either environment, you can run your entire script by pressing F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Code Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Unlike some languages, such as Python, PowerShell is extremely flexible when it comes to how you format your code. There are, in fact, very few rules around it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's take this first example. When I'm developing a script I tend to do so in steps. I write short pieces at a time, then I use the method of highlighting those lines of code and running using F8/F5 (depending on if I'm in VSCode or the IDE).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's one downside, if you don't have any lines of code highlighted pressing F5 will run your entire script (in either VSCode or the IDE).  I have to admit, even though I've been using VSCode for a few years now old habits die hard and I still press F5 sometimes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To prevent my entire script from running I add the following line at the top of my scripts. Once it is complete can remove it or comment it out.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 ) { exit }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here, 1 will always equal 1, so it will run the code in the script block. This is the <code>exit</code> command, which will cause a script to exit, or in other words stop running.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The real point of this example though isn't the <code>exit</code> command, but the formatting of the <code>if</code> statement. As you can see, since the script block was so short, I was able to put it all on a single line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But I didn't have to. I could have placed it on multiple lines.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 )
  { exit }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example, I placed my single line script block on the next line. Whenever I have a short script block like this, I usually indent two spaces, just because I think it is more readable. But that's my personal preference. I could have placed it all the way on the left.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 )
{ exit }</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>I could also have spread it out over multiple lines, as I did in the previous section, even though the code (the <code>exit</code> statement) was still only a single line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 )
{
  exit
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Many people have a preference for putting the opening squiggly brace at the end of the line with the <code>if</code> statement, and PowerShell supports that as well.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ( 1 -eq 1 ) {
  exit
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>I tend to prefer the former method as it makes lining up your opening and closing squiggly braces much easier, but fortunately PowerShell supports what ever method you wish to use to format your code.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>More Fun with Code Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Next, I'd like I to mention two small things that fall into the code formatting realm.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, it is possible to compact multiple lines of code into a single line in PowerShell. All you have to do is use a semicolon <code>;</code> to separate each one.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$a = 'Hi'; $b = 'Mom'; "$a $b"

Result:
Hi Mom</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The second thing I'll mention is <em>comments</em>. Comments begin with a # (pound sign, or as some call it a hash tag).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># This is a comment</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Comments can go after a section of code.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$var = 2   # Assign 2 to the variable $var</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>PowerShell also supports multi-line comments. You start and end them with <code>&lt;#</code> and <code>#&gt;</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&lt;#
   This is a multi line comment.
   You can also put blank lines in here.

   See, easy.
#&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The opening and closing &lt;# #&gt; don't have to be at the beginning of the line.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&lt;#--------------------------------------------
  You don't have to indent either.
--------------------------------------------#&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Documenting Your Code Formatting Standards</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you work in an organization, even one with just two of you doing PowerShell development, it's incredibly important to document your coding standards. This will ensure the code produced by all developers in your organization has a consistent look and feel.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what types of things should go into the document? Well how about something as simple as indenting your code. When you indent, for example as part of an if statement, should it be two spaces? Four? More? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And should it be spaces, or should you use the TAB character? Personally I hate the TAB character, leads to formatting issues when going between platforms. Remember, PowerShell runs on Windows, macOS and Linux. But as I like to say "hey you do you".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How about the opening squiggly brace of a script block. Should that be at the end of (for example) your if statement, or should it go on the next line?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How about comments? Let's say you decide each script (PS1 file) should have a header. What should go in it? A copyright notice? The author name? A description of the script? What order should it be in?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is one rule that is almost universally accepted, never use the short version of names for cmdlets, always spell them out. For example, <code>gci</code> is short for <code>Get-ChildItem</code>. When you are in the terminal just looking around, it's perfectly valid to use <code>gci</code>, but in a script always spell out the full <code>Get-ChildItem</code> cmdlet name.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These are just a few ideas to get the ball rolling. You should keep your standards document as brief as possible, but cover as many things as necessary to create a consistent look and feel when coding new PowerShell scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are hundreds of good books and blog sites that discuss and have examples of coding standards. In the end go with what works best for you, but the important part, <em>stick with it</em>!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Make it a group decision as much as possible. Your entire coding team should have input into the standards. Even more important, when a new member comes into the team before they write the first line of code they should be introduced to your coding standards.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I would also avoid using something like a Word document to store the standards. Instead, put them online in a place that is easy to search and index. If your team has it's own internal Wiki, that's a great place. Or, author them in Markdown format and store them in a GitHub repository. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wherever you put them, accessibility is key. Standards should be easy to reference, and to find the item you need.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This post covered the flexibility of code formatting in PowerShell, as well as touched on a few items such as commenting. More importantly, it touched on the importance of documenting and standardizing your code formatting rules.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With this info I hope you jump right on creating your own set of coding standards!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun With PowerShell Code Formatting]]></excerpt:encoded>
  <wp:post_id>3818</wp:post_id>
  <wp:post_date>2021-08-16 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-16 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:30:55</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:30:55</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-code-formatting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="code-formatting"><![CDATA[Code Formatting]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3859]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[61929609204]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1629126010]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1427284054039269384";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_279061967358056";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-logic-branching]]></title>
  <link>http://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/fun-with-powershell-logic-branching/</link>
  <pubDate>Mon, 12 Jul 2021 21:57:59 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-logic-branching.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3842</wp:post_id>
  <wp:post_date>2021-07-12 15:57:59</wp:post_date>
  <wp:post_date_gmt>2021-07-12 21:57:59</wp:post_date_gmt>
  <wp:post_modified>2021-07-12 15:57:59</wp:post_modified>
  <wp:post_modified_gmt>2021-07-12 21:57:59</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-logic-branching</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3788</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-logic-branching.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-logic-branching.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:654;s:6:"height";i:310;s:4:"file";s:109:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-logic-branching.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:15061;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-logic-branching]]></title>
  <link>http://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/fun-with-powershell-logic-branching-2/</link>
  <pubDate>Mon, 12 Jul 2021 22:00:34 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-logic-branching-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3843</wp:post_id>
  <wp:post_date>2021-07-12 16:00:34</wp:post_date>
  <wp:post_date_gmt>2021-07-12 22:00:34</wp:post_date_gmt>
  <wp:post_modified>2021-07-12 16:00:34</wp:post_modified>
  <wp:post_modified_gmt>2021-07-12 22:00:34</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-logic-branching-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3788</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-logic-branching-1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-logic-branching-1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:1200;s:6:"height";i:610;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-logic-branching-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:33628;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-code-formatting]]></title>
  <link>http://arcanecode.com/2021/08/16/fun-with-powershell-code-formatting/fun-with-powershell-code-formatting/</link>
  <pubDate>Mon, 12 Jul 2021 22:46:19 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-code-formatting.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3858</wp:post_id>
  <wp:post_date>2021-07-12 16:46:19</wp:post_date>
  <wp:post_date_gmt>2021-07-12 22:46:19</wp:post_date_gmt>
  <wp:post_modified>2021-07-12 16:46:19</wp:post_modified>
  <wp:post_modified_gmt>2021-07-12 22:46:19</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-code-formatting</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3818</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-code-formatting.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-code-formatting.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:1003;s:6:"height";i:470;s:4:"file";s:109:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-code-formatting.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:23120;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-code-formatting]]></title>
  <link>http://arcanecode.com/2021/08/16/fun-with-powershell-code-formatting/fun-with-powershell-code-formatting-2/</link>
  <pubDate>Mon, 12 Jul 2021 22:47:24 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-code-formatting-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3859</wp:post_id>
  <wp:post_date>2021-07-12 16:47:24</wp:post_date>
  <wp:post_date_gmt>2021-07-12 22:47:24</wp:post_date_gmt>
  <wp:post_modified>2021-07-12 16:47:24</wp:post_modified>
  <wp:post_modified_gmt>2021-07-12 22:47:24</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-code-formatting-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3818</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-code-formatting-1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-code-formatting-1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:815;s:6:"height";i:464;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-code-formatting-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:22512;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun with PowerShell Loops]]></title>
  <link>http://arcanecode.com/2021/08/23/fun-with-powershell-loops/</link>
  <pubDate>Mon, 23 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3861</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Continuing my series on PowerShell basics, in this installment we'll talk bout looping in PowerShell. Looping is a mechanism for repeating a set of instructions multiple times, ending once a condition is met. Looping is also known as <em>iterating</em>, as in "iterating over an array".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Loops continue until one of two things happen. In one type of loop, the loop continues until a certain condition is true. In the second type, the loop will iterate over a collection (also called an array) of objects until the entire collection has been gone through.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-f3429b03-3f94-499d-836a-0dcf85afe337">For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-b0b31076-f27b-48db-889d-e4e479cb087e">To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>While</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The <code>while</code> loop continues as long as a condition is true. Let's take a look at an example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
while ($i -le 5)
{
  "`$i = $i"
  $i = $i + 1
}

Result:
$i = 1
$i = 2
$i = 3
$i = 4
$i = 5</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In a while loop, you start with the keyword <code>while</code>, then pass in a condition. In this case, it will keep looping as long as <code>$i</code> is less than or equal to 5. Once <code>$i</code> is greater than 5, it will exit the loop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Inside the loop we print out the value of <code>$i</code>, then increment the value of <code>$i</code> by 1.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what happens if <code>$i</code> had been set to the value of 6, as in:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>

$i = 6
while ($i -le 5)
{
  "`$i = $i"
  $i = $i + 1
}

Result:
(Nothing is displayed)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case, the <code>while</code> keyword checked the value at the start of the loop. Since <code>$i</code> was already greater than 5, the loop never executed. So when using a <code>while</code> loop, be sure to understand there may be conditions under which the <code>while</code> loop will never execute.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Fun with Unary Operators</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before we see the next type of loop, I just want to mention <em>unary operators</em>. In the previous section you saw <code>$i = $i + 1</code>. Obviously this increased the value of <code>$i</code> by one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is an alternative syntax, the unary operator. With the unary operator, you use <code>++</code> either before or after the variable, as in <code>$i++</code> or <code>++$i</code>, to increment it. You can also use <code>--</code> to decrement the value by one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what is the difference between <code>$i++</code> and <code>++$i</code>? It has to do with when the value is incremented. Let's look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
"`$i is $(($i++))"
"`$i is now $i"

Result:
$i is 1
$i is now 2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In  this case we start by assigning the value of 1 to <code>$i</code>. We then have a string,  <code>"`$i is $(($i++))"</code>. In the results, it prints out <code>$i = 1</code>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this case, when <code>++</code> follows a variable the value is returned, <em>then</em> the variable is incremented. As PowerShell evaluates the string, it replaces <code>$i</code> with the value of 1, prints out <code>$i is 1</code>, and <em>then </em>it increments the value <code>$i</code> to 2.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the final statement it displays the result of the incremented value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if the <code>++</code> occurs before the variable?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
"`$i is $((++$i))"
"`$i is now $i"

Result:
$i is 2
$i is now 2</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With <code>++</code> before the variable, the value in <code>$i</code> is incremented <em>first</em>, then the result is returned. So when PowerShell evaluated <code>$((++$i))</code> it incremented the value of <code>$i</code> by one, now making it 2, <em>then</em> returned it to the string.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We took this detour into unary operators because it's very common to use an expression like <code>$i++</code> within a loop to increment the value, as you'll see in the remaining examples.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Do While</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With the <code>while</code> loop, you saw that it was possible that it might not execute, if the while condition was already true. What if, though, you always wanted the loop to execute at least once?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's where <code>do while</code> comes into play.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
do
{
  "`$i = $i"
  $i++
} while($i -le 5)

Result:
$i = 1
$i = 2
$i = 3
$i = 4
$i = 5</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This is a similar result to what we experienced with while. But, what if $i was already greater than 5, as in the next example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 33
do
{
  "`$i = $i"
  $i++
} while($i -le 5)

Result:
$i = 33</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Because the while check didn't occur  until the very <em>end </em>of the loop, we are guaranteed that it will execute the code within our <code>do</code>'s script block at least once, and hence it printed <code>$i = 33</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Do Until</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As an alternative to <code>do while</code>, there is <code>do until</code>. With <code>do while</code> it continues to loop as long as a condition <em>is</em> true.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Contrast this with do until, which keeps looping as long as the condition is <em>not</em> true.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
do
{
  "`$i = $i"
  $i++
} until($i -gt 5)

Result:
$i = 1
$i = 2
$i = 3
$i = 4
$i = 5</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case, once <code>$i</code> is greater than 5, the loop exits. There's not much difference between <code>do while</code> and <code>do until</code>. It's mostly a matter of how you like to think about your code.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Does it make more sense, or will it increase code readability, to write your  code so that it keeps looping <em>while</em> a condition is true, or until it <em>becomes </em>true.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>For</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another loop you can have fun with is the <code>for</code> loop. The <code>for</code> loop is ideal when you want to iterate over code a set number of times.</p>
<!-- /wp:paragraph -->

<!-- wp:code {"ampFitText":true} -->
<amp-fit-text layout="fixed-height" min-font-size="6" max-font-size="72" height="80"><pre class="wp-block-code"><code>for ($f = 0; $f -le 5; $f++)
{
  "`$f = $f"
}

Result:
$f = 0
$f = 1
$f = 2
$f = 3
$f = 4
$f = 5</code></pre></amp-fit-text>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>After the <code>for</code>, you pass in three expressions, separated by semicolons <code>;</code> . The first expression you pass in sets the starting value for the variable we'll increment each time through the loop. In this case, <code>$f = 0</code> will (obviously) set the variable <code>$f to 0</code> (zero). <code>$f</code> will be come the value we'll increment each time through the loop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second expression is just like what you would use on a <code>while</code>/<code>do while</code> loop. As long as this condition is true it will keep looping. In this case, the expression <code>$f -le 5</code> will keep looping as long as <code>$f</code> is less than or equal to 5.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally we have an expression that we want to execute at the end of the loop. Here, we'll use a unary operator to increase the value of <code>$f</code> by 1. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So let's express this in human terms.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Set the value of <code>$f</code> to zero.</li><li>Is <code>$f</code> less than or equal to 5? If yes, go into the script block. If no, exit the loop.</li><li>Now execute all the code in the script block.</li><li>At the end of the script block, add 1 to <code>$f</code>.</li><li>Go back to step 2.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>As you can see, the for is very similar to a while loop. If $f is already over 5 (in this example) the loop will not execute at all. Like while, it will keep looping as long as our condition is true. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>for</code> is a little more compact than a <code>while</code> loop as you can include the increment option in the for command rather than having to include it in the script block. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>ForEach</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>By far, the foreach loop is the one I use more than any other. The foreach loop allows you to iterate over an array (or a <em>collection</em> of objects, which is really just an array).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With for each you create a place holder variable then pass in the name of the array. Here, take a look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$array = 11,12,13,14,15   # Simple Array
foreach ($item in $array)
{
  "`$item = $item"
}

Result:
$item = 11
$item = 12
$item = 13
$item = 14
$item = 15</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We create an array of numbers and assign them to the variable <code>$array.</code> Then in the <code>foreach</code> loop, we go over the array item by item. As each item is read from the array it is copied into the first variable in the <code>foreach</code> clause, in this case <code>$item</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It then simply executes the code in the script block, when done it grabs the next item from <code>$array</code>, copies it into <code>$item</code>, and repeats the script block.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this case we looped over a simple array of integers, but <code>foreach</code> can also loop over something more complex like a collection of objects. In this next example we'll use the <code>Get-ChildItem</code> cmdlet to get a list of files from the current directory. As it goes over each one it will copy that file object into our <code>$file</code> variable, then we can use it in the script block.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>foreach ($file in Get-ChildItem)
{
  $file.Name
}

Result:
01 - Cmdlets.ps1
02 - Providers.ps1
03 - Variables.ps1
04 - Strings.ps1
05 - Arrays and Hashtables.ps1
06 - Logic Branching and Looping.ps1
07 - Functions.ps1
08 - Classes.ps1
09 - Examples.ps1
ReadMe.md</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The script block is very simple, it just references the Name property of the <code>$file</code> object and displays it on the screen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now many people might have coded this as:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$myFiles = Get-ChildItem
foreach($file in $myFiles)
...</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Which is perfectly valid code. I just wanted to show that if the only reason you needed the <code>$myFiles</code> variable was to hold information to iterate over, and you weren't going to reference it again in your code, you could skip it and just use the cmdlet right in the foreach loop.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Code Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my previous post I dove into the Code Formatting around PowerShell. In all my examples, I used a space between the loop keyword and parenthesis that enclosed the condition. In addition I put the opening squiggly brace on the next line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Neither is necessary, this is perfect valid code:]</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$i = 1
while($i=1){
  # Do some stuff
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post, we looked at several ways to iterate over your code. This included several variations on while, as well as for and the useful foreach. Now you have several tools at your disposal when you need to run the same piece of  code multiple times.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Fun with PowerShell Loops]]></excerpt:encoded>
  <wp:post_id>3861</wp:post_id>
  <wp:post_date>2021-08-23 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-23 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:30:18</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:30:18</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-loops</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="looping"><![CDATA[Looping]]></category>
  <category domain="post_tag" nicename="loops"><![CDATA[Loops]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="unary-operators"><![CDATA[Unary Operators]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3895]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[62186611594]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1629730828]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1429820847351599105";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_283686220228964";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167035</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:18</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] The foreach loop is entered, where we iterate over the collection of FileInfo objects stored in $items. Each time through the loop, the current item is copied into the $item variable. For more info on foreach, see my post Fun With PowerShell Loops. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.915941;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641218.874663;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165454</wp:comment_id>
    <wp:comment_author><![CDATA[Loops in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/08/25/loops-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-08-25 06:10:27</wp:comment_date>
    <wp:comment_date_gmt>2021-08-25 12:10:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain takes us through different structured programming constructs in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629898289.466928;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1629893428.000163;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-loops]]></title>
  <link>http://arcanecode.com/2021/08/23/fun-with-powershell-loops/fun-with-powershell-loops/</link>
  <pubDate>Thu, 15 Jul 2021 21:44:54 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-loops.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3894</wp:post_id>
  <wp:post_date>2021-07-15 15:44:54</wp:post_date>
  <wp:post_date_gmt>2021-07-15 21:44:54</wp:post_date_gmt>
  <wp:post_modified>2021-07-15 15:44:54</wp:post_modified>
  <wp:post_modified_gmt>2021-07-15 21:44:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-loops</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3861</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-loops.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-loops.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:991;s:6:"height";i:312;s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-loops.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:28610;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-loops]]></title>
  <link>http://arcanecode.com/2021/08/23/fun-with-powershell-loops/fun-with-powershell-loops-2/</link>
  <pubDate>Thu, 15 Jul 2021 21:46:28 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/08/fun-with-powershell-loops.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3895</wp:post_id>
  <wp:post_date>2021-07-15 15:46:28</wp:post_date>
  <wp:post_date_gmt>2021-07-15 21:46:28</wp:post_date_gmt>
  <wp:post_modified>2021-07-15 15:46:28</wp:post_modified>
  <wp:post_modified_gmt>2021-07-15 21:46:28</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-loops-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3861</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/08/fun-with-powershell-loops.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/08/fun-with-powershell-loops.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:802;s:6:"height";i:448;s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/08/fun-with-powershell-loops.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:35859;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Introduction to the SQL Server Mobile Report Publisher - Now Live on Pluralsight]]></title>
  <link>http://arcanecode.com/2021/07/16/introduction-to-the-sql-server-mobile-report-publisher-now-live-on-pluralsight/</link>
  <pubDate>Fri, 16 Jul 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3897</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>My latest Pluralsight course, <a rel="noreferrer noopener" href="https://app.pluralsight.com/library/courses/introduction-sql-server-mobile-report-publisher/table-of-contents" target="_blank">Introduction to the SQL Server Mobile Report Publisher</a>, just went live!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3901,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/07/sales-dashboard-demo-final.png"><img src="https://arcanecode.files.wordpress.com/2021/07/sales-dashboard-demo-final.png?w=1024" alt="" class="wp-image-3901" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Mobile Report Publisher is a powerful, under-appreciated tool that lets you quickly and easily create reports for not just the web, but for a variety of platforms such as Apple’s iOS and Google Android. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3903,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/07/sales-by-state-employee-008.png"><img src="https://arcanecode.files.wordpress.com/2021/07/sales-by-state-employee-008.png?w=340" alt="" class="wp-image-3903" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In this course, Introduction to the SQL Server Mobile Report Publisher, you’ll learn to quickly and easily create dashboards for the web, as well as mobile devices such as phones and tablets. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, you’ll explore how to use the Report Publisher designer to create the layout of the dashboard.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3905,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/07/add-data-001.png"><img src="https://arcanecode.files.wordpress.com/2021/07/add-data-001.png?w=1024" alt="" class="wp-image-3905" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Next, you’ll see how to create datasets and bind them to the dashboard.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3907,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/07/sales-by-invoice-year-and-territory-01.png"><img src="https://arcanecode.files.wordpress.com/2021/07/sales-by-invoice-year-and-territory-01.png?w=1023" alt="" class="wp-image-3907" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Finally, you’ll learn advanced features such as filters to limit the data on the dashboard, as well as drillthroughs to launch a detailed report or web page.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3909,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/07/drillthru-002.png"><img src="https://arcanecode.files.wordpress.com/2021/07/drillthru-002.png?w=943" alt="" class="wp-image-3909" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When you’re finished with this course, you’ll have the skills and knowledge of the Mobile Report Publisher needed to create dashboards on multiple platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What's that you say? You don't have a subscription but want to watch my course? Hey, no problem. Pluralsight has a 10 day free trial. Just go to <a rel="noreferrer noopener" href="https://www.pluralsight.com/pricing/free-trial" target="_blank">https://www.pluralsight.com/pricing/free-trial</a> and sign up!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":3911,"sizeSlug":"large","linkDestination":"custom"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://www.pluralsight.com/pricing/free-trial"><img src="https://arcanecode.files.wordpress.com/2021/07/ps-try-for-free.png?w=260" alt="" class="wp-image-3911" /></a></figure></div>
<!-- /wp:image -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Introduction to SQL Server Mobile Report Publisher]]></excerpt:encoded>
  <wp:post_id>3897</wp:post_id>
  <wp:post_date>2021-07-16 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-07-16 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-15 16:29:50</wp:post_modified>
  <wp:post_modified_gmt>2021-07-15 22:29:50</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>introduction-to-the-sql-server-mobile-report-publisher-now-live-on-pluralsight</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="mobile-report-publisher"><![CDATA[Mobile Report Publisher]]></category>
  <category domain="post_tag" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="sql-server"><![CDATA[SQL Server]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3901]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[60803204987]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1626447608]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1416050021645099010";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_258467769417476";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell String Formatting]]></title>
  <link>http://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/</link>
  <pubDate>Mon, 19 Jul 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3914</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In last Monday's blog post, <a rel="noreferrer noopener" href="https://arcanecode.com/2021/07/12/fun-with-powershell-strings/" target="_blank">Fun With PowerShell Strings</a>, I covered a lot of the basics around PowerShell Strings. One thing we didn't get into though was some of the special formatting commands you can use with PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Specifically, this can control the output when we embed a numeric value inside a string. Passing in special formatting instructions will make it easy to display values with commas, as currency, or even as hexidecimal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-f3429b03-3f94-499d-836a-0dcf85afe337">For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-b0b31076-f27b-48db-889d-e4e479cb087e">To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of an array variable (or any variable) by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>How it Works</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell supports the C# / C / C++ style of string formatting. Let's take a look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&#091;string]::Format("There are {0} items.", $items)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Inside our string we have <code>{0}</code>. This is a placeholder, when a C style language sees this it will look for the first variable after the string and put that into placeholder <code>0</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PowerShell of course always wants to make life easier on us, so we can use this much simpler format.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There are {0} items." -f $items</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In PowerShell we have our string, including the placeholder. After it we have a -f to let PowerShell know the following items will be copied into the placeholders. In this case, the value in <code>$items</code> will be inserted into the <code>{0}</code> placeholder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's not necessary to use a variable, we could have just hardcoded a value.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There are {0} items." -f 33</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>What if we had multiple items? Well we'd just use multiple placeholders (all on one line).</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There are {0} items in the location {1}." -f $items, $loc</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example, <code>$items </code>will go into the <code>{0}</code> and the value in <code>$loc</code> will get inserted into placeholder <code>{1}</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can even repeat a placeholder.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There's {0} items in {1}. {0} is a lot of items!" -f $items, $loc</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Now, if you've read my previous post you're probably thinking "wait, wouldn't string interpolation make all these unnecessary?"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And in these examples you are correct, with string interpolation you could have used the much easier to read syntax.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"There are $items items."</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So why use the placeholder style? Well it turns out the placeholder syntax includes some extra syntax which will allow you to format values passed in. Let's take a look at some examples.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Number</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the placeholder, after the placeholder position ( <code>0</code> in these examples ) you can put a colon <code>:</code> , then a letter that indicates the formatting style. Then another number which indicates the decimal places to retain.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"N0 {0:N0} formatted" -f 12345678.119    

Result:
N0 12,345,678 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example, after the colon we have the letter <code>N</code>. This lets PowerShell know we want this to be formatted as a numeric value, and to include commas to separate the numbers. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this example after the letter <code>N</code> we have another number, a <code>0</code>. This indicates how many decimal places to retain in the output.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's another example where we'll include two decimal places.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"N2 {0:N2} formatted" -f 12345678.119

Result:
N2 12,345,678.12 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, it follows the normal rules for rounding up the output. The next to the last last number, <code>1</code>, was rounded up to <code>2</code> since the number after it was a <code>9</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Often we want to display numbers as right aligned, so the last digit will line up in our output. This means we want to display a number of spaces in front of it. PowerShell includes a feature for this too.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"N0 {0,8:N0} formatted" -f 123.119

Result:
N0      123 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>After the place holder we have a comma then a number ( here <code>0,8</code> ). This tells PowerShell we want the value for this placeholder to be eight characters in width.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the output, PowerShell saw the final value, <code>123</code>, was three characters wide. So it subtracted three from eight and put five spaces in front of the <code>123</code> so the entire output became eight characters in width.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A common question is "what if the output is longer than the width passed in?". For example, you used <code>0,3</code> but your input to the placeholder was a value of <code>123456</code>? In that case PowerShell will still format it as <code>123,456</code> but will not add any spaces before the number. This could result in some misaligned output in your display, but at least the accurate value will still be shown.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Currency</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Using the <code>C</code> format instruction, PowerShell can display the results in currency format. It will use the default currency symbol for your computer's language / location. Since I'm in the United States it will use a dollar sign.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"C0 {0:C0} formatted" -f 12345678.1234
"C2 {0:C2} formatted" -f 12345678.1234
"C2 {0,20:C2} formatted" -f 12345678.1234

Result:
C0 $12,345,678 formatted
C2 $12,345,678.12 formatted
C2       $12,345,678.12 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Currency acts very similar to the Number format, the only real difference is the addition of your location's currency symbol in the formatted output.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Percentage</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell also has the ability to display values in a percentage format.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"P0 {0:P0} formatted" -f 0.1234
"P2 {0:P2} formatted" -f 0.1234
"P2 {0,8:P2} formatted" -f 0.1234

Result:
P0 12% formatted
P2 12.34% formatted
P2   12.34% formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Make sure to notice that PowerShell will take the decimal amount and automatically convert the percentage for you. Thus, if you want to display <code>12%</code>, you have to pass in <code>0.12</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Hex</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Next up on the list is Hexadecimal notation. PowerShell supports two methods for doing Hex values. In the first, it will take a standard number (base 10) and convert it to hexadecimal then display it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"X0 0x{0:X0} formatted" -f 1234

Result:
X0 0x4D2 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case we passed in the number 1234. PowerShell converted it to hex then displayed it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What if the value were already in hex format though, and we just wanted to display it? In PowerShell, we indicate a number is in hex by placing a <code>0x</code> in front of it. So we just pass in our number with 0x in front to the string.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"X0 0x{0:X0} formatted" -f 0x4D2

Result:
X0 0x4D2 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When PowerShell saw the <code>0x</code> on the front of <code>0x4D2</code>, it knew this value was already in hex format and didn't try to convert it, it simply displayed our value.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Decimal</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The name of the next formatter we'll look at is Decimal. It's a bit misnamed though, because it's really just for formatting integer based numbers. As a matter of fact, if you try use with a non integer value, such as 33.42, it will error out.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's look at the most basic form of Decimal.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"D0 {0:D0} formatted"   -f 123

Result:
D0 123 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Pretty simple, it just displays the value. So you can guess D is the formatter for decimal, but what is <code>D0</code>? The number after the D indicates how many spaces we want to zero pad to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In other words, we want the string to be a certain number of characters long, so the number indicates that length. It will then put zeros to the left to pad it out. Let's look at this example to make it clear.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"D8 {0:D8} formatted"   -f 123

Result:
D8 00000123 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case, the <code>D8</code> indicated we wanted eight characters in decimal formatting. PowerShell converted <code>123</code> to a string that was three characters long, so it put five zero's in front to make the total length eight.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also add the placeholder comma value formatting to make a value a certain width wide. In these two examples, the first will act like a Number format. The second though will let you use leading zeros, but still set the total space.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"D0 {0,9:D0} formatted" -f 123
"D0 {0,9:D6} formatted" -f 123

Result:
D0       123 formatted
D0   0000123 formatted</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the first example, it made the output nine characters wide by placing six spaces in front of the <code>123</code>. In the second example, it first made the <code>123</code> six characters by placing <code>000</code> on front, resulting in <code>000123</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It then took the resulting <code>000123</code> and made that nine wide by placing three spaces in front. As you can see, PowerShell is very flexible when formatting this way.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A reminder, as stated earlier Decimal is only for integers. If I were to try using <code>-f 123.1</code> as an input it would error out.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Custom Date Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In addition to the other formats, PowerShell provides the ability to create custom date outputs. You do so using these characters, note they are case sensitive.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"><table><tbody><tr><td>M / MM</td><td>One or Two character month number</td></tr><tr><td>d / dd</td><td>One or two character day of the month number.</td></tr><tr><td>yy / yyyy</td><td>Two or four digit year number.</td></tr><tr><td>h / hh</td><td>One or two digit hour of the day in 12 hour format</td></tr><tr><td>H / HH</td><td>One or two digit hour of the day in 24 hour format</td></tr><tr><td>m / mm</td><td>One or two digit minute of the hour</td></tr><tr><td>s / ss</td><td>One or two digit second of the minute</td></tr></tbody></table></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>Let's see these used in a series of examples.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"Today is {0:M/d/yy}."                 -f $(Get-Date)
"Today is {0,10:MM/dd/yyyy}."          -f $(Get-Date)
"Today is {0,10:dd/MM/yyyy}."          -f $(Get-Date)
"Today is {0,10:yyyyMMdd}."            -f $(Get-Date)
"Today is {0,10:MM/dd/yyyy hh:mm:ss}." -f $(Get-Date)
"Today is {0,10:MM/dd/yyyy HH:mm:ss}." -f $(Get-Date)

Result:
Today is 7/18/21.
Today is 07/18/2021.
Today is 18/07/2021.
Today is   20210718.
Today is 07/18/2021 04:59:56.
Today is 07/18/2021 16:59:56.</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In all of these, I passed in the current date (as I'm writing this) using Get-Date, but any date based variable would have worked.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the output I've arranged the date parts in a variety of common manners. You can use these or create your own custom formats. For example you may wish to use a dash instead of a slash to separate the date parts.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Custom Number Formatting</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's say you lived in London, where the pound was  your default currency. But you are part of a multinational company and need to produce output to send to your coworkers in the United States. You don't want to have to change your computer to a US language just to get the $ symbol.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can fix this by using custom formatting. In these examples, when it sees a character such as the $ it will just keep it in the output. When it sees <code>#,</code> (a pound sign followed by a comma) it will know to use commas in the output.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When it sees just a <code>#</code> sign it will put a number there if it has one, otherwise a space, and when it sees <code>0</code> it will put a number from the passed in data, or a zero if there is no number there. These examples will clarify it. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note each one is on it's own line, WordPress is wrapping the -f part to the next line for space reasons. Additionally, in this and other examples I've chosen to add spaces to line up the demos for readability, this isn't a requirement and you can format however you need.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"Custom 0, 25 $ #,##0.0000  = {0,25:$ #,##0.0000} " -f 123456789.012000005
"Custom 0, 25 $ #,##0.0000  = {0,25:$ #,##0.00} "   -f 123456789.012000005
"Custom 0, 25 $ ##0.0000    = {0,25:$ ##0.00} "     -f 123456789.012000005

Result:
Custom 0, 25 $ #,##0.0000  =        $ 123,456,789.0120
Custom 0, 25 $ #,##0.0000  =          $ 123,456,789.01
Custom 0, 25 $ ##0.0000    =            $ 123456789.01</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Using Formatting with Variables</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It's possible to create a formatted value, then assign that to a variable. Let's take a look at this slightly more complex example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$vTday = "{0,8:N0}" -f 134567
$vYest = "{0,8:N0}" -f 23546

$tday = "{0:MM/dd/yyyy}" -f $(Get-Date)
$yest = "{0:MM/dd/yyyy}" -f $((Get-Date).AddDays(-1))

$output = "Visitors to ArcaneCode.com`r`n"
$output += "$tday had $vTday visitors`r`n"
$output += "$yest had $vYest visitors"
$output

Result:
Visitors to ArcaneCode.com
07/18/2021 had  134,567 visitors
07/17/2021 had   23,546 visitors</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The first two lines you've seen a few times by now. I'm simply taking a number, formatting it with commas and making it eight spaces wide.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next line you've seen as well, I take the current date, format to <code>MM/dd/yyyy</code> format and assign to <code>$tday</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>$yest</code> line is slightly more complex, but only because I'm doing some date math. The <code>(Get-Date)</code> will get the current date, but create a date object from it. Essentially I have a date variable type but without a variable name.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because I have a date datatype I can employ a method of the date datatype, <code>AddDays</code>. This will let me add a number of days to the date, or if you pass in a negative value subtract days. Thus <code>AddDays(-1)</code> will give me yesterday's date. I then have to wrap it all in <code>$()</code> so PowerShell will evaluate the entire expression before passing it back to the placeholder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally I'm using the += operand to concatenate several strings together for a nice output. Note the formatted dates, and how the visitors number right aligns nicely.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While string interpolation makes creating output strings easy, knowing how to use placeholders can make creating formatted output even easier, allowing you to create output with numeric values that align neatly, or creating custom date formatting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-ca0181e3-575b-4eed-82bf-28f56b9e726c">The demos in this course came from my Pluralsight course <a rel="noreferrer noopener" href="https://www.pluralsight.com/courses/powershell-developers-quick-start-linux-macos-windows" target="_blank">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.com" target="_blank">https://pluralsight.com</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site. Once there just search for my name, Robert Cain, to see all the courses I have. </p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3914</wp:post_id>
  <wp:post_date>2021-07-19 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-07-19 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-18 19:17:47</wp:post_modified>
  <wp:post_modified_gmt>2021-07-19 01:17:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-string-formatting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="string-formatting"><![CDATA[string formatting]]></category>
  <category domain="post_tag" nicename="strings"><![CDATA[Strings]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3961]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[60907659011]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1417137204489596934";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_260384562559130";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1626706814]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165089</wp:comment_id>
    <wp:comment_author><![CDATA[String Formatting in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/07/21/string-formatting-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-07-21 06:05:13</wp:comment_date>
    <wp:comment_date_gmt>2021-07-21 12:05:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues a series on fun with Powershell and strings: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1626869113.892601;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1626913887]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1626913887.564161;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"arcanecode";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1626873827.526148;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166375</wp:comment_id>
    <wp:comment_author><![CDATA[More Fun with PowerShell Enums | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.30</wp:comment_author_IP>
    <wp:comment_date>2021-11-29 10:01:01</wp:comment_date>
    <wp:comment_date_gmt>2021-11-29 16:01:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] If you want to learn more about string formatting, I&#8217;ll refer you to my post Fun With PowerShell String Formatting. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638201661.404928;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638205800.5603;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165517</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Basic Functions | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.124</wp:comment_author_IP>
    <wp:comment_date>2021-08-30 09:00:14</wp:comment_date>
    <wp:comment_date_gmt>2021-08-30 15:00:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] We create a return value of the file name, plus the spaces to put at the end. We then use a string formatting command to put the file size at the end. For more on PowerShell&#8217;s string formatting syntax, see my post Fun With PowerShell String Formatting. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630335614.277207;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630340763.954551;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-string-formatting]]></title>
  <link>http://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/fun-with-powershell-string-formatting/</link>
  <pubDate>Mon, 19 Jul 2021 01:04:23 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-string-formatting.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3961</wp:post_id>
  <wp:post_date>2021-07-18 19:04:23</wp:post_date>
  <wp:post_date_gmt>2021-07-19 01:04:23</wp:post_date_gmt>
  <wp:post_modified>2021-07-18 19:04:23</wp:post_modified>
  <wp:post_modified_gmt>2021-07-19 01:04:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-string-formatting</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3914</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-string-formatting.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-string-formatting.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:899;s:6:"height";i:444;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-string-formatting.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:84135;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Basic Functions]]></title>
  <link>http://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/</link>
  <pubDate>Mon, 30 Aug 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=3971</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Like most languages, PowerShell supports the use of functions. Functions are reusable bits of code with a name wrapped around them. This lets you make multiple calls to your function name allowing you code reuse.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PowerShell actually has two types of functions, Basic and Advanced. Basic functions are a lot like the 1974 VW SuperBeetle I owned back in college. No frills but useful, gets you where you are going. Did 0 to 60 mph in under 5 minutes. Most of the time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Advanced functions have a lot more capabilities, and are more akin to a Tesla. Lots of fancy design, can do cool things, and depending on your need might be worth the extra investment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post we will focus on Basic functions, saving Advanced functions for a later post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Basic Functions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To declare a <em>Basic Function</em> you begin with the keyword <code>function</code>.  You then follow it with the name of the function. After that are a set of parenthesis, in which you put in any values you want to pass into the function (if any) that the function can use internally. The values passed in are known as <em>parameters</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  return $one * $two
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This function is simple. You pass in two values, which it then multiplies by each other. The <code>return</code> keyword is used to return the result. So how to use it?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Well, first you need to highlight the function and use F8 in VSCode (or F5 in the IDE). This will put the function in memory so it can be used.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To call it, just use the name of the function followed by the values to pass in.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-AValue 33 42

Result:
1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The 33 will go into the <code>$one</code> variable, then 42 will go into the <code>$two</code> variable. Note that when calling the function no commas are needed to separate the values. In addition, unlike other languages they don't have to be placed in parenthsis.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also take a function and assign it to a variable which will then hold the results.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You can also skip placing the result into a variable, and place the function call right into the string.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"Returned value is $(Get-AValue 33 42)"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The <code>$()</code> will force PowerShell to evaluate the expression, then string interpolation will replace it with the value before returning the final string. (For more on string interpolation, see my recent article <a href="https://arcanecode.com/2021/07/12/fun-with-powershell-strings/" target="_blank" rel="noreferrer noopener">Fun With PowerShell Strings</a>.)</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Passing Parameters by Name</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>PowerShell also supports passing in the parameters by <em>name</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$returnValue = Get-AValue -one 11 -two 13
"Returned value is $returnValue"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>With this, you use the names of the variables from the function declaration. Instead of a <code>$</code> though, you use a <code>-</code> (dash) to show this is a parameter and not a variable, <code>-one</code> and <code>-two</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The great thing about passing in by name is that the order doesn't matter. You can list the parameters in any order you want.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$returnValue = Get-AValue -two 13 -one 11
"Returned value is $returnValue"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see in this example we listed the second parameter, <code>-two</code>, first. Because we used names, PowerShell knew which parameter to assign which value to.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>No Return</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Strictly speaking, the return keyword is not required. Whenever PowerShell finds a value that isn't otherwise consumed, that is, used by assigning that value to a variable or used in some other way, PowerShell returns that value from the function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  $one * $two
}

$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, the result of the <code>$one * $two</code> calculation isn't otherwise used in the function it is returned as you can see in the result.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This can lead to some interesting side effects. Look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  $one * $two
  "Hello from Get-AValue"
}

$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 1386 Hello from Get-AValue</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this example, there are two things that aren't consumed. First is the calculation results, second is the string <code>Hello from Get-AValue</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how to get around this? Using the return keyword has another use. When PowerShell sees return, it exits the function immediately returning the result, as in this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  if ($one -eq 33)
    { return $one + $two }
  else
    { return $one + $two }

  "Hello from Get-AValue"
}

$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 75</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The function saw the value for <code>$one</code> is 33, so took the first branch in the if statement, adding the two. It then exited the function immediately. The <code>Hello from Get-AValue</code> is never executed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is one problem with this demo. A basic rule of functions is that they should have one, and only one exit point (barring any error handling). Having two <code>return</code> statements violates this rule. It's easy enough to fix though.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-AValue($one, $two)
{
  if ($one -eq 33)
    { $retVal = $one + $two }
  else
    { $retVal = $one + $two }

  return $retVal
}

$returnValue = Get-AValue 33 42
"Returned value is $returnValue"

Result:
Returned value is 75</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here I assign the result of the equations to the variable <code>$retVal</code> (short for return value). At the end of the function I have a single <code>return</code> statement that returns the value.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Case for Return</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I have met some PowerShell professionals who say you should never use the <code>return</code> statement. I have to respectfully disagree.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, using <code>return</code> speaks of clear intent. I didn't get to a certain spot and my code and just stopped, forgetting to complete the function. Using <code>return</code> clearly says "this is the value I meant to return".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, I have explicit control over my code. Using it I clearly control where my code exits. Typically the <code>return</code> is the last statement in my function, but it's not required as I may want some error handling.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Third, it improves readability. When I read through the code the <code>return</code> statement clearly shows what value I intend to return.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For these reasons I use the return keyword in all my functions. The choice is of course up to you, but I wanted to make the case why I like it. You will see many code samples without the <code>return</code> keyword, so I wanted you to be aware of the difference and why some people use it and others don't.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Using Multiple Functions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It's possible to have multiple functions in the same script, and even have those functions call each other. Let's look at this example.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Format-FileOutput($files)
{
  # Find the max length of a file name
  $maxLength = Get-MaxFileNameLength $files

  Write-Host "`r`nHere is the file output`r`n"
  $padding = (' ' * ($maxLength + 1))
  Write-Host "File Name $($padding) Size"
  Write-Host ('-' * ($maxLength + 16))

  foreach($file in $files)
  {
    Format-FileLine $file $maxLength
  }
}

function Get-MaxFileNameLength($files)
{
  $maxLength = 0

  foreach($file in $files)
  {
    if ($file.Name.Length -gt $maxLength)
      { $maxLength = $file.Name.Length }
  }

  return $maxLength
}

function Format-FileLine($file, $maxFileNameLength)
{
  # +1 will ensure there is always at least one space between
  # the file name and the size
  $spaces = ' ' * ($maxFileNameLength - $file.Name.Length + 1)
  $retVal = "$($file.Name)$($spaces){0,15:N0}" -f $file.Length

  return $retVal
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's break this down. The first function is <code>Format-FileOutput</code>. It takes one parameter, <code>$files</code>, which is intended to hold a list of file objects such as one returned by the <code>Get-ChildItem</code> cmdlet.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first thing it does is call another function, <code>Get-MaxFileNameLength</code> and assign the result to a variable. This function will loop over all the file objects passed in and determine the length of the longest file name. This will be used later in formatting the output.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This also highlights another feature of PowerShell, the order you declare functions is not important. In some languages, you cannot declare a function that is called, in this case <code>Get-MaxFileNameLength</code> after a function it's called from, here <code>Format-FileOutput</code>. Any called functions must be listed before the function they are called from.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Again, PowerShell doesn't care, you can declare the functions in any order you wish.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Looking at <code>Get-MaxFileNameLength</code>, it sets a max length of zero, then loops over the list of file objects passed in. Each file object has a <code>Name</code> property, the name of the file. But the <code>Name</code> property  has it's own set of properties, one of which is <code>Length</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is not the length (or size) of the <em>file</em>, but the length of the file <em>name</em>. If the file name were <code>MyScript.ps1</code>, the length would be 12.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As it loops it compares the length of the file name, and if it's greater than the max length already found it replaces it. Finally it returns that value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Returning to <code>Format-FileOutput</code>, it uses some <code>Write-Host</code> statements to create a nice header to display in the output. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that some people say not to put <code>Write-Host</code> statements inside a function, that anything like <code>Write-Host</code> should be done in the main script that calls the function.  Normally I might agree, however this is a simple demo so we'll go with it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After creating a nice header, it then loops over the list of file objects that were passed in, calling the <code>Format-FileLine</code> function. It passes in two parameters, the file object from the passed in array, and the maximum file name length.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The output will be in the format of:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>FileName.ps1       12,345</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We want the file sizes to line up neatly, so we first calculate the number of spaces we need to put between the end of the file name and the start of our file sizes. PowerShell lets you repeat a character by using the syntax <code>char * numberoftimes</code>, such as <code>' ' * 20</code> to get 20 spaces.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here we use the length of the maximum file name, then subtract the length of the current file name, and finally add one extra space at the end.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We create a return value of the file name, plus the spaces to put at the end. We then use a string formatting command to put the file size at the end. For more on PowerShell's string formatting syntax, see my post <a href="https://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/" target="_blank" rel="noreferrer noopener">Fun With PowerShell String Formatting</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This formatted string is returned to the <code>Format-FileOutput</code> function, where it is displayed on the screen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how to use this?  First, highlight all three functions then use F8/F5 to get them into memory. Then, just set your file location in the terminal to a spot you want to list the files in, and call the main function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$myfiles = Get-ChildItem
Format-FileOutput $myfiles

Result:
File Name                                       Size
----------------------------------------------------
01 - Cmdlets.ps1                               3,732
02 - Providers.ps1                             1,819
03 - Variables.ps1                             4,717
04 - Strings.ps1                               7,970
05 - Arrays and Hashtables.ps1                 8,486
06 - Logic Branching and Looping.ps1           4,315
07 - Functions.ps1                             6,907
08 - Classes.ps1                               6,210
09 - Examples.ps1                              3,125
Company.csv                                    9,694
Company.json                                  19,479
ReadMe.md                                      1,115</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see it lists my header, then the list of files. The sizes are neatly right aligned.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can use these same functions with other directories on your drive. I'm going to change my current folder to one that has some ISOs in it. Then I'll run my same functions.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$myfiles = Get-ChildItem
Format-FileOutput $myfiles

Result:
File Name                                         Size
------------------------------------------------------
2018-11-13-raspbian-stretch-full.img     5,297,405,952
2018-11-13-raspbian-stretch-full.zip     1,978,611,497
Camtasia and Snagit MVP Keys.docx               63,229
Camtasia-2018-Key.txt                               71
Keys.txt                                           798
MediaCreationTool21H1.exe                   19,463,448
Office 2016 Professional Plus Keys.txt              77
SQLServer2019-x64-ENU-Dev.iso            1,433,974,784
Win10ProMultiActivationKey.txt                      31
win32diskimager-1.0.0-install.exe           12,567,188
Windows10-20H2.iso                       4,899,078,144
Windows10-21H1.iso                       4,556,128,256
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The longer file names and sizes made the output slightly wider than the original example, but as you see the functions adapted easily to this. All without any changes.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This gives me a set of functions I can reuse over and over. And I don't have to reuse them together, I could if I needed to have code that calls just the Get-MaxFileNameLength function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Keep Functions Small and Focused</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This brings up another rule of functions. Keep the function small and focused. Each function should do one thing and return the result. This will make it much easier to reuse your functions in other projects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Get-MaxFileNameLength function in the above demo is a good example. It does one thing, gets the maximum file name length, and returns it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I could call this from my main script, but I could also write a second function similar to Format-FileOutput but perhaps it could include additional information such as the last modified date. The new function could also reference Get-MaxFileNameLength, providing good code reuse.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It also reduces the amount of code you need to write in a new function, as well as reduces what you need to test, assuming Get-MaxFileNameLength has already been tested of course.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Parameter Names versus Variable Names</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I want to call out something you may not have noticed. When we called <code>Format-FileName</code> we passed in:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Format-FileLine $file $maxLength</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The variable <code>$maxLength</code> was used for the second parameter. But look at the declaration for the function:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Format-FileLine($file, $maxFileNameLength)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the function, the second parameter is named <code>$maxFileNameLength</code>. The point in this demo was to show the variable named being passed in does not need to match the variable used in the function declaration. PowerShell can happily take <code>$maxLength</code> and copy its value into <code>$maxFileNameLength</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Good Function Names</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You probably know by now that PowerShell uses the Verb-Noun naming method for its cmdlets. In these demos we could have used any names we wanted for the functions. <code>function Adam()</code>, <code>function John()</code>, or <code>function Robert()</code> are all valid names. Well almost.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It is generally a best practice to use the Verb-Noun naming convention when creating your own function names. Additionally, PowerShell likes you to use an <em>approved verb</em>. You don't have to, but PowerShell can display a warning if you don't.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what are the list of approved verbs? The easiest way is to let PowerShell tell you.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Verb | Sort-Object Verb</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The screen shot below shows a short sample of what PowerShell has (the list is too long to reprint here). Click on it for a larger view.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4006,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-basic-functions-01.png"><img src="https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-basic-functions-01.png?w=1024" alt="" class="wp-image-4006" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>You can then select an appropriate verb from the list for your function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we covered the use of Basic Functions in PowerShell. You saw how to declare a function, how parameters worked, as well as the pros and cons of the <code>return</code> keyword.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We then got into the use of multiple functions in a PowerShell script, and how they can call one another.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In a future post we'll dive into the concepts of Advanced Functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3971</wp:post_id>
  <wp:post_date>2021-08-30 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-08-30 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 16:29:54</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 22:29:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-basic-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="functions"><![CDATA[Functions]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4014]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[62443101716]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1630335610]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1432357482148548613";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_288518019745784";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165531</wp:comment_id>
    <wp:comment_author><![CDATA[Fun with Powershell Functions &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/08/31/fun-with-powershell-functions/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-08-31 06:05:08</wp:comment_date>
    <wp:comment_date_gmt>2021-08-31 12:05:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain shows us the basics of functions in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630415482.85126;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1630411508.750319;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166815</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:20</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] you need a refresher on PowerShell functions, I&#8217;ll refer you back to my posts on functions: Fun With PowerShell Basic Functions; Fun With PowerShell Advanced Functions; and Fun With PowerShell Pipelined [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.326192;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826820.681046;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166491</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; The Basics | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.90</wp:comment_author_IP>
    <wp:comment_date>2021-12-14 10:00:12</wp:comment_date>
    <wp:comment_date_gmt>2021-12-14 16:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] you aren&#8217;t familiar with functions yet, you need to brush up. You can start with my series Fun With PowerShell Functions, then continue through the next few posts which move into advanced functions and pipelined [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639501415.647181;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1639497612.391047;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-basic-functions-02]]></title>
  <link>http://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/fun-with-powershell-basic-functions-02/</link>
  <pubDate>Mon, 19 Jul 2021 18:58:23 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-basic-functions-02-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4014</wp:post_id>
  <wp:post_date>2021-07-19 12:58:23</wp:post_date>
  <wp:post_date_gmt>2021-07-19 18:58:23</wp:post_date_gmt>
  <wp:post_modified>2021-07-19 12:58:23</wp:post_modified>
  <wp:post_modified_gmt>2021-07-19 18:58:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-basic-functions-02</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>3971</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-basic-functions-02-2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-basic-functions-02-2.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:750;s:6:"height";i:306;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-basic-functions-02-2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:31296;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Advanced Functions]]></title>
  <link>http://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/</link>
  <pubDate>Mon, 06 Sep 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4018</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my previous post, I covered the use of PowerShell Basic Functions. In this post we'll cover <em>Advanced Functions</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Advanced Functions provide several abilities over basic ones. First, you can create a detailed parameter list, including the ability to include <em>optional parameters</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, you can <em>pipeline enable</em> your functions. Just like a cmdlet, you'll be able to take input from the pipeline, work with it, then send it out your function back into the pipeline. This will be the subject of our next post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, you can use features such as Verbose and Debug, which will be the subject of an upcoming blog post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>A Simple Advanced Function</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my Basic Functions post, I created a simple function <code>Get-AValue</code> that multiplied two values together and returned the result. Let's take a look at the advanced version, <code>Get-BValue</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-BValue()
{
  &#091;CmdletBinding()]
  param (
          &#091;Parameter( Mandatory = $true
                    , HelpMessage = 'Enter value one.'
                    )
          ]
          &#091;int] $one
        , &#091;Parameter( Mandatory = $false
                    , HelpMessage = 'Enter value two.'
                    )
          ]
          &#091;int] $two = 42
        )

  return $one * $two

}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We start with the <code>function</code> keyword, followed by the name we've chosen for the function, in this case <code>Get-BValue</code>. Note the parenthesis are empty, unlike a basic function advanced ones declare their parameters in a different spot.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first line you'll see in the function is <code>[CmdletBinding()]</code>. This is the indicator to PowerShell that this is an advanced function. It must be included in the first line for PowerShell to treat this as advanced.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up are the parameters, inside a <code>param ()</code> block. Within we list each parameter, separated by commas.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A useful feature is the ability to add <em>parameter attributes</em>. For the first parameter, <code>$one</code>, we have the following block:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&#091;Parameter( Mandatory = $true
          , HelpMessage = 'Enter value one.'
          )
]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The first attribute is <code>Mandatory</code>. This indicates that this is a required parameter, and can be set to either <code>$true</code> or <code>$false</code>. When <code>$true</code>, if the user does not enter it they will be prompted to supply a  value. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>HelpMessage</code> is text that will be displayed when the user gets help on your function. We won't do much with it in this demo, but I've included it to show there are a variety of attributes you can use with parameters.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up is the actual parameter declaration, <code>[int] $one</code>. In this demo we've <em>strongly typed</em> our variable. Only integer values will be allowed, any string our decimal value (such as 3.14) will be rejected by PowerShell.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that for readability I've chosen to split the code onto separate lines, you could have condensed all this into a single line if you'd wanted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Strong typing has its pros and cons. It can be very helpful in cases where the data must be of a specific type. On the other hand, it can prevent other uses. In this demo for example, we could just have easily multiplied a decimal value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you want a flexible variable, then you can leave off the type declaration. In this example we'll leave it in, so you can see how it works.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next up is the second variable declaration.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>, &#091;Parameter( Mandatory = $false
             , HelpMessage = 'Enter value two.'
             )
  ]
  &#091;int] $two = 42
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here, we've set <code>Mandatory</code> to <code>$false</code>. This means if the user does not supply a value for <code>$two</code>, it will use the default value. Where does the default value come from?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you look you'll see <code>[int] $two = 42</code>. The <code>42</code> is the default value, and is used when the user does not supply a value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After the parameter block ends we have the actual code for the function, in this case a simple <code>return $one * $two</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So let's see some examples of how this works.  In your development environment highlight the function and press F8 (for VSCode) or F5 (for the PowerShell IDE). Now that it's in memory you can call it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-BValue -one 33 -two 42

Result:
1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here I called the function, passing in the parameters by name. I could have also left off the names and called it by position, as we did in the tutorial on basic functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now lets call it only passing in a value for <code>-one</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-BValue -one 33

Result:
1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this case, it took our input for <code>-one</code>, but since no value for <code>-two</code> was passed in, the function used the default value of <code>42</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what happens if we call it and pass in no values?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-BValue

Result:
cmdlet Get-BValue at command pipeline position 1
Supply values for the following parameters:
one: 33
1386</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see in the <code>Result:</code> output area, we were prompted for a value for one. I entered <code>33</code> and hit enter, then got the expected result of 1386.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To illustrate how the strong typing works, let's call passing in a string for the <code>-one</code> parameter.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-BValue -one "x"

Result:
Get-BValue: Cannot process argument transformation on parameter 'one'. Cannot convert value "x" to type "System.Int32". Error: "Input string was not in a correct format."</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, PowerShell rejects our input with the resulting error message.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we got a start in PowerShell Advanced Functions. We covered a simple advanced function, including parameters and how to use attributes with them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But there's still more fun to be had! In the next post we'll see how to <em>pipeline enable</em> your advanced functions. Then in a future post we'll implement two switches common to all cmdlets and advanced functions, <em>Verbose</em> and <em>Debug</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4018</wp:post_id>
  <wp:post_date>2021-09-06 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-09-06 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 18:11:59</wp:post_modified>
  <wp:post_modified_gmt>2021-07-22 00:11:59</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-advanced-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced-functions"><![CDATA[Advanced Functions]]></category>
  <category domain="post_tag" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4096]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[62702286105]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1434894386832285702";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_293259575938295";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1630940456]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167472</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.73</wp:comment_author_IP>
    <wp:comment_date>2022-03-24 10:00:15</wp:comment_date>
    <wp:comment_date_gmt>2022-03-24 16:00:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] To create the HTML I wrote a function, Get-WPHtml. Like the other functions I created this as an Advanced function. To read up on Advanced Functions, see my article Fun With PowerShell Advanced Functions. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648142277.503891;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:118:"Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code";s:18:"comment_author_url";s:124:"http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:224:"[&#8230;] To create the HTML I wrote a function, Get-WPHtml. Like the other functions I created this as an Advanced function. To read up on Advanced Functions, see my article Fun With PowerShell Advanced Functions. [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:11:"192.0.86.73";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:11:"192.0.86.73";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:72:"http://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648137615.492863;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166816</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:22</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] functions, I&#8217;ll refer you back to my posts on functions: Fun With PowerShell Basic Functions; Fun With PowerShell Advanced Functions; and Fun With PowerShell Pipelined [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.583213;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826822.476019;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-advanced-functions]]></title>
  <link>http://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/fun-with-powershell-advanced-functions/</link>
  <pubDate>Wed, 21 Jul 2021 23:30:27 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-advanced-functions.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4096</wp:post_id>
  <wp:post_date>2021-07-21 17:30:27</wp:post_date>
  <wp:post_date_gmt>2021-07-21 23:30:27</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 17:30:27</wp:post_modified>
  <wp:post_modified_gmt>2021-07-21 23:30:27</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-advanced-functions</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4018</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-advanced-functions.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-advanced-functions.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:615;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-advanced-functions.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:51682;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Pipelined Functions]]></title>
  <link>http://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/</link>
  <pubDate>Mon, 13 Sep 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4097</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In my previous post, I covered the use of PowerShell <em>Advanced Functions</em>. I highly suggest you read it if you haven't, it provides some foundational knowledge that will be important to understand for this post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post, we'll see how to <em>pipeline enable</em> your functions. Just like a cmdlet, you'll be able to take input from the pipeline, work with it, then send it out your function back into the pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Pipelining Your Advanced Functions</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Pipelining is what gives PowerShell it's real power. The ability to have small, focused cmdlets (or functions) that you can chain together to produce a useful output. Let's see this simple, common example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem | Sort-Object -Property Length

Result:
Mode  LastWriteTime       Length Name
----  -------------       ------ ----
la--- 11/24/2020  3:37 PM   1115 ReadMe.md
la--- 11/24/2020  3:42 PM   1819 02 - Providers.ps1
la--- 11/24/2020  3:42 PM   3125 09 - Examples.ps1
la--- 11/24/2020  3:42 PM   3732 01 - Cmdlets.ps1
la---  7/15/2021  4:48 PM   4315 06 - Logic Branching and Looping.ps1
la--- 11/24/2020  3:42 PM   4717 03 - Variables.ps1
la--- 11/24/2020  3:42 PM   6210 08 - Classes.ps1
la---  7/20/2021  4:35 PM   6843 07 - Functions.ps1
la---  7/18/2021  8:18 PM   7970 04 - Strings.ps1
la---  7/9/2021   8:00 PM   8486 05 - Arrays and Hashtables.ps1
la--- 11/20/2020 12:58 AM   9694 Company.csv
la--- 11/20/2020 12:58 AM  19479 Company.json</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, <code>Get-ChildItem</code>'s output was piped into the <code>Sort-Object</code> cmdlet using the pipe symbol, the vertical bar <code>|</code> . <code>Sort-Object</code> took a parameter of a property name, in this case <code>Length</code>, and sorted its output based on that property name.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how fun would it be to write your own functions that could work with the pipeline? Well as it turns out it's not only fun but easy too. Here's an example of a simple pipeline enabled function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-PSFiles ()
{
  &#091;CmdletBinding()]
  param ( &#091;Parameter (ValueFromPipeline) ]
          $file
        )

  begin  { }

  process
  {
    if ($file.Name -like "*.ps1")
    {
      $retval = "  PowerShell file is $($file.Name)"
      # This is the equivalent of: return $retval
      $retval
    }
  }

  end { }
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The purpose of <code>Get-PSFiles</code> is to examine each file being passed in from the pipeline. If it finds the file name ends in .ps1, it will pass it onto the next item in the pipeline. Otherwise it gets ignored.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First off is the <code>[CmdletBinding()]</code>, which you know by now is needed to let Powershell know this is an advanced function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now we have our <code>param</code> block. Note that the parameter block has an attribute of <code>(ValueFromPipeline)</code>. When an object comes in from the pipeline it will get copied into the variable with the <code>(ValueFromPipeline)</code> attribute, in this case <code>$file</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next block in the function is the <code>begin { }</code> block. The begin block executes once, and only once, when the function is first called. Here you could do things like set variables or perform a calculation that will be used later in the function. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my experience the <code>begin</code> block isn't used a lot, and if yours is empty you can actually omit it completely from your function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next section is the <code>process</code> block. This is where all the fun happens! Here we can work with the objects as they are passed in, one by one, from the pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this simple script, I look at the <code>Name</code> property of the item being passed in, which is stored in the variable <code>$file</code>. If it ends in <code>.ps1</code>, I set the return value (<code>$retVal</code>) to a string which has some text including the file name. If it doesn't end in <code>.ps1</code>, I just don't do anything with it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I then have a simple line of <code>$retVal</code>. Since it's not consumed by any other code PowerShell pushes it out into the next item in the pipeline. If there is no next item, it is displayed to the screen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once all the incoming items from the pipeline have been processed, the function continues to the <code>end { }</code> block. This is where you would do any cleanup. Similar to the <code>begin</code> block, <code>end</code> does not get used a lot, and you can omit it entirely if it is empty.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To use our <code>Get-PSFiles</code> function, we first need to highlight it and use F5/F8 to load it into memory. Once done we'll be ready to call it. In this case when we call it we'll save the output into a variable then display the contents of the variable.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$output = Get-ChildItem | Get-PSFiles
$output

Result:
  PowerShell file is 01 - Cmdlets.ps1
  PowerShell file is 02 - Providers.ps1
  PowerShell file is 03 - Variables.ps1
  PowerShell file is 04 - Strings.ps1
  PowerShell file is 05 - Arrays and Hashtables.ps1
  PowerShell file is 06 - Logic Branching and Looping.ps1
  PowerShell file is 07 - Functions.ps1
  PowerShell file is 08 - Classes.ps1
  PowerShell file is 09 - Examples.ps1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The directory I'm running from has other files in it besides PowerShell scripts, but the function we wrote filtered those out and only returns my PowerShell script files.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You may wonder, what datatype gets returned? We can find out by checking the type of the variable using the <code>GetType()</code> method built into all PowerShell variables.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$output.GetType()

Result:
IsPublic IsSerial Name     BaseType
-------- -------- ----     --------
True     True     Object&#091;] System.Array
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, it returns an array of objects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So this function is useful, but limited in one way. It can only work with file type objects such as ones retrieved using <code>Get-ChildItem</code>. What if instead we wanted a function that only worked on a single property?</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Line Continuation</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before we get into the next section, I want to bring up the topic of <em>line continuation</em>. Sometimes a line of PowerShell code will get very long. It can be useful to break it up across multiple lines for readability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PowerShell uses the backtick character, the <code>`</code> as its line continuation character. On US keyboard this is typically to the left of the number 1. If you are outside the US you'll have to hunt around to find it, I'll have to claim ignorance of keyboard layouts for other areas of our globe.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The line continuation character simply tells PowerShell "hey, this set of commands continues on the next line, treat it all as one line of code until you no longer find another backtick character".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's a simple example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Write-Host 'Here are the names!' `
  -ForegroundColor Green</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see I have a simple <code>Write-Host</code> which displays information to the screen. At the very end of the line I have the backtick character. Then the <code>Write-Host</code> cmdlet continues, passing in the parameter of <code>ForegroundColor</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I encourage you to use line continuation characters whenever you have a long line of code as it will make it much easier to read. It's also useful to folks like myself who write blog posts or give presentations where my display area is limited. If you go look at some examples on <a href="https://github.com/arcanecode" target="_blank" rel="noreferrer noopener">my GitHub site</a>, you'll see I use them quite a bit. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On a large monitor such as the one I normally use it's not as needed. But when I write a blog post like this one, or go present at a user group, the amount of space I have is much more limited.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It's also worth mentioning that the pipe symbol | has line continuation built right into it. I could have taken my earlier example and entered into my editor like so:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem |
  Sort-Object -Property Length</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The pipe symbol has to be the very last character on the line. There cannot be any spaces, comments, or other code after it. On the next line I chose to indent the <code>Sort-Object</code> command by two spaces, this is strictly to make the code easier to read and is not required, but is a good habit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>OK that little detour complete, let's continue our fun by using just a single property from the pipeline in our function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Using a Single Property in your Pipeline Function</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One way we can make our functions more reusable is to work with a single property. For example, almost all cmdlets return a set of objects that have a <code>Name</code> property. We could create a function that works with just that property, and thus use it with all cmdlets that return objects with a <code>Name</code> property.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This next example is a bit contrived, to show you the concepts, and isn't something I'd normally code in "real life" but it will serve to show you how this concept works.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Show-BName ()
{
  &#091;CmdletBinding()]
  param ( &#091;Parameter (ValueFromPipelineByPropertyName)]
          $Name
        )

  begin
  {
    Write-Host 'Here are the names!' `
      -ForegroundColor Green
    $names = @()
  }

  process
  {
    $names += $name
    "  Here is the name: $name"
  }

  end
  {
    Write-Host "Those were the names you passed in:" `
      -ForegroundColor Green
    foreach ($n in $names)
    {
       Write-Host "  You passed in " `
         -ForegroundColor White -NoNewline
      Write-Host $n -ForegroundColor Yellow
    }
  }
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In the parameter block, we use a slightly different attribute, <code>ValueFromPipelineByPropertyName</code>. This tells PowerShell to take each object being passed in, and copy it's <code>Name</code> property into our variable, in this case <code>$Name</code>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that the name of the parameter must match the name of the property you want to work with. Thus the <code>Name </code>property is copied into the <code>$Name</code> parameter. The rest of the object will be discarded, and not available to you in the function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The function falls into our <code>begin</code> block, in which I've included a <code>Write-Host</code> statement to display a message our function is beginning. Let me stress, you normally do not include <code>Write-Host</code> messages in functions. Typically the script that calls the function will take the output, and display the results. I'm doing this here only to demonstrate how each piece of the advanced function works.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I then do something you might do, I create a variable called <code>$names</code>. I initialize it as an empty array.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now the function moves into the <code>process</code> block. In it, I take the name that came in from the pipeline and add it to the array. I then embed the name in a string. Since I don't do anything with the string, it is now passed out to return to the pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally we hit the <code>end</code> block. Here, I'm using some <code>Write-Host</code> statements to show we're done and what names were processed. In a real world situation you might use this for logging or some other reason that fits your needs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So let's see this in action. As before, highlight the function and run it using F8/F5 to get it into memory. Then we can call it.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem |
  Show-BName

Result:
Here are the names!
  Here is the name: 01 - Cmdlets.ps1
  Here is the name: 02 - Providers.ps1
  Here is the name: 03 - Variables.ps1
  Here is the name: 04 - Strings.ps1
  Here is the name: 05 - Arrays and Hashtables.ps1
  Here is the name: 06 - Logic Branching and Looping.ps1
  Here is the name: 07 - Functions.ps1
  Here is the name: 08 - Classes.ps1
  Here is the name: 09 - Examples.ps1
  Here is the name: Company.csv
  Here is the name: Company.json
  Here is the name: ReadMe.md
Those were the names you passed in:
  You passed in 01 - Cmdlets.ps1
  You passed in 02 - Providers.ps1
  You passed in 03 - Variables.ps1
  You passed in 04 - Strings.ps1
  You passed in 05 - Arrays and Hashtables.ps1
  You passed in 06 - Logic Branching and Looping.ps1
  You passed in 07 - Functions.ps1
  You passed in 08 - Classes.ps1
  You passed in 09 - Examples.ps1
  You passed in Company.csv
  You passed in Company.json
  You passed in ReadMe.md</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The first set of "Here is the names..." is what came out of the function into the pipeline. Since we didn't do anything with them, they were displayed on the screen. The second set, with "You passed in..." is from the <code>end</code> block.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can have even more fun, let's take the output of our function and pipe it into another cmdlet. We'll use <code>Sort-Object</code> to display our results in descending order.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-ChildItem |
  Show-BName |
  Sort-Object -Descending

Result:
Here are the names!
Those were the names you passed in:
  You passed in 01 - Cmdlets.ps1
  You passed in 02 - Providers.ps1
  You passed in 03 - Variables.ps1
  You passed in 04 - Strings.ps1
  You passed in 05 - Arrays and Hashtables.ps1
  You passed in 06 - Logic Branching and Looping.ps1
  You passed in 07 - Functions.ps1
  You passed in 08 - Classes.ps1
  You passed in 09 - Examples.ps1
  You passed in Company.csv
  You passed in Company.json
  You passed in ReadMe.md
  Here is the name: ReadMe.md
  Here is the name: Company.json
  Here is the name: Company.csv
  Here is the name: 09 - Examples.ps1
  Here is the name: 08 - Classes.ps1
  Here is the name: 07 - Functions.ps1
  Here is the name: 06 - Logic Branching and Looping.ps1
  Here is the name: 05 - Arrays and Hashtables.ps1
  Here is the name: 04 - Strings.ps1
  Here is the name: 03 - Variables.ps1
  Here is the name: 02 - Providers.ps1
  Here is the name: 01 - Cmdlets.ps1</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There are a couple of things to notice with this version. First, the result of the end block, the "You passed in..." comes first. That's because the function ended, but the data it produced is now being consumed by <code>Sort-Object</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Second, you can see <code>Sort-Object</code> took the output and sorted in reverse (descending) order.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As they say on TV, but wait, there's more!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because our function only acts on the <code>Name</code> property, it could care less what type of object is coming in as long as it has a <code>Name</code> property. Thus we could use it with any cmdlet as long as that cmdlet produces objects with a <code>Name</code> property!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>Get-Process</code> returns objects with a <code>Name</code> property, so let's use it with our new function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-Process | Show-BName

Result:
  Here is the name: 5KPlayer
  Here is the name: aesm_service
  Here is the name: Airplay
  Here is the name: AppleMobileDeviceProcess
  Here is the name: ApplicationFrameHost
  Here is the name: CepstralLicSrv
  Here is the name: Code
  (many more here, truncated for brevity)
Those were the names you passed in:
  You passed in 5KPlayer
  You passed in aesm_service
  You passed in Airplay
  You passed in AppleMobileDeviceProcess
  You passed in ApplicationFrameHost
  You passed in CepstralLicSrv
  You passed in Code
  (many more here too, again truncated for brevity)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Because we were able to keep the needs of our function tightly scoped to just the <code>Name</code> property, we were able to create a function that was highly flexible and reusable.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we saw how to create a function that would work in the pipeline. We did it two ways, first by passing in entire objects, then by passing in a specific property of an object.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But there's still more fun to be had! In a future post we'll see how to implement two switches common to all cmdlets and advanced functions, <em>Verbose</em> and <em>Debug</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-982fd358-3154-440e-a515-71ac57faa2bc">The demos in this course came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-19a37e99-08cb-4fa1-9696-498aa65f59c1">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4097</wp:post_id>
  <wp:post_date>2021-09-13 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-09-13 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-21 18:27:34</wp:post_modified>
  <wp:post_modified_gmt>2021-07-22 00:27:34</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-pipelined-functions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced-functions"><![CDATA[Advanced Functions]]></category>
  <category domain="post_tag" nicename="pipeline"><![CDATA[Pipeline]]></category>
  <category domain="post_tag" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4096]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[62963739742]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1631545206]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1437430895624007680";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_297999808797605";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167168</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Overloading &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.208</wp:comment_author_IP>
    <wp:comment_date>2022-02-14 09:00:06</wp:comment_date>
    <wp:comment_date_gmt>2022-02-14 15:00:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644850806.331618;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644855368.001021;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167033</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:14</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.516906;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641214.764149;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167469</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.73</wp:comment_author_IP>
    <wp:comment_date>2022-03-24 10:00:09</wp:comment_date>
    <wp:comment_date_gmt>2022-03-24 16:00:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648142276.849423;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648137609.440755;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:118:"Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code";s:18:"comment_author_url";s:124:"http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:231:"[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:11:"192.0.86.73";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:11:"192.0.86.73";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:73:"http://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167098</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Static Properties and Methods &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-02-07 09:00:26</wp:comment_date>
    <wp:comment_date_gmt>2022-02-07 15:00:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644246026.560399;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644250262.760608;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165660</wp:comment_id>
    <wp:comment_author><![CDATA[Pipelined Functions in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/09/14/pipelined-functions-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-09-14 06:05:17</wp:comment_date>
    <wp:comment_date_gmt>2021-09-14 12:05:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues a series on functions in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631621117.163787;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1631626135.667683;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165791</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Write-Verbose | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.206</wp:comment_author_IP>
    <wp:comment_date>2021-09-27 09:00:15</wp:comment_date>
    <wp:comment_date_gmt>2021-09-27 15:00:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] this blog post. If you need more info on how pipelined functions work, please see my recent post Fun With PowerShell Pipelined Functions. That post will explain the structure of the function, including the begin, process and end [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632754815.911449;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632758496.636136;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167500</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Generating Markdown &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/03/28/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell-generating-markdown/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.68</wp:comment_author_IP>
    <wp:comment_date>2022-03-28 10:00:15</wp:comment_date>
    <wp:comment_date_gmt>2022-03-28 16:00:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648483215.106398;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:146:"Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Generating Markdown &#8211; Arcane Code";s:18:"comment_author_url";s:144:"http://arcanecode.com/2022/03/28/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell-generating-markdown/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:231:"[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:11:"192.0.86.68";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:11:"192.0.86.68";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:73:"http://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648488376.012343;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166814</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:18</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.070608;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826818.88524;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167245</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.114.41</wp:comment_author_IP>
    <wp:comment_date>2022-02-21 09:00:27</wp:comment_date>
    <wp:comment_date_gmt>2022-02-21 15:00:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] much easier to read. I have a section dedicated to the line continuation character in my post Fun With PowerShell Pipelined Functions if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645455628.183383;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645459376.859391;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166917</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:22</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431622.474448;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436449.74889;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166975</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:16</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] width, so using the line continuation character makes the examples much easier to read. My post Fun With PowerShell Pipelined Functions dedicates a section to the line continuation character if you want to learn [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036416.55713;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040755.249634;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Dummy post for open / close powershell posts]]></title>
  <link>http://arcanecode.com/?p=4103</link>
  <pubDate/>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4103</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="block-21bc7d4d-9ca8-477d-90a1-8b92bde498cd">For all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-b59fd976-d2e7-4f99-ae0c-0ff8d05711f4">To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="block-7aecf5e8-1720-4a6a-bc83-cec556013959">The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-d8f56b6a-001c-4be3-b12f-cd83a1f68548">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4103</wp:post_id>
  <wp:post_date>2021-07-22 12:55:51</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-22 12:55:51</wp:post_modified>
  <wp:post_modified_gmt>2021-07-22 18:55:51</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With The PowerShell Switch Parameter]]></title>
  <link>http://arcanecode.com/?p=4112</link>
  <pubDate>Mon, 20 Sep 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4112</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Over the last few posts I've been covering PowerShell functions, both Basic Functions and Advanced Functions. In this post I had originally intended to cover two switches available to all advanced functions, Verbose and Debug.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But then it occurred to me, not everyone may know what a switch parameter is. And to be clear, I'm not talking about the <em>switch statement</em>. I covered that in my post <a rel="noreferrer noopener" href="http://arcanecode.com/?p=3788" target="_blank">Fun With PowerShell Logic and Branching</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here, I'm talking about the ability to use what PowerShell calls a <em>switch parameter</em>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-21bc7d4d-9ca8-477d-90a1-8b92bde498cd">We'll take a deeper look in a moment, but first let me mention that for all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-b59fd976-d2e7-4f99-ae0c-0ff8d05711f4">To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>A Simple Switch Example</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If you've been following my series, you know that you can pass in values, in other words parameters, to a function by name. For example:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-AValue -one 33 -two 42</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p><code>-one</code> and <code>-two</code> were the parameter names, and <code>33 </code>and <code>42 </code>the values passed in for them. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A <em>switch </em>is similar, you list the name of the switch on call to the function, but unlike a regular parameter you pass in no value. The presence of the switch is enough to tell the function what you want to do.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's look at an example using the common <code>Write-Host</code> cmdlet.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Write-Host 'Hi Mom' -ForegroundColor Green -NoNewline
Write-Host ' and Dad' -ForegroundColor Yellow

Result:</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":4118,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-switch-parameter-01.png"><img src="https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-switch-parameter-01.png?w=131" alt="" class="wp-image-4118" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Normally, <code>Write-Host </code> displays its text, then automatically moves the cursor to the next line. However, <code>Write-Host</code> has a switch, <code>-NoNewLine</code>. Including the switch will keep <code>Write-Host</code> from adding the line feed at the end, and allows us do fun things like having two different colors of text on the same line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note that we didn't have to pass in any value, didn't have to set it to true or false. Just including the switch was enough to say "hey don't wrap to a new line".</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Implementing Your Own Switches</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Switches wouldn't be any fun if we couldn't use them too! And it's actually quite easy. I started off the whole PowerShell series on my blog with a post <a rel="noreferrer noopener" href="https://arcanecode.com/2021/07/05/fun-with-powershell-get-random/" target="_blank">Fun With PowerShell Get-Random</a>. In it I described (among other things) how to use the <code>Get-Random</code> cmdlet to return a random value from an array. We'll borrow on that idea for this function.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-RandomSouthAmericanCountry()
{
  &#091;CmdletBinding()]
  param(
         &#091;switch] $UpperCase
       )

  $array = (
    'Argentina', 'Bolivia', 'Brazil',
    'Chile', 'Columbia', 'Ecuador',
    'Guyana', 'Paraguay', 'Peru',
    'Suriname', 'Uruguay', 'Venezuela'
  )

  # Get an item from the array and convert from
  # a generic object to a string
  $retVal = $($array | Get-Random).ToString()

  # If user passed in upper case switch,
  # upper case return value
  if ($UpperCase.IsPresent)
  {
    $retVal = $retVal.ToUpper()
  }

  return $retVal

}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>I'll give a shout of sorts to my wonderful geek friends who live on the South American continent with this example, our <code>Get-RandomSouthAmericanCountry</code> function. Of course we start with <code>[CmdletBinding()]</code> to indicate this is an advanced function. Then we have our <code>param</code> block.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>param(
       &#091;switch] $UpperCase
     )</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We have one parameter named <code>$UpperCase</code>. But instead of having a traditional data type in front, we have <code>[switch]</code>. This will indicate to PowerShell that <code>$UpperCase</code> is a switch. We'll see how to use it within our code in a moment, but first let's take a quick look at the rest of the function. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After the <code>param</code> block we have an array which lists the countries in South America (according to the <a href="https://www.countries-ofthe-world.com/countries-of-south-america.html" target="_blank" rel="noreferrer noopener">countries of the world website</a> I found). </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I then fall to this line to get the country:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$retVal = $($array | Get-Random).ToString()</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>First, I use <code>$array | Get-Random</code> to get a random country. This will return an element from the array, but I need it to be a datatype of string rather than a generic object. So I wrap the result of <code>Get-Random</code> in <code>$( )</code> to make PowerShell evaluate it as an object. Then I can call the <code>.ToString()</code> method of the object to convert it to a string. Finally it gets assigned to my return variable, <code>$retVal</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next part is where I look to see if my switch was used.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ($UpperCase.IsPresent)
{
  $retVal = $retVal.ToUpper()
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Here, you use the name of the switch and access its <code>.IsPresent</code> property. This returns <code>$true</code> if the switch was passed in. Thus if it was passed in, the <code>if</code> statement will take affect and call the <code>.ToUpper()</code> method on our <code>$retVal</code> string. This is why we had to convert to a string, string data types have a <code>.ToUpper()</code> method, generic objects don't.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As the final step we return the value held in <code>$retVal</code>, which sticks to the rule of having one exit point for a function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After highlighting the function and running it using F8/F5 to get it in memory, we'll call it. First, we'll so so using it without the switch.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-RandomSouthAmericanCountry

Result:
Venezuela</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Great, now let's call it with our switch.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-RandomSouthAmericanCountry -UpperCase

Result:
URUGUAY</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this call, just including the switch caused the output to display in upper case.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Switches Work With Basic Functions Too!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the above example I used an advanced function. Be aware that if you are using a basic function, as I described in a <a href="http://arcanecode.com/?p=3971" target="_blank" rel="noreferrer noopener">previous article</a>, you can still use a switch.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is the previous example rewritten as a basic function. (Note the function declaration should all be on one line, the blog layout will probably wrap it.)</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function Get-RandomSouthAmericanCountryBasic(&#091;switch] $UpperCase)
{
  $array = (
    'Argentina', 'Bolivia', 'Brazil',
    'Chile', 'Columbia', 'Ecuador',
    'Guyana', 'Paraguay', 'Peru',
    'Suriname', 'Uruguay', 'Venezuela'
  )

  # Get an item from the array and convert from
  # a generic object to a string
  $retVal = $($array | Get-Random).ToString()

  # If user passed in upper case switch,
  # upper case return value
  if ($UpperCase.IsPresent)
  {
    $retVal = $retVal.ToUpper()
  }

  return $retVal

}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The only real difference is the removal of the <code>[CmdletBinding()}</code> statement and the param block. I then declared the <code>[switch] $UpperCase</code> inside the parenthesis like you would do with a basic function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By the way, like most things in PowerShell casing isn't important. These are all the same to PowerShell:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&#091;switch] $UpperCase
&#091;SWITCH] $UpperCase
&#091;Switch] $UpperCase</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>When you strongly type your variables, for example using <code>[int]</code> or <code>[string]</code>, it's common to use lower case, so I generally stick to lower for <code>[switch]</code>, but it's not mandatory. Just pick a standard for you and your team, then stick with it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Naming Switches</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When creating your switches, be sure to use clear names. In our example, <code>UpperCase</code> was a good switch name as it implied the results should be in upper case. It doesn't occur to me that I need to pass in some value to make it happen.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Contrast that with a name like <code>MaxValue</code>. Here, I wonder if I want to return a maximum value, or if I need to pass in a value that I want to be the maximum value, or something else.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>A Note on $switchName -eq $true</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You may see examples on the web such as:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>if ($UpperCase -eq $true)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>to check to see if a switch is present. This is a much older, and very much out of date method. Microsoft recommends you use the <code>.IsPresent</code> method that you saw in these examples, you should stick to it in your code.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we covered the useful switch parameter. It's very easy to use, and can add a lot of flexibility to your functions. This also gives a good foundation for discussion of the Verbose and Debug switches built into all Advanced Functions in our next blog post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-7aecf5e8-1720-4a6a-bc83-cec556013959">The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a rel="noreferrer noopener" href="https://arcanecode.com/info/" target="_blank">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-d8f56b6a-001c-4be3-b12f-cd83a1f68548">If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a>. At the top is a <strong>Try For Free</strong> button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4112</wp:post_id>
  <wp:post_date>2021-09-20 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-09-20 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-07-28 14:14:39</wp:post_modified>
  <wp:post_modified_gmt>2021-07-28 20:14:39</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-the-powershell-switch-parameter__trashed</wp:post_name>
  <wp:status>trash</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="switch"><![CDATA[switch]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_desired_post_slug</wp:meta_key>
    <wp:meta_value><![CDATA[fun-with-the-powershell-switch-parameter]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-switch-parameter-01]]></title>
  <link>http://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/fun-with-powershell-switch-parameter-01/</link>
  <pubDate>Thu, 22 Jul 2021 17:42:25 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-switch-parameter-01.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4118</wp:post_id>
  <wp:post_date>2021-07-22 11:42:25</wp:post_date>
  <wp:post_date_gmt>2021-07-22 17:42:25</wp:post_date_gmt>
  <wp:post_modified>2021-07-28 12:49:57</wp:post_modified>
  <wp:post_modified_gmt>2021-07-28 18:49:57</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-switch-parameter-01</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4149</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-switch-parameter-01.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-switch-parameter-01.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:131;s:6:"height";i:33;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/07/fun-with-powershell-switch-parameter-01.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1045;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-switch-parameter-02]]></title>
  <link>http://arcanecode.com/?attachment_id=4135</link>
  <pubDate>Thu, 22 Jul 2021 19:04:43 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/09/fun-with-powershell-switch-parameter-02.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4135</wp:post_id>
  <wp:post_date>2021-07-22 13:04:43</wp:post_date>
  <wp:post_date_gmt>2021-07-22 19:04:43</wp:post_date_gmt>
  <wp:post_modified>2021-07-22 13:04:43</wp:post_modified>
  <wp:post_modified_gmt>2021-07-22 19:04:43</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-switch-parameter-02</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4112</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/09/fun-with-powershell-switch-parameter-02.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/09/fun-with-powershell-switch-parameter-02.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:801;s:6:"height";i:542;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/09/fun-with-powershell-switch-parameter-02.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:51045;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With the PowerShell Switch Parameter]]></title>
  <link>http://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/</link>
  <pubDate>Mon, 20 Sep 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4149</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>
Over the last few posts I've been covering PowerShell functions, both Basic Functions and Advanced Functions. In this post I had originally intended to cover two switches available to all advanced functions, Verbose and Debug.

But then it occurred to me, not everyone may know what a switch parameter is. And to be clear, I'm not talking about the switch statement. I covered that in my post <a href="http://arcanecode.com/?p=3788">Fun With PowerShell Logic and Branching</a>.

Here, I'm talking about the ability to use what PowerShell calls a switch <em>parameter</em>.

We'll take a deeper look in a moment, but first let me mention that for all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.

To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.
<h2>A Simple Switch Example</h2>
If you've been following my series, you know that you can pass in values, in other words parameters, to a function by name. For example:

[code lang=powershell]
Get-AValue -one 33 -two 42
[/code]

<code>-one</code> and <code>-two</code> were the parameter names, and <code>33</code> and <code>42</code> the values passed in for them.

A switch is similar, you list the name of the switch on call to the function, but unlike a regular parameter you pass in no value. The presence of the switch is enough to tell the function what you want to do.

Let's look at an example using the common <code>Write-Host</code> cmdlet.

[code lang=powershell]
Write-Host 'Hi Mom' -NoNewline -ForegroundColor Green
Write-Host ' and Dad' -ForegroundColor Yellow
[/code]

Result:
<img src="https://arcanecode.files.wordpress.com/2021/07/fun-with-powershell-switch-parameter-01.png" alt="Hi Mom and Dad Image"/>

Normally, <code>Write-Host</code> displays its text, then automatically moves the cursor to the next line. However, <code>Write-Host</code> has a <code>-NoNewLine</code> switch. Including the switch will keep <code>Write-Host</code> from adding the line feed at the end, and allows us do fun things like having two different colors of text on the same line.

Note that we didn't have to pass in any value, didn't have to set it to true or false. Just including the switch was enough to say "hey don't wrap to a new line".
<h2>Implementing Your Own Switches</h2>
Switches wouldn't be any fun if we couldn't use them too! And it's actually quite easy. I started off the whole PowerShell series on my blog with a post <a href="https://arcanecode.com/2021/07/05/fun-with-powershell-get-random/">Fun With PowerShell Get-Random</a>. In it I described (among other things) how to use the <code>Get-Random</code> cmdlet to return a random value from an array. We'll borrow on that idea for this function.

[code lang=powershell]
function Get-RandomSouthAmericanCountry()
{
[CmdletBinding()]
param(
[switch] $UpperCase
)

$array = (
'Argentina', 'Bolivia', 'Brazil',
'Chile', 'Columbia', 'Ecuador',
'Guyana', 'Paraguay', 'Peru',
'Suriname', 'Uruguay', 'Venezuela'
)

# Get an item from the array and convert from
# a generic object to a string
$retVal = $($array | Get-Random).ToString()

# If user passed in upper case switch,
# upper case return value
if ($UpperCase.IsPresent)
{
$retVal = $retVal.ToUpper()
}

return $retVal

}
[/code]

I'll give a shout of sorts to my wonderful geek friends who live on the South American continent with this example, our <code>Get-RandomSouthAmericanCountry</code> function. Of course we start with <code>[CmdletBinding()]</code> to indicate this is an advanced function. Then we have our param block.

[code lang=powershell]
param(
[switch] $UpperCase
)
[/code]

We have one parameter named <code>$UpperCase</code>. But instead of having a traditional data type in front, we have <code>[switch]</code>. This will indicate to PowerShell that <code>$UpperCase</code> is a switch. We'll see how to use it within our code in a moment, but first let's take a quick look at the rest of the function.

After the param block we have an array which lists the countries in South America (according to the <a href="https://www.countries-ofthe-world.com/countries-of-south-america.html">countries of the world</a> website I found).

I then fall to this line to get the country:

[code lang=powershell]
$retVal = $($array | Get-Random).ToString()
[/code]

First, I use <code>$array | Get-Random</code> to get a random country. This will return an element from the array, but I need it to be a datatype of string rather than a generic object. So I wrap the result of <code>Get-Random</code> in <code>$( )</code> to make PowerShell evaluate it as an object. Then I can call the <code>.ToString()</code> method of the object to convert it to a string. Finally it gets assigned to my return variable, <code>$retVal</code>.

The next part is where I look to see if my switch was used.

[code lang=powershell]
if ($UpperCase.IsPresent)
{
$retVal = $retVal.ToUpper()
}
[/code]

Here, you use the name of the switch and access its <code>.IsPresent</code> property. This returns <code>$true</code> if the switch was passed in. Thus if it was passed in, the <code>if</code> statement will take affect and call the <code>.ToUpper()</code> method on our <code>$retVal</code> string. This is why we had to convert to a string, string data types have a <code>.ToUpper()</code> method, generic objects don't.

As the final step we return the value held in <code>$retVal</code>, which sticks to the rule of having one exit point for a function.

After highlighting the function and running it using F8/F5 to get it in memory, we'll call it. First, we'll so so using it without the switch.

[code lang=powershell]
Get-RandomSouthAmericanCountry
[/code]

Result:
<code>Venezuela</code>

Great, now let's call it with our switch.

[code lang=powershell]
Get-RandomSouthAmericanCountry -UpperCase
[/code]

Result:
<code>URUGUAY</code>

In this call, just including the switch caused the output to display in upper case.
<h2>Switches Work with Basic Functions Too</h2>
In the above example I used an advanced function. Be aware that if you are using a basic function, as I described in a previous article, you can still use a switch.

Here is the previous example rewritten as a basic function. (Note the function declaration should all be on one line, the blog layout will probably wrap it.)

[code lang=powershell]
function Get-RandomSouthAmericanCountryBasic([switch] $UpperCase)
{
$array = (
'Argentina', 'Bolivia', 'Brazil',
'Chile', 'Columbia', 'Ecuador',
'Guyana', 'Paraguay', 'Peru',
'Suriname', 'Uruguay', 'Venezuela'
)

# Get an item from the array and convert from
# a generic object to a string
$retVal = $($array | Get-Random).ToString()

# If user passed in upper case switch,
# upper case return value
if ($UpperCase.IsPresent)
{
$retVal = $retVal.ToUpper()
}

return $retVal

}
[/code]

The only real difference is the removal of the <code>[CmdletBinding()}</code> statement and the <code>param</code> block. I then declared the <code>[switch] $UpperCase</code> inside the parenthesis like you would do with a basic function.

By the way, like most things in PowerShell casing isn't important. These are all the same to PowerShell:

[code lang=powershell]
[switch] $UpperCase
[SWITCH] $UpperCase
[Switch] $UpperCase
[/code]

When you strongly type your variables, for example using <code>[int]</code> or <code>[string]</code>, it's common to use lower case, so I generally stick to lower for <code>[switch]</code>, but it's not mandatory. Just pick a standard for you and your team, then stick with it.
<h2>Naming Switches</h2>
When creating your switches, be sure to use clear names. In our example, UpperCase was a good switch name. Especially when using the <code>Get-</code> verb in our function name, as it implied the results should be in upper case. It doesn't occur to me that I need to pass in some value to make it happen.

Contrast that with a switch name like MaxValue. Here, I wonder if I want to return a maximum value, or if I need to pass in a value that I want to be the maximum value, or something else.
<h2>A Note on $switchName -eq $true</h2>
You may see examples on the web such as:

[code lang=powershell]
if ($UpperCase -eq $true)
[/code]

to check to see if a switch is present. This is a much older, and very much out of date method. Microsoft recommends you use the <code>.IsPresent</code> method that you saw in these examples, you should stick to it in your code.
<h2>Conclusion</h2>
In this post we covered the useful switch parameter. It's very easy to use, and can add a lot of flexibility to your functions. This also gives a good foundation for discussion of the Verbose and Debug switches built into all Advanced Functions in our next blog post.

The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.

If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a>. At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4149</wp:post_id>
  <wp:post_date>2021-09-20 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-09-20 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-08-19 12:43:36</wp:post_modified>
  <wp:post_modified_gmt>2021-08-19 18:43:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-the-powershell-switch-parameter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="pluralsight"><![CDATA[Pluralsight]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="switch"><![CDATA[switch]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4135]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[63227240465]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1632150006]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1439967614516727814";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_302462198351366";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167473</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.73</wp:comment_author_IP>
    <wp:comment_date>2022-03-24 10:00:17</wp:comment_date>
    <wp:comment_date_gmt>2022-03-24 16:00:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Next we check to see if the switch FormatAsTable was passed in, then create an output string based on the users choice. For more on switches, refer to my article Fun With the PowerShell Switch Parameter. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648142277.721652;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648137617.119586;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:118:"Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code";s:18:"comment_author_url";s:124:"http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:223:"[&#8230;] Next we check to see if the switch FormatAsTable was passed in, then create an output string based on the users choice. For more on switches, refer to my article Fun With the PowerShell Switch Parameter. [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:11:"192.0.86.73";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:11:"192.0.86.73";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:74:"http://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165790</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Write-Verbose | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.206</wp:comment_author_IP>
    <wp:comment_date>2021-09-27 09:00:13</wp:comment_date>
    <wp:comment_date_gmt>2021-09-27 15:00:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my previous post, Fun With the PowerShell Switch Parameter, I introduced the use of switches with PowerShell functions. We learned how they work, and how to [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632754813.745965;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1632758496.376509;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Placeholder for MarkDown PowerShell]]></title>
  <link>http://arcanecode.com/?p=4165</link>
  <pubDate/>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4165</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>
<p>We'll take a deeper look in a moment, but first let me mention that for all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.3, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Conclusion</h2>
<p>In this post we...</p>
<p>The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a>. At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>

<!-- wp:jetpack/markdown {"source":"## Introduction\n\nProviders are an interesting concept in PowerShell. A provider allows us to use a standard method to communicate with different areas of your computer using the same set of commands. For example, the file system is accessed using a provider. When you use `Get-ChildItem` it goes through the file system provider to return a list of the files on your computer.\n\nWe'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.5, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Listing the Providers\n\nTo start with, let's get a list of the available providers. To do that, PowerShell has the `Get-PSProvider` cmdlet.\n\n```powershell\n\nGet-PSProvider\n\n```\n\nResult:\n\n```\n\nName Capabilities Drives\n\n\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\n\nRegistry ShouldProcess {HKLM, HKCU}\n\nAlias ShouldProcess {Alias}\n\nEnvironment ShouldProcess {Env}\n\nFileSystem Filter, ShouldProcess, Credentials {C, D, E, H…}\n\nFunction ShouldProcess {Function}\n\nVariable ShouldProcess {Variable}\n\nCertificate ShouldProcess {Cert}\n\n```\n\nAs you can see, there are a variety of providers available out of the box. The default provider is the `FileSystem`. As stated in the introduction, when you use `Get-ChildItem` it goes through the `FileSystem` provider to get a list of files, or more specifically file system objects.\n\nIn the right most column of the output, you can see a list of drives. Using the drives we can navigate the provider. To see a detailed list of drives, you can use the `Get-PSDrive` cmdlet.\n\n```powershell\n\nGet-PSDrive\n\n```\n\nResult:\n\n```\n\nName Used (GB) Free (GB) Provider Root CurrentLocation\n\n\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d- \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d- \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\n\nAlias Alias\n\nC 898.79 53.83 FileSystem C:\\ \\Demo\\PSCore-QuickStart\n\nCert Certificate \\\n\nD 953.72 0.02 FileSystem D:\\\n\nE 875.38 56.00 FileSystem E:\\\n\nEnv Environment\n\nFunction Function\n\nHKCU Registry HKEY_CURRENT_USER\n\nHKLM Registry HKEY_LOCAL_MACHINE\n\nVariable Variable\n\nWSMan WSMan\n\n```\n\nThe `Name` column shows the name we will use when we want to change our location. First look at the column `Provider`, then at the rows with `FileSystem`. It shows three drives, C, D, and E. These are the three hard drives on my computer.\n\nThe `CurrentLocation` shows where we are in the provider tree. In the `FileSystem` provider, these locations are folders. For the C drive, I happen to be in the `\\Demo\\PSCore-QuickStart` folder.\n\nLet's look at how to use some of the other providers.\n\n## The Environment Provider\n\nTo change to a different provider, you simply use `Set-Location` followed by the name to move to, just as you would to change to a different hard drive.\n\n```powershell\n\nSet-Location env\n\nGet-ChildItem\n\n```\n\nResult:\n\n```\n\nName Value\n\n\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d-\n\n__COMPAT_LAYER DetectorsAppHealth\n\nALLUSERSPROFILE C:\\ProgramData\n\nAPPDATA C:\\Users\\arcan\\AppData\\Roaming\n\nCHROME_CRASHPAD_PIPE_NAME \\\\.\\pipe\\crashpad_7700_VQTNLEXXNDEMJHTN\n\nCOLORTERM truecolor\n\nCommonProgramFiles C:\\Program Files\\Common Files\n\nCommonProgramFiles(x86) C:\\Program Files (x86)\\Common Files\n\nCommonProgramW6432 C:\\Program Files\\Common Files\n\n...list truncated for brevity...\n\n```\n\nThis time `Get-ChildItem` recognized it was operating in the context of the Environment provider, and returned a list of environment variables and their values. (Note I've shortened the output for brevity.)\n\nWe can access these like any other collection.\n\n```powershell\n\n$envVars = Get-ChildItem\n\n$envVars[1].Name\n\n$envVars[1].Value\n\n```\n\nResult:\n\n```\n\nALLUSERSPROFILE\n\nC:\\ProgramData\n\n```\n\nLet's look at another provider.\n\n# The Variable Provider\n\nAnother useful provider is the `Variable` provider. It gives access to a list of all variables and their values currently in memory. This includes both user defined variables and built in PowerShell variables. In this example I'll create a new variable, `$aVariable`. I'll then move to the variable provider and list them.\n\n```powershell\n\n$aVariable = 'Some Value'\n\nSet-Location variable\n\nGet-ChildItem\n\n```\n\nResult:\n\n```\n\nName Value\n\n\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d-\n\n? True\n\n^ Set-Location\n\n$ Get-ChildItem\n\nargs {}\n\naVariable Some Value\n\nConfirmPreference High\n\nDebugPreference SilentlyContinue\n\n...list truncated for brevity...\n\n```\n\nThis returns both the names and values for all of the variables. This can be an excellent debugging tool, for example logging all values when an error occurs.\n\n## Other Providers\n\nIn addition to the built in list of providers you have seen, many modules will add their own providers that you can navigate. On of my favorites is the SQL Server module.\n\nI'll go over it more in a future post, but know that through it you can use `Get-ChildItem` to navigate your list of servers, instances, databases, tables, and columns all as if they were your file system.\n\nYou will find many modules supply providers you'll find useful.\n\n## Conclusion\n\nIn this post we took a brief look at providers, and how to navigate them. In addition, you are now aware there is a big world of providers outside the few default ones you saw in this post.\n\nThe demos in this series of blog posts came from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>Providers are an interesting concept in PowerShell. A provider allows us to use a standard method to communicate with different areas of your computer using the same set of commands. For example, the file system is accessed using a provider. When you use <code>Get-ChildItem</code> it goes through the file system provider to return a list of the files on your computer.</p>
<p>We'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.5, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Listing the Providers</h2>
<p>To start with, let's get a list of the available providers. To do that, PowerShell has the <code>Get-PSProvider</code> cmdlet.</p>
<pre><code class="language-powershell">
Get-PSProvider

</code></pre>
<p>Result:</p>
<pre><code>
Name Capabilities Drives

---- ------------ ------

Registry ShouldProcess {HKLM, HKCU}

Alias ShouldProcess {Alias}

Environment ShouldProcess {Env}

FileSystem Filter, ShouldProcess, Credentials {C, D, E, H…}

Function ShouldProcess {Function}

Variable ShouldProcess {Variable}

Certificate ShouldProcess {Cert}

</code></pre>
<p>As you can see, there are a variety of providers available out of the box. The default provider is the <code>FileSystem</code>. As stated in the introduction, when you use <code>Get-ChildItem</code> it goes through the <code>FileSystem</code> provider to get a list of files, or more specifically file system objects.</p>
<p>In the right most column of the output, you can see a list of drives. Using the drives we can navigate the provider. To see a detailed list of drives, you can use the <code>Get-PSDrive</code> cmdlet.</p>
<pre><code class="language-powershell">
Get-PSDrive

</code></pre>
<p>Result:</p>
<pre><code>
Name Used (GB) Free (GB) Provider Root CurrentLocation

---- --------- --------- -------- ---- ---------------

Alias Alias

C 898.79 53.83 FileSystem C:\ \Demo\PSCore-QuickStart

Cert Certificate \

D 953.72 0.02 FileSystem D:\

E 875.38 56.00 FileSystem E:\

Env Environment

Function Function

HKCU Registry HKEY_CURRENT_USER

HKLM Registry HKEY_LOCAL_MACHINE

Variable Variable

WSMan WSMan

</code></pre>
<p>The <code>Name</code> column shows the name we will use when we want to change our location. First look at the column <code>Provider</code>, then at the rows with <code>FileSystem</code>. It shows three drives, C, D, and E. These are the three hard drives on my computer.</p>
<p>The <code>CurrentLocation</code> shows where we are in the provider tree. In the <code>FileSystem</code> provider, these locations are folders. For the C drive, I happen to be in the <code>\Demo\PSCore-QuickStart</code> folder.</p>
<p>Let's look at how to use some of the other providers.</p>
<h2>The Environment Provider</h2>
<p>To change to a different provider, you simply use <code>Set-Location</code> followed by the name to move to, just as you would to change to a different hard drive.</p>
<pre><code class="language-powershell">
Set-Location env

Get-ChildItem

</code></pre>
<p>Result:</p>
<pre><code>
Name Value

---- -----

__COMPAT_LAYER DetectorsAppHealth

ALLUSERSPROFILE C:\ProgramData

APPDATA C:\Users\arcan\AppData\Roaming

CHROME_CRASHPAD_PIPE_NAME \\.\pipe\crashpad_7700_VQTNLEXXNDEMJHTN

COLORTERM truecolor

CommonProgramFiles C:\Program Files\Common Files

CommonProgramFiles(x86) C:\Program Files (x86)\Common Files

CommonProgramW6432 C:\Program Files\Common Files

...list truncated for brevity...

</code></pre>
<p>This time <code>Get-ChildItem</code> recognized it was operating in the context of the Environment provider, and returned a list of environment variables and their values. (Note I've shortened the output for brevity.)</p>
<p>We can access these like any other collection.</p>
<pre><code class="language-powershell">
$envVars = Get-ChildItem

$envVars[1].Name

$envVars[1].Value

</code></pre>
<p>Result:</p>
<pre><code>
ALLUSERSPROFILE

C:\ProgramData

</code></pre>
<p>Let's look at another provider.</p>
<h1>The Variable Provider</h1>
<p>Another useful provider is the <code>Variable</code> provider. It gives access to a list of all variables and their values currently in memory. This includes both user defined variables and built in PowerShell variables. In this example I'll create a new variable, <code>$aVariable</code>. I'll then move to the variable provider and list them.</p>
<pre><code class="language-powershell">
$aVariable = 'Some Value'

Set-Location variable

Get-ChildItem

</code></pre>
<p>Result:</p>
<pre><code>
Name Value

---- -----

? True

^ Set-Location

$ Get-ChildItem

args {}

aVariable Some Value

ConfirmPreference High

DebugPreference SilentlyContinue

...list truncated for brevity...

</code></pre>
<p>This returns both the names and values for all of the variables. This can be an excellent debugging tool, for example logging all values when an error occurs.</p>
<h2>Other Providers</h2>
<p>In addition to the built in list of providers you have seen, many modules will add their own providers that you can navigate. On of my favorites is the SQL Server module.</p>
<p>I'll go over it more in a future post, but know that through it you can use <code>Get-ChildItem</code> to navigate your list of servers, instances, databases, tables, and columns all as if they were your file system.</p>
<p>You will find many modules supply providers you'll find useful.</p>
<h2>Conclusion</h2>
<p>In this post we took a brief look at providers, and how to navigate them. In addition, you are now aware there is a big world of providers outside the few default ones you saw in this post.</p>
<p>The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4165</wp:post_id>
  <wp:post_date>2021-10-24 07:08:25</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-10-24 07:08:25</wp:post_modified>
  <wp:post_modified_gmt>2021-10-24 13:08:25</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Write-Verbose]]></title>
  <link>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/</link>
  <pubDate>Mon, 27 Sep 2021 15:00:06 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4172</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>

In my previous post, <a href="https://arcanecode.com/?p=4149">Fun With the PowerShell Switch Parameter</a>, I introduced the use of <em>switches</em> with PowerShell functions. We learned how they work, and how to create your own. For all functions, PowerShell creates a set of switches that are just "built in" to PowerShell. You do not have to explicitly create these yourself, you can simply use them and implement them within your own functions.

Two of the most used are <code>-Verbose</code> and <code>-Debug</code>. When used with the <code>Write-Verbose</code> and <code>Write-Debug</code> cmdlets they will display informational messages to the user of your functions. In this post, we'll focus on the <code>Verbose</code> switch. The next post in the series will examine the <code>Debug</code> switch.

We'll take a deeper look at <code>Verbose</code> in a moment, but first let me mention that for all of the examples, we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.4, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.

To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.

<h2>Write-Verbose</h2>

Messages displayed using the <code>-Verbose</code> switch are intended for the users. It can advise a user of long running processes, or let the user know a function is indeed being executed. Let's take a look at a function we'll use for this demo.

[code lang=powershell]
function Show-FileInfo ()
{
  [CmdletBinding()]
  param ( [Parameter (ValueFromPipeline)]
          $file
        )

  process
  {
    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }

}
[/code]

The purpose of this function is to take a stream of files from the pipeline, then display the file name and the file size. It's extremely simple but will serve for this blog post. If you need more info on how pipelined functions work, please see my recent post <a href="https://arcanecode.com/?p=4097">Fun With PowerShell Pipelined Functions</a>. That post will explain the structure of the function, including the <code>begin</code>, <code>process</code> and <code>end</code> blocks.

Let's run this function. First, highlight the function and execute it to get it in memory. Then let's call the function.

[code lang=powershell]
Get-ChildItem | Show-FileInfo
[/code]

Result:

[code lang=text]
01 - Cmdlets.ps1 is 3,732 bytes long.
02 - Providers.ps1 is 1,819 bytes long.
03 - Variables.ps1 is 4,717 bytes long.
04 - Strings.ps1 is 7,970 bytes long.
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 9,574 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
Company.csv is 9,694 bytes long.
Company.json is 19,479 bytes long.
ReadMe.md is 1,115 bytes long.
[/code]

So far so good, you can see the files I have in my current folder (obviously your list of files will vary). Now let's say we want to let the user know when the function starts and ends, so the user can get an idea of how long it will take to execute. Most of the time our function runs in an automated fashion so we don't need this, however there may be times when a user wants to manually run it so they can get execution times.

We can modify our function to use the <code>Write-Verbose</code> cmdlet to display this message when the built in <code>-Verbose</code> switch is used. First, we'll add a <code>begin</code> block to our function to show the start time.

[code lang=powershell]
begin
  {
    $fn = &quot;$($PSCmdlet.MyInvocation.MyCommand.Name)&quot;
    $st = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Starting at $($st.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }
[/code]

The first thing we do is get the function name. PowerShell has a built in variable called <code>$PSCmdlet</code> which has information about the code currently being executed. It has an object property called <code>MyInvocation</code>, which has an object property named <code>MyCommand</code>. This has a property called <code>Name</code> which holds the name of the function currently being executed.

While this seems a bit more complicated than just keying in <code>$fn = 'Show-FileName'</code>, it actually leverages code reuse. I can paste this into any function and continue, without the need to update anything.

Next I capture the current date and time into a variable called <code>$st</code>, short for start time.

The call to <code>Write-Verbose</code> comes next. By default, when a <code>Write-Verbose</code> is executed, it displayes the text VERBOSE: followed by the message, such as:

[code lang=powershell]
VERBOSE: Your Message Here
[/code]

In my example though I want to display a multi line message. The first line will hold the name of the function, the second will be the start time. To accomplish this I am using a <em>here string</em>. If you aren't familiar with here strings, see my post from July 12, 2021 named <a href="https://arcanecode.com/2021/07/12/fun-with-powershell-strings/">Fun With PowerShell Strings</a>.

In the here string I start with the characters &#096;r&#096;n. This will send a carriage return - line feed to the here string, so the <code>VERBOSE:</code> will appear on a line by itself. I then add two spaces so the line with the function name will be indented two spaces. Not necessary, but I think it makes it more readable.

The next line is the starting time, also indented two spaces. Here I take the start time and convert it to a string. Into the <code>ToString</code> function I pass in a <em>date format string</em> to display the current date and time. This will produce year-month-day hour:minute:second, with the <code>tt</code> becoming AM or PM. Finally I close out the here string as well as the process block.

As is, this code could be copy and pasted into any function without modification, ready to use. You could even go so far as to make it a snippet in VSCode, I have a project on GitHub, <a href="https://github.com/arcanecode/VSCode_User_Snippets">VSCode_User_Snippets</a> that explains how to create user snippets in VSCode. It was written to target implementing MarkDown snippets, but I also included my default PowerShell snippets. Note that the PowerShell IDE used with PowerShell 5.1 also allows for reusable code snippets.

OK, we've handled the message we want to show when the function starts. Now we'll add an <code>end</code> block to display the ending time.

[code lang=powershell]
end
  {
    $et = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }
[/code]

Since I already had the function name in the <code>$fn</code> variable I didn't have to get it again. I just grab the current time into the variable <code>$et</code> (for end time) and display it as I did in the opening.

For reference here is the function again with the new blocks added.

[code lang=powershell]
function Show-FileInfo ()
{
  [CmdletBinding()]
  param ( [Parameter (ValueFromPipeline)]
          $file
        )

  begin
  {
    $fn = &quot;$($PSCmdlet.MyInvocation.MyCommand.Name)&quot;
    $st = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Starting at $($st.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }

  process
  {
    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }

  end
  {
    $et = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }
}
[/code]

If I run this, you&#039;ll see I get the exact same results I did the first time.

[code lang=powershell]
Get-ChildItem | Show-FileInfo
[/code]

Result:

[code lang=text]
01 - Cmdlets.ps1 is 3,732 bytes long.
02 - Providers.ps1 is 1,819 bytes long.
03 - Variables.ps1 is 4,717 bytes long.
04 - Strings.ps1 is 7,970 bytes long.
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 9,574 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
Company.csv is 9,694 bytes long.
Company.json is 19,479 bytes long.
ReadMe.md is 1,115 bytes long.
[/code]

So how do I get the verbose messages to display? Well all I have to do is add the <code>-Verbose</code> switch to the call.

[code lang=powershell]
Get-ChildItem | Show-FileInfo -Verbose
[/code]

Result:

[code lang=text]
VERBOSE:   
  Function: Show-FileInfo
  Starting at 2021-08-15 07:28:26 PM
01 - Cmdlets.ps1 is 3,732 bytes long.
02 - Providers.ps1 is 1,819 bytes long.
03 - Variables.ps1 is 4,717 bytes long.
04 - Strings.ps1 is 7,970 bytes long.
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 9,574 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
Company.csv is 9,694 bytes long.
Company.json is 19,479 bytes long.
ReadMe.md is 1,115 bytes long.
VERBOSE:   
  Function: Show-FileInfo
  Finished at 2021-08-15 07:28:26 PM
[/code]

Simply by adding the <code>-Verbose</code> switch, it now displays the text passed into any <code>Write-Verbose</code> cmdlets you coded. If you look at our <code>param</code> block, you won't see the <code>Verbose</code> switch declared, as we had to in the previous article <a href="https://arcanecode.com/?p=4149">Fun With the PowerShell Switch Parameter</a>.

PowerShell automatically adds the <code>Verbose</code> switch to every advanced function you author. You don't have to do anything special. If PowerShell sees you've added the switch when you (or a user) runs your function, it will automatically execute any <code>Write-Verbose</code> cmdlets for you.

<h2>Taking It to the Next Level</h2>

As is, this function requires our user to manually calculate the run time by comparing the start and end times. But PowerShell developers are a courteous bunch, and so we'll take care of this for them.

Let's update the <code>end</code> block to perform the calculation.

[code lang=powershell]
  end
  {
    $et = Get-Date

    $rt = $et - $st  # Run Time

    # Format the output time
    if ($rt.TotalSeconds -lt 1)
      { $elapsed = &quot;$($rt.TotalMilliseconds.ToString(&#039;#,0.0000&#039;)) Milliseconds&quot; }
    elseif ($rt.TotalSeconds -gt 60)
      { $elapsed = &quot;$($rt.TotalMinutes.ToString(&#039;#,0.0000&#039;)) Minutes&quot; }
    else
      { $elapsed = &quot;$($rt.TotalSeconds.ToString(&#039;#,0.0000&#039;)) Seconds&quot; }


    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
  Elapsed Time $elapsed
&quot;@
  }

[/code]

After getting my end time, I subtract the start time from the end time, and place it in the <code>$rt</code> variable, short for run time. This will produce a variable that is a <em>datetime</em> datatype.

A PowerShell datetime datatype has some very useful methods. The first we'll use is <code>TotalSeconds</code>, which indicates how many seconds are in our variable. In the <code>if</code> statement, check to see if the run time seconds is less than 1. If so, it uses another property <code>TotalMilliseconds</code> that (obviously) returns the total number of milliseconds in the run time variable. It converts it to a string, and we pass in a string format so we get a nice output. Finally it appends the text Milliseconds so the user will now what time unit they are dealing with, and places it all in a variable <code>$elapsed</code>.

The <code>elseif</code> is similar. If the total seconds exceeds 60, we'll display the run time in minutes. The <code>else</code> script block covers the case when the elapsed time is between 1 and 60 seconds.

Finally we add a third line to the here string passed into <code>Write-Verbose</code>.

Highlight the entire function and execute it so the new version is in memory. Then call the function using the <code>Verbose</code> switch.

[code lang=powershell]
Get-ChildItem | Show-FileInfo -Verbose
[/code]

Result:

[code lang=text]
VERBOSE:   
  Function: Show-FileInfo
  Starting at 2021-08-15 07:59:39 PM
01 - Cmdlets.ps1 is 3,732 bytes long.
02 - Providers.ps1 is 1,819 bytes long.
03 - Variables.ps1 is 4,717 bytes long.
04 - Strings.ps1 is 7,970 bytes long.
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 9,977 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
Company.csv is 9,694 bytes long.
Company.json is 19,479 bytes long.
ReadMe.md is 1,115 bytes long.
VERBOSE:   
  Function: Show-FileInfo
  Finished at 2021-08-15 07:59:39 PM
  Elapsed Time 19.9018 Milliseconds
[/code]

As you can see, these few extra lines of code provides a more professional looking output, not to mention accurate. The user will not be forced to manually calculate times.

And don't forget you can place these into code snippets for fast and easy use. As constructed both the opening and closing sections can simply be inserted without modification. Again, see my GitHub project, <a href="https://github.com/arcanecode/VSCode_User_Snippets">VSCode_User_Snippets</a> for examples on using code snippets in Visual Studio Code.

<h2>Conclusion</h2>

In this post we saw how the built in <code>-Verbose</code> switch works along with the companion <code>Write-Verbose</code>. This can provide a useful tool to keep users appraised of extra, "meta" information such as run times without obscuring the output of the function when it is used in normal circumstances.

In the next blog post we'll look at the counterpart for verbose, <code>-Debug</code> and it's <code>Write-Debug</code> cmdlet.

If you want to learn more about PowerShell, check out my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.

If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4172</wp:post_id>
  <wp:post_date>2021-09-27 09:00:06</wp:post_date>
  <wp:post_date_gmt>2021-09-27 15:00:06</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 15:16:42</wp:post_modified>
  <wp:post_modified_gmt>2021-08-20 21:16:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-write-verbose</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="verbose"><![CDATA[Verbose]]></category>
  <category domain="post_tag" nicename="write-verbose"><![CDATA[Write-Verbose]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4176]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[63489624622]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1632754811]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1442504347842224131";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_307065421224377";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165837</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Write-Debug | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.204</wp:comment_author_IP>
    <wp:comment_date>2021-10-04 09:00:35</wp:comment_date>
    <wp:comment_date_gmt>2021-10-04 15:00:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my previous post, Fun With PowerShell Write-Verbose, I introduced the use of the built in -Verbose switch. In this post we&#8217;ll dive into its [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633364340.952908;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633359635.238141;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166818</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:25</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] more info on Write-Verbose and Write-Debug, see my posts Fun With PowerShell Write-Verbose and Fun With PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835120.951427;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826825.55989;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165808</wp:comment_id>
    <wp:comment_author><![CDATA[Verbose Powershell Results &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/10/01/verbose-powershell-results/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-10-01 06:05:10</wp:comment_date>
    <wp:comment_date_gmt>2021-10-01 12:05:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain gets verbose on us: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633089910.438781;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633093961.592071;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-write-verbose-01]]></title>
  <link>http://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/fun-with-powershell-write-verbose-01/</link>
  <pubDate>Thu, 19 Aug 2021 21:00:04 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/09/fun-with-powershell-write-verbose-01.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4176</wp:post_id>
  <wp:post_date>2021-08-19 15:00:04</wp:post_date>
  <wp:post_date_gmt>2021-08-19 21:00:04</wp:post_date_gmt>
  <wp:post_modified>2021-08-19 15:00:04</wp:post_modified>
  <wp:post_modified_gmt>2021-08-19 21:00:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-write-verbose-01</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4172</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/09/fun-with-powershell-write-verbose-01.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/09/fun-with-powershell-write-verbose-01.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:858;s:6:"height";i:409;s:4:"file";s:110:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/09/fun-with-powershell-write-verbose-01.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:38240;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Write-Debug]]></title>
  <link>http://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/</link>
  <pubDate>Mon, 04 Oct 2021 15:00:26 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4179</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>

In my previous post, <a href="https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/" target="_blank">Fun With PowerShell Write-Verbose</a>, I introduced the use of the built in <code>-Verbose</code> switch. In this post we'll dive into its counterpart, the <code>-Debug</code> switch and its companion <code>Write-Debug</code> cmdlet.

In covering <code>Write-Verbose</code>, I mentioned verbose messages are typically targeted at the average <em>user</em>. The <code>-Debug</code> messages are meant to target the <em>developer</em>. These messages are meant to assist the PowerShell developer in trouble shooting and debugging their code.

We'll take a deeper look at <code>Debug</code> momentarily, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.4, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.

To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.

<h2>$DebugPreference - An Introduction</h2>

Before we start discussing the <code>Write-Debug</code> cmdlet, we need to cover a PowerShell built in variable, <code>$DebugPreference</code>. If you want to see the value currently there, just type <code>$DebugPreference</code> into your terminal window and hit ENTER.

Depending on how your system is configured, this will usually be set to either <code>Continue</code> or <code>SilentlyContinue</code>. (If it is set to something else then likely you previously ran a script which changed it).

Usually you want it set to <code>Continue</code>. This will display the message provided to the <code>Write-Debug</code> cmdlet, after doing so it will continue to the next line of code.

If it is set to <code>SilentlyContinue</code>, the message is suppressed. Even if <code>Write-Debug</code> is executed, no text is displayed.

For these demos to work, you need to ensure your <code>$DebugPreference</code> is set to <code>Continue</code>, at least to start with. To set it, just assign it.

[code lang=powershell]
$DebugPreference = &#039;Continue&#039;
[/code]

Later we'll see some more options when it comes to <code>$DebugPreference</code>, but for now let's dig into the <code>Write-Debug</code> cmdlet.

<h2>Write-Debug</h2>

Just like the <code>Verbose</code> switch, the <code>Debug</code> switch is built in. You don't have to explicitly declare it. Within your code simply use the <code>Write-Debug</code> cmdlet. If PowerShell detects the <code>-Debug</code> switch is passed in, it will display any messages from the <code>Write-Debug</code> cmdlet.

For this demo, we'll reuse the <code>Show-FileInfo</code> from the previous blog post, <a href="https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/" target="_blank">Fun With PowerShell Write-Verbose</a>.

[code lang=powershell]
function Show-FileInfo ()
{
  [CmdletBinding()]
  param ( [Parameter (ValueFromPipeline)]
          $file
        )

  begin
  {
    $fn = &quot;$($PSCmdlet.MyInvocation.MyCommand.Name)&quot;
    $st = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Starting at $($st.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }

  process
  {
    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }

  end
  {
    $et = Get-Date
    $rt = $et - $st  # Run Time

    # Format the output time
    if ($rt.TotalSeconds -lt 1)
      { $elapsed = &quot;$($rt.TotalMilliseconds.ToString(&#039;#,0.0000&#039;)) Milliseconds&quot; }
    elseif ($rt.TotalSeconds -gt 60)
      { $elapsed = &quot;$($rt.TotalMinutes.ToString(&#039;#,0.0000&#039;)) Minutes&quot; }
    else
      { $elapsed = &quot;$($rt.TotalSeconds.ToString(&#039;#,0.0000&#039;)) Seconds&quot; }

    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
  Elapsed Time $elapsed
&quot;@
  }
}
[/code]

The only modifications made are to the <code>process</code> block. We created a variable, <code>$dbgMsg</code> to hold the debugging message we wish to display. Since this is a multiline string, I'm going to do the same thing I did with the <code>Verbose</code> messages and begin with a carriage return / line feed escape sequence ( &#096;r&#096;n ). This will let the word <code>DEBUG</code> appear on a line by itself. Also note I indented the remaining lines two spaces, and used periods so the colons could be aligned. It's a simple bit of formatting, but it makes the provided information much easier to read.

On the first line I have the name of the function. You'd be surprised how useful this can be. When developing a module or a large complex script with many functions, there may be times when you think your script is calling one function when it is actually calling another.

In this example I then show the file name, including the full path to the file. This can be a useful bit of information to the developer, as it lets us know exactly which directory we are in. Especially useful as the main function only displays the file name, not the full path to the file. The line after shows the file length.

I then display some environmental information. First, I show the value in the previously mentioned <code>$DebugPreference</code> variable. This, perhaps, could help me understand why some debug messages are not getting displayed.

On the next line I show the version of PowerShell this code is running in. Again, a potentially valuable piece of information. There's always the possibility the developer is running a different version of PowerShell than the user having issues, and this may be a clue to an issue.

Finally, we call the <code>Write-Debug</code> cmdlet. The remaining code is the same as the original function from my previous blog post.

After you highlight the function and run it to put it in memory, let's call it. For this demo I created a folder <code>C:\Demo</code> and copied a few random files into it.

First, let's call it without the <code>-Debug</code> switch.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo
[/code]

Result:

[code lang=text]
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 11,200 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
SQLServer2019-x64-ENU-Dev.iso is 1,433,974,784 bytes long.
ubuntu-20.10-desktop-amd64.iso is 2,942,003,200 bytes long.
WideWorldImporters-2021-03-29.zip is 731,246,592 bytes long.
WideWorldImportersDW-2021-03-29.zip is 237,830,144 bytes long.
[/code]

OK, so far so good. Since we didn't use the <code>-Debug</code> switch, the <code>Write-Debug</code> statement is ignored. Now let's call it again, only this time we'll use <code>-Debug</code> when calling <code>Show-FileInfo</code>.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Debug
[/code]

Result:

[code lang=text]
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\06 - Logic Branching and Looping.ps1
  File Length....: 4,315 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\07 - Functions.ps1
  File Length....: 11,200 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
07 - Functions.ps1 is 11,200 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\08 - Classes.ps1
  File Length....: 6,210 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
08 - Classes.ps1 is 6,210 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\09 - Examples.ps1
  File Length....: 3,125 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
09 - Examples.ps1 is 3,125 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\SQLServer2019-x64-ENU-Dev.iso
  File Length....: 1,433,974,784 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
SQLServer2019-x64-ENU-Dev.iso is 1,433,974,784 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\ubuntu-20.10-desktop-amd64.iso
  File Length....: 2,942,003,200 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
ubuntu-20.10-desktop-amd64.iso is 2,942,003,200 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImporters-2021-03-29.zip
  File Length....: 731,246,592 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
WideWorldImporters-2021-03-29.zip is 731,246,592 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImportersDW-2021-03-29.zip
  File Length....: 237,830,144 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
WideWorldImportersDW-2021-03-29.zip is 237,830,144 bytes long.
[/code]

As you can see, our debugging messages are now displayed. For each file it shows the debug message, then shows the normal output of the function, the file name and size.

While a simple example, seeing not just the file name but the full file name including its path could supply valuable information to the developer, not to mention the environmental information.

What about the verbose messages? Well there's no problem using both switches to see all the messages.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Verbose -Debug
[/code]

Result (note a few files were omitted for brevity):

[code lang=text]
VERBOSE:
  Function: Show-FileInfo
  Starting at 2021-08-17 05:48:44 PM
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.

*** Some rows removed here for brevity ***

DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImportersDW-2021-03-29.zip
  File Length....: 237,830,144 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
WideWorldImportersDW-2021-03-29.zip is 237,830,144 bytes long.
VERBOSE:
  Function: Show-FileInfo
  Finished at 2021-08-17 05:48:44 PM
  Elapsed Time 24.4972 Milliseconds
[/code]

As you can see, we get the starting and ending messages from the use of <code>-Verbose</code>, as well as the debugging messages.

<h2>$DebugPreference - Digging Deeper</h2>

<h3>Inquire</h3>

In an earlier section of this post we introduced the built-in variable, <code>$DebugPreference</code>, and discussed two of its possible settings, <code>Continue</code> and <code>SilentlyContinue</code>.

What if, though, we wanted PowerShell to stop every time it encounters a <code>Write-Debug</code>?

To do that, we can set the <code>$DebugPreference</code> value to <code>Inquire</code>, as we'll do in our process block.

[code lang=powershell]
  process
  {
    $DebugPreference = &#039;Inquire&#039;

    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }
[/code]

Run the function to get the new version into memory, then let's call <code>Show-FileInfo</code> again.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Debug
[/code]

This time, it displays our first debug message, but then displays a prompt in the terminal window.

Result:

[code lang=text]
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
[/code]

You now have the option to hit <code>Y</code> to continue (or just press ENTER), or stop by pressing <code>H</code> to stop execution. In this case, using <code>S</code> to suspend has the same affect as halting.

What about <code>A</code>, for <code>Yes to All</code>? You might think it will just run the rest of the script without stopping. For this demo though, that's not the case. The <code>A</code> option is meant for the rare situations where you are piping data through the <code>Write-Debug</code> cmdlet.

In our demo, as I suspect in most situations you'll encounter, pressing <code>A</code> has the same effect as pressing <code>Y</code>.

<h3>Stop</h3>

Using <code>Inquire</code> we can prompt the developer (or the person running the script) as to what they want to do once they hit the <code>Write-Debug</code>. Let's imagine a situation though where want our script to stop running. In a moment we'll look at a situation where this can be useful, but for now let's just see stop in action.

Here we'll just change our <code>$DebugPreference</code> to <code>Stop</code>.

[code lang=powershell]
  process
  {
    $DebugPreference = &#039;Stop&#039;

    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }
[/code]

As usual, re-run the function to refresh the version in memory, then call <code>Show-FileInfo</code> again.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Debug
[/code]

Result:

[code lang=text]
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Stop
  PS Version.....: 7.1.4
Write-Debug:
Line |
  30 |      Write-Debug -Message $dbgMsg
     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     | The running command stopped because the preference variable &quot;DebugPreference&quot; or common parameter is set to Stop:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Stop
  PS Version.....: 7.1.4
[/code]

You can see our debug message was displayed, then we got a message to let us know the debug preference was set to stop, which is why code execution stopped.

<h3>Conditional Stopping</h3>

The stop command becomes more useful when we make the stop conditional. We want our code to keep running until we find a certain condition. Once we find it, we'll display debugging information then stop our script.

While <code>Write-Debug</code> doesn't have a built in method for this, we can construct the code ourselves using a simple <code>if</code> statement. For this demo we'll display our debug message until the point we hit a specified condition.

[code lang=powershell]
  process
  {
    if ($file.Length -gt 100000)
      { $DebugPreference = &#039;Stop&#039; }
    else
      { $DebugPreference = &#039;Continue&#039; }

    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }
[/code]

In this example, pretend we know something goes wrong when our file length exceeds 100 KB (100,000 bytes). We use an <code>if</code> statement to check the length. If it is greater than 100,000 bytes, it will set the <code>$DebugPreference</code> to <code>Stop</code>, otherwise it will set it to <code>Continue</code>.

Note we could have also chosen not to call <code>Write-Debug</code> at all if the length is less then 100,000 bytes, or any other number of things. I chose to go ahead and display the debug info in this case, as there's always the possibility it may provide useful information. Let's update our function in memory by running it, then we can execute it.

[code lang=powershell]
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Debug
[/code]

Result:

[code lang=text]
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\05 - Arrays and Hashtables.ps1
  File Length....: 8,486 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\06 - Logic Branching and Looping.ps1
  File Length....: 4,315 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\07 - Functions.ps1
  File Length....: 11,200 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
07 - Functions.ps1 is 11,200 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\08 - Classes.ps1
  File Length....: 6,210 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
08 - Classes.ps1 is 6,210 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\09 - Examples.ps1
  File Length....: 3,125 bytes.
  DebugPreference: Continue
  PS Version.....: 7.1.4
09 - Examples.ps1 is 3,125 bytes long.
DEBUG:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\SQLServer2019-x64-ENU-Dev.iso
  File Length....: 1,433,974,784 bytes.
  DebugPreference: Stop
  PS Version.....: 7.1.4
Write-Debug:
Line |
  33 |      Write-Debug -Message $dbgMsg
     |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     | The running command stopped because the preference variable &quot;DebugPreference&quot; or common parameter is set to Stop:
  Function.......: Show-FileInfo
  File Name......: C:\Demo\SQLServer2019-x64-ENU-Dev.iso
  File Length....: 1,433,974,784 bytes.
  DebugPreference: Stop
  PS Version.....: 7.1.4
[/code]

As you can see, the first file we encounter with a length of 100,000 bytes or greater causes execution to stop.

Bear in mind, using <code>Stop</code> has a dramatic effect on your code. For my normal day to day development I may use a <code>Stop</code>, but when I send this script to production I'd either remove the stop logic all together, or at least replace it with the previously discussed <code>Inquire</code> setting.

Also note that if you use <code>Stop</code>, the script <strong>STOPS</strong>. The <code>end</code> block will never execute. This could potentially leave your script, as well as the scripting environment in an unstable state. So as cool as the <code>Stop</code> setting is, I recommend you use it sparingly and as a general rule do not include it in production code.

<h2>Resetting $DebugPreference</h2>

Once your script is done, it's a good idea to restore the <code>$DebugPreference</code> setting so it is in a default state for next time. Of course, in the <code>end</code> block you could simply add <code>$DebugPreference = 'SilentlyContinue'</code> (or <code>Continue</code>), but what if that wasn't the state when your script began?

It's a better idea to capture the state of <code>$DebugPreference</code> when your script begins. So in the 'begin' block, we'll add a line at the very top, <code>$currentDebugPreference = $DebugPreference</code>.

Then in the <code>end</code> block we'll add a line to reset the debug preference variable to its value from the start of the script, <code>$DebugPreference = $currentDebugPreference</code>.

Below is the completed script with one other alteration, which you'll find in the <code>process</code> block. I changed the <code>Stop</code> to <code>Inquire</code> and the <code>Continue</code> to <code>SilentlyContinue</code>. The first change will give us the option to stop or continue. The second will suppress the debug message for the files we (in our fictional scenario) know are OK, those below 100,000 bytes. This was done just for demo purposes, so you could see the effect of the various settings for <code>$DebugPreference</code>.

[code lang=powershell]
function Show-FileInfo ()
{
  [CmdletBinding()]
  param ( [Parameter (ValueFromPipeline)]
          $file
        )

  begin
  {
    $currentDebugPreference = $DebugPreference
    $fn = &quot;$($PSCmdlet.MyInvocation.MyCommand.Name)&quot;
    $st = Get-Date
    Write-Verbose @&quot;
  `r`n  Function: $fn
  Starting at $($st.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
&quot;@
  }

  process
  {
    if ($file.Length -gt 100000)
      { $DebugPreference = &#039;Inquire&#039; }
    else 
      { $DebugPreference = &#039;SilentlyContinue&#039; }

    $dbgMsg = @&quot;
`r`n  Function.......: $fn
  File Name......: $($file.FullName)
  File Length....: $(&quot;{0:N0} bytes.&quot; -f $file.Length)
  DebugPreference: $DebugPreference
  PS Version.....: $($PSVersionTable.PSVersion.ToString())
&quot;@

    Write-Debug -Message $dbgMsg

    $retVal = &quot;$($file.Name) is {0:N0} bytes long.&quot; -f $file.Length
    $retVal
  }

  end
  {
    $DebugPreference = $currentDebugPreference
    $et = Get-Date
    $rt = $et - $st  # Run Time

    # Format the output time
    if ($rt.TotalSeconds -lt 1)
      { $elapsed = &quot;$($rt.TotalMilliseconds.ToString(&#039;#,0.0000&#039;)) Milliseconds&quot; }
    elseif ($rt.TotalSeconds -gt 60)
      { $elapsed = &quot;$($rt.TotalMinutes.ToString(&#039;#,0.0000&#039;)) Minutes&quot; }
    else
      { $elapsed = &quot;$($rt.TotalSeconds.ToString(&#039;#,0.0000&#039;)) Seconds&quot; }

    Write-Verbose @&quot;
  `r`n  Function: $fn
  Finished at $($et.ToString(&#039;yyyy-MM-dd hh:mm:ss tt&#039;))
  Elapsed Time $elapsed
&quot;@
  }
}
[/code]

Now let's run it, after highlighting the function and executing it so it is refreshed in memory. First I'll set the <code>$DebugPreference</code> to <code>Continue</code>, so it will be different from either the <code>Inquire</code> or <code>SilentlyContinue</code>. Then I'll call it, using both the <code>Verbose</code> and <code>Debug</code> switches. Finally I'll display the <code>$DebugPreference</code> again, to prove it was reset at the end of the function. Note too when the <code>Inquire</code> kicks in I will just answer <code>Y</code> so the script can complete normally.

[code lang=powershell]
$DebugPreference = &#039;Continue&#039;
Get-ChildItem -Path &#039;C:\Demo&#039; | Show-FileInfo -Verbose -Debug
$DebugPreference
[/code]

Result:

[code lang=text]
VERBOSE:   
  Function: Show-FileInfo
  Starting at 2021-08-17 06:25:46 PM
05 - Arrays and Hashtables.ps1 is 8,486 bytes long.
06 - Logic Branching and Looping.ps1 is 4,315 bytes long.
07 - Functions.ps1 is 11,200 bytes long.
08 - Classes.ps1 is 6,210 bytes long.
09 - Examples.ps1 is 3,125 bytes long.
DEBUG: 
  Function.......: Show-FileInfo
  File Name......: C:\Demo\SQLServer2019-x64-ENU-Dev.iso
  File Length....: 1,433,974,784 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
SQLServer2019-x64-ENU-Dev.iso is 1,433,974,784 bytes long.
DEBUG: 
  Function.......: Show-FileInfo
  File Name......: C:\Demo\ubuntu-20.10-desktop-amd64.iso
  File Length....: 2,942,003,200 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
ubuntu-20.10-desktop-amd64.iso is 2,942,003,200 bytes long.
DEBUG: 
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImporters-2021-03-29.zip
  File Length....: 731,246,592 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
WideWorldImporters-2021-03-29.zip is 731,246,592 bytes long.
DEBUG: 
  Function.......: Show-FileInfo
  File Name......: C:\Demo\WideWorldImportersDW-2021-03-29.zip
  File Length....: 237,830,144 bytes.
  DebugPreference: Inquire
  PS Version.....: 7.1.4
Confirm
Continue with this operation?
[Y] Yes [A] Yes to All [H] Halt Command [S] Suspend [?] Help (default is &quot;Yes&quot;):
WideWorldImportersDW-2021-03-29.zip is 237,830,144 bytes long.
VERBOSE:   
  Function: Show-FileInfo
  Finished at 2021-08-17 06:25:57 PM
  Elapsed Time 11.7336 Seconds
Continue
[/code]

As you would probably expect by this point in the post, we show our verbose information. We then see a list of files from the normal code in the script. The debug messages for files under 100,000 bytes were suppressed because we'd set the <code>$DebugPreference</code> to <code>SilentlyContinue</code>.

We then see the debug messages, along with inquiries as to our wish to continue. Since we said yes to all of them, the code in the <code>end</code> block was able to execute and display the closing verbose message.

The very last line of the result is <code>Continue</code>, which came from the last line we used to run the script, <code>$DebugPreference</code>. This confirms the value was indeed reset to the value that was present when the script started.

<h2>Conclusion</h2>

Well this was a monster sized post, so thanks for sticking with it to the end. In it, we saw how the built in <code>-Debug</code> switch works along with the companion <code>Write-Debug</code>. We also covered the built-in PowerShell variable <code>$DebugPreference</code>, and saw how it can affect the behavior of the <code>Write-Debug</code> cmdlet.

As you can see, the use of <code>Debug</code> can provide valuable feedback to you as a PowerShell developer, supplying critical information about the internal state of your script as well as the environment it is running in.

If you want to learn more about PowerShell, check out my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.

If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses or any other course on the site.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4179</wp:post_id>
  <wp:post_date>2021-10-04 09:00:26</wp:post_date>
  <wp:post_date_gmt>2021-10-04 15:00:26</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 18:29:13</wp:post_modified>
  <wp:post_modified_gmt>2021-08-21 00:29:13</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-write-debug</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="debug"><![CDATA[Debug]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="write-debug"><![CDATA[Write-Debug]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4181]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[63760889872]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1633359632]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1445041153934598146";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_311522954111957";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165856</wp:comment_id>
    <wp:comment_author><![CDATA[Write-Debug in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/10/06/write-debug-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-10-06 06:10:13</wp:comment_date>
    <wp:comment_date_gmt>2021-10-06 12:10:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain goes from verbose to debug mode: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633527441.727001;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1633522213.195294;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166819</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:27</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] For more info on Write-Verbose and Write-Debug, see my posts Fun With PowerShell Write-Verbose and Fun With PowerShell Write-Debug. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835121.245818;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826827.455935;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-write-debug]]></title>
  <link>http://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/fun-with-powershell-write-debug/</link>
  <pubDate>Fri, 20 Aug 2021 23:46:29 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/08/fun-with-powershell-write-debug.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4181</wp:post_id>
  <wp:post_date>2021-08-20 17:46:29</wp:post_date>
  <wp:post_date_gmt>2021-08-20 23:46:29</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 17:46:29</wp:post_modified>
  <wp:post_modified_gmt>2021-08-20 23:46:29</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-write-debug</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4179</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/08/fun-with-powershell-write-debug.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/08/fun-with-powershell-write-debug.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:896;s:6:"height";i:403;s:4:"file";s:105:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/08/fun-with-powershell-write-debug.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:37129;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With VSCode Snippets for Markdown and PowerShell]]></title>
  <link>http://arcanecode.com/2021/10/11/fun-with-vscode-snippets-for-markdown-and-powershell/</link>
  <pubDate>Mon, 11 Oct 2021 15:00:15 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4183</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>

I have a confession. I love Markdown. There I said it, my confession is out in the open for all to see.

Seriously though, I do find this documentation language very useful, and easy to use. With just a few commands I can produce a nicely formatted document that can be displayed in my code editor, as well as on platforms like GitHub. I've even begun authoring these blog posts in Markdown.

A big reason for me is the ability to integrate it into my projects. VSCode, as well as the full blow Visual Studio, support Markdown (with of course the proper extensions installed). When I create a new PowerShell project in VSCode, I can store the projects documentation in Markdown format right alongside the PowerShell code.

Speaking of VSCode...

<h2>VSCode Snippets</h2>

A great thing about VSCode is the ability to create your own code <em>snippets</em>. A snippet is a text replacement system where I can enter a few characters of text and VSCode will then replace it with the full snippet. Snippets are activated using the <em>Intellisense</em> feature of VSCode.

One example, I have a standard header I put at the top of my PowerShell scripts. When I defined this header as a snippet, I named it <code>psheader</code>. Now I can enter <code>pshead</code> into my PowerShell script. VSCode's intellisense feature will prompt me with the list of snippets I have that being with <code>pshead</code>. I can then pick the one I want (<code>psheader</code>), press enter and the snippet of <code>psheader</code> will be replaced with the full text of my file header.

By default, pretty much every language in VSCode has the ability to handle snippets.

Except Markdown.

<h2>Markdown Snippets in VSCode</h2>

Shocking right? How could such an awesome language like Markdown not have snippets? (And yes, Markdown may not be a language in the strictest sense, but it's a close enough word for now.)

Well it's possible to enable Markdown snippets in PowerShell. Sometime back I created a GitHub project that shows you how to enable and use snippets for Markdown. In addition, I included my snippets for both PowerShell and Markdown.

Rather than reiterating everything here, I'll just point you to that repository.

<a href="https://github.com/arcanecode/VSCode_User_Snippets" target="_blank">https://github.com/arcanecode/VSCode_User_Snippets</a>

The main file in the repository, <code>ReadMe.md</code> gives a brief overview and explanation on how to use snippets.

The file <code>Enable_Intellisense_in_Markdown.md</code> does just what is says, shows you how to enable intellisense for Markdown in VSCode.

In VSCode, you can use certain replacements in your snippets. For example, you can embed the <code>$CURRENT_YEAR</code> snippet variable in your snippet (no matter what language) and when the snippet is generated into your code, it will replace the <code>$CURRENT_YEAR</code> with the actual current year.

I included a file, <code>Snippet_Reference.md</code> that lists the various snippet variables and gives a bit more explanation on how to use them.

If you aren't familiar with Markdown, or don't use it very often, you'll find the file <code>Markdown_Cheatsheet.md</code> useful. It has a list of the most often used Markdown formatting commands.

Finally I included two <code>.json</code> files. These are the snippets I use for PowerShell and Markdown on my system. You can use these as a guide in creating your own snippets, or copy the ones you find useful onto your VSCode installation.

If you use the VSCode sync settings feature, they you will be happy to know snippets are included as part of the sync process. You can modify your snippet files on one computer and they will be copied to all the other computers you sync VSCode on.

<h2>Conclusion</h2>

This was a brief post that primarily served to bring awareness to snippets, as well as the ability to use them with Markdown files. Go take a look at the <a href="https://github.com/arcanecode/VSCode_User_Snippets" target="_blank">repository</a> and with just a little effort I believe you'll find yourself becoming much more productive with the addition of snippets to your toolbox.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4183</wp:post_id>
  <wp:post_date>2021-10-11 09:00:15</wp:post_date>
  <wp:post_date_gmt>2021-10-11 15:00:15</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 18:24:41</wp:post_modified>
  <wp:post_modified_gmt>2021-08-21 00:24:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-vscode-snippets-for-markdown-and-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="intellisense"><![CDATA[Intellisense]]></category>
  <category domain="category" nicename="markdown"><![CDATA[Markdown]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="snippets"><![CDATA[Snippets]]></category>
  <category domain="category" nicename="vscode"><![CDATA[VSCode]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[classic-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4184]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[64030502285]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1633964426]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1447577841634320389";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_315929500337969";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>165922</wp:comment_id>
    <wp:comment_author><![CDATA[Visual Studio Code, Markdown, and Snippets &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/10/15/visual-studio-code-markdown-and-snippets/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-10-15 06:05:20</wp:comment_date>
    <wp:comment_date_gmt>2021-10-15 12:05:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain takes us through Markdown and snippets in Visual Studio Code: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634299520.689605;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634303645.561642;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-vscode-code-snippets]]></title>
  <link>http://arcanecode.com/2021/10/11/fun-with-vscode-snippets-for-markdown-and-powershell/fun-with-vscode-code-snippets/</link>
  <pubDate>Fri, 20 Aug 2021 23:58:42 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/08/fun-with-vscode-code-snippets.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4184</wp:post_id>
  <wp:post_date>2021-08-20 17:58:42</wp:post_date>
  <wp:post_date_gmt>2021-08-20 23:58:42</wp:post_date_gmt>
  <wp:post_modified>2021-08-20 17:58:42</wp:post_modified>
  <wp:post_modified_gmt>2021-08-20 23:58:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-vscode-code-snippets</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4183</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/08/fun-with-vscode-code-snippets.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/08/fun-with-vscode-code-snippets.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:885;s:6:"height";i:497;s:4:"file";s:103:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/08/fun-with-vscode-code-snippets.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:67333;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Providers]]></title>
  <link>http://arcanecode.com/2021/10/18/fun-with-powershell-providers/</link>
  <pubDate>Mon, 18 Oct 2021 23:15:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4205</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2>Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Providers are an interesting concept in PowerShell. A provider allows us to use a standard method to communicate with different areas of your computer using the same set of commands. For example, the file system is accessed using a provider. When you use <code>Get-ChildItem</code> it goes through the file system provider to return a list of the files on your computer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.5, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Listing the Providers</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To start with, let's get a list of the available providers. To do that, PowerShell has the <code>Get-PSProvider</code> cmdlet.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-PSProvider</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Name         Capabilities                        Drives
----         ------------                        ------
Registry     ShouldProcess                       {HKLM, HKCU}
Alias        ShouldProcess                       {Alias}
Environment  ShouldProcess                       {Env}
FileSystem   Filter, ShouldProcess, Credentials  {C, D, E, H…}
Function     ShouldProcess                       {Function}
Variable     ShouldProcess                       {Variable}
Certificate  ShouldProcess                       {Cert}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, there are a variety of providers available out of the box. The default provider is the <code>FileSystem</code>. As stated in the introduction, when you use <code>Get-ChildItem</code> it goes through the <code>FileSystem</code> provider to get a list of files, or more specifically file system objects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the right most column of the output, you can see a list of drives. Using the drives we can navigate the provider. To see a detailed list of drives, you can use the <code>Get-PSDrive</code> cmdlet.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Get-PSDrive</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Name           Used (GB)     Free (GB) Provider      Root                 CurrentLocation
----           ---------     --------- --------      ----                 ---------------
Alias                                  Alias
C                 898.79         53.83 FileSystem    C:\                  \Demo\PSCore-QuickStart
Cert                                   Certificate   \
D                 953.72          0.02 FileSystem    D:\
E                 875.38         56.00 FileSystem    E:\
Env                                    Environment
Function                               Function
HKCU                                   Registry      HKEY_CURRENT_USER
HKLM                                   Registry      HKEY_LOCAL_MACHINE
Variable                               Variable
WSMan                                  WSMan</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The <code>Name</code> column shows the name we will use when we want to change our location. First look at the column <code>Provider</code>, then at the rows with <code>FileSystem</code>. It shows three drives, C, D, and E. These are the three hard drives on my computer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <code>CurrentLocation</code> shows where we are in the provider tree. In the <code>FileSystem</code> provider, these locations are folders. For the C drive, I happen to be in the <code>\Demo\PSCore-QuickStart</code> folder.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's look at how to use some of the other providers.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Environment Provider</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To change to a different provider, you simply use <code>Set-Location</code> followed by the name to move to, just as you would to change to a different hard drive.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Set-Location env
Get-ChildItem</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Name                           Value
----                           -----
__COMPAT_LAYER                 DetectorsAppHealth
ALLUSERSPROFILE                C:\ProgramData
APPDATA                        C:\Users\arcan\AppData\Roaming
CHROME_CRASHPAD_PIPE_NAME      \\.\pipe\crashpad_7700_VQTNLEXXNDEMJHTN
COLORTERM                      truecolor
CommonProgramFiles             C:\Program Files\Common Files
CommonProgramFiles(x86)        C:\Program Files (x86)\Common Files
CommonProgramW6432             C:\Program Files\Common Files
...list truncated for brevity...</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This time <code>Get-ChildItem</code> recognized it was operating in the context of the Environment provider, and returned a list of environment variables and their values. (Note I've shortened the output for brevity.)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can access these like any other collection.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$envVars = Get-ChildItem
$envVars&#091;1].Name
$envVars&#091;1].Value</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>ALLUSERSPROFILE
C:\ProgramData</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Let's look at another provider.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>The Variable Provider</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another useful provider is the <code>Variable</code> provider. It gives access to a list of all variables and their values currently in memory. This includes both user defined variables and built in PowerShell variables. In this example I'll create a new variable, <code>$aVariable</code>. I'll then move to the variable provider and list them.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$aVariable = 'Some Value'
Set-Location variable
Get-ChildItem</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Name                           Value
----                           -----
?                              True
^                              Set-Location
$                              Get-ChildItem
args                           {}
aVariable                      Some Value
ConfirmPreference              High
DebugPreference                SilentlyContinue
...list truncated for brevity...</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This returns both the names and values for all of the variables. This can be an excellent debugging tool, for example logging all values when an error occurs.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Other Providers</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In addition to the built in list of providers you have seen, many modules will add their own providers that you can navigate. On of my favorites is the SQL Server module. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll go over it more in a future post, but know that through it you can use <code>Get-ChildItem</code> to navigate your list of servers, instances, databases, tables, and columns all as if they were your file system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You will find many modules supply providers you'll find useful.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In this post we took a brief look at providers, and how to navigate them. In addition, you are now aware there is a big world of providers outside the few default ones you saw in this post.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The demos in this series of blog posts came from my Pluralsight course <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/jWzbre" target="_blank">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/" target="_blank" rel="noreferrer noopener">About Me</a> page.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you don't have a Pluralsight subscription, just go to <a rel="noreferrer noopener" href="https://pluralsight.pxf.io/kjz6jn" target="_blank">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4205</wp:post_id>
  <wp:post_date>2021-10-18 17:15:00</wp:post_date>
  <wp:post_date_gmt>2021-10-18 23:15:00</wp:post_date_gmt>
  <wp:post_modified>2021-10-18 16:08:36</wp:post_modified>
  <wp:post_modified_gmt>2021-10-18 22:08:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-providers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="providers"><![CDATA[Providers]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4196]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[64308812960]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1634598971]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1450239317448744964";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_320766509854268";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166005</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 42/2021 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19834-Die-KW-422021-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2021-10-24 15:45:59</wp:comment_date>
    <wp:comment_date_gmt>2021-10-24 21:45:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] PowerShell Providers scheinen so eine Art Fassade oder Adapter zu sein. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1635115897.580764;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1635111959.558057;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165970</wp:comment_id>
    <wp:comment_author><![CDATA[The Purpose of Powershell Providers &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/10/21/the-purpose-of-powershell-providers/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-10-21 06:05:14</wp:comment_date>
    <wp:comment_date_gmt>2021-10-21 12:05:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain explains what providers do in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634817914.090371;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1634822396.334413;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun with powershell providers]]></title>
  <link>http://arcanecode.com/?p=4223</link>
  <pubDate/>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4223</guid>
  <description/>
  <content:encoded><![CDATA[<h2>Introduction</h2>

Providers are an interesting concept in PowerShell. A provider allows us to use a standard method to communicate with different areas of your computer using the same set of commands. For example, the file system is accessed using a provider. When you use <code>Get-ChildItem</code> it goes through the file system provider to return a list of the files on your computer.

We'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.1.5, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.

To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.

<h2>Listing the Providers</h2>

To start with, let's get a list of the available providers. To do that, PowerShell has the <code>Get-PSProvider</code> cmdlet.

[code lang=powershell]
Get-PSProvider
[/code]

Result:

[code lang=text]
Name         Capabilities                        Drives
----         ------------                        ------
Registry     ShouldProcess                       {HKLM, HKCU}
Alias        ShouldProcess                       {Alias}
Environment  ShouldProcess                       {Env}
FileSystem   Filter, ShouldProcess, Credentials  {C, D, E, H…}
Function     ShouldProcess                       {Function}
Variable     ShouldProcess                       {Variable}
Certificate  ShouldProcess                       {Cert}
[/code]

As you can see, there are a variety of providers available out of the box. The default provider is the <code>FileSystem</code>. As stated in the introduction, when you use <code>Get-ChildItem</code> it goes through the <code>FileSystem</code> provider to get a list of files, or more specifically file system objects.

In the right most column of the output, you can see a list of drives. Using the drives we can navigate the provider. To see a detailed list of drives, you can use the <code>Get-PSDrive</code> cmdlet.

[code lang=powershell]
Get-PSDrive
[/code]

Result:

[code lang=text]
Name           Used (GB)     Free (GB) Provider      Root                 CurrentLocation
----           ---------     --------- --------      ----                 ---------------
Alias                                  Alias
C                 898.79         53.83 FileSystem    C:\                  \Demo\PSCore-QuickStart
Cert                                   Certificate   \
D                 953.72          0.02 FileSystem    D:\
E                 875.38         56.00 FileSystem    E:\
Env                                    Environment
Function                               Function
HKCU                                   Registry      HKEY_CURRENT_USER
HKLM                                   Registry      HKEY_LOCAL_MACHINE
Variable                               Variable
WSMan                                  WSMan
[/code]

The <code>Name</code> column shows the name we will use when we want to change our location. First look at the column <code>Provider</code>, then at the rows with <code>FileSystem</code>. It shows three drives, C, D, and E. These are the three hard drives on my computer.

The <code>CurrentLocation</code> shows where we are in the provider tree. In the <code>FileSystem</code> provider, these locations are folders. For the C drive, I happen to be in the <code>\Demo\PSCore-QuickStart</code> folder.

Let's look at how to use some of the other providers.

<h2>The Environment Provider</h2>

To change to a different provider, you simply use <code>Set-Location</code> followed by the name to move to, just as you would to change to a different hard drive.

[code lang=powershell]
Set-Location env
Get-ChildItem
[/code]

Result:

[code lang=text]
Name                           Value
----                           -----
__COMPAT_LAYER                 DetectorsAppHealth
ALLUSERSPROFILE                C:\ProgramData
APPDATA                        C:\Users\arcan\AppData\Roaming
CHROME_CRASHPAD_PIPE_NAME      \\.\pipe\crashpad_7700_VQTNLEXXNDEMJHTN
COLORTERM                      truecolor
CommonProgramFiles             C:\Program Files\Common Files
CommonProgramFiles(x86)        C:\Program Files (x86)\Common Files
CommonProgramW6432             C:\Program Files\Common Files
...list truncated for brevity...
[/code]

This time <code>Get-ChildItem</code> recognized it was operating in the context of the Environment provider, and returned a list of environment variables and their values. (Note I've shortened the output for brevity.)

We can access these like any other collection.

[code lang=powershell]
$envVars = Get-ChildItem
$envVars[1].Name
$envVars[1].Value
[/code]

Result:

[code lang=text]
ALLUSERSPROFILE
C:\ProgramData
[/code]

Let's look at another provider.

<h1>The Variable Provider</h1>

Another useful provider is the <code>Variable</code> provider. It gives access to a list of all variables and their values currently in memory. This includes both user defined variables and built in PowerShell variables. In this example I'll create a new variable, <code>$aVariable</code>. I'll then move to the variable provider and list them.

[code lang=powershell]
$aVariable = &#039;Some Value&#039;
Set-Location variable
Get-ChildItem
[/code]

Result:

[code lang=text]
Name                           Value
----                           -----
?                              True
^                              Set-Location
$                              Get-ChildItem
args                           {}
aVariable                      Some Value
ConfirmPreference              High
DebugPreference                SilentlyContinue
...list truncated for brevity...
[/code]

This returns both the names and values for all of the variables. This can be an excellent debugging tool, for example logging all values when an error occurs.

<h2>Other Providers</h2>

In addition to the built in list of providers you have seen, many modules will add their own providers that you can navigate. On of my favorites is the SQL Server module.

I'll go over it more in a future post, but know that through it you can use <code>Get-ChildItem</code> to navigate your list of servers, instances, databases, tables, and columns all as if they were your file system.

You will find many modules supply providers you'll find useful.

<h2>Conclusion</h2>

In this post we took a brief look at providers, and how to navigate them. In addition, you are now aware there is a big world of providers outside the few default ones you saw in this post.

The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.

If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4223</wp:post_id>
  <wp:post_date>2021-10-20 11:41:58</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-10-20 11:41:58</wp:post_modified>
  <wp:post_modified_gmt>2021-10-20 17:41:58</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[344266]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[No Fun with Slow Internet and Big Downloads]]></title>
  <link>http://arcanecode.com/2021/11/05/no-fun-with-slow-internet-and-big-downloads/</link>
  <pubDate>Fri, 05 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4227</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I'm taking this rare opportunity to post a bit of a rant.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I live in a rural part of the country. It's a beautiful area, lots of woods, nature, a very quiet area.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With that comes some downsides, including slow internet. My home speed is a blazing twelve megabits. I have a relative's house I work at in another part of the state, there the internet is a mere three megabits.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At the same time, software updates seem to be growing larger and larger. The most recent update to Apple's XCode was over twelve gig. There is a video editing package called DaVinci Resolve that regularly puts out two gig updates.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These take incredibly lengthy periods of time to download at my home, assuming the connection doesn't drop or reset mid-download. I wind up going to coffee shops or the library where there is faster internet that allows me to receive these large updates. Even in these locations the fastest speed is one hundred megabits, shared among all its users.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm not the only person in this situation. At conferences (back in the pre-COVID days when we had them) I often spoke with other attendees who lived under similar circumstances.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Of course, the real solution is to get faster internet to our rural communities, both here in the US and worldwide. Much of our planet is dependent on the internet for communications, business, and more, to the point where it is becoming a necessity.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Unfortunately, infrastructure is not cheap, nor is it quick to roll out. So, until that happens, I'd really like for software makers to remember those of us with slower connections.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead of multi-gigabyte updates, I'd love to see software makers create smaller patches for their software, instead of a basic complete reinstall of the applications. Yes, it would require more testing, but would result in lower demands on their corporate servers and bandwidth.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Perhaps if others across the planet joined our voices it may have a positive effect, both in reducing download sizes and in getting a meaningful truly high-speed internet infrastructure in place.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4227</wp:post_id>
  <wp:post_date>2021-11-05 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-05 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-04 17:36:36</wp:post_modified>
  <wp:post_modified_gmt>2021-11-04 23:36:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>no-fun-with-slow-internet-and-big-downloads</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="community"><![CDATA[Community]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65003983148]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1636128005]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1456652549675786245";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_331774298753489";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166149</wp:comment_id>
    <wp:comment_author><![CDATA[Michael]]></wp:comment_author>
    <wp:comment_author_email>mike@mrbendo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>165.225.10.117</wp:comment_author_IP>
    <wp:comment_date>2021-11-05 17:54:29</wp:comment_date>
    <wp:comment_date_gmt>2021-11-05 23:54:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow.  It's tough being you!  The particular location I live in although in a city was more than 10k feet from the NOC which apparently is a magic number and prevented decent speeds for many years.  12 megabits would have been a dream just a few years ago.  The real culprit in here are the malware makers and scammers.  It's because of them we must update all the time.  It's like taking shoes off in the airport.  Beyond the usual recommendations; starting updates before going to bed, download managers, satellite bandwidth, VDI, etc., perhaps you need to evaluate your entire situation.  The choice of hardware, software and location are all on you.  If you are willing to spend the money, there's a solution.  It's hard to be sympathetic.  Back in my day...;)]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636161549.062712;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1636156469.936666;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Solved: CMD Key Combos Not Working with Logitech K850 and MacOS Monterrey]]></title>
  <link>http://arcanecode.com/2021/11/09/solved-cmd-key-combos-not-working-with-logitech-k850-and-macos-monterrey/</link>
  <pubDate>Tue, 09 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4234</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p id="earlier-this-year-i-did-a-blog-post-working-from-home-permanently-in-which-i-recommend-using-a-good-keyboard-especially-when-you-have-multiple-computers">Earlier this year I did a blog post, <a rel="noreferrer noopener" href="https://arcanecode.com/2021/03/22/working-from-home-permanently/" target="_blank">Working From Home - Permanently</a>, in which I recommend using a good keyboard especially when you have multiple computers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since upgrading to MacOS Monterrey I've had an issue where some of the basic command key combos, such as CMD+X, CMD+V, CMD+C, and more were not working from my Logitech K850 keyboard. However, when I press those keys directly on my MacBook Pro they worked fine.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For those unfamiliar with it, the Logitech K850 will let you bluetooth connect to three different computers. It has three buttons labeled 1, 2, and 3 that will switch the input to a different computer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This seemed to occur when I first powered up my MacBook. I'd go to do something and find my often used command key combos (CMD+C, etc) would not work.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The fix turned out to be fairly simple, what I needed to do is switch the input to another computer (using the 1, 2, 3 buttons). Once the keyboard was connected to another machine, I could return to my MacBook and find that the CMD keys worked like they were supposed to.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm guessing the K850 must power up in some default state in which it doesn't realize it is in "Mac" mode. It isn't until you switch from some other computer to the MacBook that it realizes "oh, hey, I'm connected to a MacBook so I'll switch to Mac mode" and make the CMD key combos work right.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But that's just a guess on my part, the important thing is if you are having the same issue, just switch the keyboard input to a different computer then back to the MacBook via the 1, 2, 3 buttons and the CMD key combinations should start working.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note, in my testing I had to switch to an input that was active (i.e. to a computer that was powered up). When I switched to an unused input (not currently connected to a powered computer) and back it didn't always work right.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4234</wp:post_id>
  <wp:post_date>2021-11-09 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-09 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-08 17:56:52</wp:post_modified>
  <wp:post_modified_gmt>2021-11-08 23:56:52</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>solved-cmd-key-combos-not-working-with-logitech-k850-and-macos-monterrey</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="post_tag" nicename="k850"><![CDATA[K850]]></category>
  <category domain="post_tag" nicename="logitech"><![CDATA[Logitech]]></category>
  <category domain="post_tag" nicename="monterrey"><![CDATA[Monterrey]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[3056]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1636473644]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65155511621]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1458102266972577796";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_334292001835052";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167260</wp:comment_id>
    <wp:comment_author><![CDATA[Thom]]></wp:comment_author>
    <wp:comment_author_email>thom@probationlabs.se</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>37.221.104.199</wp:comment_author_IP>
    <wp:comment_date>2022-02-22 23:48:07</wp:comment_date>
    <wp:comment_date_gmt>2022-02-23 05:48:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have the same problem. Thanks for the solution. Have you found any easier way to make it work?]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645595288.194801;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645600231.882263;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun with PowerShell Enums]]></title>
  <link>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/</link>
  <pubDate>Mon, 15 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4244</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nThis post begins a series on using _Classes_ in PowerShell. As a first step, we will cover the use of an `Enum`, as enums are frequently used in combination with classes.\n\nAn Enum is a way to provide a set of predetermined values to the end user. This allows the user to pick from a finite list, and assure a value being passed into a function or class will be valid.\n\nWe'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Basic Enum Declaration\n\n`Enum` is short for _enumerated value_. As mentioned in the intro, it is a set of predetermined values that will ensure users of your script select a valid value required by your PowerShell code. Let's start by defining a basic `Enum`.\n\n```powershell\nEnum MyTwitters\n{\n  ArcaneCode\n  ArcaneTC\n  N4IXT\n}\n```\n\nAs you can see, the basic declaration is very simple. You simply use the keyword `Enum` followed by what you wish to name it. In the squiggly braces you list the valid values.\n\nHere I've listed three of my Twitter accounts. The first is the main one I use, _ArcaneCode_. The second is the one I use for my company _ArcaneTC_ (short for Arcane Training and Consulting). I use it primarily to announce new Pluralsight courses, so it doesn't see a huge amount of use.\n\nOne of my hobbies is amateur radio, also known as _ham radio_. _N4IXT_ is my FCC assigned amateur radio call sign I use to identify myself on the air. I don't post a lot, I use it mostly to read through the latest news in the ham radio world.\n\nNote that Enums cannot have spaces in their names, although you could use separators such as an underscore. *Arcane_Code* would be a valid value for an enum.\n\n## What are my valid Enum values?\n\nYou've now created an `Enum`, perhaps you've included it within a module you are providing to other programmers in your company. How can they retrieve a list of valid values?\n\nHopefully you've provided documentation, but it's also easy for a user to have PowerShell return a list of values. First, make sure you have executed the code above by highlighting it and using F8 (VSCode) or F5 (PowerShell IDE) to get the Enum into memory. Then you can run the line of code below. \n\n```powershell\n[MyTwitters].GetEnumNames()\n```\n\nResult:\n\n```\nArcaneCode\nArcaneTC\nN4IXT\n```\n\nAs you can see, it simply returns a list of the values that we declared in the Enum.\n\n## Assigning an Enum to a Variable\n\nNow we have our enum, and know what the values are. We're now ready to use our enum in our script. Here I'll just assign it to a variable, but we could also pass an enumerated value into a function.\n\nBegin typing out the following code sample, and note what happens when you hit the second colon.\n\n```powershell\n$tweet = [MyTwitters]::\n```\n\nWhen you have entered the second colon, you should see a list of the enumerated values in VSCode.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>This post begins a series on using <em>Classes</em> in PowerShell. As a first step, we will cover the use of an <code>Enum</code>, as enums are frequently used in combination with classes.</p>
<p>An Enum is a way to provide a set of predetermined values to the end user. This allows the user to pick from a finite list, and assure a value being passed into a function or class will be valid.</p>
<p>We'll take a deeper look in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Basic Enum Declaration</h2>
<p><code>Enum</code> is short for <em>enumerated value</em>. As mentioned in the intro, it is a set of predetermined values that will ensure users of your script select a valid value required by your PowerShell code. Let's start by defining a basic <code>Enum</code>.</p>
<pre><code class="language-powershell">Enum MyTwitters
{
  ArcaneCode
  ArcaneTC
  N4IXT
}
</code></pre>
<p>As you can see, the basic declaration is very simple. You simply use the keyword <code>Enum</code> followed by what you wish to name it. In the squiggly braces you list the valid values.</p>
<p>Here I've listed three of my Twitter accounts. The first is the main one I use, <em>ArcaneCode</em>. The second is the one I use for my company <em>ArcaneTC</em> (short for Arcane Training and Consulting). I use it primarily to announce new Pluralsight courses, so it doesn't see a huge amount of use.</p>
<p>One of my hobbies is amateur radio, also known as <em>ham radio</em>. <em>N4IXT</em> is my FCC assigned amateur radio call sign I use to identify myself on the air. I don't post a lot, I use it mostly to read through the latest news in the ham radio world.</p>
<p>Note that Enums cannot have spaces in their names, although you could use separators such as an underscore. <em>Arcane_Code</em> would be a valid value for an enum.</p>
<h2>What are my valid Enum values?</h2>
<p>You've now created an <code>Enum</code>, perhaps you've included it within a module you are providing to other programmers in your company. How can they retrieve a list of valid values?</p>
<p>Hopefully you've provided documentation, but it's also easy for a user to have PowerShell return a list of values. First, make sure you have executed the code above by highlighting it and using F8 (VSCode) or F5 (PowerShell IDE) to get the Enum into memory. Then you can run the line of code below.</p>
<pre><code class="language-powershell">[MyTwitters].GetEnumNames()
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
ArcaneTC
N4IXT
</code></pre>
<p>As you can see, it simply returns a list of the values that we declared in the Enum.</p>
<h2>Assigning an Enum to a Variable</h2>
<p>Now we have our enum, and know what the values are. We're now ready to use our enum in our script. Here I'll just assign it to a variable, but we could also pass an enumerated value into a function.</p>
<p>Begin typing out the following code sample, and note what happens when you hit the second colon.</p>
<pre><code class="language-powershell">$tweet = [MyTwitters]::
</code></pre>
<p>When you have entered the second colon, you should see a list of the enumerated values in VSCode.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"align":"center","id":4247,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-01-vscode.png"><img src="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-01-vscode.png?w=647" alt="" class="wp-image-4247" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"I say _should_ as sometimes I've had VSCode return enums that were declared in my script, and not for the specific enum I was working with.\n\nIn the PowerShell ISE though, I've had it work right every time.\n"} -->
<div class="wp-block-jetpack-markdown"><p>I say <em>should</em> as sometimes I've had VSCode return enums that were declared in my script, and not for the specific enum I was working with.</p>
<p>In the PowerShell ISE though, I've had it work right every time.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"align":"center","id":4248,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-02-ise.png"><img src="https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-02-ise.png?w=393" alt="" class="wp-image-4248" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"When complete, your assignment should look like:\n\n```powershell\n$tweet = [MyTwitters]::ArcaneCode\n```\n\n## Is it Valid?\n\nSo you have a value from the enum copied into your variable, `$tweet`. How do we test it?\n\nIt's important to understand enums are objects. In addition to the values you provide they have a set of properties and methods you can use. In the previous example, you saw the `GetEnumNames` method being used.\n\nAnother useful method is `IsDefined`.\n\n```powershell\n[enum]::IsDefined(([MyTwitters]), $tweet)\n```\n\nResult:\n\n```\nTrue\n```\n\nInto the `IsDefined` method you pass in your enumeration, then the value you want to test. Here our value is in the variable `$tweet`. If the value is contained in the enum, the method returns `True`.\n\nWhat if the user passes in a value that is not contained in our enum?\n\n```powershell\n$tweet = 'Invalid'\n[enum]::IsDefined(([MyTwitters]), $tweet)\n```\n\nResult:\n\n```\nFalse\n```\n\nReturning `False` makes it easy to use an `if` statement and raise an error if the user tries to use an invalid value. For more on the `if` statement, see my post [Fun with PowerShell Logic Branching](https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/).\n\n## Conclusion\n\nFor these examples we used my Twitter accounts for our enum values, but there are many more uses some of them extremely common. You could load an enum with the days of the week, months of the year, colors, and other common values your scripts might use.\n\nIn the introduction I mentioned we are starting our series on classes with the enum as enums are frequently used with classes. However this is not a requirement. You can use enums with any PowerShell code you want to write.\n\nIn the my next post we'll continue exploring the enum. We'll look at a few more useful methods, as well as see how to assign values to our enum values.\n\nThe demos in this series of blog posts came from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><p>When complete, your assignment should look like:</p>
<pre><code class="language-powershell">$tweet = [MyTwitters]::ArcaneCode
</code></pre>
<h2>Is it Valid?</h2>
<p>So you have a value from the enum copied into your variable, <code>$tweet</code>. How do we test it?</p>
<p>It's important to understand enums are objects. In addition to the values you provide they have a set of properties and methods you can use. In the previous example, you saw the <code>GetEnumNames</code> method being used.</p>
<p>Another useful method is <code>IsDefined</code>.</p>
<pre><code class="language-powershell">[enum]::IsDefined(([MyTwitters]), $tweet)
</code></pre>
<p>Result:</p>
<pre><code>True
</code></pre>
<p>Into the <code>IsDefined</code> method you pass in your enumeration, then the value you want to test. Here our value is in the variable <code>$tweet</code>. If the value is contained in the enum, the method returns <code>True</code>.</p>
<p>What if the user passes in a value that is not contained in our enum?</p>
<pre><code class="language-powershell">$tweet = 'Invalid'
[enum]::IsDefined(([MyTwitters]), $tweet)
</code></pre>
<p>Result:</p>
<pre><code>False
</code></pre>
<p>Returning <code>False</code> makes it easy to use an <code>if</code> statement and raise an error if the user tries to use an invalid value. For more on the <code>if</code> statement, see my post <a href="https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/">Fun with PowerShell Logic Branching</a>.</p>
<h2>Conclusion</h2>
<p>For these examples we used my Twitter accounts for our enum values, but there are many more uses some of them extremely common. You could load an enum with the days of the week, months of the year, colors, and other common values your scripts might use.</p>
<p>In the introduction I mentioned we are starting our series on classes with the enum as enums are frequently used with classes. However this is not a requirement. You can use enums with any PowerShell code you want to write.</p>
<p>In the my next post we'll continue exploring the enum. We'll look at a few more useful methods, as well as see how to assign values to our enum values.</p>
<p>The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4244</wp:post_id>
  <wp:post_date>2021-11-15 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-15 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-14 22:57:21</wp:post_modified>
  <wp:post_modified_gmt>2021-11-15 04:57:21</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-enums</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="enum"><![CDATA[Enum]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4252]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65386392103]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1636992033]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1460276546506313728";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_338134988117420";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166261</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 46/2021 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19840-Die-KW-462021-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2021-11-21 16:59:09</wp:comment_date>
    <wp:comment_date_gmt>2021-11-21 22:59:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Klassen, ENums, PowerShell? Hier erhaltet ihr Informationen. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637535549.161509;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637539588.755115;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166374</wp:comment_id>
    <wp:comment_author><![CDATA[More Fun with PowerShell Enums | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.30</wp:comment_author_IP>
    <wp:comment_date>2021-11-29 10:00:59</wp:comment_date>
    <wp:comment_date_gmt>2021-11-29 16:00:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] a previous post, Fun with PowerShell Enums I introduced the concept of [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638201659.676432;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638205800.507582;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166267</wp:comment_id>
    <wp:comment_author><![CDATA[Using Enums in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/11/22/using-enums-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-11-22 07:10:09</wp:comment_date>
    <wp:comment_date_gmt>2021-11-22 13:10:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain quietly tells us that Powershell is a real programming language, sysadmins who claim to &#8230;: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637591060.562544;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1637586609.600626;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[fun-with-powershell-enums-03-header]]></title>
  <link>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/fun-with-powershell-enums-03-header/</link>
  <pubDate>Mon, 15 Nov 2021 04:53:53 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header.png</guid>
  <description/>
  <content:encoded><![CDATA[How to declare an enum]]></content:encoded>
  <excerpt:encoded><![CDATA[Declaring an Enum]]></excerpt:encoded>
  <wp:post_id>4251</wp:post_id>
  <wp:post_date>2021-11-14 22:53:53</wp:post_date>
  <wp:post_date_gmt>2021-11-15 04:53:53</wp:post_date_gmt>
  <wp:post_modified>2021-11-14 22:54:20</wp:post_modified>
  <wp:post_modified_gmt>2021-11-15 04:54:20</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-enums-03-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/fun-with-powershell-enums-03-header.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:818;s:6:"height";i:346;s:4:"file";s:109:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/fun-with-powershell-enums-03-header.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:30427;}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Enum Declaration]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-enums-03-header]]></title>
  <link>http://arcanecode.com/2021/11/15/fun-with-powershell-enums/fun-with-powershell-enums-03-header-2/</link>
  <pubDate>Mon, 15 Nov 2021 04:56:07 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4252</wp:post_id>
  <wp:post_date>2021-11-14 22:56:07</wp:post_date>
  <wp:post_date_gmt>2021-11-15 04:56:07</wp:post_date_gmt>
  <wp:post_modified>2021-11-14 22:56:07</wp:post_modified>
  <wp:post_modified_gmt>2021-11-15 04:56:07</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-enums-03-header-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/fun-with-powershell-enums-03-header-1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/fun-with-powershell-enums-03-header-1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:642;s:6:"height";i:341;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/fun-with-powershell-enums-03-header-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:29461;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Security for Apartment Dwellers]]></title>
  <link>http://arcanecode.com/2021/11/22/security-for-apartment-dwellers/</link>
  <pubDate>Mon, 22 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4253</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nI'm at the stage in my life where my wife and I are becoming empty nesters. My youngest daughter Anna is moving several states away to start a new life and I couldn't be prouder of her.\n\nAs she's been packing I've shared some security advice she can use at her new apartment. I got to thinking \u0022hey, this is good stuff I should share it with others!\u0022 Next week I'll continue my series on PowerShell Enums, but for this week let's talk security.\n\nBy the way, this advice can apply to apartment dwellers, dorm rooms, or even rental houses. For simplicity I'll refer to these as your _home_ in this article, meaning any place you live in and rent.\n\n# The Need for Security\n\nWhenever you rent, you are in someone else's property. That means they too have keys to your dwelling.\n\nAnd they use them. Exterminators come in on a regular basis to spray for bugs. Folks from the maintenance crew come in to check smoke alarms, air conditioning filters, and more.\n\nNow let me be clear, I firmly believe that 99% of these people are good, hard working, and honest. But all it takes is that one bad egg to ruin your day, maybe even your year.\n\nSome places provide notification in advance that someone will be entering your place of residence. But not all places, back when I was a renter it wasn't unusual to come home and find a \u0022your friendly neighborhood exterminator was here today\u0022 note on my door.\n\nOr you may not know at all, one complex I lived in never told you, I only knew if a neighbor mentioned it.\n\nA quick disclaimer before we get started: I mention several products in this post. These are not ads, I'm not making any money from these endorsements. I just like them and paid my own hard earned cash for them.\n\nSo that said, let me get into the suggestions.\n\n## Computer Security\n\n### Desktops\n\nIf you have a desktop computer, you should always lock your screen before you leave home. By locking your computer you'll require the entry of a password or pin to use the computer. Most people keep all types of things on their computer.\n\nWeb browsers are often set to automatically login to email, financial, even gaming accounts. Family photos populate your drive. Important documents like tax returns are often scanned and stored on your hard drive.\n\nOn all operating systems there will be menu options to lock the screen, but there are also keystroke shortcuts that will allow you to quickly lock your computer.\n\nOn Windows, the Windows Key + L combination will lock the screen. This frequently works on many Linux distributions as well, although you should check your documentation to be sure.\n\nOn macOS, you can use the Ctrl + Command + Q key combination to lock the screen.\n\nIf you are on macOS, and have an iPhone, there's a nifty app called [NearLock](https://nearlock.me). Actually it is two apps, one runs on your Mac, the other on your iPhone.\n\nWhen your phone gets more than 3 feet away (you can change the distance in your configuration) it locks your Mac. It'll also unlock your Mac when you get back into range.\n\nI can't stress how important this one tip is, because this is the situation where someone could steal from you and you wouldn't know it. A bad guy could copy your personal info onto a USB key, and you'd be none with wiser.\n\n### Laptops - Cable Lock\n\nIf you leave your laptop turned on when you leave home, then follow the advice for desktops about locking your screen.\n\nI'd also suggest getting a _cable lock_. This [Kensington lock, found on Amazon](https://www.amazon.com/Kensington-Combination-Laptops-Devices-K64673AM/dp/B005J7Y99W/ref=sr_1_3?keywords=cable+lock+for+laptop\u0026amp;qid=1637170003\u0026amp;qsid=131-9238968-1212212\u0026amp;sr=8-3\u0026amp;sres=B005J7Y99W%2CB07CCJPWH7%2CB07CTXS87G%2CB086PNF98V%2CB00WJHQFLU%2CB088NJLBK7%2CB01K1JUO14%2CB07YWQGDGN%2CB07V4NJ85W%2CB008A4F8UA%2CB004BJ0ZHY%2CB000031XCM%2CB08JTXNZZ9%2CB0036RHAFM%2CB00DP5LTXO%2CB08ZS1XK4H\u0026amp;srpt=ELECTRONIC_CABLE) is a good choice that I use, but there are many options.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>I'm at the stage in my life where my wife and I are becoming empty nesters. My youngest daughter Anna is moving several states away to start a new life and I couldn't be prouder of her.</p>
<p>As she's been packing I've shared some security advice she can use at her new apartment. I got to thinking &quot;hey, this is good stuff I should share it with others!&quot; Next week I'll continue my series on PowerShell Enums, but for this week let's talk security.</p>
<p>By the way, this advice can apply to apartment dwellers, dorm rooms, or even rental houses. For simplicity I'll refer to these as your <em>home</em> in this article, meaning any place you live in and rent.</p>
<h1>The Need for Security</h1>
<p>Whenever you rent, you are in someone else's property. That means they too have keys to your dwelling.</p>
<p>And they use them. Exterminators come in on a regular basis to spray for bugs. Folks from the maintenance crew come in to check smoke alarms, air conditioning filters, and more.</p>
<p>Now let me be clear, I firmly believe that 99% of these people are good, hard working, and honest. But all it takes is that one bad egg to ruin your day, maybe even your year.</p>
<p>Some places provide notification in advance that someone will be entering your place of residence. But not all places, back when I was a renter it wasn't unusual to come home and find a &quot;your friendly neighborhood exterminator was here today&quot; note on my door.</p>
<p>Or you may not know at all, one complex I lived in never told you, I only knew if a neighbor mentioned it.</p>
<p>A quick disclaimer before we get started: I mention several products in this post. These are not ads, I'm not making any money from these endorsements. I just like them and paid my own hard earned cash for them.</p>
<p>So that said, let me get into the suggestions.</p>
<h2>Computer Security</h2>
<h3>Desktops</h3>
<p>If you have a desktop computer, you should always lock your screen before you leave home. By locking your computer you'll require the entry of a password or pin to use the computer. Most people keep all types of things on their computer.</p>
<p>Web browsers are often set to automatically login to email, financial, even gaming accounts. Family photos populate your drive. Important documents like tax returns are often scanned and stored on your hard drive.</p>
<p>On all operating systems there will be menu options to lock the screen, but there are also keystroke shortcuts that will allow you to quickly lock your computer.</p>
<p>On Windows, the Windows Key + L combination will lock the screen. This frequently works on many Linux distributions as well, although you should check your documentation to be sure.</p>
<p>On macOS, you can use the Ctrl + Command + Q key combination to lock the screen.</p>
<p>If you are on macOS, and have an iPhone, there's a nifty app called <a href="https://nearlock.me">NearLock</a>. Actually it is two apps, one runs on your Mac, the other on your iPhone.</p>
<p>When your phone gets more than 3 feet away (you can change the distance in your configuration) it locks your Mac. It'll also unlock your Mac when you get back into range.</p>
<p>I can't stress how important this one tip is, because this is the situation where someone could steal from you and you wouldn't know it. A bad guy could copy your personal info onto a USB key, and you'd be none with wiser.</p>
<h3>Laptops - Cable Lock</h3>
<p>If you leave your laptop turned on when you leave home, then follow the advice for desktops about locking your screen.</p>
<p>I'd also suggest getting a <em>cable lock</em>. This <a href="https://www.amazon.com/Kensington-Combination-Laptops-Devices-K64673AM/dp/B005J7Y99W/ref=sr_1_3?keywords=cable+lock+for+laptop&amp;qid=1637170003&amp;qsid=131-9238968-1212212&amp;sr=8-3&amp;sres=B005J7Y99W%2CB07CCJPWH7%2CB07CTXS87G%2CB086PNF98V%2CB00WJHQFLU%2CB088NJLBK7%2CB01K1JUO14%2CB07YWQGDGN%2CB07V4NJ85W%2CB008A4F8UA%2CB004BJ0ZHY%2CB000031XCM%2CB08JTXNZZ9%2CB0036RHAFM%2CB00DP5LTXO%2CB08ZS1XK4H&amp;srpt=ELECTRONIC_CABLE">Kensington lock, found on Amazon</a> is a good choice that I use, but there are many options.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:image {"align":"center","id":4256,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2021/11/security-for-apartment-dwellers-01.png"><img src="https://arcanecode.files.wordpress.com/2021/11/security-for-apartment-dwellers-01.png?w=577" alt="" class="wp-image-4256" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:jetpack/markdown {"source":"Almost all laptops have a small slot the end with the lock will fit into, with the possible exception of some of the very thin laptops such as some recent MacBooks. Check your laptop to be sure before ordering.\n\nMake sure you have a strong, secure spot to loop the cable through. A desk leg that you can just pick up and slip off the cable is a poor choice.\n\nSome locking cables come with an adhesive hook you can use, but I don't trust those. With just a little effort many can be easily ripped or pried off. But it is better than nothing.\n\nInstead of the adhesive hook I suggest going to your local hardware store and getting an eye bolt with the hole big enough to get the cable through, or perhaps a handle that would go on a chest or garage door. Screw it into your desk, or even better the wall (assuming that doesn't violate your lease).\n\nCable locks come in two types, a combination lock and one with a key. They key is faster to unlock, but if you are the kind of person who leaves their keys by the front door the combination may be more convenient.\n\nThe combination has another advantage if you share a laptop with your spouse or other family member. It's easy to share the combination with other trusted people.\n\nNote that many desktop computers these days also have the ability to have a cable lock. If not, you may be able to bolt a secure hook to yours. In addition to cable locks they also make cables with just loops on both ends such as [this one from Amazon](https://www.amazon.com/Master-Lock-Cable-Looped-72DPF/dp/B000BD8IQ4/ref=sr_1_1_sspa?keywords=cable+lock\u0026amp;qid=1637169986\u0026amp;sr=8-1-spons\u0026amp;psc=1\u0026amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyWEdXUVhOWllON1E4JmVuY3J5cHRlZElkPUEwMTQyMDY0MkpDVjJGNFlGWFJRMCZlbmNyeXB0ZWRBZElkPUEwMzIxOTY1V0taRDgzVUJRMElFJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==). Slip one end through the hook, then use a good heavy duty padlock to connect the loops.\n\n### Laptops - Lock it up\n\nAnother way to secure your laptop is to get a small, two (or more) drawer filing cabinet that has a lock on it. Plenty of space to store one or more laptops in.\n\nA nice bonus is the ability store other valuables in it. Perhaps you have some nice camera equipment, portable gaming gear like a Nintendo Switch, and iPads or Android tablets.\n\nAnything small but expensive could be placed in your file cabinet. I'll admit, a determined thief could just carry off the whole file cabinet, or your desktop.\n\nThe security tips in this article are more geared toward the opportunist thief, ones who didn't set out to take anything but when the opportunity arises they jump on it.\n\nIf you really wanted to carry it to an extreme, you could attach eye bolts or something similar to the file cabinet, desk, even the wall, then connect them using a steel cable with loops on either end like the one I suggested in the previous section. Use a heavy duty padlock to hook them all together. It will make the whole collection to big, heavy, and unwieldy to simply carry away.\n\n## Mail Call\n\nIf it wasn't for junk mail I wouldn't get any mail at all!\n\nWell not quite, in addition to the stack of junk mail I still get bills (despite my best efforts to go paperless). These bills often have account numbers or enough information for a crook to hijack your accounts.\n\nIn my pile of junk mail I get credit card offers or \u0022take out a loan with us with the low interest rate of 53%!\u0022 Of course this is annoying, but can also be dangerous as someone could take out a loan or credit card in your name, but changing the address to them.\n\nKeep these secured in your file cabinet (you did buy one for your laptops, tablets, and other expensive stuff didn't you?). One stack for junk, the other for bills and other info to retain.\n\nYou should always take time to shred junk mail with monetary offers, as well as bills when you are done with them. (Obviously you'll also want a shredder to go with this setup.) If you want to keep copies then you can get printer/copier/scanners at reasonable prices and store on your computer. You know, the one you lock everytime before you leave home.\n\nIf you don't want a scanner, just take pictures of these items with your phone. On my iPhone I use an app called [Scanner Pro](https://apps.apple.com/us/app/scanner-pro-ocr-scanning-fax/id333710667).\n\nNot only does it take the picture but it also handles things like skewed pics, making the document nice and square (well rectangular for pieces of paper). If I'm only scanning in one or two pages, I use Scanner Pro rather than going to my multi-function printer.\n\nI highly recommend getting an app like this for your phone. Feel free to post a comment with your favorite app, especially if you are an Android user.\n\n## Cold Hard Cash\n\nI believe it is useful to keep a bit of cash on hand. You might lose or have your credit/debit card stolen and have to wait for a replacement. Perhaps there is an extended power or internet outage, and cash is the only way to purchase supplies.\n\nNever leave cash laying around. Most crooks, even the casual opportunist, knows to check under the mattress or the underwear drawer in your dresser.\n\nUse the file cabinet, or get a small safe. If you carry a purse, but sometimes leave it at home, maybe to go jogging, swimming, or other exercises, secure it in your file cabinet or safe when you are gone.\n\nIf you normally carry a wallet, but leave it behind for exercise or other reasons, lock it up as well.\n\n## Conclusion\n\nAfter reading this you may think I'm a little paranoid. But remember, just because you're paranoid doesn't mean they're not out to get you!\n\nMost of these suggestions can be had for little cost, plus a few seconds of time, but can save you a lot of headaches and money in the long run. All it takes is one incident to ruin your credit, put you in debt, and deprive you of valuable, daily used tools like laptops and tablets.\n"} -->
<div class="wp-block-jetpack-markdown"><p>Almost all laptops have a small slot the end with the lock will fit into, with the possible exception of some of the very thin laptops such as some recent MacBooks. Check your laptop to be sure before ordering.</p>
<p>Make sure you have a strong, secure spot to loop the cable through. A desk leg that you can just pick up and slip off the cable is a poor choice.</p>
<p>Some locking cables come with an adhesive hook you can use, but I don't trust those. With just a little effort many can be easily ripped or pried off. But it is better than nothing.</p>
<p>Instead of the adhesive hook I suggest going to your local hardware store and getting an eye bolt with the hole big enough to get the cable through, or perhaps a handle that would go on a chest or garage door. Screw it into your desk, or even better the wall (assuming that doesn't violate your lease).</p>
<p>Cable locks come in two types, a combination lock and one with a key. They key is faster to unlock, but if you are the kind of person who leaves their keys by the front door the combination may be more convenient.</p>
<p>The combination has another advantage if you share a laptop with your spouse or other family member. It's easy to share the combination with other trusted people.</p>
<p>Note that many desktop computers these days also have the ability to have a cable lock. If not, you may be able to bolt a secure hook to yours. In addition to cable locks they also make cables with just loops on both ends such as <a href="https://www.amazon.com/Master-Lock-Cable-Looped-72DPF/dp/B000BD8IQ4/ref=sr_1_1_sspa?keywords=cable+lock&amp;qid=1637169986&amp;sr=8-1-spons&amp;psc=1&amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEyWEdXUVhOWllON1E4JmVuY3J5cHRlZElkPUEwMTQyMDY0MkpDVjJGNFlGWFJRMCZlbmNyeXB0ZWRBZElkPUEwMzIxOTY1V0taRDgzVUJRMElFJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==">this one from Amazon</a>. Slip one end through the hook, then use a good heavy duty padlock to connect the loops.</p>
<h3>Laptops - Lock it up</h3>
<p>Another way to secure your laptop is to get a small, two (or more) drawer filing cabinet that has a lock on it. Plenty of space to store one or more laptops in.</p>
<p>A nice bonus is the ability store other valuables in it. Perhaps you have some nice camera equipment, portable gaming gear like a Nintendo Switch, and iPads or Android tablets.</p>
<p>Anything small but expensive could be placed in your file cabinet. I'll admit, a determined thief could just carry off the whole file cabinet, or your desktop.</p>
<p>The security tips in this article are more geared toward the opportunist thief, ones who didn't set out to take anything but when the opportunity arises they jump on it.</p>
<p>If you really wanted to carry it to an extreme, you could attach eye bolts or something similar to the file cabinet, desk, even the wall, then connect them using a steel cable with loops on either end like the one I suggested in the previous section. Use a heavy duty padlock to hook them all together. It will make the whole collection to big, heavy, and unwieldy to simply carry away.</p>
<h2>Mail Call</h2>
<p>If it wasn't for junk mail I wouldn't get any mail at all!</p>
<p>Well not quite, in addition to the stack of junk mail I still get bills (despite my best efforts to go paperless). These bills often have account numbers or enough information for a crook to hijack your accounts.</p>
<p>In my pile of junk mail I get credit card offers or &quot;take out a loan with us with the low interest rate of 53%!&quot; Of course this is annoying, but can also be dangerous as someone could take out a loan or credit card in your name, but changing the address to them.</p>
<p>Keep these secured in your file cabinet (you did buy one for your laptops, tablets, and other expensive stuff didn't you?). One stack for junk, the other for bills and other info to retain.</p>
<p>You should always take time to shred junk mail with monetary offers, as well as bills when you are done with them. (Obviously you'll also want a shredder to go with this setup.) If you want to keep copies then you can get printer/copier/scanners at reasonable prices and store on your computer. You know, the one you lock everytime before you leave home.</p>
<p>If you don't want a scanner, just take pictures of these items with your phone. On my iPhone I use an app called <a href="https://apps.apple.com/us/app/scanner-pro-ocr-scanning-fax/id333710667">Scanner Pro</a>.</p>
<p>Not only does it take the picture but it also handles things like skewed pics, making the document nice and square (well rectangular for pieces of paper). If I'm only scanning in one or two pages, I use Scanner Pro rather than going to my multi-function printer.</p>
<p>I highly recommend getting an app like this for your phone. Feel free to post a comment with your favorite app, especially if you are an Android user.</p>
<h2>Cold Hard Cash</h2>
<p>I believe it is useful to keep a bit of cash on hand. You might lose or have your credit/debit card stolen and have to wait for a replacement. Perhaps there is an extended power or internet outage, and cash is the only way to purchase supplies.</p>
<p>Never leave cash laying around. Most crooks, even the casual opportunist, knows to check under the mattress or the underwear drawer in your dresser.</p>
<p>Use the file cabinet, or get a small safe. If you carry a purse, but sometimes leave it at home, maybe to go jogging, swimming, or other exercises, secure it in your file cabinet or safe when you are gone.</p>
<p>If you normally carry a wallet, but leave it behind for exercise or other reasons, lock it up as well.</p>
<h2>Conclusion</h2>
<p>After reading this you may think I'm a little paranoid. But remember, just because you're paranoid doesn't mean they're not out to get you!</p>
<p>Most of these suggestions can be had for little cost, plus a few seconds of time, but can save you a lot of headaches and money in the long run. All it takes is one incident to ruin your credit, put you in debt, and deprive you of valuable, daily used tools like laptops and tablets.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4253</wp:post_id>
  <wp:post_date>2021-11-22 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-22 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-18 17:22:47</wp:post_modified>
  <wp:post_modified_gmt>2021-11-18 23:22:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>security-for-apartment-dwellers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="apartment"><![CDATA[Apartment]]></category>
  <category domain="post_tag" nicename="rent"><![CDATA[Rent]]></category>
  <category domain="category" nicename="security"><![CDATA[Security]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4259]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65651241094]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1637596804]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1462813138542342149";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_342470834350502";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Security-for-Apartment-Dwellers-header]]></title>
  <link>http://arcanecode.com/2021/11/22/security-for-apartment-dwellers/security-for-apartment-dwellers-header/</link>
  <pubDate>Thu, 18 Nov 2021 23:21:23 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/security-for-apartment-dwellers-header.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4259</wp:post_id>
  <wp:post_date>2021-11-18 17:21:23</wp:post_date>
  <wp:post_date_gmt>2021-11-18 23:21:23</wp:post_date_gmt>
  <wp:post_modified>2021-11-18 17:21:23</wp:post_modified>
  <wp:post_modified_gmt>2021-11-18 23:21:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>security-for-apartment-dwellers-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4253</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/security-for-apartment-dwellers-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/security-for-apartment-dwellers-header.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:611;s:6:"height";i:226;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/security-for-apartment-dwellers-header.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:53550;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[More Fun with PowerShell Enums]]></title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/</link>
  <pubDate>Mon, 29 Nov 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4261</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn a previous post, [Fun with PowerShell Enums](https://arcanecode.com/2021/11/15/fun-with-powershell-enums/) I introduced the concept of _Enums_.\n\nIn this post we'll dive deeper into enums, taking a look at more of its properties a well as other ways to use enums.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Enums for Code Clarity\n\nOne major way enums can be used is to clarify your code. In my previous post on enums I mentioned I was a ham radio operator. The clubs I belong to meet on alternate Thursday nights. Let's say I wrote a small PowerShell function to let me know if tonight is a ham club meeting.\n\nInto that function I need to pass one parameter, a number that indicates the day of the week. If 0 is Sunday, and 6 Saturday, the number 4 represents a Thursday.\n\n```powershell\nfunction IsItHamClubNight($Day)\n{\n  if ($Day -eq 4)\n  { Write-Host \u0022Yay! It's ham club night\u0022 }\n  else \n  { Write-Host \u0022Sorry, just a boring night\u0022 }\n}\n```\n\nWhen I call this function, I have to know what number to use.\n\n```powershell\n$day = 4\nIsItHamClubNight $day\n```\n\nResult:\n```\nYay! It's ham club night\n```\n\nObviously it would be easier to pass in the name of the day of the week rather than a number. But this function is now heavily embedded in your organization, changing it would require a large effort.\n\nBy using an enum, we can provide the ability to use a human readable name, without the need to rewrite our function.\n\n```powershell\nEnum DaysOfWeek\n{\n  Sunday = 0\n  Monday = 1\n  Tuesday = 2\n  Wednesday = 3\n  Thursday = 4\n  Friday = 5\n  Saturday = 6\n}\n```\n\nEnums allow us to assign a value to each label. Here we made Sunday 0, and so on, but we can use any integer value. Now we can assign one of the enums to a variable and pass that into our function.\n\n```powershell\n$day = [DaysOfWeek]::Thursday\nIsItHamClubNight $day\n```\n\nResult:\n\n```\nYay! It's ham club night\n```\n\nEven better, we can skip the use of a variable.\n\n```powershell\nIsItHamClubNight ([DayOfWeek]::Thursday)\n```\n\nWhich gives the same result. Now users of your function don't have to remember which number represents Thursday, they can simply use the name of our enum followed by the day of the week. All of this without the need to modify our `IsItHamClubNight` function!\n\n## Getting the Enum Values\n\nLet's say you know the enum you want to use is `DaysOfWeek`, but you can't quite recall the various day names. Was it Monday, or the short abbreviation Mon? Or maybe you just want the full list so you can iterate over them.\n\nThe Enum type has a method, `GetEnumNames`. It can be used to retrieve the members of the enum.\n\n```powershell\n[DaysOfWeek].GetEnumNames()\n```\n\nResult:\n\n```\nSunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n```\n\nIt actually returns a collection so you can use it to iterate over the members, as in a foreach loop.\n\n```powershell\nforeach( $enumValue in [DaysOfWeek].GetEnumNames() )\n{\n  Write-Host \u0022Enum Value is $enumValue\u0022\n}\n```\n\nResult:\n\n```\nEnum Value is Sunday\nEnum Value is Monday\nEnum Value is Tuesday\nEnum Value is Wednesday\nEnum Value is Thursday\nEnum Value is Friday\nEnum Value is Saturday\n```\n\nAlternatively you can pipe it, for example into a `ForEach-Object`.\n\n```powershell\n[DaysOfWeek].GetEnumNames() |\n  ForEach-Object { \u0022{0} {1}\u0022 -f $_, [int]([DaysOfWeek]::$_) }\n```\n\nResult:\n\n```\nSunday 0\nMonday 1\nTuesday 2\nWednesday 3\nThursday 4\nFriday 5\nSaturday 6\n```\n\nThis looks a bit cryptic so let me break it down. The `\u0022{0} {1}\u0022 -f ` indicates we want to create a formatted string. The `{0}` and `{1}` are placeholders. After the `-f` is a list of values. The first value will go into the `{0}`, the second into the `{1}`.\n\nThe next thing you see is `$_`. This is simply a PowerShell shortcut for \u0022the current object coming through the pipeline\u0022. From the enum, Sunday will be first, then Monday, and so on.\n\nNext you see `[int]([DaysOfWeek]::$_)`. The `[int]` is used to convert what comes after it into an integer value. Next, we access the DayOfWeek enum, and give it the current object.\n\nAs a result, the output displays both the name from the enum, as well as the value associated with it.\n\nIf you want to learn more about string formatting, I'll refer you to my post [Fun With PowerShell String Formatting](https://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/).\n\n## Enums with Duplicate Values\n\nIt is possible to assign the same numeric value to multiple items in an enum. For each position in our radio club, we want to indicate their level. President and Vice President are at the top, with Secretary and Treasurer in the second tier. Finally there are some appointed positions that are important, but not the top of the chain.\n\nHere's how this might be expressed in an enum.\n\n```powershell\nEnum ClubPositions\n{\n  President = 1\n  VicePresident = 1\n  Secretary = 2\n  Treasurer = 2\n  Webmaster = 3\n  Greeter = 3\n  SnackBringer = 3\n}\n```\n\nWe can do comparisons between our various offices and their associated numeric value.\n\n```powershell\n[ClubPositions]::President -eq 1\n[ClubPositions]::VicePresident -eq 1\n```\n\nResult:\n\n```\nTrue\nTrue\n```\n\nYou can even compare two enums to each other.\n\n```powershell\n[ClubPositions]::President -eq [ClubPositions]::VicePresident\n```\n\nResult:\n\n```\nTrue\n```\n\nRemember the `GetEnumNames` method we looked at a moment ago? This works as well.\n\n```powershell\n[ClubPositions].GetEnumNames()\n```\n\nResult:\n\n```\nPresident\nVicePresident\nSecretary\nTreasurer\nWebmaster\nGreeter\nSnackBringer\n```\n\nThere is one other method very similar to `GetEnumNames`, `GetEnumValues`. It doesn't work quite like you'd think though.\n\nFirst, let's use it with our `DaysOfWeek` enum.\n\n```powershell\n[DaysOfWeek].GetEnumValues()\n```\n\nResult:\n\n```\nSunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n```\n\nAs you can see, there's no real difference compared to `GetEnumNames`. But now let's run it for the `ClubPositions` enum.\n\n```powershell\n[ClubPositions].GetEnumValues()\n```\n\nResult:\n\n```\nVicePresident\nVicePresident\nTreasurer\nTreasurer\nGreeter\nGreeter\nGreeter\n```\n\nIn the second example it went through the enum, and only returned one text value for each integer. This is why we only see one entry for each numeric value.\n\nIt actually does the same thing with the `DaysOfWeek` enum, but because we only used each integer value once, only one label for each value was returned.\n\n## Conclusion\n\nUsing enums to aid with code clarity was the first item in this blog post. We then saw how to assign values to the individual members of an enum, as well as how to iterate over the members of an enum.\n\nIn the next article in this series, we'll look at the concept of using enums as bit flags for when you need to save multiple states for a single item.\n\nThe demos in this series of blog posts were derived from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In a previous post, <a href="https://arcanecode.com/2021/11/15/fun-with-powershell-enums/">Fun with PowerShell Enums</a> I introduced the concept of <em>Enums</em>.</p>
<p>In this post we'll dive deeper into enums, taking a look at more of its properties a well as other ways to use enums.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Enums for Code Clarity</h2>
<p>One major way enums can be used is to clarify your code. In my previous post on enums I mentioned I was a ham radio operator. The clubs I belong to meet on alternate Thursday nights. Let's say I wrote a small PowerShell function to let me know if tonight is a ham club meeting.</p>
<p>Into that function I need to pass one parameter, a number that indicates the day of the week. If 0 is Sunday, and 6 Saturday, the number 4 represents a Thursday.</p>
<pre><code class="language-powershell">function IsItHamClubNight($Day)
{
  if ($Day -eq 4)
  { Write-Host &quot;Yay! It's ham club night&quot; }
  else 
  { Write-Host &quot;Sorry, just a boring night&quot; }
}
</code></pre>
<p>When I call this function, I have to know what number to use.</p>
<pre><code class="language-powershell">$day = 4
IsItHamClubNight $day
</code></pre>
<p>Result:</p>
<pre><code>Yay! It's ham club night
</code></pre>
<p>Obviously it would be easier to pass in the name of the day of the week rather than a number. But this function is now heavily embedded in your organization, changing it would require a large effort.</p>
<p>By using an enum, we can provide the ability to use a human readable name, without the need to rewrite our function.</p>
<pre><code class="language-powershell">Enum DaysOfWeek
{
  Sunday = 0
  Monday = 1
  Tuesday = 2
  Wednesday = 3
  Thursday = 4
  Friday = 5
  Saturday = 6
}
</code></pre>
<p>Enums allow us to assign a value to each label. Here we made Sunday 0, and so on, but we can use any integer value. Now we can assign one of the enums to a variable and pass that into our function.</p>
<pre><code class="language-powershell">$day = [DaysOfWeek]::Thursday
IsItHamClubNight $day
</code></pre>
<p>Result:</p>
<pre><code>Yay! It's ham club night
</code></pre>
<p>Even better, we can skip the use of a variable.</p>
<pre><code class="language-powershell">IsItHamClubNight ([DayOfWeek]::Thursday)
</code></pre>
<p>Which gives the same result. Now users of your function don't have to remember which number represents Thursday, they can simply use the name of our enum followed by the day of the week. All of this without the need to modify our <code>IsItHamClubNight</code> function!</p>
<h2>Getting the Enum Values</h2>
<p>Let's say you know the enum you want to use is <code>DaysOfWeek</code>, but you can't quite recall the various day names. Was it Monday, or the short abbreviation Mon? Or maybe you just want the full list so you can iterate over them.</p>
<p>The Enum type has a method, <code>GetEnumNames</code>. It can be used to retrieve the members of the enum.</p>
<pre><code class="language-powershell">[DaysOfWeek].GetEnumNames()
</code></pre>
<p>Result:</p>
<pre><code>Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
</code></pre>
<p>It actually returns a collection so you can use it to iterate over the members, as in a foreach loop.</p>
<pre><code class="language-powershell">foreach( $enumValue in [DaysOfWeek].GetEnumNames() )
{
  Write-Host &quot;Enum Value is $enumValue&quot;
}
</code></pre>
<p>Result:</p>
<pre><code>Enum Value is Sunday
Enum Value is Monday
Enum Value is Tuesday
Enum Value is Wednesday
Enum Value is Thursday
Enum Value is Friday
Enum Value is Saturday
</code></pre>
<p>Alternatively you can pipe it, for example into a <code>ForEach-Object</code>.</p>
<pre><code class="language-powershell">[DaysOfWeek].GetEnumNames() |
  ForEach-Object { &quot;{0} {1}&quot; -f $_, [int]([DaysOfWeek]::$_) }
</code></pre>
<p>Result:</p>
<pre><code>Sunday 0
Monday 1
Tuesday 2
Wednesday 3
Thursday 4
Friday 5
Saturday 6
</code></pre>
<p>This looks a bit cryptic so let me break it down. The <code>&quot;{0} {1}&quot; -f </code> indicates we want to create a formatted string. The <code>{0}</code> and <code>{1}</code> are placeholders. After the <code>-f</code> is a list of values. The first value will go into the <code>{0}</code>, the second into the <code>{1}</code>.</p>
<p>The next thing you see is <code>$_</code>. This is simply a PowerShell shortcut for &quot;the current object coming through the pipeline&quot;. From the enum, Sunday will be first, then Monday, and so on.</p>
<p>Next you see <code>[int]([DaysOfWeek]::$_)</code>. The <code>[int]</code> is used to convert what comes after it into an integer value. Next, we access the DayOfWeek enum, and give it the current object.</p>
<p>As a result, the output displays both the name from the enum, as well as the value associated with it.</p>
<p>If you want to learn more about string formatting, I'll refer you to my post <a href="https://arcanecode.com/2021/07/19/fun-with-powershell-string-formatting/">Fun With PowerShell String Formatting</a>.</p>
<h2>Enums with Duplicate Values</h2>
<p>It is possible to assign the same numeric value to multiple items in an enum. For each position in our radio club, we want to indicate their level. President and Vice President are at the top, with Secretary and Treasurer in the second tier. Finally there are some appointed positions that are important, but not the top of the chain.</p>
<p>Here's how this might be expressed in an enum.</p>
<pre><code class="language-powershell">Enum ClubPositions
{
  President = 1
  VicePresident = 1
  Secretary = 2
  Treasurer = 2
  Webmaster = 3
  Greeter = 3
  SnackBringer = 3
}
</code></pre>
<p>We can do comparisons between our various offices and their associated numeric value.</p>
<pre><code class="language-powershell">[ClubPositions]::President -eq 1
[ClubPositions]::VicePresident -eq 1
</code></pre>
<p>Result:</p>
<pre><code>True
True
</code></pre>
<p>You can even compare two enums to each other.</p>
<pre><code class="language-powershell">[ClubPositions]::President -eq [ClubPositions]::VicePresident
</code></pre>
<p>Result:</p>
<pre><code>True
</code></pre>
<p>Remember the <code>GetEnumNames</code> method we looked at a moment ago? This works as well.</p>
<pre><code class="language-powershell">[ClubPositions].GetEnumNames()
</code></pre>
<p>Result:</p>
<pre><code>President
VicePresident
Secretary
Treasurer
Webmaster
Greeter
SnackBringer
</code></pre>
<p>There is one other method very similar to <code>GetEnumNames</code>, <code>GetEnumValues</code>. It doesn't work quite like you'd think though.</p>
<p>First, let's use it with our <code>DaysOfWeek</code> enum.</p>
<pre><code class="language-powershell">[DaysOfWeek].GetEnumValues()
</code></pre>
<p>Result:</p>
<pre><code>Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
</code></pre>
<p>As you can see, there's no real difference compared to <code>GetEnumNames</code>. But now let's run it for the <code>ClubPositions</code> enum.</p>
<pre><code class="language-powershell">[ClubPositions].GetEnumValues()
</code></pre>
<p>Result:</p>
<pre><code>VicePresident
VicePresident
Treasurer
Treasurer
Greeter
Greeter
Greeter
</code></pre>
<p>In the second example it went through the enum, and only returned one text value for each integer. This is why we only see one entry for each numeric value.</p>
<p>It actually does the same thing with the <code>DaysOfWeek</code> enum, but because we only used each integer value once, only one label for each value was returned.</p>
<h2>Conclusion</h2>
<p>Using enums to aid with code clarity was the first item in this blog post. We then saw how to assign values to the individual members of an enum, as well as how to iterate over the members of an enum.</p>
<p>In the next article in this series, we'll look at the concept of using enums as bit flags for when you need to save multiple states for a single item.</p>
<p>The demos in this series of blog posts were derived from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4261</wp:post_id>
  <wp:post_date>2021-11-29 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-11-29 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 22:02:01</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 04:02:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="enum"><![CDATA[Enum]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4265]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[65918115450]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1638201657]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1465350076600094721";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_346775573920028";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166414</wp:comment_id>
    <wp:comment_author><![CDATA[Beyond the Basics with Powershell Enums &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2021/12/01/beyond-the-basics-with-powershell-enums/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2021-12-01 07:05:09</wp:comment_date>
    <wp:comment_date_gmt>2021-12-01 13:05:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain hits us again on the topic of enumerations in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638363909.735517;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1638368124.655534;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[more-fun-with-powershell-enums-header]]></title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/more-fun-with-powershell-enums-header/</link>
  <pubDate>Sat, 27 Nov 2021 03:57:33 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header.png</guid>
  <description/>
  <content:encoded><![CDATA[More Fun with PowerShell Enums Post Header]]></content:encoded>
  <excerpt:encoded><![CDATA[More Fun with PowerShell Enums]]></excerpt:encoded>
  <wp:post_id>4263</wp:post_id>
  <wp:post_date>2021-11-26 21:57:33</wp:post_date>
  <wp:post_date_gmt>2021-11-27 03:57:33</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 21:58:01</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 03:58:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4261</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/more-fun-with-powershell-enums-header.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:905;s:6:"height";i:271;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/more-fun-with-powershell-enums-header.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:29642;}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[More Fun with PowerShell Enums]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun with PowerShell Enum Flags]]></title>
  <link>http://arcanecode.com/2021/12/06/fun-with-powershell-enum-flags/</link>
  <pubDate>Mon, 06 Dec 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4271</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn my last two posts, I introduced the concept of _Enums_ in PowerShell, then got into some of the more advanced uses. In this post we'll examine a special way to use an enum, known as a _Flag_.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## A Brief Refresher on Binary Math\n\nIn order to understand how flags work you need at least a basic understanding of binary math. In this section I'll see if I can't provide a short, simple refresher on the subject.\n\nIn my previous article, I mentioned that I am a ham radio operator, and am a member of multiple clubs. In a small club it's not unusual to hold multiple offices, for example I'm both the secretary and the webmaster for one of the clubs, as well as a paid member. We can denote this by using a single variable to hold this information through the use of an enum flag.\n\nA flag is a single variable that can be broken into its individual bits to indicate multiple values. In our example, we'll use a flag to indicate a member's paid status, their office, and if they hold more than one position in the club, all with a single variable.\n\nLet's say we have six people standing in a row. Each person has a sign, the first reads \u0022paid\u0022, the rest have the names of club offices.\n\nWhen a member walks into a room, people hold up signs that indicate the person's status in the club, while the others leave their signs face down. When the Vice President walks in, the paid sign is raised up, as is the Vice President sign. We then take a photograph to capture this information in a single place.\n\nI happen to be both Secretary and Webmaster of my club, as well as a paid member, so in my case three signs would go up and be captured in a photo. If we happen to have a visitor to the club, none of the signs will be raised, and a photo will record that.\n\nBit flags work the same way. Each sign is a bit, and the photo corresponds to the variable that holds all the bits.\n\nLet's say we have a 32 bit integer. If all 32 of the bits are set to a 0, then the value of that integer will be 0.\n\nIf the bit in position one is set to 1, and all of the other bits are 0, it indicates the value of the variable is 1.\n\nIn the second bit position, if the value is set to 1 and all other bits set to 0, the integer value is 2. If both bits one and two are set to 1, the integer value will be 3, and so on.\n\nThis chart of binary numbers and their decimal counterparts may help clarify.\n\n| Binary | Decimal |\n|\u002d\u002d\u002d\u002d\u002d\u002d-:|\u002d\u002d\u002d\u002d\u002d\u002d:|\n| 0000 | 0 |\n| 0001 | 1 |\n| 0010 | 2 |\n| 0011 | 3 |\n| 0100 | 4 |\n| 0101 | 5 |\n| 0110 | 6 |\n| 0111 | 7 |\n| 1000 | 8 |\n| 1001 | 9 |\n| 1010 | 10 |\n\nThese are just the first few as an example, you could continue this chart into the trillions of values if not higher.\n\nShould you need a further refresher on binary numbers, I'd suggest the [Binary Number article on Wikipedia](https://en.wikipedia.org/wiki/Binary_number) as a good guide. It's important to understand binary values in order to fully understand how flags work.\n\n## Enum Flags\n\nLet's create our own enum flag to hold the status of club members. You declare an enum as a flag by placing the `[Flags()]` modifier in front of the enum declaration, as you'll see below. Note that the values must correspond to the integer value if a bit is set. The Wikipedia article includes a nice chart that shows a decimal number and what that number looks like in binary.\n\n\n```powershell\n[Flags()] enum MemberStatus\n{\n  Paid = 1\n  President = 2\n  VicePresident = 4\n  Secretary = 8\n  Treasurer = 16\n  Webmaster = 32\n}\n```\n\nI could add more to this list if needed, using the value of 64 for the next member status, then 128, then 256, and so on.\n\nNow lets represent a member status in a variable to show a member is the Vice President, and is also a paid member. To do so, we simply add the various statuses together.\n\n```powershell\n$memStatus = [MemberStatus]::Paid + [MemberStatus]::VicePresident\n\n$memStatus\n```\n\nResult:\n\n```\nPaid, VicePresident\n```\n\nWhat's nice about using an enum flag is that when we display the variable PowerShell converts the flags back into the members from the enum.\n\nWe could also simply assign the total number. In this case, Paid (value of 1), plus Vice President (value 4), adds up to 5.\n\n```powershell\n$memStatus = [MemberStatus] 5\n$memStatus\n```\n\nResult:\n\n```\nPaid, VicePresident\n```\n\nFinally, if we want to display the numeric value behind our flag, we can cast it as an `int`.\n\n```powershell\n[int]$memStatus\n```\n\nResult:\n\n```\n5\n```\n\n## Is the Flag Set? HasFlag to the Rescue!\n\nOften you will want to see if a specific flag is set, for example we want to see if a member is paid. Now, if the paid status is the only flag set, it's easy, just use `$someVariable -eq [MemberStatus]::Paid`.\n\nIt gets much more complex if a variable has multiple flags set. Fortunately, enums have a method built in called `HasFlag` you can use to test with.\n\nFirst, let's load a variable with several flags from our `MemberStatus` enum.\n\n```powershell\n$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid\n\n$memStatus\n```\n\nResult:\n\n```\nPaid, Secretary, Webmaster\n```\n\nSo now we've got our `$memStatus` variable loaded with multiple statuses. Also note that even though we added the status in reverse order, they are always returned in ascending order from the enum declaration.\n\nNow we want to know if our secretary / webmaster has paid their dues for the year. To do so, we'll call the `HasFlag` method of our variable, and pass in the status we wish to check.\n\n```powershell\n$memStatus.HasFlag([MemberStatus]::Paid)\n```\n\nResult:\n\n```\nTrue\n```\n\n## The GetHashCode Method\n\nSo far, when we've wanted to see the value of our enum derived variable, we've used `[int]` to cast the variable in integer form.\n\n```powershell\n$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid\n\n[int]$memStatus\n```\n\nResult:\n\n```\n41\n```\n\nThis shortcut works, and is something I've seen in many blog posts and examples. However, there is a method that is more clear in terms of code self-documentation. Like using `[int]`, it will return an unsigned, 32 bit integer: `GetHashCode`.\n\n```powershell\n$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid\n\n$memStatus.GetHashCode()\n```\n\nResult:\n\n```\n41\n```\n\nBoth methods work, but in my opinion `GetHashCode` is clearer in terms of intention, especially to someone unfamiliar with enum flags. Whichever route you go I suggest being consistent throughout your code.\n\n## Conclusion\n\nThis article focused on the use of enums as flags. While it is not something I use frequently, enum flags can be extremely useful when an item can have multiple states simultaneously. Our club member status is one such example, another is file attributes. A file could have both the hidden and compressed attributes.\n\nEnum flags can reduce the size of your data for an item. Rather than having six individual variables for the six member statuses, a single variable can hold them all. This reduction in the size of your data can be even more valuable when that data is being stored in a database or file.\n\nThe demos in this series of blog posts were derived from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In my last two posts, I introduced the concept of <em>Enums</em> in PowerShell, then got into some of the more advanced uses. In this post we'll examine a special way to use an enum, known as a <em>Flag</em>.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>A Brief Refresher on Binary Math</h2>
<p>In order to understand how flags work you need at least a basic understanding of binary math. In this section I'll see if I can't provide a short, simple refresher on the subject.</p>
<p>In my previous article, I mentioned that I am a ham radio operator, and am a member of multiple clubs. In a small club it's not unusual to hold multiple offices, for example I'm both the secretary and the webmaster for one of the clubs, as well as a paid member. We can denote this by using a single variable to hold this information through the use of an enum flag.</p>
<p>A flag is a single variable that can be broken into its individual bits to indicate multiple values. In our example, we'll use a flag to indicate a member's paid status, their office, and if they hold more than one position in the club, all with a single variable.</p>
<p>Let's say we have six people standing in a row. Each person has a sign, the first reads &quot;paid&quot;, the rest have the names of club offices.</p>
<p>When a member walks into a room, people hold up signs that indicate the person's status in the club, while the others leave their signs face down. When the Vice President walks in, the paid sign is raised up, as is the Vice President sign. We then take a photograph to capture this information in a single place.</p>
<p>I happen to be both Secretary and Webmaster of my club, as well as a paid member, so in my case three signs would go up and be captured in a photo. If we happen to have a visitor to the club, none of the signs will be raised, and a photo will record that.</p>
<p>Bit flags work the same way. Each sign is a bit, and the photo corresponds to the variable that holds all the bits.</p>
<p>Let's say we have a 32 bit integer. If all 32 of the bits are set to a 0, then the value of that integer will be 0.</p>
<p>If the bit in position one is set to 1, and all of the other bits are 0, it indicates the value of the variable is 1.</p>
<p>In the second bit position, if the value is set to 1 and all other bits set to 0, the integer value is 2. If both bits one and two are set to 1, the integer value will be 3, and so on.</p>
<p>This chart of binary numbers and their decimal counterparts may help clarify.</p>
<table>
<thead>
<tr>
<th style="text-align:right;">Binary</th>
<th style="text-align:right;">Decimal</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">0000</td>
<td style="text-align:right;">0</td>
</tr>
<tr>
<td style="text-align:right;">0001</td>
<td style="text-align:right;">1</td>
</tr>
<tr>
<td style="text-align:right;">0010</td>
<td style="text-align:right;">2</td>
</tr>
<tr>
<td style="text-align:right;">0011</td>
<td style="text-align:right;">3</td>
</tr>
<tr>
<td style="text-align:right;">0100</td>
<td style="text-align:right;">4</td>
</tr>
<tr>
<td style="text-align:right;">0101</td>
<td style="text-align:right;">5</td>
</tr>
<tr>
<td style="text-align:right;">0110</td>
<td style="text-align:right;">6</td>
</tr>
<tr>
<td style="text-align:right;">0111</td>
<td style="text-align:right;">7</td>
</tr>
<tr>
<td style="text-align:right;">1000</td>
<td style="text-align:right;">8</td>
</tr>
<tr>
<td style="text-align:right;">1001</td>
<td style="text-align:right;">9</td>
</tr>
<tr>
<td style="text-align:right;">1010</td>
<td style="text-align:right;">10</td>
</tr>
</tbody>
</table>
<p>These are just the first few as an example, you could continue this chart into the trillions of values if not higher.</p>
<p>Should you need a further refresher on binary numbers, I'd suggest the <a href="https://en.wikipedia.org/wiki/Binary_number">Binary Number article on Wikipedia</a> as a good guide. It's important to understand binary values in order to fully understand how flags work.</p>
<h2>Enum Flags</h2>
<p>Let's create our own enum flag to hold the status of club members. You declare an enum as a flag by placing the <code>[Flags()]</code> modifier in front of the enum declaration, as you'll see below. Note that the values must correspond to the integer value if a bit is set. The Wikipedia article includes a nice chart that shows a decimal number and what that number looks like in binary.</p>
<pre><code class="language-powershell">[Flags()] enum MemberStatus
{
  Paid = 1
  President = 2
  VicePresident = 4
  Secretary = 8
  Treasurer = 16
  Webmaster = 32
}
</code></pre>
<p>I could add more to this list if needed, using the value of 64 for the next member status, then 128, then 256, and so on.</p>
<p>Now lets represent a member status in a variable to show a member is the Vice President, and is also a paid member. To do so, we simply add the various statuses together.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Paid + [MemberStatus]::VicePresident

$memStatus
</code></pre>
<p>Result:</p>
<pre><code>Paid, VicePresident
</code></pre>
<p>What's nice about using an enum flag is that when we display the variable PowerShell converts the flags back into the members from the enum.</p>
<p>We could also simply assign the total number. In this case, Paid (value of 1), plus Vice President (value 4), adds up to 5.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus] 5
$memStatus
</code></pre>
<p>Result:</p>
<pre><code>Paid, VicePresident
</code></pre>
<p>Finally, if we want to display the numeric value behind our flag, we can cast it as an <code>int</code>.</p>
<pre><code class="language-powershell">[int]$memStatus
</code></pre>
<p>Result:</p>
<pre><code>5
</code></pre>
<h2>Is the Flag Set? HasFlag to the Rescue!</h2>
<p>Often you will want to see if a specific flag is set, for example we want to see if a member is paid. Now, if the paid status is the only flag set, it's easy, just use <code>$someVariable -eq [MemberStatus]::Paid</code>.</p>
<p>It gets much more complex if a variable has multiple flags set. Fortunately, enums have a method built in called <code>HasFlag</code> you can use to test with.</p>
<p>First, let's load a variable with several flags from our <code>MemberStatus</code> enum.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid

$memStatus
</code></pre>
<p>Result:</p>
<pre><code>Paid, Secretary, Webmaster
</code></pre>
<p>So now we've got our <code>$memStatus</code> variable loaded with multiple statuses. Also note that even though we added the status in reverse order, they are always returned in ascending order from the enum declaration.</p>
<p>Now we want to know if our secretary / webmaster has paid their dues for the year. To do so, we'll call the <code>HasFlag</code> method of our variable, and pass in the status we wish to check.</p>
<pre><code class="language-powershell">$memStatus.HasFlag([MemberStatus]::Paid)
</code></pre>
<p>Result:</p>
<pre><code>True
</code></pre>
<h2>The GetHashCode Method</h2>
<p>So far, when we've wanted to see the value of our enum derived variable, we've used <code>[int]</code> to cast the variable in integer form.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid

[int]$memStatus
</code></pre>
<p>Result:</p>
<pre><code>41
</code></pre>
<p>This shortcut works, and is something I've seen in many blog posts and examples. However, there is a method that is more clear in terms of code self-documentation. Like using <code>[int]</code>, it will return an unsigned, 32 bit integer: <code>GetHashCode</code>.</p>
<pre><code class="language-powershell">$memStatus = [MemberStatus]::Webmaster + [MemberStatus]::Secretary + [MemberStatus]::Paid

$memStatus.GetHashCode()
</code></pre>
<p>Result:</p>
<pre><code>41
</code></pre>
<p>Both methods work, but in my opinion <code>GetHashCode</code> is clearer in terms of intention, especially to someone unfamiliar with enum flags. Whichever route you go I suggest being consistent throughout your code.</p>
<h2>Conclusion</h2>
<p>This article focused on the use of enums as flags. While it is not something I use frequently, enum flags can be extremely useful when an item can have multiple states simultaneously. Our club member status is one such example, another is file attributes. A file could have both the hidden and compressed attributes.</p>
<p>Enum flags can reduce the size of your data for an item. Rather than having six individual variables for the six member statuses, a single variable can hold them all. This reduction in the size of your data can be even more valuable when that data is being stored in a database or file.</p>
<p>The demos in this series of blog posts were derived from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4271</wp:post_id>
  <wp:post_date>2021-12-06 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-06 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 22:11:54</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 04:11:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-enum-flags</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="enum"><![CDATA[Enum]]></category>
  <category domain="post_tag" nicename="flags"><![CDATA[Flags]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4268]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66194336568]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1638806415]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1467886617268469771";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_351001210164131";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166775</wp:comment_id>
    <wp:comment_author><![CDATA[Keith R]]></wp:comment_author>
    <wp:comment_author_email>kobe@kuler.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>108.227.70.59</wp:comment_author_IP>
    <wp:comment_date>2022-01-06 11:52:51</wp:comment_date>
    <wp:comment_date_gmt>2022-01-06 17:52:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice post, surely very helpful for non-programmer admins. However, for "want[ing] to see the value of our enum derived variable", I disagree that "GetHashCode is clearer in terms of intention". [int] correctly expresses the intention to see directly the value of the enum. GetHashCode() may _happen to_ return that same value for an int-based enum, but per _intention_, it doesn't have to; it merely needs to return a 32 bit integer corresponding to the object, suitable for hashing it into a hash table. You can see this using an Int64-based enum with a large value, e.g. 0x10FFFFEEEE; in this case the corresponding [long] gives you the enum's value, where GetHashCode() does not.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641496722.715902;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641491571.498135;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Classes - The Basics]]></title>
  <link>http://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/</link>
  <pubDate>Tue, 14 Dec 2021 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4276</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn the last few posts we looked at the use of Enums, a technique closely associated with classes. In this post we'll start looking at classes themselves. We'll open with some terminology, then look at our first class.\n\nFor the next post in this series I plan to do a history lesson on the use of `PSCustomObject`. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. From there we'll return to the modern area and get into some advanced class techniques.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Terminology\n\nIf you are familiar with _object oriented_ terminology, then this short overview will be familiar to you. However, many who come into PowerShell scripting do not come from a coding background. It's worth taking a few paragraphs, then, to explain some common terms that will be used in this and future articles.\n\nA _class_ is code that is used as a blueprint to create an _object_ variable in memory. In fact, all variables in PowerShell are objects, even built in ones like strings or integers. Their classes are already defined and ready to be used in the core PowerShell libraries.\n\nThe act of creating a new object from a class is called _instantiation_. You can _instantiate_ multiple variables from the same class.\n\nIn most object oriented discussions, the classic example compares a class to a blueprint for a house. From that single blueprint a home builder can create an entire neighborhood of houses.\n\nEach house has properties that can be set to make the houses different from each other, even though they are built from the same blueprint. House color, trim color, number of cars the garage will hold, are all properties that can be set on a per house basis.\n\nLikewise, a PowerShell class has _properties_. These are made available through variables, and may be things like first name, last name, address, birth date, number of pets, or any number of other items that would apply to this instance of an object built from your class.\n\nA house blueprint may also have tasks assigned to it. \u0022Get building permit from city\u0022, for example, or \u0022paint the trim\u0022. In the PowerShell world, a class can also have tasks assigned to it. These are created by using _functions_.\n\nIf you aren't familiar with functions yet, you need to brush up. You can start with my series [Fun With PowerShell Functions](https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/), then continue through the next few posts which move into advanced functions and pipelined functions.\n\nWhen it comes to classes, we call these built in functions _methods_. A method is designed to act on the data within the function itself.\n\nA simple example, you may have three properties, first name, middle name, and last name. You could create a method (in the form of a function) called full name, which concatenates the three parts of the name together, correctly formatting for times when a middle name is absent.\n\nMethods in a class can return a value, but do not have to. We'll see examples of both in this article.\n\nAlso be aware there are special types of properties and methods that are called _static properties_ and _static methods_. These are pieces of code that PowerShell can execute from the class itself, _without creating an object from that class_.\n\nWe'll see examples of how to create and use these in our future post on advanced classes, but I wanted to mention them as PowerShell classes have a static function we'll need to use in order to instantiate new objects.\n\nThis short intro just hits the tip of the iceberg when it comes to object oriented methodology, entire books have been written on the subject. Hopefully it provides enough information to get you started.\n\nSo now that we're all on the same page when it comes to terminology, let's go create a class.\n\n## A Very Simple Class\n\nThis first example will be very simple. Take a look, then we will go over its parts.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In the last few posts we looked at the use of Enums, a technique closely associated with classes. In this post we'll start looking at classes themselves. We'll open with some terminology, then look at our first class.</p>
<p>For the next post in this series I plan to do a history lesson on the use of <code>PSCustomObject</code>. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. From there we'll return to the modern area and get into some advanced class techniques.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Terminology</h2>
<p>If you are familiar with <em>object oriented</em> terminology, then this short overview will be familiar to you. However, many who come into PowerShell scripting do not come from a coding background. It's worth taking a few paragraphs, then, to explain some common terms that will be used in this and future articles.</p>
<p>A <em>class</em> is code that is used as a blueprint to create an <em>object</em> variable in memory. In fact, all variables in PowerShell are objects, even built in ones like strings or integers. Their classes are already defined and ready to be used in the core PowerShell libraries.</p>
<p>The act of creating a new object from a class is called <em>instantiation</em>. You can <em>instantiate</em> multiple variables from the same class.</p>
<p>In most object oriented discussions, the classic example compares a class to a blueprint for a house. From that single blueprint a home builder can create an entire neighborhood of houses.</p>
<p>Each house has properties that can be set to make the houses different from each other, even though they are built from the same blueprint. House color, trim color, number of cars the garage will hold, are all properties that can be set on a per house basis.</p>
<p>Likewise, a PowerShell class has <em>properties</em>. These are made available through variables, and may be things like first name, last name, address, birth date, number of pets, or any number of other items that would apply to this instance of an object built from your class.</p>
<p>A house blueprint may also have tasks assigned to it. &quot;Get building permit from city&quot;, for example, or &quot;paint the trim&quot;. In the PowerShell world, a class can also have tasks assigned to it. These are created by using <em>functions</em>.</p>
<p>If you aren't familiar with functions yet, you need to brush up. You can start with my series <a href="https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/">Fun With PowerShell Functions</a>, then continue through the next few posts which move into advanced functions and pipelined functions.</p>
<p>When it comes to classes, we call these built in functions <em>methods</em>. A method is designed to act on the data within the function itself.</p>
<p>A simple example, you may have three properties, first name, middle name, and last name. You could create a method (in the form of a function) called full name, which concatenates the three parts of the name together, correctly formatting for times when a middle name is absent.</p>
<p>Methods in a class can return a value, but do not have to. We'll see examples of both in this article.</p>
<p>Also be aware there are special types of properties and methods that are called <em>static properties</em> and <em>static methods</em>. These are pieces of code that PowerShell can execute from the class itself, <em>without creating an object from that class</em>.</p>
<p>We'll see examples of how to create and use these in our future post on advanced classes, but I wanted to mention them as PowerShell classes have a static function we'll need to use in order to instantiate new objects.</p>
<p>This short intro just hits the tip of the iceberg when it comes to object oriented methodology, entire books have been written on the subject. Hopefully it provides enough information to get you started.</p>
<p>So now that we're all on the same page when it comes to terminology, let's go create a class.</p>
<h2>A Very Simple Class</h2>
<p>This first example will be very simple. Take a look, then we will go over its parts.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":"```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n}\n```\n"} -->
<div class="wp-block-jetpack-markdown"><pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

}
</code></pre>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:jetpack/markdown {"source":"We begin the definition with the keyword `class`, followed by what we wish to name our class. In my previous articles on enums we used Twitter data as an example, so let's stick to that.\n\nAfter the name of the class we need an opening squiggly brace, and a closing one at the end. In PowerShell squiggly braces are used to define a _scrpt block_. You've seen these before, functions, `foreach`, `if` statements and more all use script blocks. Classes are no different, everything in the script block is the class definition.\n\nWith classes, as with most script blocks, it's not necessary to put the opening squiggly brace on the next line, many use `class Twitter {` on a single line. I just feel having the squiggly braces vertically aligned makes things easier to read.\n\nWithin the class I have defined a single property, `$TwitterHandle`. Before the name of the variable I have indicated the variable type in brackets, `[string]`. Unlike regular PowerShell, all properties must be _strongly typed_.\n\nLet's create, or _instantiate_, a new variable from our class (after highlighting the class definition and using F8 or F5 to get it into memory).\n\n```powershell\n$twit = [Twitterer]::new()\n```\n\nThis syntax may look a bit odd, so let me explain. When we created our class we defined a single property. Anytime we define a class, though, PowerShell adds extra properties and methods behind the scenes.\n\nOne of those methods is `new`. New is a _static method_ that can be called without the need to instantiate a new object, which is fortunate as it is the way we get new objects from our class.\n\nTo call a static method, we use the name of the class in brackets, followed by two colons, then the name of the static method. In PowerShell, to call a method you always have to use parenthesis after the name of the method even if it takes no parameters. This is unlike a regular function in PowerShell.\n\nFinally, we assign our newly instantiated object to the variable `$twit`.\n\nWe can now access the properties (and methods) in our object by using what is formally known as _dot notation_. If you've done any PowerShell coding then you've likely used it a million times by now without realizing it had a formal name.\n\nYou simply use the name of our object, a period, then the name of the property, as in `$twit.TwitterHandle`. Of course if we run this right now, we won't get anything back. This is because our variable is empty when the class is created. So let's assign it a value.\n\n```powershell\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterHandle\n```\n\nResult:\n\n```\nArcaneCode\n```\n\nIt's that easy, we can use it like any other variable. Note one thing, when we created the property we used the `$` in front of the variable. But outside the class when we reference it as a property the `$` is omitted.\n\n## Default Values for Properties\n\nThere will be many times when you write a class in which you want to have some, or perhaps all, of its properties already populated with values. This will make it easier for your end user, especially for properties where the majority of the time the user can get by with the default value.\n\nCreating a default value is simple, when you create the property you simply assign it a value.\n\n```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n}\n```\n\nHere a second property, `Name`, has been added. After its declaration I simply assigned it a name (mine in this case) just like I would assign any value to a variable.\n\nNow let's create a new instance and examine the value in our `Name` property.\n\n```powershell\n$twit = [Twitterer]::new()\n$twit.Name\n```\n\nResult:\n\n```\nRobert C. Cain\n```\n\nOf course just because we've provided a default value doesn't mean we can't change it.\n\n```powershell\n$twit.Name = 'Mr. Code'\n$twit.Name\n```\n\nResult:\n\n```\nMr. Code\n```\n\n## Our First Method\n\nNow that we've added properties, it's time to add a little functionality with our first _method_. A class method in PowerShell works just like a function, only without the need for the `function` keyword. For this example, we'll add a new method that takes the value in the `$TwitterHandle` property and return the URL to that handles Twitter page.\n\n```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n}\n```\n\nThe URL to a users Twitter account is simple, it is just twitter.com followed by the users twitter handle. Now, you might think you could just use `$TwitterHandle` to create this, but not so.\n\nWe need to let PowerShell know to use the TwitterHandle for this _particular_ object. That's where the `$this` variable comes into play.\n\n`$this` is a built in variable which simply means \u0022the current object I am running this code in\u0022. Using `$this`, I can reference any property or other method within _this_ instance of my class.\n\nI also want to point out that after the name of our method we added parenthesis. This is an indicator to PowerShell we are defining a method and not a property. In this case we are not passing in any values to our method, so they are empty. It is possible though to pass values in, which we'll see in a future post.\n\nFinally, note that my function, just like properties, is strongly typed. Since my URL is in the form of a string, I used `[string]` to indicate the data type being returned by this function.\n\n```powershell\n$twit = [Twitterer]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$myTwitter = $twit.TwitterURL()\n$myTwitter\n```\n\nResult:\n\n```\nhttps://twitter.com/ArcaneCode\n```\n\n## No Return\n\nIn my previous example, our method returned a value. There will be cases though when you simply want your method to do something, and not return any values. For those times, we can use the return type of `void`.\n\n```powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n}\n```\n\nI've added a new method, `OpenTwitter`. Before it I used `[void]` to let Twitter know this particular method won't be returning any data.\n\nWithin the function I call the PowerShell cmdlet `Start-Process`. This cmdlet will take the value passed into it and attempt to run the application that corresponds to it. For example, if I had passed in the file name to an Excel spreadsheet, PowerShell would have attempted to launch Microsoft Excel and open that file.\n\nIn this case we're passing in a URL, so PowerShell will launch your default browser and open the Twitter webpage for that user.\n\nAlso note we used the `$this` built in variable to call the `TwitterURL` method for this current instance of our object, here `$twit`.\n\nTo run it we only need to call our method.\n\n```powershell\n$twit = [Twitterer]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.OpenTwitter()\n```\n\nIf all went well your web browser should open to the Twitter page for the associated user held in the `$TwitterHandle` variable.\n\n## Conclusion\n\nIn this opening article we covered some of the basics of using classes in PowerShell. Even with this limited information you should be able to start creating useful classes. In future articles we'll dive deeper into using classes in PowerShell.\n\nI want to mention, as I write this in December 2021, that my posts for the rest of the year will diverge as I want to give a little gift and share some of my favorite things I've found on the internet this year. I'll pick this series back up in January of 2022.\n\nThe demos in this series of blog posts came from my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><p>We begin the definition with the keyword <code>class</code>, followed by what we wish to name our class. In my previous articles on enums we used Twitter data as an example, so let's stick to that.</p>
<p>After the name of the class we need an opening squiggly brace, and a closing one at the end. In PowerShell squiggly braces are used to define a <em>scrpt block</em>. You've seen these before, functions, <code>foreach</code>, <code>if</code> statements and more all use script blocks. Classes are no different, everything in the script block is the class definition.</p>
<p>With classes, as with most script blocks, it's not necessary to put the opening squiggly brace on the next line, many use <code>class Twitter {</code> on a single line. I just feel having the squiggly braces vertically aligned makes things easier to read.</p>
<p>Within the class I have defined a single property, <code>$TwitterHandle</code>. Before the name of the variable I have indicated the variable type in brackets, <code>[string]</code>. Unlike regular PowerShell, all properties must be <em>strongly typed</em>.</p>
<p>Let's create, or <em>instantiate</em>, a new variable from our class (after highlighting the class definition and using F8 or F5 to get it into memory).</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
</code></pre>
<p>This syntax may look a bit odd, so let me explain. When we created our class we defined a single property. Anytime we define a class, though, PowerShell adds extra properties and methods behind the scenes.</p>
<p>One of those methods is <code>new</code>. New is a <em>static method</em> that can be called without the need to instantiate a new object, which is fortunate as it is the way we get new objects from our class.</p>
<p>To call a static method, we use the name of the class in brackets, followed by two colons, then the name of the static method. In PowerShell, to call a method you always have to use parenthesis after the name of the method even if it takes no parameters. This is unlike a regular function in PowerShell.</p>
<p>Finally, we assign our newly instantiated object to the variable <code>$twit</code>.</p>
<p>We can now access the properties (and methods) in our object by using what is formally known as <em>dot notation</em>. If you've done any PowerShell coding then you've likely used it a million times by now without realizing it had a formal name.</p>
<p>You simply use the name of our object, a period, then the name of the property, as in <code>$twit.TwitterHandle</code>. Of course if we run this right now, we won't get anything back. This is because our variable is empty when the class is created. So let's assign it a value.</p>
<pre><code class="language-powershell">$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterHandle
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
</code></pre>
<p>It's that easy, we can use it like any other variable. Note one thing, when we created the property we used the <code>$</code> in front of the variable. But outside the class when we reference it as a property the <code>$</code> is omitted.</p>
<h2>Default Values for Properties</h2>
<p>There will be many times when you write a class in which you want to have some, or perhaps all, of its properties already populated with values. This will make it easier for your end user, especially for properties where the majority of the time the user can get by with the default value.</p>
<p>Creating a default value is simple, when you create the property you simply assign it a value.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'
}
</code></pre>
<p>Here a second property, <code>Name</code>, has been added. After its declaration I simply assigned it a name (mine in this case) just like I would assign any value to a variable.</p>
<p>Now let's create a new instance and examine the value in our <code>Name</code> property.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.Name
</code></pre>
<p>Result:</p>
<pre><code>Robert C. Cain
</code></pre>
<p>Of course just because we've provided a default value doesn't mean we can't change it.</p>
<pre><code class="language-powershell">$twit.Name = 'Mr. Code'
$twit.Name
</code></pre>
<p>Result:</p>
<pre><code>Mr. Code
</code></pre>
<h2>Our First Method</h2>
<p>Now that we've added properties, it's time to add a little functionality with our first <em>method</em>. A class method in PowerShell works just like a function, only without the need for the <code>function</code> keyword. For this example, we'll add a new method that takes the value in the <code>$TwitterHandle</code> property and return the URL to that handles Twitter page.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

}
</code></pre>
<p>The URL to a users Twitter account is simple, it is just twitter.com followed by the users twitter handle. Now, you might think you could just use <code>$TwitterHandle</code> to create this, but not so.</p>
<p>We need to let PowerShell know to use the TwitterHandle for this <em>particular</em> object. That's where the <code>$this</code> variable comes into play.</p>
<p><code>$this</code> is a built in variable which simply means &quot;the current object I am running this code in&quot;. Using <code>$this</code>, I can reference any property or other method within <em>this</em> instance of my class.</p>
<p>I also want to point out that after the name of our method we added parenthesis. This is an indicator to PowerShell we are defining a method and not a property. In this case we are not passing in any values to our method, so they are empty. It is possible though to pass values in, which we'll see in a future post.</p>
<p>Finally, note that my function, just like properties, is strongly typed. Since my URL is in the form of a string, I used <code>[string]</code> to indicate the data type being returned by this function.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.TwitterHandle = 'ArcaneCode'
$myTwitter = $twit.TwitterURL()
$myTwitter
</code></pre>
<p>Result:</p>
<pre><code>https://twitter.com/ArcaneCode
</code></pre>
<h2>No Return</h2>
<p>In my previous example, our method returned a value. There will be cases though when you simply want your method to do something, and not return any values. For those times, we can use the return type of <code>void</code>.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

}
</code></pre>
<p>I've added a new method, <code>OpenTwitter</code>. Before it I used <code>[void]</code> to let Twitter know this particular method won't be returning any data.</p>
<p>Within the function I call the PowerShell cmdlet <code>Start-Process</code>. This cmdlet will take the value passed into it and attempt to run the application that corresponds to it. For example, if I had passed in the file name to an Excel spreadsheet, PowerShell would have attempted to launch Microsoft Excel and open that file.</p>
<p>In this case we're passing in a URL, so PowerShell will launch your default browser and open the Twitter webpage for that user.</p>
<p>Also note we used the <code>$this</code> built in variable to call the <code>TwitterURL</code> method for this current instance of our object, here <code>$twit</code>.</p>
<p>To run it we only need to call our method.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.TwitterHandle = 'ArcaneCode'
$twit.OpenTwitter()
</code></pre>
<p>If all went well your web browser should open to the Twitter page for the associated user held in the <code>$TwitterHandle</code> variable.</p>
<h2>Conclusion</h2>
<p>In this opening article we covered some of the basics of using classes in PowerShell. Even with this limited information you should be able to start creating useful classes. In future articles we'll dive deeper into using classes in PowerShell.</p>
<p>I want to mention, as I write this in December 2021, that my posts for the rest of the year will diverge as I want to give a little gift and share some of my favorite things I've found on the internet this year. I'll pick this series back up in January of 2022.</p>
<p>The demos in this series of blog posts came from my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4276</wp:post_id>
  <wp:post_date>2021-12-14 10:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-14 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 16:59:15</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 22:59:15</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-the-basics</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="class"><![CDATA[Class]]></category>
  <category domain="post_tag" nicename="classes"><![CDATA[Classes]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4279]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66507083094]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1639497610]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1470785696382263303";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_355994979664754";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408957</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585791</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167029</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:06</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] far we&#8217;ve covered a lot in this series on PowerShell Objects. We began by creating a class using the class keyword introduced in PowerShell 5. We then looked at using PSCustomObject to create new objects, then add [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645897.714356;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641206.114642;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167097</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Static Properties and Methods &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-02-07 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-02-07 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] last few articles we&#8217;ve been covering PowerShell objects. The first article in the series, Fun With PowerShell Classes &#8211; The Basics, covered the basics of using of the PowerShell class construct introduced in PowerShell version [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644246024.443415;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644250262.528002;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166813</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; PSCustomObject | Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.150</wp:comment_author_IP>
    <wp:comment_date>2022-01-10 09:00:16</wp:comment_date>
    <wp:comment_date_gmt>2022-01-10 15:00:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] I had started a series on classes and objects in PowerShell. If you haven&#8217;t read my post Fun With PowerShell Classes &#8211; The Basics you should give it a quick read. There are terms that were defined in it that we&#8217;ll be using [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641835119.783355;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1641826816.671769;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166919</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:26</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my use of the $this keyword. Just like with objects generated by the more modern classes in PowerShell 5 and beyond, $this is used to represent the current instance of our custom object. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431626.388658;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436450.287601;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166972</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:10</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] is the next installment in my series on creating objects in PowerShell. In the first installment we showed how to create an object using the class type introduced in PowerShell 5. That covered the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040754.630932;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036410.953277;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun with History: The History Guy]]></title>
  <link>http://arcanecode.com/2021/12/20/fun-with-history-the-history-guy/</link>
  <pubDate>Mon, 20 Dec 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4280</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="introduction">Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In the spirit of the holiday season, I wanted to give a little gift back to you, my readers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I love history, honestly if I weren't in tech I would likely have become a history teacher of some kind. For relaxing I read a lot of history books and enjoy a lot of history shows on YouTube as well as other platforms.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="the-history-guy">The History Guy</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One of my favorite YouTube channels is <a rel="noreferrer noopener" href="https://www.youtube.com/channel/UC4sEmXUuWIFlxRIFBRV6VXQ" target="_blank">The History Guy: History Deserves to Be Remembered</a>. Several times a week he releases roughly 15-minute videos on some event on history. Many are often little-known events, which cross a variety of areas.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some of course focus on big events, such as the world wars, or the US Civil War. Others might focus on motor sports, microfilm, or major events such as earthquakes or blackouts. Then there are ones that focus on notable, and some not so notable, figures from history.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The history is global in scale, not just US but events from history around the globe.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="the-most-important-invention-of-the-20th-century">The Most Important Invention of the 20th Century</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Below I've embedded my favorite video from his massive library, on the invention of the transistor. This video touches several areas of interest for me. Obviously, the transistor as it applies to computers, but in addition the advances it made possible in communication which appeals to the ham radio operator in me.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {"url":"https://www.youtube.com/watch?v=OuFlISa73Sw\u0026amp;list=PLA_6br3x4zyG_liVbEBQBF5IzFLSyf0gB\u0026amp;index=3","type":"video","providerNameSlug":"youtube","responsive":true,"className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?v=OuFlISa73Sw&amp;list=PLA_6br3x4zyG_liVbEBQBF5IzFLSyf0gB&amp;index=3
</div></figure>
<!-- /wp:embed -->

<!-- wp:heading -->
<h2 id="conclusion">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Please take a look, I feel sure you'll enjoy him as much as I do. Then jump over to his YouTube channel and subscribe, then enjoy many more videos from his library.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy Holidays!</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4280</wp:post_id>
  <wp:post_date>2021-12-20 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-20 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 17:25:22</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 23:25:22</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-history-the-history-guy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="fun"><![CDATA[Fun]]></category>
  <category domain="post_tag" nicename="history"><![CDATA[History]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4285]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66729807782]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1640012406]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1472944910194167809";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_359686635962255";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun with Preparedness]]></title>
  <link>http://arcanecode.com/2021/12/27/fun-with-preparedness/</link>
  <pubDate>Mon, 27 Dec 2021 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4287</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="introduction">Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I have a confession to make. I'm something of what might be called a prepper. Now, does this mean I believe the government is about to clamp down on everyone, or the zombie invasion is upon us?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>No, of course not. But I do live in the southern United States, where we regularly have tornadoes, hurricanes, and (sometimes violent) thunderstorms. We also have some wild temperature swings, as I write this tomorrow's high is predicted to be 72 F, the low should be 39 F.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As such I've taken steps to be ready for weather related emergencies. I have a generator to supply power. My kerosene heater can keep me warm on cold nights when the power is out.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my car I keep a backpack with a few basic supplies should I be away from home and trapped. Blanket, change of clothes, water, food, some camping supplies. Things that will keep me alive and somewhat comfortable should I need to spend the night in or beside my car, or should I need to hike home or to a safe shelter.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the spirit of gift giving during the holiday season, I wanted to share not one but two (in no particular order) YouTube channels that have taught me a lot about being prepared.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="the-sensible-prepper">The Sensible Prepper</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first channel I want to share is <a rel="noreferrer noopener" href="https://www.youtube.com/user/SensiblePrepper" target="_blank">The Sensible Prepper</a>. He shows various types of gear you can use to be prepared. Beyond that he also shows how everyday items, such as safety pins, plastic bottles, baking soda and more can be used in ways to get you ready for an emergency.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is one example, on using plastic bottles for preparedness.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {"url":"https://www.youtube.com/watch?v=5jUchqJ4lIA","type":"video","providerNameSlug":"youtube","responsive":true,"className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?v=5jUchqJ4lIA
</div></figure>
<!-- /wp:embed -->

<!-- wp:heading -->
<h2 id="corporals-corner">Corporals Corner</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The second channel I've learned a lot from is <a rel="noreferrer noopener" href="https://www.youtube.com/user/recall5811" target="_blank">Corporals Corner</a>. His channel is focused more on survival in the outdoors. He teaches how to create a wide variety of survival shelters and demonstrates equipment for staying alive when you are in the outdoors.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In some cases, he uses tents, or in other cases he creates entire shelters from nothing but the raw materials he finds in the woods. Corporal Kelly, USMC, has to be the hardest working YouTuber I've ever seen. He also knows more about knot tying than any other YouTuber I've ever watched.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here is a recent video where he tests out an emergency shelter available from Amazon and shows the pros and cons.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {"url":"https://www.youtube.com/watch?v=fCjIo8Se6Qw","type":"video","providerNameSlug":"youtube","responsive":true,"className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?v=fCjIo8Se6Qw
</div></figure>
<!-- /wp:embed -->

<!-- wp:heading -->
<h2 id="conclusion">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I hope you'll enjoy these channels as much as I do and learn some lessons in preparedness as I have. Even just taking a few simple steps can make the difference between being miserable in a weather-related emergency and coming through it comfortably.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4287</wp:post_id>
  <wp:post_date>2021-12-27 09:00:00</wp:post_date>
  <wp:post_date_gmt>2021-12-27 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 18:44:48</wp:post_modified>
  <wp:post_modified_gmt>2021-12-14 00:44:48</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-preparedness</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="corporals-corner"><![CDATA[Corporals Corner]]></category>
  <category domain="category" nicename="fun"><![CDATA[Fun]]></category>
  <category domain="post_tag" nicename="preparedness"><![CDATA[Preparedness]]></category>
  <category domain="post_tag" nicename="sensible-prepper"><![CDATA[Sensible Prepper]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[66982040141]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1640617228]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1475481717666369542";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_363930572204528";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Happy New Year - Now Go Make Your Bed]]></title>
  <link>http://arcanecode.com/2022/01/03/happy-new-year-now-go-make-your-bed/</link>
  <pubDate>Mon, 03 Jan 2022 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4299</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Happy New Year!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As we start this new year, I wanted to share a piece of advice that I've followed for the last few years, which has helped my mental state.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Make your bed.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Every day.</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I know, it sounds simple, but it makes a surprising difference. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First off, you start the day with a "win". You look at your neatly made bed and get a feeling that you've already accomplished something for the day. It puts you in the attitude that you are ready to tackle the next thing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now flip it. You are coming to bed after a long day. If you leave your bed unmade, you see a chaotic mess. The sheets are rumpled, it looks like a choppy ocean wave. It does not, to me anyway, look at all inviting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If your bed was made though, it reminds you of a calm, tranquil lake. Soft, smooth, ready to relax in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I also make my sheets fun by having a variety of colors. Over time I'd purchase a set with some extra pillowcases from my local big box store. I selected colors I could mix and match. Black, White, Blue, Green, Red, and Brown.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I also picked up some fleece covers to act as my bed spread in colors that complement the sheets. White, Red, Blue, Brown, and Gray. This lets me setup combos like Green and Gray, Black and Red, Black and White, Blue and White (as you can see in the photo at the top), you name it I have lots of fun combos that keep my bedroom looking fresh and different, just with combining sheets and blankets.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Again, I realize this sounds like an extremely simple thing. However, it's a piece of advice I've seen many experts give so I decided to try it, and by golly it does make a difference in my outlook on the day.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Habits are interesting things, once you get them started it annoys you mentally when you skip them. Only rarely have I not made my bed, and that was usually because I was sick and in it. The other few times it was because I overslept and had to run out the door. Those times as soon as I got home I made it because it was mentally annoying me.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can now build on this habit to improve other areas of your life. Perhaps putting your car keys in a specific spot so you don't lose them, brushing your teeth, allocating time to update your blog, and more.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Try it, if nothing else you'll have a nice neat bed.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4299</wp:post_id>
  <wp:post_date>2022-01-03 10:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-03 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2021-12-31 17:09:13</wp:post_modified>
  <wp:post_modified_gmt>2021-12-31 23:09:13</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>happy-new-year-now-go-make-your-bed</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="fun"><![CDATA[Fun]]></category>
  <category domain="category" nicename="personal"><![CDATA[Personal]]></category>
  <category domain="category" nicename="productivity"><![CDATA[Productivity]]></category>
  <category domain="post_tag" nicename="self-improvement"><![CDATA[Self Improvement]]></category>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4307]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67244536010]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1478033500750155777";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_368305501767035";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1641225622]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>166764</wp:comment_id>
    <wp:comment_author><![CDATA[stannius]]></wp:comment_author>
    <wp:comment_author_email>stannius@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/stannius</wp:comment_author_url>
    <wp:comment_author_IP>24.17.205.235</wp:comment_author_IP>
    <wp:comment_date>2022-01-05 09:49:47</wp:comment_date>
    <wp:comment_date_gmt>2022-01-05 15:49:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have never in my almost 45 years on this planet understood the fascination with making one's bed that only you will see (and just rumple back up that night). The closest I came was when I was in the military, where I can understand nobody wants to see a row of rumpled beds, and I did appreciate the satisfaction of making a crisp corner with the non-fitted sheets.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1641397788.7348;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"stannius";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1641401819.716999;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"stannius";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Objects - PSCustomObject]]></title>
  <link>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/</link>
  <pubDate>Mon, 10 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4310</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nBefore the holidays I had started a series on classes and objects in PowerShell. If you haven't read my post [Fun With PowerShell Classes - The Basics](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) you should give it a quick read. There are terms that were defined in it that we'll be using here.\n\nFor this post I'll begin a series on the use of `PSCustomObject`. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. It still has a lot of validity today though, as you can use these techniques to extend the objects other people defined, including those already built into PowerShell. \n\nIn addition, understanding the use of `PSCustomObject` will give you a better understanding of the way classes work.\n\nFirst let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nSecond, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Code to Generate Our PSCustomObject\n\nFor these demos, I'm going to wrap the creation of our objects within a function. This is a common technique which allows us to create multiple objects based on a single set of code. Note this isn't required, you could use these techniques anywhere in your code. I just find placing it in functions makes for greater reuse.\n\nIf you need a refresher on PowerShell functions, I'll refer you back to my posts on functions: [Fun With PowerShell Basic Functions](https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/); [Fun With PowerShell Advanced Functions](https://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/); and [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/).\n\nLet's take a look at our first example, then break down each line.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject `\n                       -Property $properties\n\n  # Return the newly created object\n  return $object\n}\n```\n\nOur first line, obviously, defines our basic function. For this example I will be creating an object that holds the schema and table names for a database. It also will allow for a comment, so these are the three parameters that are passed in.\n\nTo add a list of properties to our object, we need to use a _hash table_. I define the hash table with three properties, Schema, Table, and Comment, and assign the parameter variables we passed in for their respective values. And yes, I do have a post on hash tables if you wish to know more about them, [Fun With PowerShell Hash Tables](https://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/).\n\nNext is where the magic occurs. I call the cmdlet `New-Object`. For its `TypeName` parameter I use the value of `PSObject`. This will create a variable of type `PSCustomObject`. I then pass in my hash table name for the `Property` parameter.\n\nThis is assigned to the variable `$object`. In the final line I return that value to the calling code.\n\nBefore someone points it out, yes I could have made the last line of the function simply `New-Object –TypeName PSObject -Property $properties` and not assigned it to a variable. As I explain in my previously mentioned posts on functions, not consuming the output within the function returns the value to the code that called it.\n\nAssigning to a value within my function, then returning that value, gives me some additional flexibility. Primarily I could use the `Write-Verbose` and `Write-Debug` statements to echo additional debugging information back to the developer (or user). It also allows for easier integration with testing tools, such as [Pester](https://pester.dev/).\n\nFor more info on Write-Verbose and Write-Debug, see my posts [Fun With PowerShell Write-Verbose](https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/) and [Fun With PowerShell Write-Debug](https://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/).\n\n## Creating Our Custom Object\n\nNow that we have the function created, we can call it to create our custom object. We'll then display its properties.\n\n``` powershell\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n\n# Display all properties\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable MyComment\n```\n\nAs you can see, simply running the name of our variable produces a table. Across the top are the names of our properties, below it are the values we passed into the function to use as values.\n\nIf we want to prove to ourselves this is indeed a `PSCustomObject`, we can use the `GetType` method.\n\n``` powershell\n$myObject.GetType()\n```\n\nResult:\n\n```\nIsPublic IsSerial Name            BaseType\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d            \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\nTrue     False    PSCustomObject  System.Object\n```\n\nAs you can see in the Name column, it is indeed of type `PSCustomObject`!\n\nLike any object, we can assign new values by referencing the individual properties.\n\n``` powershell\n$myObject.Schema = 'New Schema'\n$myObject.Comment = 'New Comment'\n$myObject\n```\n\nResult:\n\n```\nSchema     Table   Comment\n\u002d\u002d\u002d\u002d\u002d\u002d     \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-\nNew Schema MyTable New Comment\n```\n\nIn the output, you can see the values for Schema and Comment were updated. The original value for the Table property remained unchanged.\n\n## Adding Properties One At A Time\n\nThere is an alternate method we can use to create a custom object. We can create an empty object, then use the `Add-Member` cmdlet to add each property individually.\n\nLet's rewrite our function to use this methodology.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject\n\n  # Add-Member by passing in input object\n  Add-Member -InputObject $object `\n             –MemberType NoteProperty `\n             –Name Schema `\n             –Value $Schema\n\n  # Alternate syntax, pipe the object as an input to Add-Member\n  $object | Add-Member –MemberType NoteProperty `\n                       –Name Table `\n                       –Value $Table\n\n  $object | Add-Member -MemberType NoteProperty `\n                       -Name Comment `\n                       -Value $Comment\n\n  return $object\n}\n```\n\nThe function declaration is the same as in our first example. We then create an empty object through the line `$object = New-Object –TypeName PSObject`. This object now exists, but has none of our custom properties. Yet!\n\nNow we are going to call the `Add-Member` cmdlet. `Add-Member` allows us to add new properties and methods to an existing object.\n\nThe first parameter, `InputObject`, is used to indicate what object we want to work with.\n\nThe next parameter is `MemberType`. There are a variety of types we can add to a custom object. In this case we want to add a text property, so the correct value to use is `NoteProperty`. We'll see examples of other member types as we progress through this series.\n\nThe next two parameters are pretty self explanatory. The `Name` is what we want to call this property, and `Value` is the value we want it to have.\n\nWe then move on to add the `Table` property. In this example I wanted to show the alternative format for using `Add-Member`. You can take the object you want to add a member to, and pipe it into the `Add-Member` cmdlet. I've done this here for the `Table` property, as well as for the final property `Comment`.\n\nUsing this function has identical results as the previous example.\n\n``` powershell\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable MyComment\n```\n\nSo why use `Add-Member`? Clearly the first example where we used a hash table to declare our property list was more compact.\n\nThink about what we did here. We added new properties to _an existing object_! In this case it was a custom object we created. but this could be _any PowerShell object_. For example, we could have a list of file system objects returned to us by the `Get-ChildItem` cmdlet. Using `Add-Member` we have the ability to add new properties (and methods) to those objects.\n\nWe'll see an example of this very thing in a future blog post, but for now let's move on to the final section in today's post.\n\n## Creating Property Aliases\n\nIf you've been in IT for any length of time, you've probably encountered the situation where two different groups refer to the same property by two different names. In our example, let's say the DBA's refer to the comment property as `Comment`. They would like to use that property name when they use your script.\n\nYour software developers though don't think of this as the comment property, instead they call it `Description`. They complain that having to use the property name \u0022Comment\u0022 is causing a lot of coding errors.\n\nThis is one of those rare times we can make everyone happy, and we do so through the use of a property _alias_.\n\nWe'll start with the same `$object` variable we left off with in the previous example. We'll then use `Add-Member` to add a new alias.\n\n``` powershell\nAdd-Member -InputObject $myObject `\n           -MemberType AliasProperty `\n           -Name 'Description' `\n           -Value 'Comment' `\n           -PassThru\n```\n\nResult:\n\n```\nSchema     Table   Comment     Description\n\u002d\u002d\u002d\u002d\u002d\u002d     \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-     \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\nNew Schema MyTable New Comment New Comment\n```\n\nThe first thing to note is the `MemberType`. Instead of a `NoteProperty`, we are using the type `AliasProperty`. This will let the `Add-Member` cmdlet know we are simply adding an alternate name for an existing property.\n\nThe `Name` parameter is the name for the alias. The `Value` is the name of the already existing property.\n\nYou'll also note I added a switch to `Add-Member`, `PassThru`. In our previous examples, leaving this off ran the code but displayed no output. If want to see the results though, you can add the `PassThru` switch and the new values will be displayed in the terminal, as you saw in the _Result_ section above.\n\nOur alias added, you can see a new column `Description`. The value under it is identical to the one for comment.\n\nLet's change the `Description` property and see what happens.\n\n``` powershell\n$myObject.Description = 'The Description'\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment         Description\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-         \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable The Description The Description\n```\n\nAs you can see, both `Comment` and `Description` hold the newly updated value. Your users can now use these property names interchangeably.\n\nWe can of course update our original function to add the alias at the time the object is created.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject `\n                       -Property $properties\n\n  Add-Member -InputObject $object `\n             -MemberType AliasProperty `\n             -Name 'Description' `\n             -Value 'Comment'\n\n  # Return the newly created object\n  return $object\n}\n\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n$myObject\n```\n\nResult:\n\n```\nSchema   Table   Comment   Description\n\u002d\u002d\u002d\u002d\u002d\u002d   \u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d-   \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d-\nMySchema MyTable MyComment MyComment\n```\n\nAs you can see, the function generated an object that included our alias. In this example I also combined methods. I used a hash table to define our initial set of properties, then used `Add-Member` to add the alias. I could have also put the addition of the alias in the second version of the function, where each property was added one at a time.\n\n## Conclusion\n\nIn this post we learned how to create a basic object using PSCustomObject. We added some properties, and even created an alias for one.\n\nNow you may be asking \u0022what about methods? Object can have methods too!\u0022 And you would be correct. In the next post in the series we'll see how to add custom methods to our object.\n\nIn future posts we'll see how to create custom objects from bits of C# code. Then we'll see how to add our own properties and methods to an existing object created by PowerShell.\n\nWe'll then return to our discussion of PowerShell classes by looking at some advanced features of the built in PowerShell class type.\n\nThe demos in this series of blog posts was inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>Before the holidays I had started a series on classes and objects in PowerShell. If you haven't read my post <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">Fun With PowerShell Classes - The Basics</a> you should give it a quick read. There are terms that were defined in it that we'll be using here.</p>
<p>For this post I'll begin a series on the use of <code>PSCustomObject</code>. Prior to the addition of classes in PowerShell 5.0, this was the technique needed to create your own customized objects. It still has a lot of validity today though, as you can use these techniques to extend the objects other people defined, including those already built into PowerShell.</p>
<p>In addition, understanding the use of <code>PSCustomObject</code> will give you a better understanding of the way classes work.</p>
<p>First let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Second, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Code to Generate Our PSCustomObject</h2>
<p>For these demos, I'm going to wrap the creation of our objects within a function. This is a common technique which allows us to create multiple objects based on a single set of code. Note this isn't required, you could use these techniques anywhere in your code. I just find placing it in functions makes for greater reuse.</p>
<p>If you need a refresher on PowerShell functions, I'll refer you back to my posts on functions: <a href="https://arcanecode.com/2021/08/30/fun-with-powershell-basic-functions/">Fun With PowerShell Basic Functions</a>; <a href="https://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/">Fun With PowerShell Advanced Functions</a>; and <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a>.</p>
<p>Let's take a look at our first example, then break down each line.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Build a hash table with the properties
  $properties = [ordered]@{ Schema = $Schema
                            Table = $Table
                            Comment = $Comment
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject `
                       -Property $properties

  # Return the newly created object
  return $object
}
</code></pre>
<p>Our first line, obviously, defines our basic function. For this example I will be creating an object that holds the schema and table names for a database. It also will allow for a comment, so these are the three parameters that are passed in.</p>
<p>To add a list of properties to our object, we need to use a <em>hash table</em>. I define the hash table with three properties, Schema, Table, and Comment, and assign the parameter variables we passed in for their respective values. And yes, I do have a post on hash tables if you wish to know more about them, <a href="https://arcanecode.com/2021/08/02/fun-with-powershell-hash-tables/">Fun With PowerShell Hash Tables</a>.</p>
<p>Next is where the magic occurs. I call the cmdlet <code>New-Object</code>. For its <code>TypeName</code> parameter I use the value of <code>PSObject</code>. This will create a variable of type <code>PSCustomObject</code>. I then pass in my hash table name for the <code>Property</code> parameter.</p>
<p>This is assigned to the variable <code>$object</code>. In the final line I return that value to the calling code.</p>
<p>Before someone points it out, yes I could have made the last line of the function simply <code>New-Object –TypeName PSObject -Property $properties</code> and not assigned it to a variable. As I explain in my previously mentioned posts on functions, not consuming the output within the function returns the value to the code that called it.</p>
<p>Assigning to a value within my function, then returning that value, gives me some additional flexibility. Primarily I could use the <code>Write-Verbose</code> and <code>Write-Debug</code> statements to echo additional debugging information back to the developer (or user). It also allows for easier integration with testing tools, such as <a href="https://pester.dev/">Pester</a>.</p>
<p>For more info on Write-Verbose and Write-Debug, see my posts <a href="https://arcanecode.com/2021/09/27/fun-with-powershell-write-verbose/">Fun With PowerShell Write-Verbose</a> and <a href="https://arcanecode.com/2021/10/04/fun-with-powershell-write-debug/">Fun With PowerShell Write-Debug</a>.</p>
<h2>Creating Our Custom Object</h2>
<p>Now that we have the function created, we can call it to create our custom object. We'll then display its properties.</p>
<pre><code class="language-powershell">$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'

# Display all properties
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment
------   -----   -------
MySchema MyTable MyComment
</code></pre>
<p>As you can see, simply running the name of our variable produces a table. Across the top are the names of our properties, below it are the values we passed into the function to use as values.</p>
<p>If we want to prove to ourselves this is indeed a <code>PSCustomObject</code>, we can use the <code>GetType</code> method.</p>
<pre><code class="language-powershell">$myObject.GetType()
</code></pre>
<p>Result:</p>
<pre><code>IsPublic IsSerial Name            BaseType
-------- -------- ----            --------
True     False    PSCustomObject  System.Object
</code></pre>
<p>As you can see in the Name column, it is indeed of type <code>PSCustomObject</code>!</p>
<p>Like any object, we can assign new values by referencing the individual properties.</p>
<pre><code class="language-powershell">$myObject.Schema = 'New Schema'
$myObject.Comment = 'New Comment'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema     Table   Comment
------     -----   -------
New Schema MyTable New Comment
</code></pre>
<p>In the output, you can see the values for Schema and Comment were updated. The original value for the Table property remained unchanged.</p>
<h2>Adding Properties One At A Time</h2>
<p>There is an alternate method we can use to create a custom object. We can create an empty object, then use the <code>Add-Member</code> cmdlet to add each property individually.</p>
<p>Let's rewrite our function to use this methodology.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject

  # Add-Member by passing in input object
  Add-Member -InputObject $object `
             –MemberType NoteProperty `
             –Name Schema `
             –Value $Schema

  # Alternate syntax, pipe the object as an input to Add-Member
  $object | Add-Member –MemberType NoteProperty `
                       –Name Table `
                       –Value $Table

  $object | Add-Member -MemberType NoteProperty `
                       -Name Comment `
                       -Value $Comment

  return $object
}
</code></pre>
<p>The function declaration is the same as in our first example. We then create an empty object through the line <code>$object = New-Object –TypeName PSObject</code>. This object now exists, but has none of our custom properties. Yet!</p>
<p>Now we are going to call the <code>Add-Member</code> cmdlet. <code>Add-Member</code> allows us to add new properties and methods to an existing object.</p>
<p>The first parameter, <code>InputObject</code>, is used to indicate what object we want to work with.</p>
<p>The next parameter is <code>MemberType</code>. There are a variety of types we can add to a custom object. In this case we want to add a text property, so the correct value to use is <code>NoteProperty</code>. We'll see examples of other member types as we progress through this series.</p>
<p>The next two parameters are pretty self explanatory. The <code>Name</code> is what we want to call this property, and <code>Value</code> is the value we want it to have.</p>
<p>We then move on to add the <code>Table</code> property. In this example I wanted to show the alternative format for using <code>Add-Member</code>. You can take the object you want to add a member to, and pipe it into the <code>Add-Member</code> cmdlet. I've done this here for the <code>Table</code> property, as well as for the final property <code>Comment</code>.</p>
<p>Using this function has identical results as the previous example.</p>
<pre><code class="language-powershell">$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment
------   -----   -------
MySchema MyTable MyComment
</code></pre>
<p>So why use <code>Add-Member</code>? Clearly the first example where we used a hash table to declare our property list was more compact.</p>
<p>Think about what we did here. We added new properties to <em>an existing object</em>! In this case it was a custom object we created. but this could be <em>any PowerShell object</em>. For example, we could have a list of file system objects returned to us by the <code>Get-ChildItem</code> cmdlet. Using <code>Add-Member</code> we have the ability to add new properties (and methods) to those objects.</p>
<p>We'll see an example of this very thing in a future blog post, but for now let's move on to the final section in today's post.</p>
<h2>Creating Property Aliases</h2>
<p>If you've been in IT for any length of time, you've probably encountered the situation where two different groups refer to the same property by two different names. In our example, let's say the DBA's refer to the comment property as <code>Comment</code>. They would like to use that property name when they use your script.</p>
<p>Your software developers though don't think of this as the comment property, instead they call it <code>Description</code>. They complain that having to use the property name &quot;Comment&quot; is causing a lot of coding errors.</p>
<p>This is one of those rare times we can make everyone happy, and we do so through the use of a property <em>alias</em>.</p>
<p>We'll start with the same <code>$object</code> variable we left off with in the previous example. We'll then use <code>Add-Member</code> to add a new alias.</p>
<pre><code class="language-powershell">Add-Member -InputObject $myObject `
           -MemberType AliasProperty `
           -Name 'Description' `
           -Value 'Comment' `
           -PassThru
</code></pre>
<p>Result:</p>
<pre><code>Schema     Table   Comment     Description
------     -----   -------     -----------
New Schema MyTable New Comment New Comment
</code></pre>
<p>The first thing to note is the <code>MemberType</code>. Instead of a <code>NoteProperty</code>, we are using the type <code>AliasProperty</code>. This will let the <code>Add-Member</code> cmdlet know we are simply adding an alternate name for an existing property.</p>
<p>The <code>Name</code> parameter is the name for the alias. The <code>Value</code> is the name of the already existing property.</p>
<p>You'll also note I added a switch to <code>Add-Member</code>, <code>PassThru</code>. In our previous examples, leaving this off ran the code but displayed no output. If want to see the results though, you can add the <code>PassThru</code> switch and the new values will be displayed in the terminal, as you saw in the <em>Result</em> section above.</p>
<p>Our alias added, you can see a new column <code>Description</code>. The value under it is identical to the one for comment.</p>
<p>Let's change the <code>Description</code> property and see what happens.</p>
<pre><code class="language-powershell">$myObject.Description = 'The Description'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment         Description
------   -----   -------         -----------
MySchema MyTable The Description The Description
</code></pre>
<p>As you can see, both <code>Comment</code> and <code>Description</code> hold the newly updated value. Your users can now use these property names interchangeably.</p>
<p>We can of course update our original function to add the alias at the time the object is created.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Build a hash table with the properties
  $properties = [ordered]@{ Schema = $Schema
                            Table = $Table
                            Comment = $Comment
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject `
                       -Property $properties

  Add-Member -InputObject $object `
             -MemberType AliasProperty `
             -Name 'Description' `
             -Value 'Comment'

  # Return the newly created object
  return $object
}

$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'
$myObject
</code></pre>
<p>Result:</p>
<pre><code>Schema   Table   Comment   Description
------   -----   -------   -----------
MySchema MyTable MyComment MyComment
</code></pre>
<p>As you can see, the function generated an object that included our alias. In this example I also combined methods. I used a hash table to define our initial set of properties, then used <code>Add-Member</code> to add the alias. I could have also put the addition of the alias in the second version of the function, where each property was added one at a time.</p>
<h2>Conclusion</h2>
<p>In this post we learned how to create a basic object using PSCustomObject. We added some properties, and even created an alias for one.</p>
<p>Now you may be asking &quot;what about methods? Object can have methods too!&quot; And you would be correct. In the next post in the series we'll see how to add custom methods to our object.</p>
<p>In future posts we'll see how to create custom objects from bits of C# code. Then we'll see how to add our own properties and methods to an existing object created by PowerShell.</p>
<p>We'll then return to our discussion of PowerShell classes by looking at some advanced features of the built in PowerShell class type.</p>
<p>The demos in this series of blog posts was inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4310</wp:post_id>
  <wp:post_date>2022-01-10 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-10 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-09 19:21:03</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 01:21:03</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-pscustomobject</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="pscustomobect"><![CDATA[PSCustomObect]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4313]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67515828826]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1641826814]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1480555086527008778";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_372358761361709";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167470</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.73</wp:comment_author_IP>
    <wp:comment_date>2022-03-24 10:00:11</wp:comment_date>
    <wp:comment_date_gmt>2022-03-24 16:00:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] If you want to get a more detailed explanation on creating and using custom PowerShell objects, see my post Fun With PowerShell Objects &#8211; PSCustomObject. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648142277.089991;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648137611.324817;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:118:"Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Arcane Code";s:18:"comment_author_url";s:124:"http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:179:"[&#8230;] If you want to get a more detailed explanation on creating and using custom PowerShell objects, see my post Fun With PowerShell Objects &#8211; PSCustomObject. [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:11:"192.0.86.73";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:11:"192.0.86.73";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:76:"http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167030</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:08</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] class using the class keyword introduced in PowerShell 5. We then looked at using PSCustomObject to create new objects, then add methods to those objects. In the previous post, we used C# code to create our PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645897.907232;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641208.260847;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166867</wp:comment_id>
    <wp:comment_author><![CDATA[Creating Custom Objects with PSCustomObject &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/01/13/creating-custom-objects-with-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-01-13 07:00:18</wp:comment_date>
    <wp:comment_date_gmt>2022-01-13 13:00:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain shows us one method of working with classes in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642078818.623966;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642082667.601459;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166916</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Adding Methods to PSCustomObject &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.85.166</wp:comment_author_IP>
    <wp:comment_date>2022-01-17 09:00:20</wp:comment_date>
    <wp:comment_date_gmt>2022-01-17 15:00:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the previous installment of this series, I covered the various ways to create objects using the PSCustomObject. We saw how [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642431620.099342;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642436449.483936;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166973</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:12</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] of this series, I covered the various ways to create objects using the PSCustomObject. We saw how to create it using the New-Object cmdlet, then how to add your custom properties to it using the Add-Member [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040754.850106;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036412.796746;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Objects - Adding Methods to PSCustomObject]]></title>
  <link>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/</link>
  <pubDate>Mon, 17 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4317</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn the [previous installment](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/) of this series, I covered the various ways to create objects using the `PSCustomObject`. We saw how to create it using the `New-Object` cmdlet, then how to add your custom properties to it using the `Add-Member` cmdlet.\n\nIn this post we'll learn how to add our own _methods_ to our objects using _script blocks_. Before we go on, just a quick reminder on vocabulary.\n\nIn object oriented terminology, objects have properties and methods. From the perspective of the script writer who uses our object, they only know of the properties and methods we expose. They don't know, or care, how we implemented them.\n\nFrom the perspective of us, the authors of the code to create the object, it's a little different. What the end user calls properties we store in variables. We implement our objects methods using functions.\n\nWhen we are talking about our code in terms of writing our object, you will frequently see the terms _properties_ and _variables_ used interchangeably. Likewise you'll see the terms _method_ and _function_ used interchangeably.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Script Blocks\n\nBefore we get started, it's important to understand the concept of a _script block_. A script block is a piece of code encapsulated within squiggly braces {}. This code is meant to execute as a unit. Here's an example you've probably seen before.\n\n``` powershell\n$x = 1\nif ($x -eq 1)\n{ Write-Host 'Yep its one' }\n```\n\nThe code on the last line is the script block. This unit of code, within the squiggly braces, will execute should the `if` statement evaluates to true.\n\nIt's possible to define your own script blocks, and store them in a variable.\n\n``` powershell\n$hw = {\n        Clear-Host\n        \u0022Hello World\u0022\n      }\n```\n\nHere I've generated a simple block with two lines. The first clears the display, the second prints `Hello World`.\n\nNow you have a variable, `$hw`, holding a script block. How can we use this?\n\nFirst, we could execute the script block stored in the variable. To do so, we need to precede the name of the variable with an ampersand `\u0026amp;`. The ampersand is the PowerShell shortcut for _execute the code block contained in this variable_.\n\n``` powershell\n\u0026amp; $hw\n```\n\nResult:\n\n```\nHello World\n```\n\nAlthough it's difficult to show, the display did indeed clear before displaying our text.\n\nNote the space between the `\u0026amp;` and the variable name is optional, this works too.\n\n``` powershell\n\u0026amp;$hw\n```\n\nPersonally I think the space makes it a bit easier to read, not to mention it's easier for the eye to notice the `\u0026amp;`. Whichever way you go, I suggest picking a format and sticking to it.\n\nThere are some interesting ways we can use this concept. Of course we'll look at using script blocks to add new methods to an object in a moment, but another fun thing you can do is pass a script block into a function.\n\nA quick note, it is generally considered poor practice to have `Write-Host` statements within a function. Since this is just a simple demo though, we'll use them just to illustrate our concepts.\n\n``` powershell\nfunction Run-AScriptBlock($block)\n{\n  Write-Host 'About to run a script block'\n\n  \u0026amp; $block\n\n  Write-Host \u0022Block was run\u0022\n}\n\nRun-AScriptBlock $hw\n```\n\nResult:\n\n```\nHello World\nBlock was run\n```\n\nThe first line to display \u0022About to run....\u0022 did execute, but it was wiped out due to the `Clear-Host` in the script block.\n\nThe script block then displayed `Hello World`, and returned control to the function. The function then displayed \u0022Block was run\u0022 then exited.\n\nThe PowerShell testing tool, Pester, makes extensive use of this functionality to pass the code blocks being tested into Pester's unit testing functions.\n\nYour imagination is probably running wild at the various ways you can use this. For example, you could build a string of PowerShell code based on certain conditions, then once the string of code is complete execute it.\n\nAt this point you have a nice foundation on the concept of script blocks, so let's move on to the main topic of this post.\n\n## Starting Point\n\nThis post picks up where the previous one left off. If you recall, our previous post built a function to generate a custom object of type `PSCustomObject`. If you need an explanation please go back and read part 1 of this series, but to make it easy for you I'll reproduce the function needed to create the object we'll be working with.\n\n``` powershell\nfunction Create-Object ($Schema, $Table, $Comment)\n{\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Schema = $Schema\n                            Table = $Table\n                            Comment = $Comment\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject -Property $properties\n\n  Add-Member -InputObject $object `\n             -MemberType AliasProperty `\n             -Name 'Description' `\n             -Value 'Comment'\n\n  # Return the newly created object\n  return $object\n}\n\n$myObject = Create-Object -Schema 'MySchema' `\n                          -Table 'MyTable' `\n                          -Comment 'MyComment'\n$myObject\n```\n\n## Adding a Method (aka Function) to an Object\n\nWith the knowledge above, combined with what we learned in the previous post, it turns out adding a simple function to an object is easy. First, we need to define our function in a script block. This function will combine the schema name and the table name with a period to separate the two.\n\n``` powershell\n$block = {\n           $st = \u0022$($this.Schema).$($this.Table)\u0022\n           return $st\n         }\n```\n\nIn this example I used _string interpolation_ to build my return string. (For more on string interpolation, see my post [Fun With PowerShell Strings](https://arcanecode.com/2021/07/12/fun-with-powershell-strings/).)\n\nNote my use of the `$this` keyword. Just like with objects generated by the more [modern classes](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) in PowerShell 5 and beyond, `$this` is used to represent the current instance of our custom object. Thus we'll be getting the schema and table names for the current object, stored in `$myObject`, and not one in another variable that was instantiated using the same code.\n\nIf you aren't a fan of string interpolation, you could have opted for concatenation with `$st = $this.Schema + '.' + $this.Table` to generate the return value, but interpolation is the generally accepted best practice for building strings.\n\nConcatenation is generally slower and takes more processing power than interpolation. Granted in this case it is barely measurable, but done over a dataset of millions of rows you might see an impact.\n\nWith the schema-table string (`$st`) built it is then returned.\n\nNow we will use the `Add-Member` cmdlet to add this function to our custom object. Assuming you have already run the function to create the `$myObject` variable, shown in the **Starting Point** section, you can use the following code to achieve our goal.\n\n``` powershell\nAdd-Member -InputObject $myObject `\n           -MemberType ScriptMethod `\n           -Name 'SchemaTable' `\n           -Value $block\n```\n\nI start by passing in the object I wish to add a member to, our `$myObject` variable.\n\nNext I indicate what type of member we are adding. `ScriptMethod` is the value to pass in to `MemberType` to indicate the data in the variable is a script block and should be manifested as a method.\n\nThe `Name` is next, in other words what we want to name this method. Finally into the `Value` parameter we pass in the variable holding the script block.\n\nOnce you add this new member, you can simply call it using the dot notation, with one important caveat. Because this is a method, you need to add parenthesis to the name of the method.\n\n``` powershell\n$myObject.SchemaTable()\n```\n\nResult:\n\n```\nMySchema.MyTable\n```\n\nUsing the parenthesis lets PowerShell make the distinction between a property and a method.\n\n## Parameters\n\nWhat's that? You in the back row raising your hand, what did you say? Parameters? You want to add parameters to your new method?\n\nWell, OK because you asked so nice.\n\nThis turns out to be pretty easy. We just need to add a `param` section within our script block.\n\n``` powershell\n$block = {\n           param ($DatabaseName)\n           $dst = \u0022$DatabaseName.$($this.Schema).$($this.Table)\u0022\n           return $dst\n         }\n```\n\nOn the first line of our script block we use the `param` keyword, then have a list of our parameters within parenthesis. Here we only have one, `$DatabaseName`, but we could have more separated by commas.\n\nI then build a string that uses the passed in database name, with the schema and table names already in the object, and finally return it.\n\nNext, I use `Add-Member` to add this function to our object just like I did with the previous example, the only difference being the name and the variable with our script block. Now we can call it.\n\n``` powershell\n$myObject.DatabaseSchemaTable('MyDBName')\n```\n\nResult:\n\n```\nMyDBName.MySchema.MyTable\n```\n\n## Conclusion\n\nThis post began with an explanation of _script blocks_. Using this knowledge we added new methods to our existing object. One even allowed us to pass in a parameter.\n\nIn in the next post we'll see how to create custom objects from bits of C# code. Later on we'll see how to add our own properties and methods to an existing object created by PowerShell.\n\nWell conclude this series by returning to our discussion of PowerShell classes by looking at some advanced features of the built in class construct.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In the <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">previous installment</a> of this series, I covered the various ways to create objects using the <code>PSCustomObject</code>. We saw how to create it using the <code>New-Object</code> cmdlet, then how to add your custom properties to it using the <code>Add-Member</code> cmdlet.</p>
<p>In this post we'll learn how to add our own <em>methods</em> to our objects using <em>script blocks</em>. Before we go on, just a quick reminder on vocabulary.</p>
<p>In object oriented terminology, objects have properties and methods. From the perspective of the script writer who uses our object, they only know of the properties and methods we expose. They don't know, or care, how we implemented them.</p>
<p>From the perspective of us, the authors of the code to create the object, it's a little different. What the end user calls properties we store in variables. We implement our objects methods using functions.</p>
<p>When we are talking about our code in terms of writing our object, you will frequently see the terms <em>properties</em> and <em>variables</em> used interchangeably. Likewise you'll see the terms <em>method</em> and <em>function</em> used interchangeably.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Script Blocks</h2>
<p>Before we get started, it's important to understand the concept of a <em>script block</em>. A script block is a piece of code encapsulated within squiggly braces {}. This code is meant to execute as a unit. Here's an example you've probably seen before.</p>
<pre><code class="language-powershell">$x = 1
if ($x -eq 1)
{ Write-Host 'Yep its one' }
</code></pre>
<p>The code on the last line is the script block. This unit of code, within the squiggly braces, will execute should the <code>if</code> statement evaluates to true.</p>
<p>It's possible to define your own script blocks, and store them in a variable.</p>
<pre><code class="language-powershell">$hw = {
        Clear-Host
        &quot;Hello World&quot;
      }
</code></pre>
<p>Here I've generated a simple block with two lines. The first clears the display, the second prints <code>Hello World</code>.</p>
<p>Now you have a variable, <code>$hw</code>, holding a script block. How can we use this?</p>
<p>First, we could execute the script block stored in the variable. To do so, we need to precede the name of the variable with an ampersand <code>&amp;</code>. The ampersand is the PowerShell shortcut for <em>execute the code block contained in this variable</em>.</p>
<pre><code class="language-powershell">&amp; $hw
</code></pre>
<p>Result:</p>
<pre><code>Hello World
</code></pre>
<p>Although it's difficult to show, the display did indeed clear before displaying our text.</p>
<p>Note the space between the <code>&amp;</code> and the variable name is optional, this works too.</p>
<pre><code class="language-powershell">&amp;$hw
</code></pre>
<p>Personally I think the space makes it a bit easier to read, not to mention it's easier for the eye to notice the <code>&amp;</code>. Whichever way you go, I suggest picking a format and sticking to it.</p>
<p>There are some interesting ways we can use this concept. Of course we'll look at using script blocks to add new methods to an object in a moment, but another fun thing you can do is pass a script block into a function.</p>
<p>A quick note, it is generally considered poor practice to have <code>Write-Host</code> statements within a function. Since this is just a simple demo though, we'll use them just to illustrate our concepts.</p>
<pre><code class="language-powershell">function Run-AScriptBlock($block)
{
  Write-Host 'About to run a script block'

  &amp; $block

  Write-Host &quot;Block was run&quot;
}

Run-AScriptBlock $hw
</code></pre>
<p>Result:</p>
<pre><code>Hello World
Block was run
</code></pre>
<p>The first line to display &quot;About to run....&quot; did execute, but it was wiped out due to the <code>Clear-Host</code> in the script block.</p>
<p>The script block then displayed <code>Hello World</code>, and returned control to the function. The function then displayed &quot;Block was run&quot; then exited.</p>
<p>The PowerShell testing tool, Pester, makes extensive use of this functionality to pass the code blocks being tested into Pester's unit testing functions.</p>
<p>Your imagination is probably running wild at the various ways you can use this. For example, you could build a string of PowerShell code based on certain conditions, then once the string of code is complete execute it.</p>
<p>At this point you have a nice foundation on the concept of script blocks, so let's move on to the main topic of this post.</p>
<h2>Starting Point</h2>
<p>This post picks up where the previous one left off. If you recall, our previous post built a function to generate a custom object of type <code>PSCustomObject</code>. If you need an explanation please go back and read part 1 of this series, but to make it easy for you I'll reproduce the function needed to create the object we'll be working with.</p>
<pre><code class="language-powershell">function Create-Object ($Schema, $Table, $Comment)
{
  # Build a hash table with the properties
  $properties = [ordered]@{ Schema = $Schema
                            Table = $Table
                            Comment = $Comment
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject -Property $properties

  Add-Member -InputObject $object `
             -MemberType AliasProperty `
             -Name 'Description' `
             -Value 'Comment'

  # Return the newly created object
  return $object
}

$myObject = Create-Object -Schema 'MySchema' `
                          -Table 'MyTable' `
                          -Comment 'MyComment'
$myObject
</code></pre>
<h2>Adding a Method (aka Function) to an Object</h2>
<p>With the knowledge above, combined with what we learned in the previous post, it turns out adding a simple function to an object is easy. First, we need to define our function in a script block. This function will combine the schema name and the table name with a period to separate the two.</p>
<pre><code class="language-powershell">$block = {
           $st = &quot;$($this.Schema).$($this.Table)&quot;
           return $st
         }
</code></pre>
<p>In this example I used <em>string interpolation</em> to build my return string. (For more on string interpolation, see my post <a href="https://arcanecode.com/2021/07/12/fun-with-powershell-strings/">Fun With PowerShell Strings</a>.)</p>
<p>Note my use of the <code>$this</code> keyword. Just like with objects generated by the more <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">modern classes</a> in PowerShell 5 and beyond, <code>$this</code> is used to represent the current instance of our custom object. Thus we'll be getting the schema and table names for the current object, stored in <code>$myObject</code>, and not one in another variable that was instantiated using the same code.</p>
<p>If you aren't a fan of string interpolation, you could have opted for concatenation with <code>$st = $this.Schema + '.' + $this.Table</code> to generate the return value, but interpolation is the generally accepted best practice for building strings.</p>
<p>Concatenation is generally slower and takes more processing power than interpolation. Granted in this case it is barely measurable, but done over a dataset of millions of rows you might see an impact.</p>
<p>With the schema-table string (<code>$st</code>) built it is then returned.</p>
<p>Now we will use the <code>Add-Member</code> cmdlet to add this function to our custom object. Assuming you have already run the function to create the <code>$myObject</code> variable, shown in the <strong>Starting Point</strong> section, you can use the following code to achieve our goal.</p>
<pre><code class="language-powershell">Add-Member -InputObject $myObject `
           -MemberType ScriptMethod `
           -Name 'SchemaTable' `
           -Value $block
</code></pre>
<p>I start by passing in the object I wish to add a member to, our <code>$myObject</code> variable.</p>
<p>Next I indicate what type of member we are adding. <code>ScriptMethod</code> is the value to pass in to <code>MemberType</code> to indicate the data in the variable is a script block and should be manifested as a method.</p>
<p>The <code>Name</code> is next, in other words what we want to name this method. Finally into the <code>Value</code> parameter we pass in the variable holding the script block.</p>
<p>Once you add this new member, you can simply call it using the dot notation, with one important caveat. Because this is a method, you need to add parenthesis to the name of the method.</p>
<pre><code class="language-powershell">$myObject.SchemaTable()
</code></pre>
<p>Result:</p>
<pre><code>MySchema.MyTable
</code></pre>
<p>Using the parenthesis lets PowerShell make the distinction between a property and a method.</p>
<h2>Parameters</h2>
<p>What's that? You in the back row raising your hand, what did you say? Parameters? You want to add parameters to your new method?</p>
<p>Well, OK because you asked so nice.</p>
<p>This turns out to be pretty easy. We just need to add a <code>param</code> section within our script block.</p>
<pre><code class="language-powershell">$block = {
           param ($DatabaseName)
           $dst = &quot;$DatabaseName.$($this.Schema).$($this.Table)&quot;
           return $dst
         }
</code></pre>
<p>On the first line of our script block we use the <code>param</code> keyword, then have a list of our parameters within parenthesis. Here we only have one, <code>$DatabaseName</code>, but we could have more separated by commas.</p>
<p>I then build a string that uses the passed in database name, with the schema and table names already in the object, and finally return it.</p>
<p>Next, I use <code>Add-Member</code> to add this function to our object just like I did with the previous example, the only difference being the name and the variable with our script block. Now we can call it.</p>
<pre><code class="language-powershell">$myObject.DatabaseSchemaTable('MyDBName')
</code></pre>
<p>Result:</p>
<pre><code>MyDBName.MySchema.MyTable
</code></pre>
<h2>Conclusion</h2>
<p>This post began with an explanation of <em>script blocks</em>. Using this knowledge we added new methods to our existing object. One even allowed us to pass in a parameter.</p>
<p>In in the next post we'll see how to create custom objects from bits of C# code. Later on we'll see how to add our own properties and methods to an existing object created by PowerShell.</p>
<p>Well conclude this series by returning to our discussion of PowerShell classes by looking at some advanced features of the built in class construct.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4317</wp:post_id>
  <wp:post_date>2022-01-17 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-17 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 15:01:33</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 21:01:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-adding-methods-to-pscustomobject</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="methods"><![CDATA[Methods]]></category>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="pscustomobect"><![CDATA[PSCustomObect]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4318]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67794557812]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1642431617]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1483091815725154305";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_376657574265161";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167031</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:10</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] introduced in PowerShell 5. We then looked at using PSCustomObject to create new objects, then add methods to those objects. In the previous post, we used C# code to create our PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.116471;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641210.902687;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166947</wp:comment_id>
    <wp:comment_author><![CDATA[Adding Methods to a PSCustomObject &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/01/21/adding-methods-to-a-pscustomobject/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-01-21 07:10:15</wp:comment_date>
    <wp:comment_date_gmt>2022-01-21 13:10:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain builds on a prior post: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642770615.091866;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642774767.407533;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166964</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 03/2022 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19856-Die-KW-032022-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2022-01-23 16:44:41</wp:comment_date>
    <wp:comment_date_gmt>2022-01-23 22:44:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Hier wird euch gezeigt, wie ihr an eure eigenen PowerShell Objekte Methoden bastelt. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642977881.115415;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642982963.278308;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166974</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Creating Objects from C# &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.81.31</wp:comment_author_IP>
    <wp:comment_date>2022-01-24 09:00:14</wp:comment_date>
    <wp:comment_date_gmt>2022-01-24 15:00:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] how to add your custom properties to it using the Add-Member cmdlet. In the subsequent post we saw how to add new methods to [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643040755.038429;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643036414.843293;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Objects - Creating Objects from C#]]></title>
  <link>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/</link>
  <pubDate>Mon, 24 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4321</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nThis is the next installment in my series on creating objects in PowerShell. In [the first installment](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) we showed how to create an object using the `class` type introduced in PowerShell 5. That covered the basics, and in the last installment of this series we'll cover some advanced techniques.\n\nIn the last two installment of this series, I covered the various ways to create objects using the `PSCustomObject`. We saw [how to create](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/) it using the `New-Object` cmdlet, then how to add your custom properties to it using the `Add-Member` cmdlet. In the subsequent post we saw [how to add new methods](https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/) to it.\n\nIn this post, we'll cover something new, creating an object based on C# code!\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Why C#\n\nYou may be asking yourself, why integrate C# code into PowerShell? Why not just define our objects using PowerShell? There are several reasons, especially if you are working with a team of C# developers, or are a C# developer yourself.\n\nFirst, it can make testing your C# classes easy. You can code the class and save it in a _.CS_ file. Then run some simple PowerShell to create a new object from your class and test its various properties and methods. This lets you make changes easily and test again. All without having to create a full blown C# project just to test.\n\nIt also allows for code reuse. Let's say your C# developers have created a library to do some calculations, and you need to use one of the methods from that library, but that library expects you to pass in an object based on a class.\n\nLet's further the example, perhaps you have the task of reading in a CSV file, doing a calculation for each row, then outputting another CSV file, or maybe even a JSON file. This is a one time use, so you don't want to go to the effort of creating a full blown C# project.\n\nUsing the techniques in this demo, you could simply access the C# file in which the class was defined, and generate an object from it in PowerShell. Then all you'd have to do is populate the object and pass it into the library to do the calculation, and output the result.\n\nThese are just a few simple examples, I'm sure you'll come up with many more as the need arises. I'll be honest, this isn't something you will need to do a great deal, but when you do you'll appreciate knowing how.\n\n## Embedding a C# Class in your PowerShell\n\nIn this first method, we'll define a standard C# class within a _here string_ then add it as a new data type in PowerShell. Once it exists as a type, we can then generate new objects from it. Let's take a look at a very simple class definition.\n\n``` powershell\n$code = @\u0022\nusing System;\n\npublic class SchemaTable\n{\n  public string DatabaseName;\n\n  public string SchemaTableName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;  // Setup a return variable\n\n    retVal = pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public SchemaTableName\n\n  public string FullName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;  // Setup a return variable\n\n    retVal = this.DatabaseName + \u0022.\u0022 + pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public FullName\n\n} // class SchemaTable\n\n\u0022@\n```\n\nIf you've read this far I'm going to assume you are familiar with C#, at least the basics of it, so I'll keep this explanation at a high level.\n\nWe start by declaring a class named `SchemaTable`. The next line declares a variable (which will become a property) called `DatabaseName`.\n\nI then create the first of two functions (which will become our methods). The `SchemaTableName` simply takes the two passed in values of `pSchema` and `pTable` and concatenates them together with a period between them.\n\nThe second, `FullName`, takes the value in `DatabaseName` and concatenates them with the schema and table name parameters, again using a period as a separator in the return string.\n\nNext, we need to add this class as a new data _type_ in PowerShell. You are already familiar with many data types, such as int, string, and more. We simply want to add a new data type to our PowerShell environment.\n\nTo do so, we will use the `Add-Type` cmdlet.\n\n``` powershell\nAdd-Type -TypeDefinition $code `\n         -Language CSharp\n```\n\nThe first parameter, `TypeDefinition`, takes the C# code we defined in the here string. The second, `Language`, is pretty obvious. We simply need to let PowerShell know what language this code was written in.\n\nAs of right now, the only supported language is C#. Because of this, if you leave off the `-Language CSharp` parameter, it will default to C# as the language. I included it here for completeness, but will omit it for future examples in this post.\n\nSo now we've defined a class in C#, and have added it as a new data type in PowerShell. How then do we create an object from it?\n\nWe'll turn to our old friend, `New-Object`.\n\n``` powershell\n$result = New-Object -TypeName SchemaTable\n```\n\nThat's it, that simple one line will create our new object based on the C# code we defined in the `$code` variable. You can even use `Get-Member` to display its properties and methods like you would with any other object.\n\n``` powershell\n$result | Get-Member\n```\n\nResult:\n\n```\nName            MemberType Definition\n\u002d\u002d\u002d\u002d            \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\nEquals          Method     bool Equals(System.Object obj)\nFullName        Method     string FullName(string pSchema, string pTable)\nGetHashCode     Method     int GetHashCode()\nGetType         Method     type GetType()\nSchemaTableName Method     string SchemaTableName(string pSchema, string pTable)\nToString        Method     string ToString()\nDatabaseName    Property   string DatabaseName {get;set;}\n```\n\nIt contains the standard methods and properties built into all objects, but it also has the three we defined: `FullName`, `SchemaTableName`, and `DatabaseName`.\n\nWe can use these properties and methods just like ones in any other object. Let's set the `DatabaseName` property, then display it.\n\n``` powershell\n$result.DatabaseName = 'MyDB'\n$result.DatabaseName\n```\n\nResult:\n\n```\nMyDB\n```\n\nLikewise, we can access the methods we created. Here's the `SchemaTableName` method.\n\n``` powershell\n$result.SchemaTableName('ASchema', 'ATable')\n```\n\nResult:\n\n```\nASchema.ATable\n```\n\nAnd for completeness, the `FullName` method.\n\n``` powershell\n$result.FullName('ASchema', 'ATable')\n```\n\nResult:\n\n```\nMyDB.ASchema.ATable\n```\n\n## C# Classes with Static Methods\n\nIn the [original post](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) in this series on basic PowerShell classes, I mentioned the concept of _static_ methods and properties. As static method or property is simply one that can be called without having to generate a new object.\n\nWhile we'll circle back around to discuss implementing static methods and properties in PowerShell classes in the final post in this series, it is likely you'll encounter C# classes with static methods and properties. As such we'll go ahead and cover them here, while we are talking C#.\n\nIn the code below, I've defined a class with one method, and labeled it as static. In reality you will encounter many classes that have a mix of static and non-static members, but for this post we'll keep the example simple.\n\n``` powershell\n$code = @\u0022\nusing System;\n\npublic class StaticSchemaTable\n{\n  public static string FullName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;\n\n    retVal = pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public static FullName\n} // class StaticSchemaTable\n\u0022@\n```\n\nAs you can see, I've simply used the `static` keyword as part of the `FullName` function declaration. I also changed the name of the class, otherwise the code is the same as the previous demo.\n\nNow we need to add this as a new type in our current PowerShell session.\n\n``` powershell\nAdd-Type -TypeDefinition $code\n```\n\nCalling our static method requires different syntax. First, it won't be necessary to create an object from it. Second, we'll need to use the full name of our class in brackets, followed by two colons. We then indicate the name of the static function to call, and pass in any parameters.\n\n``` powershell\n$result = [StaticSchemaTable]::FullName('MySchema', 'myTable')\n$result\n```\n\nResult:\n\n```\nMySchema.myTable\n```\n\nStatic methods and parameters aren't something that's used a great deal, but they are used so you should know how to handle them.\n\n## Creating an Object from A C# File\n\nWhile it is certainly possible to embed C# code right in your PowerShell, this could lead to some issues. The moment a developer makes a change to their _.cs_ file, you are now out of sync. You don't want to have to keep cutting and pasting all the time.\n\nIt makes far more sense, then, to simply access the C# file with the class definition, and load it at run time.\n\nFirst, you need to create a C# file with the sample code. Here is what I put in my _.cs_ file:\n\n``` csharp\nusing System;\n\npublic class StaticSchemaTableInFile\n{\n  public static string FullName(string pSchema, string pTable)\n  {\n    string retVal = \u0022\u0022;\n\n    retVal = pSchema + \u0022.\u0022 + pTable;\n\n    return retVal;\n\n  } // public static FullName\n} // class StaticSchemaTableInFile\n```\n\nThis is the same static class you just saw, with the minor change to the class name.\n\nIn the next sample, I simply build the path to the file name, then use the `Get-Content` to read it.\n\n``` powershell\n$csPath = 'C:\\Users\\arcan\\OneDrive\\BlogPosts\\Markdown\\'\n$file = \u0022$($csPath)Fun-With-PowerShell-Objects-Part 3.cs\u0022\n$code = Get-Content $file | Out-String\n```\n\n`Get-Content` will read the contents of the file. By default `Get-Content` reads it as an array with each line in the file being an element, so we'll have to pipe it through the `Out-String` cmdlet to convert it to a single string. This string is then stored in the `$code` variable. Of course you'll need to update the path and file variables you used on your computer.\n\nNow we do just like the previous demo, call `Add-Type` then run it.\n\n``` powershell\nAdd-Type -TypeDefinition $code\n$result = [StaticSchemaTableInFile]::FullName('mySchema', 'myTable')\n$result\n```\n\nResult:\n\n```\nmySchema.myTable\n```\n\nAgain, I reused the example from the static demo but we could also have used the first example, or any standard C# file containing class definitions.\n\n## Other Ways To Add Types\n\nWhile outside the scope of this post, I did want to mention there are two other ways you can add new data types to your PowerShell scripts. First, `Add-Type` will let you load types stored in an _assmebly_, in other words a **.dll** file.\n\nSecond, if you are running on a Windows computer you can add types stored in native Windows APIs. If you want to learn more about these, I'll refer you to the [Add-Type Documentation](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2) at Microsoft.\n\n## Persistance\n\nOne last thing you need to be aware of. When you add a type it does _not_ persist between sessions. The moment you close your command window or VSCode, that type goes away. You'll need to recreate it the next time you run your script.\n\nThis is probably a good thing, as it's doubtful you will need to use these types on a daily basis. Should you need to, though, you'll have to edit your PowerShell profile and have them added within it.\n\n## Conclusion\n\nIn this post we saw how to create custom objects from C# classes. They could be embedded in our PowerShell code, or stored in external files. The subject of _static_ methods and properties were mentioned, along with a demo on how to use them.\n\nIn the next post we'll see a very useful technique, and cover the ability to add our own custom methods and properties to existing objects that others created, including ones built right into PowerShell.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site."} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>This is the next installment in my series on creating objects in PowerShell. In <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">the first installment</a> we showed how to create an object using the <code>class</code> type introduced in PowerShell 5. That covered the basics, and in the last installment of this series we'll cover some advanced techniques.</p>
<p>In the last two installment of this series, I covered the various ways to create objects using the <code>PSCustomObject</code>. We saw <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">how to create</a> it using the <code>New-Object</code> cmdlet, then how to add your custom properties to it using the <code>Add-Member</code> cmdlet. In the subsequent post we saw <a href="https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/">how to add new methods</a> to it.</p>
<p>In this post, we'll cover something new, creating an object based on C# code!</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Why C#</h2>
<p>You may be asking yourself, why integrate C# code into PowerShell? Why not just define our objects using PowerShell? There are several reasons, especially if you are working with a team of C# developers, or are a C# developer yourself.</p>
<p>First, it can make testing your C# classes easy. You can code the class and save it in a <em>.CS</em> file. Then run some simple PowerShell to create a new object from your class and test its various properties and methods. This lets you make changes easily and test again. All without having to create a full blown C# project just to test.</p>
<p>It also allows for code reuse. Let's say your C# developers have created a library to do some calculations, and you need to use one of the methods from that library, but that library expects you to pass in an object based on a class.</p>
<p>Let's further the example, perhaps you have the task of reading in a CSV file, doing a calculation for each row, then outputting another CSV file, or maybe even a JSON file. This is a one time use, so you don't want to go to the effort of creating a full blown C# project.</p>
<p>Using the techniques in this demo, you could simply access the C# file in which the class was defined, and generate an object from it in PowerShell. Then all you'd have to do is populate the object and pass it into the library to do the calculation, and output the result.</p>
<p>These are just a few simple examples, I'm sure you'll come up with many more as the need arises. I'll be honest, this isn't something you will need to do a great deal, but when you do you'll appreciate knowing how.</p>
<h2>Embedding a C# Class in your PowerShell</h2>
<p>In this first method, we'll define a standard C# class within a <em>here string</em> then add it as a new data type in PowerShell. Once it exists as a type, we can then generate new objects from it. Let's take a look at a very simple class definition.</p>
<pre><code class="language-powershell">$code = @&quot;
using System;

public class SchemaTable
{
  public string DatabaseName;

  public string SchemaTableName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;  // Setup a return variable

    retVal = pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public SchemaTableName

  public string FullName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;  // Setup a return variable

    retVal = this.DatabaseName + &quot;.&quot; + pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public FullName

} // class SchemaTable

&quot;@
</code></pre>
<p>If you've read this far I'm going to assume you are familiar with C#, at least the basics of it, so I'll keep this explanation at a high level.</p>
<p>We start by declaring a class named <code>SchemaTable</code>. The next line declares a variable (which will become a property) called <code>DatabaseName</code>.</p>
<p>I then create the first of two functions (which will become our methods). The <code>SchemaTableName</code> simply takes the two passed in values of <code>pSchema</code> and <code>pTable</code> and concatenates them together with a period between them.</p>
<p>The second, <code>FullName</code>, takes the value in <code>DatabaseName</code> and concatenates them with the schema and table name parameters, again using a period as a separator in the return string.</p>
<p>Next, we need to add this class as a new data <em>type</em> in PowerShell. You are already familiar with many data types, such as int, string, and more. We simply want to add a new data type to our PowerShell environment.</p>
<p>To do so, we will use the <code>Add-Type</code> cmdlet.</p>
<pre><code class="language-powershell">Add-Type -TypeDefinition $code `
         -Language CSharp
</code></pre>
<p>The first parameter, <code>TypeDefinition</code>, takes the C# code we defined in the here string. The second, <code>Language</code>, is pretty obvious. We simply need to let PowerShell know what language this code was written in.</p>
<p>As of right now, the only supported language is C#. Because of this, if you leave off the <code>-Language CSharp</code> parameter, it will default to C# as the language. I included it here for completeness, but will omit it for future examples in this post.</p>
<p>So now we've defined a class in C#, and have added it as a new data type in PowerShell. How then do we create an object from it?</p>
<p>We'll turn to our old friend, <code>New-Object</code>.</p>
<pre><code class="language-powershell">$result = New-Object -TypeName SchemaTable
</code></pre>
<p>That's it, that simple one line will create our new object based on the C# code we defined in the <code>$code</code> variable. You can even use <code>Get-Member</code> to display its properties and methods like you would with any other object.</p>
<pre><code class="language-powershell">$result | Get-Member
</code></pre>
<p>Result:</p>
<pre><code>Name            MemberType Definition
----            ---------- ----------
Equals          Method     bool Equals(System.Object obj)
FullName        Method     string FullName(string pSchema, string pTable)
GetHashCode     Method     int GetHashCode()
GetType         Method     type GetType()
SchemaTableName Method     string SchemaTableName(string pSchema, string pTable)
ToString        Method     string ToString()
DatabaseName    Property   string DatabaseName {get;set;}
</code></pre>
<p>It contains the standard methods and properties built into all objects, but it also has the three we defined: <code>FullName</code>, <code>SchemaTableName</code>, and <code>DatabaseName</code>.</p>
<p>We can use these properties and methods just like ones in any other object. Let's set the <code>DatabaseName</code> property, then display it.</p>
<pre><code class="language-powershell">$result.DatabaseName = 'MyDB'
$result.DatabaseName
</code></pre>
<p>Result:</p>
<pre><code>MyDB
</code></pre>
<p>Likewise, we can access the methods we created. Here's the <code>SchemaTableName</code> method.</p>
<pre><code class="language-powershell">$result.SchemaTableName('ASchema', 'ATable')
</code></pre>
<p>Result:</p>
<pre><code>ASchema.ATable
</code></pre>
<p>And for completeness, the <code>FullName</code> method.</p>
<pre><code class="language-powershell">$result.FullName('ASchema', 'ATable')
</code></pre>
<p>Result:</p>
<pre><code>MyDB.ASchema.ATable
</code></pre>
<h2>C# Classes with Static Methods</h2>
<p>In the <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">original post</a> in this series on basic PowerShell classes, I mentioned the concept of <em>static</em> methods and properties. As static method or property is simply one that can be called without having to generate a new object.</p>
<p>While we'll circle back around to discuss implementing static methods and properties in PowerShell classes in the final post in this series, it is likely you'll encounter C# classes with static methods and properties. As such we'll go ahead and cover them here, while we are talking C#.</p>
<p>In the code below, I've defined a class with one method, and labeled it as static. In reality you will encounter many classes that have a mix of static and non-static members, but for this post we'll keep the example simple.</p>
<pre><code class="language-powershell">$code = @&quot;
using System;

public class StaticSchemaTable
{
  public static string FullName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;

    retVal = pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public static FullName
} // class StaticSchemaTable
&quot;@
</code></pre>
<p>As you can see, I've simply used the <code>static</code> keyword as part of the <code>FullName</code> function declaration. I also changed the name of the class, otherwise the code is the same as the previous demo.</p>
<p>Now we need to add this as a new type in our current PowerShell session.</p>
<pre><code class="language-powershell">Add-Type -TypeDefinition $code
</code></pre>
<p>Calling our static method requires different syntax. First, it won't be necessary to create an object from it. Second, we'll need to use the full name of our class in brackets, followed by two colons. We then indicate the name of the static function to call, and pass in any parameters.</p>
<pre><code class="language-powershell">$result = [StaticSchemaTable]::FullName('MySchema', 'myTable')
$result
</code></pre>
<p>Result:</p>
<pre><code>MySchema.myTable
</code></pre>
<p>Static methods and parameters aren't something that's used a great deal, but they are used so you should know how to handle them.</p>
<h2>Creating an Object from A C# File</h2>
<p>While it is certainly possible to embed C# code right in your PowerShell, this could lead to some issues. The moment a developer makes a change to their <em>.cs</em> file, you are now out of sync. You don't want to have to keep cutting and pasting all the time.</p>
<p>It makes far more sense, then, to simply access the C# file with the class definition, and load it at run time.</p>
<p>First, you need to create a C# file with the sample code. Here is what I put in my <em>.cs</em> file:</p>
<pre><code class="language-csharp">using System;

public class StaticSchemaTableInFile
{
  public static string FullName(string pSchema, string pTable)
  {
    string retVal = &quot;&quot;;

    retVal = pSchema + &quot;.&quot; + pTable;

    return retVal;

  } // public static FullName
} // class StaticSchemaTableInFile
</code></pre>
<p>This is the same static class you just saw, with the minor change to the class name.</p>
<p>In the next sample, I simply build the path to the file name, then use the <code>Get-Content</code> to read it.</p>
<pre><code class="language-powershell">$csPath = 'C:\Users\arcan\OneDrive\BlogPosts\Markdown\'
$file = &quot;$($csPath)Fun-With-PowerShell-Objects-Part 3.cs&quot;
$code = Get-Content $file | Out-String
</code></pre>
<p><code>Get-Content</code> will read the contents of the file. By default <code>Get-Content</code> reads it as an array with each line in the file being an element, so we'll have to pipe it through the <code>Out-String</code> cmdlet to convert it to a single string. This string is then stored in the <code>$code</code> variable. Of course you'll need to update the path and file variables you used on your computer.</p>
<p>Now we do just like the previous demo, call <code>Add-Type</code> then run it.</p>
<pre><code class="language-powershell">Add-Type -TypeDefinition $code
$result = [StaticSchemaTableInFile]::FullName('mySchema', 'myTable')
$result
</code></pre>
<p>Result:</p>
<pre><code>mySchema.myTable
</code></pre>
<p>Again, I reused the example from the static demo but we could also have used the first example, or any standard C# file containing class definitions.</p>
<h2>Other Ways To Add Types</h2>
<p>While outside the scope of this post, I did want to mention there are two other ways you can add new data types to your PowerShell scripts. First, <code>Add-Type</code> will let you load types stored in an <em>assmebly</em>, in other words a <strong>.dll</strong> file.</p>
<p>Second, if you are running on a Windows computer you can add types stored in native Windows APIs. If you want to learn more about these, I'll refer you to the <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/add-type?view=powershell-7.2">Add-Type Documentation</a> at Microsoft.</p>
<h2>Persistance</h2>
<p>One last thing you need to be aware of. When you add a type it does <em>not</em> persist between sessions. The moment you close your command window or VSCode, that type goes away. You'll need to recreate it the next time you run your script.</p>
<p>This is probably a good thing, as it's doubtful you will need to use these types on a daily basis. Should you need to, though, you'll have to edit your PowerShell profile and have them added within it.</p>
<h2>Conclusion</h2>
<p>In this post we saw how to create custom objects from C# classes. They could be embedded in our PowerShell code, or stored in external files. The subject of <em>static</em> methods and properties were mentioned, along with a demo on how to use them.</p>
<p>In the next post we'll see a very useful technique, and cover the ability to add our own custom methods and properties to existing objects that others created, including ones built right into PowerShell.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4321</wp:post_id>
  <wp:post_date>2022-01-24 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-24 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 16:06:17</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 22:06:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-creating-objects-from-c</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="net"><![CDATA[.Net]]></category>
  <category domain="category" nicename="c-sharp"><![CDATA[C Sharp]]></category>
  <category domain="category" nicename="c"><![CDATA[C#]]></category>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4322]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68092666760]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1485628490141552640";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_381006680496917";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1643036409]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167032</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Objects &#8211; Modifying Existing Objects &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.187</wp:comment_author_IP>
    <wp:comment_date>2022-01-31 09:00:12</wp:comment_date>
    <wp:comment_date_gmt>2022-01-31 15:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] looked at using PSCustomObject to create new objects, then add methods to those objects. In the previous post, we used C# code to create our PowerShell [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643645898.308705;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643641212.964138;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166981</wp:comment_id>
    <wp:comment_author><![CDATA[Creating Powershell Objects from C# &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/01/25/creating-powershell-objects-from-c/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-01-25 07:00:10</wp:comment_date>
    <wp:comment_date_gmt>2022-01-25 13:00:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain mixes languages: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643115610.659552;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643119346.332143;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Objects - Modifying Existing Objects]]></title>
  <link>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/</link>
  <pubDate>Mon, 31 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4325</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nSo far we've covered a lot in this series on PowerShell Objects. We began by [creating a class using the class keyword](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/) introduced in PowerShell 5. We then looked at using PSCustomObject to [create new objects](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/), then [add methods](https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/) to those objects. In the [previous post](https://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/), we used C# code to create our PowerShell objects.\n\nIn this installment, we'll see how to add properties and methods to _existing_ objects created by someone else. For this example we'll use objects returned by the `Get-ChildItem` cmdlet, but we could use any objects.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nIn the code samples be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Getting The Objects to Work With\n\nAs stated in the Introduction, we will use the objects returned by the `Get-ChildItem` cmdlet to add a new property and method to. We'll set our location (in my case to the folder where these samples are stored), call the `Get-ChildItem` cmdlet and store the result in a variable, `$items`.\n\n``` powershell\nSet-Location C:\\Users\\arcan\\OneDrive\\BlogPosts\\Markdown\n$items = Get-ChildItem\n```\n\nLet's look a the first item in the `$items` collection to see what its datatype is.\n\n``` powershell\n$items[0].GetType()\n```\n\nResult:\n\n```\nIsPublic IsSerial Name     BaseType\n\u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d \u002d\u002d\u002d\u002d     \u002d\u002d\u002d\u002d\u002d\u002d\u002d\u002d\nTrue     False    FileInfo System.IO.FileSystemInfo\n```\n\nAs you can see, each item is of type `FileInfo`. Each object contains information about the corresponding file it represents. You can find a full list of properties and methods for the `FileInfo` class in the online [Microsoft Documentation for FileInfo](https://docs.microsoft.com/en-us/dotnet/api/system.io.fileinfo?view=net-6.0).\n\n## Coding Our New Method\n\nFor this example, we are going to iterate over our collection of `FileInfo` objects. To each one, we'll be adding one property and one method. The property will just be a number that can be used to uniquely identify each object. We'll look more at that momentarily.\n\nThe method we'll add will analyze the existing `Extension` property of the `FileInfo` object. As I'm sure you know, the extension is the data that occurs after the period in the file name, and is used to identify the type  of file it is.\n\nHere is the script block for this method.\n\n``` powershell\n# Define the custom script property\n$script = {\n\n  switch ($this.Extension)\n  {\n    '.cs'   {$retValue = 'C#'}\n    '.md'   {$retValue = 'Markdown'}\n    '.ps1'  {$retValue = 'Script'}\n    '.psd1' {$retValue = 'Module Definition'}\n    '.psm1' {$retValue = 'Module'}\n    '.xml'  {$retValue = 'XML File'}\n    '.pptx' {$retValue = 'PowerPoint'}\n    '.csv'  {$retValue = 'Comma Separated Values file'}\n    '.json' {$retValue = 'JavaScript Object Notation data'}\n    default {$retValue = 'Sorry dude, no clue.'}\n  }\n\n  return $retValue\n}\n```\n\nWithin the `switch` statement, I use `$this` to access the current object. It then access the `Extension` property of the current object.\n\nIt then goes down the list, comparing the extension value to the text to the left of the squiggly brace. If it finds a match, it will run the code inside the script block. This simply sets a return value variable to a more human friendly text representation of the file type.\n\nIf no match is found, it runs the code by the `default` value. For more in the switch statement, see my post [Fun With PowerShell Logic Branching](https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/).\n\n## Adding The Property and Method to the FileInfo Object\n\nNow that our script is defined, it's time to add it as well as a property to our `FileInfo` objects. Let's see the code, then we'll break it down.\n\n```powershell\n# Create an item count variable\n$itemCount = 0\n\n# Iterate over each DirectoryInfo object in the $items collection\nforeach($item in $items)\n{\n  # Add a note property, setting it to the current item counter\n  $itemCount++\n  $item | Add-Member –MemberType NoteProperty `\n                     –Name ItemNumber `\n                     –Value $itemCount\n\n  # Add script property to the individual file object\n  Add-Member -InputObject $item `\n             -MemberType ScriptMethod `\n             -Name 'ScriptType' `\n             -Value $script\n\n  # Now display the already existing Name property along with the\n  # property and method we just added.\n  \u0022$($item.ItemNumber): $($item.Name) = $($item.ScriptType())\u0022\n}\n```\n\nWe begin by creating a variable, `$itemCount`. Within the `foreach` loop we'll increment it, then use it as our index for the `ItemNumber` property.\n\nThe `foreach` loop is entered, where we iterate over the collection of `FileInfo` objects stored in `$items`. Each time through the loop, the current item is copied into the `$item` variable. For more info on `foreach`, see my post [Fun With PowerShell Loops](https://arcanecode.com/2021/08/23/fun-with-powershell-loops/).\n\nThe next line is straightforward, we simply increment the `$itemCount` by one.\n\nYou've seen the `Add-Member` cmdlet used in recent posts on adding properties and methods to a `PSCustomObject`, so I won't delve deep into it here.\n\nThe first call to `Add-Member` takes the current `FileInfo` object, stored in `$item`, and adds a new property we'll name `ItemNumber`. When we add it, we'll go ahead and assign the value in `$itemCount`. Note that this property could be updated at a future time, although we won't need to for this example.\n\nWe then call `Add-Member` a second time, adding in the script you saw earlier and naming it `ScriptType`.\n\nFinally, we use string interpolation to build a nicely formatted string with the item number, the name of the file (a native property of the `FileInfo` object), and finally we call the method we just added `ScriptType`.\n\nHere is the final output of our effort.\n\nResult:\n\n```\n1: blog-template.md = Markdown\n2: fun-with-powershell-classes-the-basics.md = Markdown\n3: fun-with-powershell-classes-the-basics.ps1 = Script\n4: fun-with-powershell-enum-flags-header.png = Sorry dude, no clue.\n5: Fun-With-PowerShell-Enum-Flags.md = Markdown\n6: Fun-With-PowerShell-Enums.md = Markdown\n7: Fun-With-PowerShell-Objects-Part 1.md = Markdown\n8: Fun-With-PowerShell-Objects-Part 1.ps1 = Script\n9: Fun-With-PowerShell-Objects-Part 2.md = Markdown\n10: Fun-With-PowerShell-Objects-Part 2.ps1 = Script\n11: Fun-With-PowerShell-Objects-Part 3.cs = C#\n12: Fun-With-PowerShell-Objects-Part 3.md = Markdown\n13: Fun-With-PowerShell-Objects-Part 3.ps1 = Script\n14: Fun-With-PowerShell-Objects-Part 4.md = Markdown\n15: Fun-With-PowerShell-Objects-Part 4.ps1 = Script\n16: fun-with-powershell-objects-part-1.png = Sorry dude, no clue.\n17: Fun-With-PowerShell-Providers.md = Markdown\n18: Fun-With-PowerShell-Write-Debug.md = Markdown\n19: Fun-With-PowerShell-Write-Verbose-and-Write-Debug.md = Markdown\n20: Fun-With-VSCode-Code-Snippets.md = Markdown\n21: IMG_0965.JPG = Sorry dude, no clue.\n22: more-fun-with-powershell-enums-header.png = Sorry dude, no clue.\n23: More-Fun-With-PowerShell-Enums.md = Markdown\n24: More-Fun-With-PowerShell-Enums.ps1 = Script\n25: security-for-apartment-dwellers-01.png = Sorry dude, no clue.\n26: Security-for-Apartment-Dwellers-header.png = Sorry dude, no clue.\n27: Security-for-Apartment-Dwellers.md = Markdown\n```\n\nI author these blog posts in markdown within VSCode first, prior to copying them into my WordPress based blog. This folder contains a markdown file for each post, most of which have one or more accompanying code files associated with it.\n\nI deliberately omitted the image type extensions (.jpg, .png) from the switch statement so you could see the default option being taken.\n\n## Persistance\n\nThere is an important fact you need to recall when using this technique. The new property and method only exist for the set of `FileInfo` objects contained in our `$items` collection. If I were to get another collection, perhaps using `$moreItems = Get-ChildItem`, the `FileInfo` objects stored in `$moreItems` will **NOT** have our `ItemNumber` and `ScriptType` in them.\n\nYou will have to explicitly add custom properties and methods to objects each time you need them.\n\n## Conclusion\n\nAs you can see, this technique offers many possibilities. You could define a script block at the top of your script that does a complex calculation, or perhaps formats data for easier reading by the end user. Then you simply add this script block to the objects you generate.\n\nThis makes your code much more readable. The complex part is at the top where we define the script block, out of the way of your loops.\n\nIt can also promote code reuse. You can create a separate script with many script blocks that you commonly use. You call that script from the one you are currently developing, and you instantly have a set of new properties and methods that can be added to the set of objects you are working with.\n\nThis method provides for extensibility with objects you did not author, or have the source code for. Perhaps you have a compiled PowerShell module that came from a vendor, but it lacks that one method that would, for your unique situation, make it much easier to work with. You can now code that method for yourself and use it.\n\nAs time goes on I'm sure you'll find many situations you can use these techniques to solve problems.\n\nIn the next three installments of this series we'll return to the PowerShell _class_ type. We'll look at some of the advanced abilities that it offers.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>So far we've covered a lot in this series on PowerShell Objects. We began by <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">creating a class using the class keyword</a> introduced in PowerShell 5. We then looked at using PSCustomObject to <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">create new objects</a>, then <a href="https://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/">add methods</a> to those objects. In the <a href="https://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/">previous post</a>, we used C# code to create our PowerShell objects.</p>
<p>In this installment, we'll see how to add properties and methods to <em>existing</em> objects created by someone else. For this example we'll use objects returned by the <code>Get-ChildItem</code> cmdlet, but we could use any objects.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>In the code samples be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Getting The Objects to Work With</h2>
<p>As stated in the Introduction, we will use the objects returned by the <code>Get-ChildItem</code> cmdlet to add a new property and method to. We'll set our location (in my case to the folder where these samples are stored), call the <code>Get-ChildItem</code> cmdlet and store the result in a variable, <code>$items</code>.</p>
<pre><code class="language-powershell">Set-Location C:\Users\arcan\OneDrive\BlogPosts\Markdown
$items = Get-ChildItem
</code></pre>
<p>Let's look a the first item in the <code>$items</code> collection to see what its datatype is.</p>
<pre><code class="language-powershell">$items[0].GetType()
</code></pre>
<p>Result:</p>
<pre><code>IsPublic IsSerial Name     BaseType
-------- -------- ----     --------
True     False    FileInfo System.IO.FileSystemInfo
</code></pre>
<p>As you can see, each item is of type <code>FileInfo</code>. Each object contains information about the corresponding file it represents. You can find a full list of properties and methods for the <code>FileInfo</code> class in the online <a href="https://docs.microsoft.com/en-us/dotnet/api/system.io.fileinfo?view=net-6.0">Microsoft Documentation for FileInfo</a>.</p>
<h2>Coding Our New Method</h2>
<p>For this example, we are going to iterate over our collection of <code>FileInfo</code> objects. To each one, we'll be adding one property and one method. The property will just be a number that can be used to uniquely identify each object. We'll look more at that momentarily.</p>
<p>The method we'll add will analyze the existing <code>Extension</code> property of the <code>FileInfo</code> object. As I'm sure you know, the extension is the data that occurs after the period in the file name, and is used to identify the type  of file it is.</p>
<p>Here is the script block for this method.</p>
<pre><code class="language-powershell"># Define the custom script property
$script = {

  switch ($this.Extension)
  {
    '.cs'   {$retValue = 'C#'}
    '.md'   {$retValue = 'Markdown'}
    '.ps1'  {$retValue = 'Script'}
    '.psd1' {$retValue = 'Module Definition'}
    '.psm1' {$retValue = 'Module'}
    '.xml'  {$retValue = 'XML File'}
    '.pptx' {$retValue = 'PowerPoint'}
    '.csv'  {$retValue = 'Comma Separated Values file'}
    '.json' {$retValue = 'JavaScript Object Notation data'}
    default {$retValue = 'Sorry dude, no clue.'}
  }

  return $retValue
}
</code></pre>
<p>Within the <code>switch</code> statement, I use <code>$this</code> to access the current object. It then access the <code>Extension</code> property of the current object.</p>
<p>It then goes down the list, comparing the extension value to the text to the left of the squiggly brace. If it finds a match, it will run the code inside the script block. This simply sets a return value variable to a more human friendly text representation of the file type.</p>
<p>If no match is found, it runs the code by the <code>default</code> value. For more in the switch statement, see my post <a href="https://arcanecode.com/2021/08/09/fun-with-powershell-logic-branching/">Fun With PowerShell Logic Branching</a>.</p>
<h2>Adding The Property and Method to the FileInfo Object</h2>
<p>Now that our script is defined, it's time to add it as well as a property to our <code>FileInfo</code> objects. Let's see the code, then we'll break it down.</p>
<pre><code class="language-powershell"># Create an item count variable
$itemCount = 0

# Iterate over each DirectoryInfo object in the $items collection
foreach($item in $items)
{
  # Add a note property, setting it to the current item counter
  $itemCount++
  $item | Add-Member –MemberType NoteProperty `
                     –Name ItemNumber `
                     –Value $itemCount

  # Add script property to the individual file object
  Add-Member -InputObject $item `
             -MemberType ScriptMethod `
             -Name 'ScriptType' `
             -Value $script

  # Now display the already existing Name property along with the
  # property and method we just added.
  &quot;$($item.ItemNumber): $($item.Name) = $($item.ScriptType())&quot;
}
</code></pre>
<p>We begin by creating a variable, <code>$itemCount</code>. Within the <code>foreach</code> loop we'll increment it, then use it as our index for the <code>ItemNumber</code> property.</p>
<p>The <code>foreach</code> loop is entered, where we iterate over the collection of <code>FileInfo</code> objects stored in <code>$items</code>. Each time through the loop, the current item is copied into the <code>$item</code> variable. For more info on <code>foreach</code>, see my post <a href="https://arcanecode.com/2021/08/23/fun-with-powershell-loops/">Fun With PowerShell Loops</a>.</p>
<p>The next line is straightforward, we simply increment the <code>$itemCount</code> by one.</p>
<p>You've seen the <code>Add-Member</code> cmdlet used in recent posts on adding properties and methods to a <code>PSCustomObject</code>, so I won't delve deep into it here.</p>
<p>The first call to <code>Add-Member</code> takes the current <code>FileInfo</code> object, stored in <code>$item</code>, and adds a new property we'll name <code>ItemNumber</code>. When we add it, we'll go ahead and assign the value in <code>$itemCount</code>. Note that this property could be updated at a future time, although we won't need to for this example.</p>
<p>We then call <code>Add-Member</code> a second time, adding in the script you saw earlier and naming it <code>ScriptType</code>.</p>
<p>Finally, we use string interpolation to build a nicely formatted string with the item number, the name of the file (a native property of the <code>FileInfo</code> object), and finally we call the method we just added <code>ScriptType</code>.</p>
<p>Here is the final output of our effort.</p>
<p>Result:</p>
<pre><code>1: blog-template.md = Markdown
2: fun-with-powershell-classes-the-basics.md = Markdown
3: fun-with-powershell-classes-the-basics.ps1 = Script
4: fun-with-powershell-enum-flags-header.png = Sorry dude, no clue.
5: Fun-With-PowerShell-Enum-Flags.md = Markdown
6: Fun-With-PowerShell-Enums.md = Markdown
7: Fun-With-PowerShell-Objects-Part 1.md = Markdown
8: Fun-With-PowerShell-Objects-Part 1.ps1 = Script
9: Fun-With-PowerShell-Objects-Part 2.md = Markdown
10: Fun-With-PowerShell-Objects-Part 2.ps1 = Script
11: Fun-With-PowerShell-Objects-Part 3.cs = C#
12: Fun-With-PowerShell-Objects-Part 3.md = Markdown
13: Fun-With-PowerShell-Objects-Part 3.ps1 = Script
14: Fun-With-PowerShell-Objects-Part 4.md = Markdown
15: Fun-With-PowerShell-Objects-Part 4.ps1 = Script
16: fun-with-powershell-objects-part-1.png = Sorry dude, no clue.
17: Fun-With-PowerShell-Providers.md = Markdown
18: Fun-With-PowerShell-Write-Debug.md = Markdown
19: Fun-With-PowerShell-Write-Verbose-and-Write-Debug.md = Markdown
20: Fun-With-VSCode-Code-Snippets.md = Markdown
21: IMG_0965.JPG = Sorry dude, no clue.
22: more-fun-with-powershell-enums-header.png = Sorry dude, no clue.
23: More-Fun-With-PowerShell-Enums.md = Markdown
24: More-Fun-With-PowerShell-Enums.ps1 = Script
25: security-for-apartment-dwellers-01.png = Sorry dude, no clue.
26: Security-for-Apartment-Dwellers-header.png = Sorry dude, no clue.
27: Security-for-Apartment-Dwellers.md = Markdown
</code></pre>
<p>I author these blog posts in markdown within VSCode first, prior to copying them into my WordPress based blog. This folder contains a markdown file for each post, most of which have one or more accompanying code files associated with it.</p>
<p>I deliberately omitted the image type extensions (.jpg, .png) from the switch statement so you could see the default option being taken.</p>
<h2>Persistance</h2>
<p>There is an important fact you need to recall when using this technique. The new property and method only exist for the set of <code>FileInfo</code> objects contained in our <code>$items</code> collection. If I were to get another collection, perhaps using <code>$moreItems = Get-ChildItem</code>, the <code>FileInfo</code> objects stored in <code>$moreItems</code> will <strong>NOT</strong> have our <code>ItemNumber</code> and <code>ScriptType</code> in them.</p>
<p>You will have to explicitly add custom properties and methods to objects each time you need them.</p>
<h2>Conclusion</h2>
<p>As you can see, this technique offers many possibilities. You could define a script block at the top of your script that does a complex calculation, or perhaps formats data for easier reading by the end user. Then you simply add this script block to the objects you generate.</p>
<p>This makes your code much more readable. The complex part is at the top where we define the script block, out of the way of your loops.</p>
<p>It can also promote code reuse. You can create a separate script with many script blocks that you commonly use. You call that script from the one you are currently developing, and you instantly have a set of new properties and methods that can be added to the set of objects you are working with.</p>
<p>This method provides for extensibility with objects you did not author, or have the source code for. Perhaps you have a compiled PowerShell module that came from a vendor, but it lacks that one method that would, for your unique situation, make it much easier to work with. You can now code that method for yourself and use it.</p>
<p>As time goes on I'm sure you'll find many situations you can use these techniques to solve problems.</p>
<p>In the next three installments of this series we'll return to the PowerShell <em>class</em> type. We'll look at some of the advanced abilities that it offers.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4325</wp:post_id>
  <wp:post_date>2022-01-31 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-31 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 16:53:57</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 22:53:57</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-modifying-existing-objects</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="get-childitem"><![CDATA[Get-ChildItem]]></category>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4326]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68392132310]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1643641203]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1488165190814375944";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_385107956753456";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167068</wp:comment_id>
    <wp:comment_author><![CDATA[Modifying Existing Objects with Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/02/03/modifying-existing-objects-with-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-02-03 07:06:24</wp:comment_date>
    <wp:comment_date_gmt>2022-02-03 13:06:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain dives a bit further into objects in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643893584.669101;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1643898812.408272;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Classes - Static Properties and Methods]]></title>
  <link>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/</link>
  <pubDate>Mon, 07 Feb 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4330</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nOver the last few articles we've been covering PowerShell objects. The first article in the series, [Fun With PowerShell Classes - The Basics](https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/), covered the basics of using of the PowerShell class construct introduced in PowerShell version 5.\n\nIf you've not read it I'd suggest you do so now as we'll be building on it in this article, as well as in the next two, as we explore the advanced capabilities of PowerShell classes. In this post we'll cover the concept of _static_ properties and methods.\n\nLet me mention that for all of the examples we'll display the code, then under it the result of our code if applicable. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAt the end of the line in many code samples you may notice a backtick \\` character. This is PowerShell's _line continuation_ character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Starting Point\n\nJust as a refresher, here is the class we originally developed.\n\n``` powershell\nclass Twitterer\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n}\n```\n\nWe can create a new instance of the class by calling the static new method built into all PowerShell defined classes. Once created we can start assigning values to its properties.\n\n``` powershell\n$twit = [Twitterer]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterHandle\n```\n\nWith that reminder, let's start diving in to some advanced features offered by classes.\n\n## Static Properties\n\nIn a previous post on [creating PowerShell objects from C# code](http://), I introduced the concept of _static_ properties and methods. A static property or method is one that can be called without having to create a new instance of an object from the class.\n\nTo call a static method or property, use the name of the class in brackets, then two colons, then the name of the property or method you want to call. In fact, you've already done this in creating a new instance of a class when you used `[Twitterer]::new()`.\n\nIt's easy to create your own static properties and methods. Let's create a new version of our class, and name it `TwittererRedux`. (Redux is a fancy word meaning 'bring back'.) Then, we'll add a new static property to it.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n}\n```\n\nIn the properties area we add one new property, `Version`. At the front we added the keyword `static`. This, of course, is the indicator this property is available even without creating a new instance of the class.\n\nHaving a version number is a fairly common and useful thing to include in a class. Let's see it in use. First though, make sure you've executed the above class definition for `TwitterRedux` to make sure it is memory.\n\n``` powershell\n[TwittererRedux]::Version\n```\n\nResult:\n\n```\n2022.01.07.002\n```\n\nOther examples of things you might wish to manifest as static properties include the author name, contact information, copyright, or perhaps a link to documentation or github where your class is stored.\n\nLet's turn now to the creation of a static method.\n\n## Static Methods\n\nIn our original version of the class we have a method called `OpenTwitter`. This accessed the objects function `TwitterURL`, which returned the formatted Twitter URL for the users handle, stored in the objects `TwitterHandle` property. Finally it opened up the Twitter page in the default browser.\n\nIt could be useful to have a function that would do something similar, only without having to go to the effort of creating a class, then populating the `TwitterHandle` property just so we could call this function.\n\nWe'll do so by adding a new, static function to the class.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2021.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\nWe call the new method similar to the way we accessed our property, when we called the `new` method to create the class.\n\n``` powershell\n[TwittererRedux]::OpenTwitterPage('ArcaneCode')\n```\n\nIf your coding went well, your default browser should open to my Twitter page (or whosever you passed in).\n\n## Restrictions on Static Properties and Methods\n\nThere is one restriction when working with static properties and methods, but it is one you need to know about.\n\n\u0026gt; Static properties and methods must be self contained, and cannot reference other properties and methods of the class.\n\nThis makes sense if you think about it a moment. You are only accessing the class definition, i.e. the blue print. Normal properties and methods only exist once an object has been created from a class. While it makes sense, it isn't intuitively obvious so I wanted to point it out.\n\n## A Note on Defining Classes\n\nI just wanted to point out a little \u0022gotcha\u0022 when working with classes. Within a single PowerShell script (i.e. PS1 file) you can only define a class once. Normally this is not a big issue.\n\nHowever, if you are developing a class it's possible you might want multiple versions of it. For example, at the top of the script you might want your original version.\n\nUnder it you might want basically the same code, but you've added a new method, or perhaps changed the code to an existing method. You want to do this for testing, so you can compare one version versus the other.\n\nPowerShell, or more precisely VSCode or the PowerShell IDE, will generate an error for the second, third, or more versions in your code warning you it has already been defined.\n\nThe fix is pretty simple, you could just comment out all but one of the class definitions, leaving the one you are working with uncommented. Alternatively, you could just create multiple PS1 files and work with different versions in each. VSCode is especially nice for this as it lets you have your PS1 files side by side.\n\n## Conclusion\n\nStatic properties and methods are not difficult to implement, and can be quite useful. As you create your classes, think about situations where they may benefit from a static property or method.\n\nIn the next installment of this series we'll continue our examination of the PowerShell _class_ type by diving into _overloads_.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>Over the last few articles we've been covering PowerShell objects. The first article in the series, <a href="https://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/">Fun With PowerShell Classes - The Basics</a>, covered the basics of using of the PowerShell class construct introduced in PowerShell version 5.</p>
<p>If you've not read it I'd suggest you do so now as we'll be building on it in this article, as well as in the next two, as we explore the advanced capabilities of PowerShell classes. In this post we'll cover the concept of <em>static</em> properties and methods.</p>
<p>Let me mention that for all of the examples we'll display the code, then under it the result of our code if applicable. In this article I'll be using PowerShell Core, 7.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>At the end of the line in many code samples you may notice a backtick ` character. This is PowerShell's <em>line continuation</em> character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Starting Point</h2>
<p>Just as a refresher, here is the class we originally developed.</p>
<pre><code class="language-powershell">class Twitterer
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

}
</code></pre>
<p>We can create a new instance of the class by calling the static new method built into all PowerShell defined classes. Once created we can start assigning values to its properties.</p>
<pre><code class="language-powershell">$twit = [Twitterer]::new()
$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterHandle
</code></pre>
<p>With that reminder, let's start diving in to some advanced features offered by classes.</p>
<h2>Static Properties</h2>
<p>In a previous post on <a href="http://">creating PowerShell objects from C# code</a>, I introduced the concept of <em>static</em> properties and methods. A static property or method is one that can be called without having to create a new instance of an object from the class.</p>
<p>To call a static method or property, use the name of the class in brackets, then two colons, then the name of the property or method you want to call. In fact, you've already done this in creating a new instance of a class when you used <code>[Twitterer]::new()</code>.</p>
<p>It's easy to create your own static properties and methods. Let's create a new version of our class, and name it <code>TwittererRedux</code>. (Redux is a fancy word meaning 'bring back'.) Then, we'll add a new static property to it.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

}
</code></pre>
<p>In the properties area we add one new property, <code>Version</code>. At the front we added the keyword <code>static</code>. This, of course, is the indicator this property is available even without creating a new instance of the class.</p>
<p>Having a version number is a fairly common and useful thing to include in a class. Let's see it in use. First though, make sure you've executed the above class definition for <code>TwitterRedux</code> to make sure it is memory.</p>
<pre><code class="language-powershell">[TwittererRedux]::Version
</code></pre>
<p>Result:</p>
<pre><code>2022.01.07.002
</code></pre>
<p>Other examples of things you might wish to manifest as static properties include the author name, contact information, copyright, or perhaps a link to documentation or github where your class is stored.</p>
<p>Let's turn now to the creation of a static method.</p>
<h2>Static Methods</h2>
<p>In our original version of the class we have a method called <code>OpenTwitter</code>. This accessed the objects function <code>TwitterURL</code>, which returned the formatted Twitter URL for the users handle, stored in the objects <code>TwitterHandle</code> property. Finally it opened up the Twitter page in the default browser.</p>
<p>It could be useful to have a function that would do something similar, only without having to go to the effort of creating a class, then populating the <code>TwitterHandle</code> property just so we could call this function.</p>
<p>We'll do so by adding a new, static function to the class.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2021.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<p>We call the new method similar to the way we accessed our property, when we called the <code>new</code> method to create the class.</p>
<pre><code class="language-powershell">[TwittererRedux]::OpenTwitterPage('ArcaneCode')
</code></pre>
<p>If your coding went well, your default browser should open to my Twitter page (or whosever you passed in).</p>
<h2>Restrictions on Static Properties and Methods</h2>
<p>There is one restriction when working with static properties and methods, but it is one you need to know about.</p>
<p>&gt; Static properties and methods must be self contained, and cannot reference other properties and methods of the class.</p>
<p>This makes sense if you think about it a moment. You are only accessing the class definition, i.e. the blue print. Normal properties and methods only exist once an object has been created from a class. While it makes sense, it isn't intuitively obvious so I wanted to point it out.</p>
<h2>A Note on Defining Classes</h2>
<p>I just wanted to point out a little &quot;gotcha&quot; when working with classes. Within a single PowerShell script (i.e. PS1 file) you can only define a class once. Normally this is not a big issue.</p>
<p>However, if you are developing a class it's possible you might want multiple versions of it. For example, at the top of the script you might want your original version.</p>
<p>Under it you might want basically the same code, but you've added a new method, or perhaps changed the code to an existing method. You want to do this for testing, so you can compare one version versus the other.</p>
<p>PowerShell, or more precisely VSCode or the PowerShell IDE, will generate an error for the second, third, or more versions in your code warning you it has already been defined.</p>
<p>The fix is pretty simple, you could just comment out all but one of the class definitions, leaving the one you are working with uncommented. Alternatively, you could just create multiple PS1 files and work with different versions in each. VSCode is especially nice for this as it lets you have your PS1 files side by side.</p>
<h2>Conclusion</h2>
<p>Static properties and methods are not difficult to implement, and can be quite useful. As you create your classes, think about situations where they may benefit from a static property or method.</p>
<p>In the next installment of this series we'll continue our examination of the PowerShell <em>class</em> type by diving into <em>overloads</em>.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4330</wp:post_id>
  <wp:post_date>2022-02-07 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-02-07 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 16:11:09</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 22:11:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-static-properties-and-methods</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="class"><![CDATA[Class]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="static-method"><![CDATA[Static Method]]></category>
  <category domain="post_tag" nicename="static-property"><![CDATA[Static Property]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4332]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68678357121]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1644246021]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1490701979097739277";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_389269809670604";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167167</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Overloading &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.87.208</wp:comment_author_IP>
    <wp:comment_date>2022-02-14 09:00:04</wp:comment_date>
    <wp:comment_date_gmt>2022-02-14 15:00:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] is the next installment in our series of advanced techniques for PowerShell classes. In the previous installment we saw how to implement static properties and methods. In this one, we&#8217;ll see how to overload [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644850804.284993;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644855367.785154;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167243</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.114.41</wp:comment_author_IP>
    <wp:comment_date>2022-02-21 09:00:21</wp:comment_date>
    <wp:comment_date_gmt>2022-02-21 15:00:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645459376.454744;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645455622.13982;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Classes - Overloading]]></title>
  <link>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/</link>
  <pubDate>Mon, 14 Feb 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4336</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nThis is the next installment in our series of advanced techniques for PowerShell classes. In the [previous installment](https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/) we saw how to implement _static_ properties and methods. In this one, we'll see how to _overload_ your methods.\n\nWe'll take a deeper look at overloading in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, many of the code samples have lines which end in a backtick \\`, PowerShell's _line continuation_ character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nIn VSCode you can highlight snippet of code then press F8 to execute it. In the IDE, use F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Starting Point\n\nFor easy reference, here is our demo class as we left it at the end of the previous post.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\n## The Need to Overload a Method\n\nAbout half way into our class definition we have a method named `TwitterURL`. This function is pretty simple, it takes the value in the `TwitterHandle` property, composes the URL to the Twitter site for it, then returns it.\n\nHere is what it would look like in action.\n\n``` powershell\n$twit = [TwittererRedux]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterURL()\n```\n\nResult:\n\n```\nhttp://twitter.com/ArcaneCode\n```\n\nWhat if we had a lot of handles we wanted to get URLs for. It would be a two step process for each one, first assigning the handle to the `TwitterHandle` property, then calling the `TwitterURL` method.\n\n``` powershell\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'N4IXT'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'ArcaneTC'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'BuckWoodyMSFT'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'tradney'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'VKCsh'\n$twit.TwitterURL()\n$twit.TwitterHandle = 'TechTrainerTime'\n$twit.TwitterURL()\n```\n\nOf course these could all be put into an array, or read in from a file and run through a `foreach` loop, even so it still takes two calls to our `$twit` object. Wouldn't it be nice to set the TwitterHandle property and return the URL all in one method call?\n\nBut what to call the method? We could go with `SetHandleAndGetURL`, or perhaps `UpdateAndGetTwitter`, or even `HeyHeresAMethodToSetTheTwitterHandleAndGetTheURL`.\n\nBut in fact we already have a great name in TwitterURL. Its short and explains just what it does. It's too bad we can't use it more than once.\n\nOh wait, we can!\n\n## Implementing an Overloaded Method\n\nTo create an overload, create a new function within your class and use the same name. To differentiate, you need to have it accept a different number of parameters. Let's make this clearer by the example below.\n\n``` powershell\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n```\n\nAt the top is our original function. Below it is the overloaded version. In it I pass in a single parameter, the `$TwitterHandle`. PowerShell can use this to determine which version of the function to call. \n\nIf you execute the `TwitterURL` method with no parameters, the version of the function at the top is executed.\n\nWhen you call `TwitterURL` and pass in a parameter, the version of the function at the bottom gets run. In here I first access the `TwitterHandle` property of the current object (represented by `$this`) and update it from the parameter `$twitterHandle`.\n\nNext, I called the original function to get the properly formatted URL from the (newly updated) `TwitterHandle` property.\n\nI chose to do it this way to demonstrate it is possible to call the original version of a function  from its overloaded version. It's certainly not required though, as the code to format the URL could have been copied from the original function. The downside to this however is if I make a change to one area, I have to make it to both.\n\nAlso be aware that setting the `TwitterHandle` property may be considered a _side effect_ by some. It's not intuitively obvious this will happen, and some users may think this to be a bug. It's important then to make sure you document this thoroughly in your documentation.\n\nLet's see it in action. First, here is the complete class with the new overloaded function added.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Overloaded Function that returns a string\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\nAfter running this to get the updated class definition in memory let's call it both ways.\n\n``` powershell\n# Create a new instance\n$twit = [TwittererRedux]::new()\n\n# Assign the handle, then call TwitterURL\n$twit.TwitterHandle = 'ArcaneCode'\n$twit.TwitterURL()\n```\n\nResult:\n\n```\nhttps://twitter.com/ArcaneCode\n```\n\nNow let's call the overloaded version.\n\n``` powershell\n# Now call the overloaded version\n$twit.TwitterURL('N4IXT')\n```\n\nResult:\n\n```\nhttps://twitter.com/N4IXT\n```\n\nWe can also check the `TwitterHandle` property to ensure it has been updated.\n\n``` powershell\n$twit.TwitterHandle\n```\n\nResult:\n\n```\nN4IXT\n```\n\nWe could have added additional overloads with more parameters. We could have defined `[string] TwitterURL($twitterHandle, $anotherParameter)`, for example.\n\n## Other Ways to Differentiate an Overload\n\nIn the previous section I stated PowerShell differentiates overloads by the number of parameters passed into our function. There is one other way PowerShell can differentiate, and that is by the _data type_ of each parameter. Let's look at this simple example.\n\n``` powershell\nclass over\n{\n  [string] hello()\n    { return 'hello world' }\n\n  [string] hello([string] $name)\n    { return \u0022hello string of $name\u0022}\n\n  [string] hello([int] $number)\n    { return \u0022hello integer of $number\u0022}\n}\n```\n\nAs you can see, my class has three overloads. In the second two, we pass in a single parameter. What makes them different though is the data type for the parameter. In the first we use a string, the second an integer. To be accurate then, we need to say PowerShell can tell which overload to call by the number of parameters **and** the data type of each.\n\nAs should be obvious, you will need to strongly type all of your parameters for this to work, but when it comes to classes that's not a bad idea anyway.\n\nJust as proof, let's see these working.\n\n``` powershell\n$o = [over]::new()\n$o.hello()\n$o.hello('mom')\n$o.hello(33)\n```\n\nResult:\n\n```\nhello world\nhello string of mom\nhello integer of 33\n```\n\nYou can also mix and match, with multiple data types and parameters. For example...\n\n``` powershell\nhello([string] $name, [int] $number)\nhello([int] $number,  [string] $name)\n```\n\nBoth of these are both valid. Just to reiterate, what you could **not** do is:\n\n``` powershell\nhello([string] $nameA, [int] $number)\nhello([string] $nameB, [int] $anotherNumber)\n```\n\nPowerShell can't make the distinction between the two, as they have the same number of parameters _and_ data types in the same order.\n\n## Conclusion\n\nOverloads can be very useful when working with classes. They allow you to continue to use method names you are familiar with yet alter them to meet your changing needs.\n\nIn our next installment we'll cover the topic of class _constructors_, a way to populate properties when you instantiate your new object from the class definition.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>This is the next installment in our series of advanced techniques for PowerShell classes. In the <a href="https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/">previous installment</a> we saw how to implement <em>static</em> properties and methods. In this one, we'll see how to <em>overload</em> your methods.</p>
<p>We'll take a deeper look at overloading in a moment, but first let me mention that for all of the examples we'll display the code, then under it the result of our code when applicable. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, many of the code samples have lines which end in a backtick `, PowerShell's <em>line continuation</em> character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>In VSCode you can highlight snippet of code then press F8 to execute it. In the IDE, use F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Starting Point</h2>
<p>For easy reference, here is our demo class as we left it at the end of the previous post.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<h2>The Need to Overload a Method</h2>
<p>About half way into our class definition we have a method named <code>TwitterURL</code>. This function is pretty simple, it takes the value in the <code>TwitterHandle</code> property, composes the URL to the Twitter site for it, then returns it.</p>
<p>Here is what it would look like in action.</p>
<pre><code class="language-powershell">$twit = [TwittererRedux]::new()
$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterURL()
</code></pre>
<p>Result:</p>
<pre><code>http://twitter.com/ArcaneCode
</code></pre>
<p>What if we had a lot of handles we wanted to get URLs for. It would be a two step process for each one, first assigning the handle to the <code>TwitterHandle</code> property, then calling the <code>TwitterURL</code> method.</p>
<pre><code class="language-powershell">$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterURL()
$twit.TwitterHandle = 'N4IXT'
$twit.TwitterURL()
$twit.TwitterHandle = 'ArcaneTC'
$twit.TwitterURL()
$twit.TwitterHandle = 'BuckWoodyMSFT'
$twit.TwitterURL()
$twit.TwitterHandle = 'tradney'
$twit.TwitterURL()
$twit.TwitterHandle = 'VKCsh'
$twit.TwitterURL()
$twit.TwitterHandle = 'TechTrainerTime'
$twit.TwitterURL()
</code></pre>
<p>Of course these could all be put into an array, or read in from a file and run through a <code>foreach</code> loop, even so it still takes two calls to our <code>$twit</code> object. Wouldn't it be nice to set the TwitterHandle property and return the URL all in one method call?</p>
<p>But what to call the method? We could go with <code>SetHandleAndGetURL</code>, or perhaps <code>UpdateAndGetTwitter</code>, or even <code>HeyHeresAMethodToSetTheTwitterHandleAndGetTheURL</code>.</p>
<p>But in fact we already have a great name in TwitterURL. Its short and explains just what it does. It's too bad we can't use it more than once.</p>
<p>Oh wait, we can!</p>
<h2>Implementing an Overloaded Method</h2>
<p>To create an overload, create a new function within your class and use the same name. To differentiate, you need to have it accept a different number of parameters. Let's make this clearer by the example below.</p>
<pre><code class="language-powershell">  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }
</code></pre>
<p>At the top is our original function. Below it is the overloaded version. In it I pass in a single parameter, the <code>$TwitterHandle</code>. PowerShell can use this to determine which version of the function to call.</p>
<p>If you execute the <code>TwitterURL</code> method with no parameters, the version of the function at the top is executed.</p>
<p>When you call <code>TwitterURL</code> and pass in a parameter, the version of the function at the bottom gets run. In here I first access the <code>TwitterHandle</code> property of the current object (represented by <code>$this</code>) and update it from the parameter <code>$twitterHandle</code>.</p>
<p>Next, I called the original function to get the properly formatted URL from the (newly updated) <code>TwitterHandle</code> property.</p>
<p>I chose to do it this way to demonstrate it is possible to call the original version of a function  from its overloaded version. It's certainly not required though, as the code to format the URL could have been copied from the original function. The downside to this however is if I make a change to one area, I have to make it to both.</p>
<p>Also be aware that setting the <code>TwitterHandle</code> property may be considered a <em>side effect</em> by some. It's not intuitively obvious this will happen, and some users may think this to be a bug. It's important then to make sure you document this thoroughly in your documentation.</p>
<p>Let's see it in action. First, here is the complete class with the new overloaded function added.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Overloaded Function that returns a string
  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<p>After running this to get the updated class definition in memory let's call it both ways.</p>
<pre><code class="language-powershell"># Create a new instance
$twit = [TwittererRedux]::new()

# Assign the handle, then call TwitterURL
$twit.TwitterHandle = 'ArcaneCode'
$twit.TwitterURL()
</code></pre>
<p>Result:</p>
<pre><code>https://twitter.com/ArcaneCode
</code></pre>
<p>Now let's call the overloaded version.</p>
<pre><code class="language-powershell"># Now call the overloaded version
$twit.TwitterURL('N4IXT')
</code></pre>
<p>Result:</p>
<pre><code>https://twitter.com/N4IXT
</code></pre>
<p>We can also check the <code>TwitterHandle</code> property to ensure it has been updated.</p>
<pre><code class="language-powershell">$twit.TwitterHandle
</code></pre>
<p>Result:</p>
<pre><code>N4IXT
</code></pre>
<p>We could have added additional overloads with more parameters. We could have defined <code>[string] TwitterURL($twitterHandle, $anotherParameter)</code>, for example.</p>
<h2>Other Ways to Differentiate an Overload</h2>
<p>In the previous section I stated PowerShell differentiates overloads by the number of parameters passed into our function. There is one other way PowerShell can differentiate, and that is by the <em>data type</em> of each parameter. Let's look at this simple example.</p>
<pre><code class="language-powershell">class over
{
  [string] hello()
    { return 'hello world' }

  [string] hello([string] $name)
    { return &quot;hello string of $name&quot;}

  [string] hello([int] $number)
    { return &quot;hello integer of $number&quot;}
}
</code></pre>
<p>As you can see, my class has three overloads. In the second two, we pass in a single parameter. What makes them different though is the data type for the parameter. In the first we use a string, the second an integer. To be accurate then, we need to say PowerShell can tell which overload to call by the number of parameters <strong>and</strong> the data type of each.</p>
<p>As should be obvious, you will need to strongly type all of your parameters for this to work, but when it comes to classes that's not a bad idea anyway.</p>
<p>Just as proof, let's see these working.</p>
<pre><code class="language-powershell">$o = [over]::new()
$o.hello()
$o.hello('mom')
$o.hello(33)
</code></pre>
<p>Result:</p>
<pre><code>hello world
hello string of mom
hello integer of 33
</code></pre>
<p>You can also mix and match, with multiple data types and parameters. For example...</p>
<pre><code class="language-powershell">hello([string] $name, [int] $number)
hello([int] $number,  [string] $name)
</code></pre>
<p>Both of these are both valid. Just to reiterate, what you could <strong>not</strong> do is:</p>
<pre><code class="language-powershell">hello([string] $nameA, [int] $number)
hello([string] $nameB, [int] $anotherNumber)
</code></pre>
<p>PowerShell can't make the distinction between the two, as they have the same number of parameters <em>and</em> data types in the same order.</p>
<h2>Conclusion</h2>
<p>Overloads can be very useful when working with classes. They allow you to continue to use method names you are familiar with yet alter them to meet your changing needs.</p>
<p>In our next installment we'll cover the topic of class <em>constructors</em>, a way to populate properties when you instantiate your new object from the class definition.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4336</wp:post_id>
  <wp:post_date>2022-02-14 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-02-14 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 17:40:47</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 23:40:47</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-overloading</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="classes"><![CDATA[Classes]]></category>
  <category domain="post_tag" nicename="overloading"><![CDATA[Overloading]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0bfcfea2e526082524007e688ed76255</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><a class="twitter-timeline" data-width="500" data-height="750" data-dnt="true" href="https://twitter.com/N4IXT?ref_src=twsrc%5Etfw">Tweets by N4IXT</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_0bfcfea2e526082524007e688ed76255</wp:meta_key>
    <wp:meta_value><![CDATA[1641943874]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4338]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7c413786b28bde31d098c0332036eb2e</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><a class="twitter-timeline" data-width="474" data-height="711" data-dnt="true" href="https://twitter.com/N4IXT?ref_src=twsrc%5Etfw">Tweets by N4IXT</a><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_7c413786b28bde31d098c0332036eb2e</wp:meta_key>
    <wp:meta_value><![CDATA[1641943935]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1493238611311009792";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_393453675918884";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[68985682647]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1644850802]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167181</wp:comment_id>
    <wp:comment_author><![CDATA[Overloading Methods in Powershell &#8211; Curated SQL]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://curatedsql.com/2022/02/15/overloading-methods-in-powershell/</wp:comment_author_url>
    <wp:comment_author_IP>172.241.24.147</wp:comment_author_IP>
    <wp:comment_date>2022-02-15 07:00:29</wp:comment_date>
    <wp:comment_date_gmt>2022-02-15 13:00:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Robert Cain continues a series on classes in Powershell: [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644935356.655802;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644930029.804596;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167238</wp:comment_id>
    <wp:comment_author><![CDATA[Die KW 07/2022 im Link-Rückblick | artodeto's blog about coding, politics and the world]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://artodeto.bazzline.net/archives/19860-Die-KW-072022-im-Link-Rueckblick.html</wp:comment_author_url>
    <wp:comment_author_IP>185.26.156.242</wp:comment_author_IP>
    <wp:comment_date>2022-02-20 16:10:47</wp:comment_date>
    <wp:comment_date_gmt>2022-02-20 22:10:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Hier wird euch Overloading in der PowerShell erklärt. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645395047.992617;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645400127.682784;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167169</wp:comment_id>
    <wp:comment_author><![CDATA[krismalygmailcom]]></wp:comment_author>
    <wp:comment_author_email>kris.maly@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>209.85.208.48</wp:comment_author_IP>
    <wp:comment_date>2022-02-14 09:09:52</wp:comment_date>
    <wp:comment_date_gmt>2022-02-14 15:09:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for educating the community and appreciate your volunteering. 

Thanks Kris]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>207301889</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1644851392.167035;s:5:"event";s:9:"check-ham";s:4:"user";s:16:"krismalygmailcom";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>comment_by_email_id</wp:meta_key>
      <wp:meta_value><![CDATA[8718788]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1644855368.07595;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167244</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell Classes &#8211; Constructors &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.114.41</wp:comment_author_IP>
    <wp:comment_date>2022-02-21 09:00:24</wp:comment_date>
    <wp:comment_date_gmt>2022-02-21 15:00:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In our previous two posts, we covered the use of static properties and methods in classes, then saw how to use method overloading. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645455625.360108;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1645459376.64934;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell Classes - Constructors]]></title>
  <link>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/</link>
  <pubDate>Mon, 21 Feb 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4342</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn our previous two posts, we covered the use of [static properties and methods in classes](https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/), then saw how to use [method overloading](https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/).\n\nThis is our final post of the series, and will cover the use of _constructors_. Constructors are functions that execute automatically when a class is instantiated.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nYou may notice a backtick \\` character at the end of many lines in the code samples. This is PowerShell's _line continuation_ character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. I have a section dedicated to the line continuation character in my post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) if you want to learn more.\n\nTo run a snippet of code highlight the lines (or parts of a line) you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Starting Point\n\nAs a reminder, this is our demo class `TwittererRedux` as we left it at the end of the last post. We'll start from it in this post.\n\n``` powershell\nclass TwittererRedux\n{\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Overloaded Function that returns a string\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n\n# Create a new instance and update the handle\n$twit = [TwittererRedux]::new()\n$twit.TwitterHandle = 'ArcaneCode'\n\n```\n\n## Constructors\n\nIn the original version of our class, we created a new instance of the class by calling the `::new()` static method. Then, we assigned a value to our `TwitterHandle` property. Wouldn't it have been nice to do it all in one step?\n\nWell that is possible through the use of a _constructor_. A constructor is a function that gets run automatically when the object is instantiated, as part of the `::new()` static method. Every class gets a constructor automatically, it's just empty.\n\nBelow is an example of our class with a constructor. For brevity I'm omitting most of the class code, and will reproduce the full class sample at the end of this post.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # ... rest of class goes here\n```\n\nA constructor is a function, with the exact same name as the class. As you can see in the sample above, `TwitterRedux` is both the name of the class, as well as of the function.\n\nIn this case the function is empty, it doesn't do anything, which is what the behavior of the default constructor should be.\n\nHaving constructors allows us to create more compact code. For example, in previous examples we create a new instance of our class, then assign a handle to the TwitterHandle property on the next line. Using a constructor we can provide the ability to compress our code, creating a new instance and assigning the `TwitterHandle` value all in one step.\n\nTo do so, we need to create another function with the same name as our class, TwittererRedux.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Constructor passing in Twitter Handle\n  TwittererRedux ([string]$TwitterHandle)\n  {\n    $this.TwitterHandle = $TwitterHandle\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # ... rest of class goes here\n```\n\nThis technique uses overloading, as discussed in [a previous post](http://). Here we have added a single parameter, `$TwitterHandle`. Within the function we take the value passed in and assign it to the `TwitterHandle` property for the current instance, represented by `$this`.\n\nBefore I go on, I need to mention an important rule. **When you override a constructor, you must manually add the _default constructor_!** You can see that was done in the above sample.\n\nSo how do we use it? Pretty simple actually, when we instantiate our object by using `new`, we pass in the value.\n\n``` powershell\n# Create a new instance using an overloaded constructor\n$twit = [TwittererRedux]::new('ArcaneCode')\n\n# Display the result\n$twit.TwitterHandle\n```\n\nResult:\n\n```\nArcaneCode\n```\n\nHere when we called `new`, instead of leaving the parameter area empty we passed in a single string value. PowerShell then followed the rules of overloading as seen in the [previous post](https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/). It looked over the set of constructors and found one that had a single parameter of type string and executed the code associated with it.\n\nLet's further expand by adding another constructor so we can assign both the handle and the name when we instantiate a new object from our class.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Constructor passing in Twitter Handle\n  TwittererRedux ([string]$TwitterHandle)\n  {\n    $this.TwitterHandle = $TwitterHandle\n  }\n\n  # Constructor passing in Twitter Handle and Name\n  TwittererRedux ([string]$TwitterHandle, [string]$Name)\n  {\n    $this.TwitterHandle = $TwitterHandle\n    $this.Name = $Name\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # ... rest of class goes here\n```\n\nIn our second constructor we have two string parameters, which will be assigned to the handle and name properties of the current object.\n\n``` powershell\n$twit = [TwittererRedux]::new('ArcaneCode', 'Mr. Code')\n$twit.TwitterHandle\n$twit.Name\n```\n\nResult:\n\n```\nArcaneCode\nMr. Code\n```\n\n## The Final Version\n\nAs promised, here is the final version of our TwitterRedux class.\n\n``` powershell\nclass TwittererRedux\n{\n  # Default Constructor\n  TwittererRedux ()\n  {\n  }\n\n  # Constructor passing in Twitter Handle\n  TwittererRedux ([string]$TwitterHandle)\n  {\n    $this.TwitterHandle = $TwitterHandle\n  }\n\n  # Constructor passing in Twitter Handle and Name\n  TwittererRedux ([string]$TwitterHandle, [string]$Name)\n  {\n    $this.TwitterHandle = $TwitterHandle\n    $this.Name = $Name\n  }\n\n  # Create a property\n  [string]$TwitterHandle\n\n  # Create a property and set a default value\n  [string]$Name = 'Robert C. Cain'\n\n  # Static Properties\n  static [string] $Version = '2022.01.07.002'\n\n  # Function that returns a string\n  [string] TwitterURL()\n  {\n    $url = \u0022https://twitter.com/$($this.TwitterHandle)\u0022\n    return $url\n  }\n\n  # Overloaded Function that returns a string\n  [string] TwitterURL($twitterHandle)\n  {\n    $this.TwitterHandle = $twitterHandle\n    $url = $this.TwitterURL()\n    return $url\n  }\n\n  # Function that has no return value\n  [void] OpenTwitter()\n  {\n    Start-Process $this.TwitterURL()\n  }\n\n  # Can launch a twitter page without instantiating the class\n  static [void] OpenTwitterPage([string] $TwitterHandle)\n  {\n    # Note here we cannot call the $this.TwitterUrl function\n    # because no object exists (hence no $this)\n    $url = \u0022http://twitter.com/$($TwitterHandle)\u0022\n    Start-Process $url\n  }\n\n}\n```\n\n## Constructors vs Overloading\n\nConstructors are very similar to overloading a function, but not exactly the same.\n\nJust like overloading, each constructor declaration must be different in terms of the number of parameters and their data types.\n\nUnlike overloads, you have access to the properties and methods of the object. This is what let us assign values to our properties when we created the new instance of the object.\n\n## Conclusion\n\nConstructors can aid in making our code more compact, and allowing us to assign values when we instantiate new objects. Be cautious though, it can be tempting to make far more constructors than you need. Ensure that your constructors cover only the most common situations, otherwise you'll have a confusing mess that you have to document and maintain.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In our previous two posts, we covered the use of <a href="https://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/">static properties and methods in classes</a>, then saw how to use <a href="https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/">method overloading</a>.</p>
<p>This is our final post of the series, and will cover the use of <em>constructors</em>. Constructors are functions that execute automatically when a class is instantiated.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.1, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>You may notice a backtick ` character at the end of many lines in the code samples. This is PowerShell's <em>line continuation</em> character. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. I have a section dedicated to the line continuation character in my post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> if you want to learn more.</p>
<p>To run a snippet of code highlight the lines (or parts of a line) you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Starting Point</h2>
<p>As a reminder, this is our demo class <code>TwittererRedux</code> as we left it at the end of the last post. We'll start from it in this post.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Overloaded Function that returns a string
  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}

# Create a new instance and update the handle
$twit = [TwittererRedux]::new()
$twit.TwitterHandle = 'ArcaneCode'

</code></pre>
<h2>Constructors</h2>
<p>In the original version of our class, we created a new instance of the class by calling the <code>::new()</code> static method. Then, we assigned a value to our <code>TwitterHandle</code> property. Wouldn't it have been nice to do it all in one step?</p>
<p>Well that is possible through the use of a <em>constructor</em>. A constructor is a function that gets run automatically when the object is instantiated, as part of the <code>::new()</code> static method. Every class gets a constructor automatically, it's just empty.</p>
<p>Below is an example of our class with a constructor. For brevity I'm omitting most of the class code, and will reproduce the full class sample at the end of this post.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Create a property
  [string]$TwitterHandle

  # ... rest of class goes here
</code></pre>
<p>A constructor is a function, with the exact same name as the class. As you can see in the sample above, <code>TwitterRedux</code> is both the name of the class, as well as of the function.</p>
<p>In this case the function is empty, it doesn't do anything, which is what the behavior of the default constructor should be.</p>
<p>Having constructors allows us to create more compact code. For example, in previous examples we create a new instance of our class, then assign a handle to the TwitterHandle property on the next line. Using a constructor we can provide the ability to compress our code, creating a new instance and assigning the <code>TwitterHandle</code> value all in one step.</p>
<p>To do so, we need to create another function with the same name as our class, TwittererRedux.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Constructor passing in Twitter Handle
  TwittererRedux ([string]$TwitterHandle)
  {
    $this.TwitterHandle = $TwitterHandle
  }

  # Create a property
  [string]$TwitterHandle

  # ... rest of class goes here
</code></pre>
<p>This technique uses overloading, as discussed in <a href="http://">a previous post</a>. Here we have added a single parameter, <code>$TwitterHandle</code>. Within the function we take the value passed in and assign it to the <code>TwitterHandle</code> property for the current instance, represented by <code>$this</code>.</p>
<p>Before I go on, I need to mention an important rule. <strong>When you override a constructor, you must manually add the <em>default constructor</em>!</strong> You can see that was done in the above sample.</p>
<p>So how do we use it? Pretty simple actually, when we instantiate our object by using <code>new</code>, we pass in the value.</p>
<pre><code class="language-powershell"># Create a new instance using an overloaded constructor
$twit = [TwittererRedux]::new('ArcaneCode')

# Display the result
$twit.TwitterHandle
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
</code></pre>
<p>Here when we called <code>new</code>, instead of leaving the parameter area empty we passed in a single string value. PowerShell then followed the rules of overloading as seen in the <a href="https://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/">previous post</a>. It looked over the set of constructors and found one that had a single parameter of type string and executed the code associated with it.</p>
<p>Let's further expand by adding another constructor so we can assign both the handle and the name when we instantiate a new object from our class.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Constructor passing in Twitter Handle
  TwittererRedux ([string]$TwitterHandle)
  {
    $this.TwitterHandle = $TwitterHandle
  }

  # Constructor passing in Twitter Handle and Name
  TwittererRedux ([string]$TwitterHandle, [string]$Name)
  {
    $this.TwitterHandle = $TwitterHandle
    $this.Name = $Name
  }

  # Create a property
  [string]$TwitterHandle

  # ... rest of class goes here
</code></pre>
<p>In our second constructor we have two string parameters, which will be assigned to the handle and name properties of the current object.</p>
<pre><code class="language-powershell">$twit = [TwittererRedux]::new('ArcaneCode', 'Mr. Code')
$twit.TwitterHandle
$twit.Name
</code></pre>
<p>Result:</p>
<pre><code>ArcaneCode
Mr. Code
</code></pre>
<h2>The Final Version</h2>
<p>As promised, here is the final version of our TwitterRedux class.</p>
<pre><code class="language-powershell">class TwittererRedux
{
  # Default Constructor
  TwittererRedux ()
  {
  }

  # Constructor passing in Twitter Handle
  TwittererRedux ([string]$TwitterHandle)
  {
    $this.TwitterHandle = $TwitterHandle
  }

  # Constructor passing in Twitter Handle and Name
  TwittererRedux ([string]$TwitterHandle, [string]$Name)
  {
    $this.TwitterHandle = $TwitterHandle
    $this.Name = $Name
  }

  # Create a property
  [string]$TwitterHandle

  # Create a property and set a default value
  [string]$Name = 'Robert C. Cain'

  # Static Properties
  static [string] $Version = '2022.01.07.002'

  # Function that returns a string
  [string] TwitterURL()
  {
    $url = &quot;https://twitter.com/$($this.TwitterHandle)&quot;
    return $url
  }

  # Overloaded Function that returns a string
  [string] TwitterURL($twitterHandle)
  {
    $this.TwitterHandle = $twitterHandle
    $url = $this.TwitterURL()
    return $url
  }

  # Function that has no return value
  [void] OpenTwitter()
  {
    Start-Process $this.TwitterURL()
  }

  # Can launch a twitter page without instantiating the class
  static [void] OpenTwitterPage([string] $TwitterHandle)
  {
    # Note here we cannot call the $this.TwitterUrl function
    # because no object exists (hence no $this)
    $url = &quot;http://twitter.com/$($TwitterHandle)&quot;
    Start-Process $url
  }

}
</code></pre>
<h2>Constructors vs Overloading</h2>
<p>Constructors are very similar to overloading a function, but not exactly the same.</p>
<p>Just like overloading, each constructor declaration must be different in terms of the number of parameters and their data types.</p>
<p>Unlike overloads, you have access to the properties and methods of the object. This is what let us assign values to our properties when we created the new instance of the object.</p>
<h2>Conclusion</h2>
<p>Constructors can aid in making our code more compact, and allowing us to assign values when we instantiate new objects. Be cautious though, it can be tempting to make far more constructors than you need. Ensure that your constructors cover only the most common situations, otherwise you'll have a confusing mess that you have to document and maintain.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4342</wp:post_id>
  <wp:post_date>2022-02-21 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-02-21 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 18:10:14</wp:post_modified>
  <wp:post_modified_gmt>2022-01-12 00:10:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-constructors</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="classes"><![CDATA[Classes]]></category>
  <category domain="post_tag" nicename="constructors"><![CDATA[Constructors]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4344]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[69289091099]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1645455619]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1495775396486213632";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_397694485494803";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[A New Year, A New Blog Layout]]></title>
  <link>http://arcanecode.com/2022/01/13/a-new-year-a-new-blog-layout/</link>
  <pubDate>Thu, 13 Jan 2022 15:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4390</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>After a few years I decided it was time to update the blog with a new layout. I liked the look of the previous one, but the three-column layout had some limitations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The center column, where the main content resided, did not give much space for code samples. It was wrapping many lines of code unnecessarily and made it harder to read.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This new format is trimmed down, cleaner, and feels less cluttered. It also provides more space for the code samples, which is the important part.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy New Year and hope you enjoy the new format. Feel free to leave any feedback in the comments below.</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4390</wp:post_id>
  <wp:post_date>2022-01-13 09:00:00</wp:post_date>
  <wp:post_date_gmt>2022-01-13 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-01-12 17:46:10</wp:post_modified>
  <wp:post_modified_gmt>2022-01-12 23:46:10</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-new-year-a-new-blog-layout</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="arcane-training-and-consulting"><![CDATA[Arcane Training and Consulting]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[67639679367]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1642086001]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1481642195882938371";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_374109551186630";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Getting Healthy With Tech]]></title>
  <link>http://arcanecode.com/2022/03/02/getting-healthy-with-tech/</link>
  <pubDate>Wed, 02 Mar 2022 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4394</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:heading -->
<h2 id="introduction">Introduction</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Over the last few months, I've been working hard to get healthier. I'm diabetic, with high blood pressure, and overweight (like a lot of people in IT). So, I've been working hard to change that.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'm also a tech nerd and a data guy. I've been using tech to track my progress, examine many critical metrics, and trend these over time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I thought others may benefit from what I've done in this area over the last few months, and thought I'd share the tech and apps I've been using here.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="apple-watch">Apple Watch</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>I use multiple platforms for my daily work, including Windows and Linux, but in my opinion it's Apple who has health tech really nailed down. My Apple Watch is my first tool for tracking my health.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With it, I can track my exercises. Every day, no excuses, I do a minimum of thirty minutes of exercise although as I've progressed it's turned into forty or more. I have an indoor exercise bike for rainy days, or on a nice day head to the great outdoors for a swift walk. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When I walk, I use walking / hiking poles to give my arms a bit of a workout. On days where I do my indoor bike, I do some weightlifting with some handheld barbells to work my arms.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My watch tracks the length of my workout, how many calories I burned, what the weather was like, and if I walk what path did I take, and what elevation change was included in my route.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In addition, it also tracks my blood oxygen level, heart rate, and has an ECG function. It also tracks my sleep to see how much rest I'm getting at night. The watch also has a cool little mindfulness app, which helps me calm down and focus.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, it provides reminders to stand up every hour. Like a lot of IT people, when I get seated in front of my PC I get really focused and lose track of time. Suddenly 3 hours can go by. Then when I stand up my bad back has gone stiff, and my arthritic hips let me know they aren't happy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The reminder to stand every hour has really made a difference. Getting up and moving around hourly really helps eliminate those stiff and sore times.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="apple-iphone-ipad">Apple iPhone / iPad</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The information in my watch feeds back to the Fitness and Health apps on my iPhone. Here I can review my information from the watch, combined with data from my other apps and tools, more of which I'll cover momentarily.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4401,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_1624.png"><img src="https://arcanecode.files.wordpress.com/2022/03/img_1624.png?w=473" alt="" class="wp-image-4401" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see, the fitness app gives me a nice dashboard of my progress. Today I did a 2.03-mile walk. My total exercise time for today was 50 minutes. Note that if I had done multiple exercise activities, for example 30 minutes on my bike and 10 minutes of weights, it would combine that time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It also shows my total calories burned, along with my target for today. So far, I've done 440 of 600 calories for my day today. The fitness app helps you calculate your target, but you can override it. In addition, it will prompt you to increase it over time based on your past workouts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, when I first started my goal was 520 calories. It then increased to 560, and now to 600. I'm sure in the near future I'll be prompted to increase it further, although as I mentioned I can change this whenever I feel I'm ready.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, it also shows how many times I've stood today, with a goal of standing up at least once during an hour, for 12 hours in the day.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The circles show your progress in a quick graphical format. Once the circle is closed you've completed your goal for the day, although it will continue the circle beyond the target. This makes it easy to challenge yourself to meet your goal.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some refer to this as the "gameification" of exercise. Turning exercise into a game, much like trying to get a high score in a video game. While intellectually I understand what is going on, it's still a fun challenge to meet these goals and very satisfying to see those circles close.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Beyond the software built into my Apple devices, there are some other devices and applications I use.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="basic-app-requirements">Basic App Requirements</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Before I list the apps and devices, I wanted to list a few of my basic requirements in selecting health apps. You may not have these same requirements, so you may find other apps that work better for you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>First, the app must work on both iPad and iPhone, with bonus points if there is an associated app for the Apple Watch. I like to do my monitoring of data on the iPad (which has a nice big screen my old eyes can see) but be able to register things like taking my meds on my iPhone, which is generally handy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next, the app needed to sync between the iPad / iPhone. I found many good apps, but very few that had the ability to synchronize their information between devices.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Finally, it needs to be easy to use. My wife is also tracking her health, but while smart she's not a technical person so it has to be good for an average user, and not just tech nerds like me.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="omron-blood-pressure-monitor">Omron Blood Pressure Monitor</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To keep track of my blood pressure I use a monitor from a company called <a rel="noreferrer noopener" href="https://omronhealthcare.com/blood-pressure/" target="_blank">Omron</a>. They have multiple devices, mine has Bluetooth and allows for two users, which is nice as you can share with your spouse / significant other / pesky relative that won't leave.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My model is the BP7350, but there are a range of models that support this functionality. In the Apple Appstore they have a corresponding Omron Connect app. It's pretty simple, you take your BP on the machine, then open the app and it syncs that reading to the iPhone.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4407,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_5ebcec7d6ca7-1.jpeg"><img src="https://arcanecode.files.wordpress.com/2022/03/img_5ebcec7d6ca7-1.jpeg?w=473" alt="" class="wp-image-4407" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see it displays my readings for today. I can tap the History button on the bottom to see my readings over time. Should my meter and phone not automatically synchronize, I can tap the Sync button in the upper right corner to have the two sync.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you tap the + button, it brings up an additional menu. Tap on Profile, then App Settings and it will let you copy your readings into the Apple Health App.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="blood-glucose">Blood Glucose</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Being diabetic it's important to monitor my blood glucose (aka blood sugar) every day. For that, I use the <a rel="noreferrer noopener" href="https://shop.onetouch.com/verio-flex-meter/product/OTSUS01_0004" target="_blank">OneTouch Verio Flex</a> meter. While this meter is not in my insurance company's "approved" list, it was only $26 (US). The test strips run about $22 (US) for thirty, about a month's supply.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Both of these I happily pay out of pocket for the convenience of easily tracking my readings. There is a corresponding OneTouch app for the iPhone, it pairs with the meter over Bluetooth. I just take my reading and it automatically syncs to my phone.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4410,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_1626.png"><img src="https://arcanecode.files.wordpress.com/2022/03/img_1626.png?w=473" alt="" class="wp-image-4410" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see it forms a two-way link to the Apple Health and Fitness apps. It copies my daily reading into Apple Health and reads in my workouts from Fitness. It also looks for and warns about negative trends.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And yes, before someone points it out, I know my sugars are way too high. Late last year we found out my previous meds had quit working. The doctor's office says it happens sometimes. So, my doctor and I are working with different medications to see what is most effective for me. It's still a work in progress.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I mentioned it is a two-way link, the app also writes my glucose numbers into my Apple Health app.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="weight-tracking">Weight Tracking</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As you might expect as part of getting healthier, I wanted to lose weight. Thus, I needed an effective way to track it. Ideally, I wanted to be able to just step on a scale, and it be recorded in an app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I already used some Wyze cameras, since I had the app already it was an easy choice to select the <a href="https://www.amazon.com/Bluetooth-Composition-Wireless-Percentage-Smartphone/dp/B086CYBVH9/ref=sr_1_2_sspa?crid=16O1I8CDLVFUJ&amp;keywords=Wyze+scale&amp;qid=1646174248&amp;sprefix=wyze+scale%2Caps%2C109&amp;sr=8-2-spons&amp;psc=1&amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExWFdaQjZRQTZaMkJCJmVuY3J5cHRlZElkPUEwOTkxODYwMjRPRkQwRVNaVTRGNiZlbmNyeXB0ZWRBZElkPUEwNDUzNjg5MzJaMThQRTlEWTEyOSZ3aWRnZXROYW1lPXNwX2F0ZiZhY3Rpb249Y2xpY2tSZWRpcmVjdCZkb05vdExvZ0NsaWNrPXRydWU=" target="_blank" rel="noreferrer noopener">Wyze scale</a>. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4430,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/61tqpg7ktql._ac_sl1500_.jpg"><img src="https://arcanecode.files.wordpress.com/2022/03/61tqpg7ktql._ac_sl1500_.jpg?w=913" alt="" class="wp-image-4430" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In addition to weight, it also has other measurements such as BMI. One tip, don't step off the scale too soon. Let it read your weight in, then wait a second. It will then calculate its other measurements. At that point you can step off, and the readings will show up in the Wyze app.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the screen that displays your weight, you can go into the settings (gear icon in the upper right) and turn on data sharing with third party apps, like Apple Health. At $33 (US) this was a no brainer purchase.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="hydration">Hydration</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Staying hydrated is important for good health. Especially for diabetics, as it helps keep the sugars flushed from your system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Note, <em>don't take anything here as medical advice</em>, I'm not a doctor, I'm just sharing what mine told me. Your situation may vary, so <em>be sure </em>to consult your own physician.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To track my hydration, and to get reminders that it is time to drink, I selected an app called <a rel="noreferrer noopener" href="https://waterminder.com" target="_blank">WaterMinder</a>. It has iPhone and iPad apps as well as an app for the Apple Watch. You enter basic data like your age, height, weight, and it calculates how much water you should take in.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To be honest this is the one failing I found with the app, the number it creates is about half of what every other site I found said I should be getting. For me it said 80 ounces a day, so I just doubled that, and overrode the goal to 160 ounces a day. Again, be sure to do your own research and discuss the proper fluid intake goals with your own doctor.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4415,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_1627.png"><img src="https://arcanecode.files.wordpress.com/2022/03/img_1627.png?w=473" alt="" class="wp-image-4415" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As you can see, the app provides a cute little graphic showing your intake for the day. So far, I've taken in 100.8 oz, or 63% of my goal. To add data, you can tap the + button and quick pick a water cup amount. Alternatively, you can tap the icon to the right of it, and it brings up a menu with various kinds of liquids and lets you type in how many ounces.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That's one of the things I really like about this app. If you, for example, drink milk, it calculates how much water is in the milk then adds just that amount of water to your hydration total.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The app will sync between devices, but it's not always automatic. You can force it though, although I didn't see it documented. Just tap the + button, then tap outside it, and it will force a sync.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can also share your readings with another user of the WaterMinder. I share mine with my wife, and she shares hers with me. We can see how much water the other one has ingested and encourage each other.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The app also has a nice history feature. It will show your trend over time, but for a given day it will also show you each individual entry. That way you can track exactly what you'd consumed that day.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="medication">Medication</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Many people, as they get older, take one or more medications. Even younger, healthier folks tend to take one or more vitamins. As such, it's important to have a way to track not just what medications you take but to remind you when it is time to take them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I spent a lot of time trying a multitude of apps to find one that met my requirements. I finally found one called <a href="https://apps.apple.com/us/app/everydose-medication-reminder/id1188929364" target="_blank" rel="noreferrer noopener">EveryDose</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>EveryDose is simple to use. You enter in all your medications. Built in there is a list of valid medications, so as you begin to type you can then pick your medication from the list. Should your medication not be in the list, no problem you can elect to add it anyway.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You also enter the strength of the pill, for example 50 mg, then the dose, 1 pill, 2, 1.5 pills, etc. Like the medications, you can enter a custom value as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As part of the data entry, you can select a time of day to take the medication, as well as a frequency (as needed, once a day, once a week, etc.). </p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4421,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/img_1628.png"><img src="https://arcanecode.files.wordpress.com/2022/03/img_1628.png?w=473" alt="" class="wp-image-4421" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Note I've blurred out my prescription meds, but you can also enter your vitamins into the app to track them. When the reminder alert goes off, you can tell the app you took the meds on time, just now, or enter a specific date/time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you need to, you can go down the list and pick the meds you took individually. This is handy should you run out of a particular pill that day.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can export your list of meds so you can easily share with your doctor or pharmacist, plus great logging so you can see which meds you have taken on what days.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The one thing it lacked was integration into Apple Health. I'd love to see it enter my vitamins and such into those areas in Apple Health. But its other features were enough to make me go with it. </p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="exporting-health-data">Exporting Health Data</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>You can take your health data to the next level by exporting it. Once exported, you can add it to your own database, or most importantly share it with your health care provider.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To do that well, I found an excellent app called <a rel="noreferrer noopener" href="https://apps.apple.com/us/app/health-auto-export-json-csv/id1115567069" target="_blank">Health Auto Export</a>. This is a multicomponent application. There is one app that runs on the iPhone itself. This app provides some simple reporting, but its main purpose is to run in the background and update your personal database. This data can then be used by the Health Auto Export iPad app, as well as their app that runs on MacOS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The primary purpose is to export your health data to a variety of formats such as CSV. You can bring this into Excel or Numbers, then slice and dice to provide your doctor with just the information they need.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It also has a nice dashboard which you can customize. Here's an example of mine:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center","id":4425,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large"><a href="https://arcanecode.files.wordpress.com/2022/03/healthautoexport.png"><img src="https://arcanecode.files.wordpress.com/2022/03/healthautoexport.png?w=1024" alt="" class="wp-image-4425" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This gives me an easy-to-use dashboard I can view on my Mac or my iPads. I can drill down, using the menu on the left, to get more details, along with trends displayed over various charts and graphs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As I mentioned, the most important functionality for me is the ability to export data. This has allowed me to share with my doctor, which helps him adjust my medication and track my health.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 id="conclusion">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As I work to improve my health, I've explored a variety of apps and tools to track my progress. I wanted to share what I've found so far in case you, too, are seeing to improve your health.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I said this earlier in the post but want to reiterate: <em>I am not a medical professional, and I am not offering medical advice</em>. Please consult your physician before embarking on any healthcare, such as exercise, hydration, medication, and the like.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For me this is a journey, a work in progress. It's possible, even likely, that as time goes by, I will find other apps and devices to improve my health.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you have suggestions, perhaps you've found a better app or device, then by all means share them in the comments so we can all get healthier. My slogan has become:</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Exercise, hydrate, medicate, every day! No excuses. Be a monster!</p><cite>ArcaneCode</cite></blockquote>
<!-- /wp:quote -->]]></content:encoded>
  <excerpt:encoded><![CDATA[Exercise, hydrate, medicate, every day! No excuses. Be a monster!]]></excerpt:encoded>
  <wp:post_id>4394</wp:post_id>
  <wp:post_date>2022-03-02 10:00:00</wp:post_date>
  <wp:post_date_gmt>2022-03-02 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-03-01 20:38:22</wp:post_modified>
  <wp:post_modified_gmt>2022-03-02 02:38:22</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>getting-healthy-with-tech</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="apple"><![CDATA[Apple]]></category>
  <category domain="post_tag" nicename="apple-watch"><![CDATA[Apple Watch]]></category>
  <category domain="post_tag" nicename="health"><![CDATA[Health]]></category>
  <category domain="post_tag" nicename="ipad"><![CDATA[iPad]]></category>
  <category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
  <category domain="category" nicename="personal"><![CDATA[Personal]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4425]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[69667419752]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1499051939732107265";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_403431528254432";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1646236809]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167330</wp:comment_id>
    <wp:comment_author><![CDATA[Using Technology for Health | Voice of the DBA]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://voiceofthedba.com/2022/03/05/using-technology-for-health/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.55</wp:comment_author_IP>
    <wp:comment_date>2022-03-05 09:44:11</wp:comment_date>
    <wp:comment_date_gmt>2022-03-05 15:44:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] thought about how I&#8217;ve used technology to help me with this after reading Robert Cain&#8217;s post on his efforts to get more healthy. Robert is a friend and I enjoy seeing him at various events. I&#8217;m looking forward to our next [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1646495051.311034;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1646500255.02968;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>167415</wp:comment_id>
    <wp:comment_author><![CDATA[Kr]]></wp:comment_author>
    <wp:comment_author_email>kifrivera@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>206.74.237.222</wp:comment_author_IP>
    <wp:comment_date>2022-03-16 12:35:59</wp:comment_date>
    <wp:comment_date_gmt>2022-03-16 18:35:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice slogan! and very inspiring post. Thank you for sharing the details of your research and successes. Best of luck in your ongoing efforts.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1647460406.910118;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1647455760.437903;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell - Extracting Blog Titles and Links from a Wordpress Blog with PowerShell]]></title>
  <link>http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/</link>
  <pubDate>Thu, 24 Mar 2022 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4445</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nSince September of 2020 I have been blogging heavily on PowerShell. In a few posts I'm going to start a new series on a different subject, but first I wanted to provide a wrap up post with links to all my recent PowerShell posts.\n\nExtracting all of those titles and links by hand seemed like a labor intensive task, so of course I wanted to automate it. In addition, I'll be able to reuse the code when I'm ready to wrap up my next, or a future, series.\n\nMy blog is hosted on Wordpress.com, which provides an export function. In this post I'll cover the code I created to extract all my links, and how I generated HTML from it. In my next post I'll show the same methodology for generating Markdown, and in the next post will do the PowerShell roundup.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Extracting Data from Wordpress\n\nOne of the administrator tools in the Wordpress.com site is the ability to extract your blog. You can generate an XML file with the entire contents of your blog. This includes all of the data including the post itself, comments, and associated metadata. They do provide the ability to limit the extract by by date range and subjects.\n\nAs you can guess this extract file is large, far too much to sift through by hand. That's where PowerShell came to my rescue!\n\nFor each post, the exported XML file has three lines we are interested in, the tags with ``, `` and ``. I tackled this in stages.\n\nAs the first stage, I simply loop over the data in the file, looking for the XML tags I need. When I've found all three, I have a small function that creates a PowerShell custom object. After each object is created, it is added into an array. I needed to do a little filtering, as over the last year I've added a few more blog posts on other topics. I did not want these to be included in my future \u0022Fun With PowerShell Roundup\u0022 post.\n\nOnce I have an array of custom objects, I can easily use them in multiple scenarios. For generating HTML I created a function that takes each object and generates a line of HTML code. It also has a way to generate the line as an HTML row instead of a series of paragraphs.\n\nFor my purposes, this was all I needed. However there may be times when you wish to generate a complete, but basic, web page. There is one more function I created that will take the output of the HTML rows and add the lines needed to make it a valid HTML page.\n\n## Generating a Custom Wordpress Object\n\nI mentioned a function to create a custom object, so let's start with that.\n\n``` powershell\nfunction Get-WPObject()\n{\n  [CmdletBinding()]\n  param (\n          [Parameter( Mandatory = $true ) ]\n          [string] $Title\n        , [Parameter( Mandatory = $true ) ]\n          [string] $Link\n        , [Parameter( Mandatory = $true ) ]\n          [string] $PubDate\n        )\n\n  # Build a hash table with the properties\n  $properties = [ordered]@{ Title = $Title\n                            Link = $Link\n                            PubDate = $PubDate\n                          }\n\n  # Start by creating an object of type PSObject\n  $object = New-Object –TypeName PSObject `\n                       -Property $properties\n\n  # Return the newly created object\n  return $object\n}\n```\n\nThe function is straightforward, it takes the three passed in parameters and creates a custom object from it. This is a common technique, it allows you to easily generate a custom object. It also leverages code reuse.\n\nIf you want to get a more detailed explanation on creating and using custom PowerShell objects, see my post [Fun With PowerShell Objects - PSCustomObject](https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/).\n\n## Creating The Array\n\nBefore we create the array, we need to read in the data from the Wordpress XML extract file. I create a variable to hold the location, then read it in.\n\n``` powershell\n$wpInput = 'D:\\OneDrive\\BlogPosts\\Markdown\\arcanecode.wordpress.2022-03-08.000.xml'\n\n# Read the data from input file\n$inData = Get-Content $wpInput\n```\n\nNow it's time to read in the data from the XML file, one line at a time.\n\n``` powershell\n# Setup an empty array to hold the output\n$outData = @()\n\nforeach ($line in $inData)\n{\n\n  # Extract the title. Replace the XML tags with the Markdown for a link title\n  if ($line.Trim().StartsWith(''))\n  {\n    $title = $line.Trim().Replace('', '').Replace('', '')\n  }\n\n  # Extract the link, replacing the XML tags with the Markdown link characters\n  if ($line.Trim().StartsWith(''))\n  {\n    $link = $line.Trim().Replace('', '').Replace('', '')\n\n    # For some reason the Wordpress export uses http instead of https. Since the\n    # blog supports https, lets fix that.\n    $link = $link.Replace('http:', 'https:')\n  }\n\n  if ($line.Trim().StartsWith(''))\n  {\n    # Extract just the date, then covert it to a DateTime datatype\n    $pubDateTemp = [DateTime]($line.Trim().Replace('', '').Replace('', ''))\n\n    # Now use the ToString feature of a DataTime datatype to format the date\n    $pubDate = $pubDateTemp.ToString('yyyy-MM-dd')\n\n    # In addition to links to the blog posts themselves, the exported XML file also\n    # has links to images. To weed these out, we will search for posts that have PowerShell\n    # in the title. The Contains method is case sensitive so it will omit the links\n    # to the images.\n    #\n    # When a match is found, it passes the Title/Link/PubDate to our function, which will\n    # generate a custom object. This object will be added to our output array.\n    if ($title.Contains('PowerShell'))\n    {\n      $outData += Get-WPObject -Title $title -Link $link -PubDate $pubDate\n    }\n\n  }\n\n} # End the foreach ($line in $inData) loop\n```\n\nFirst I create an empty array that will hold the output. To learn more about arrays, see my post [Fun With PowerShell Arrays](https://arcanecode.com/2021/07/26/fun-with-powershell-arrays/).\n\nNow I enter a `foreach` loop, to go over each line in the array. If you don't know, when you use `Get-Content` it returns each line in the file as a row in an array. That's what I want here, but be aware if you add the `-Raw` switch to the `Get-Content` it returns the entire file as one big text string.\n\nThe data in the XML occurs in the order of Title, Link, then PubDate. PubDate is the Publication Date for the blog post.\n\nAs I find the title and link, I remove the XML tags then copy the data into a local variable. For some reason the extract uses http for the links, so I wanted to correct it to use https.\n\nWhen I find the PubDate, I wanted to reformat it as a string in YYYY-MM-DD format. I extract just the date portion of the line by removing the XML tags. I then cast it to a `[DateTime]` and store it in a temporary variable.\n\nI can then call the `ToString` method of the DataTime datatype to format it in a format I want, namely YYYY-MM-DD (Year, Month, Day).\n\nNext I check to see if the title contains the word PowerShell. If so, I now have the three pieces of info I need, and call my function to generate the PSCustomObject and add it to the output array.\n\n## Creating HTML\n\nTo create the HTML I wrote a function, `Get-WPHtml`. Like the other functions I created this as an Advanced function. To read up on Advanced Functions, see my article [Fun With PowerShell Advanced Functions](https://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/).\n\nI needed this so I could pipe the data from the array containing my Wordpress PSCustomObjects into it. By doing it this way, I could reuse the `Get-WPHtml` with any array that has objects with three properties of Title, Link, and PubDate.\n\nLet's look at the function.\n\n``` powershell\nfunction Get-WPHtml()\n{\n  [CmdletBinding()]\n  param (\n          [Parameter (ValuefromPipeline)] $wpObjects\n        , [Parameter (Mandatory = $false)] $Indent = 0\n        , [switch] $FormatAsTable\n        )\n\n  process\n  {\n    # Create a string with spaces to indent the code. If not used no indent is created.\n    $space = ' ' * $Indent\n\n    # Create a formatted output line\n    if (!$FormatAsTable.IsPresent)\n    {\n      # Create each line as a paragraph\n      $outLine = @\u0022\n$space\u003cp\u003e$($wpObjects.PubDate) - \u003ca href=\u0022$($wpObjects.Link)\u0022 target=\u0022blank\u0022\u003e$($wpObjects.Title)\u003c/a\u003e\u003c/p\u003e\n\u0022@\n    }\n    else\n    {\n      # Create each line as a row in a table\n      $outLine = @\u0022\n$space\u003ctr\u003e \u003ctd\u003e$($wpObjects.PubDate)\u003c/td\u003e \u003ctd\u003e\u003ca href=\u0022$($wpObjects.Link)\u0022 target=\u0022blank\u0022\u003e$($wpObjects.Title)\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e\n\u0022@\n    }\n\n    # Return the formatted line\n    $outLine\n  }\n\n}\n```\n\nThe first parameter will accept the data from our pipeline, as I explain in my article [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/). Next is an optional parameter that allows the user to indent each row a certain number of spaces. The final parameter toggles between formatting each row as a standard paragraph or as a table row.\n\nThe process block will run once for each piece of data passed in from the pipeline. It creates a variable with the number of spaces the user indicated. If the user didn't pass a value in, this will wind up being an empty string.\n\nNext we check to see if the switch `FormatAsTable` was passed in, then create an output string based on the users choice. For more on switches, refer to my article [Fun With the PowerShell Switch Parameter](https://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/).\n\nAs a final step we return the newly formatted line, which puts it out to the pipeline.\n\n## Using the New Function\n\nUsing these functions is easy. We take the array of custom objects, then pipe it into the new Get-WPHtml function using an indent of 2. The result is copied into the `$outHtml` variable which will be an array.\n\nFinally we set the path for our output file, then use the `Out-File` cmdlet to write to disk.\n\n``` powershell\n$outHtml = $outData | Get-WPHtml -Indent 2\n\n# Save the new array to a file. Use Force to overwrite the file if it exists\n$wpOutputHtml = 'D:\\OneDrive\\BlogPosts\\Markdown\\arcanecode.wordpress2.html'\nOut-File -FilePath $wpOutputHtml -InputObject $outHtml -Force\n```\n\n## Creating a Full HTML Page\n\nFor my purposes, I am going to take the data in the file and copy and paste it into the Wordpress post editor when I create my roundup blog post. For testing purposes, however, it was convenient to have a full webpage. With a full webpage I can open it in a web browser, see the result, and test it out. Further, in other projects I may actually need a full webpage and not the part of one that I'll be using for my blog.\n\nThe version of the webpage with just paragraph tags will open OK in a browser, but the version of the table will not. So let's fix that.\n\nHere is the function I created to wrap the output of the previous function, when called using the `-FormatAsTable` flag, in the necessary HTML to make it a functioning webpage.\n\n``` powershell\nfunction Add-WPHtmlHeader()\n{\n  [CmdletBinding()]\n  param (\n          [Parameter (Mandatory = $true)]\n          $htmlData\n        )\n\n  # Create a new array\n  $outTable = @()\n\n  # Add the html to create a left aligned table header\n  $outTable += 'th { text-align: left; } '\n  $outTable += '\u003ctable\u003e'\n  $outTable += '\u003ctr\u003e'\n  $outTable += '\u003cth\u003eDate\u003c/th\u003e \u003cth\u003ePost\u003c/th\u003e'\n  $outTable += '\u003c/th\u003e'\n\n  # Add the existing table row data\n  foreach ($row in $htmlData) { $outTable += $row }\n\n  # Add the closing table tag\n  $outTable += '\u003c/table\u003e'\n\n  # Return the output\n  return $outTable\n}\n```\n\nThe one parameter is the array that was output from our `Get-WPHtml` function. While you can add rows to an array, or change values at a specific position, you can't insert new rows at specific positions. As such we have to create a new empty array, which was done with `$outTable`.\n\nWe then add the lines needed to create the table header. For this article I'm assuming you are familiar with basic HTML tags.\n\nOnce the header rows have been added we cycle through the input array, adding each row to the new output array.\n\nFinally we add the closing tag to finish off the table element, then return the output.\n\n## Generating the Complete Webpage\n\nNow that the hard part is done, all we have to do is call the function, passing in the output of the previous function, stored in `$outHtml`. This will then be written to a file using the `Out-File` cmdlet.\n\n``` powershell\n$outTable = Add-WPHtmlHeader $outHtml\n\n# Save the new array to a file. Use Force to overwrite the file if it exists\nOut-File -FilePath $wpOutputHtml -InputObject $outTable -Force\n```\n\n## The Output\n\nHere is a sample of the output of our hard work. Note I've only included a few rows of blog posts to keep it brief.\n\n```\nth { text-align: left; } \n\u003ctable\u003e\n\u003ctr\u003e\n\u003cth\u003eDate\u003c/th\u003e \u003cth\u003ePost\u003c/th\u003e\n\u003c/th\u003e\n  \u003ctr\u003e \u003ctd\u003e2020-09-29\u003c/td\u003e \u003ctd\u003e\u003ca href=\u0022https://arcanecode.com/2020/09/29/vscode-user-snippets-for-powershell-and-markdown/\u0022 target=\u0022blank\u0022\u003eVSCode User Snippets for PowerShell and MarkDown\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e2020-12-05\u003c/td\u003e \u003ctd\u003e\u003ca href=\u0022https://arcanecode.com/2020/12/05/two-new-powershell-courses-for-developers-on-pluralsight/\u0022 target=\u0022blank\u0022\u003eTwo New PowerShell Courses for Developers on Pluralsight\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e\n  \u003ctr\u003e \u003ctd\u003e2020-12-14\u003c/td\u003e \u003ctd\u003e\u003ca href=\u0022https://arcanecode.com/2020/12/14/iterate-over-a-hashtable-in-powershell/\u0022 target=\u0022blank\u0022\u003eIterate Over A Hashtable in PowerShell\u003c/a\u003e\u003c/td\u003e \u003c/tr\u003e\n\u003c/table\u003e\n```\n\n## Conclusion\n\nIn this post we tackled a project to create an HTML page based on the export of a Wordpress blog. In the process we used many of the techniques I've blogged about over the last year and a half.\n\nFor the next post we'll use these same techniques to create an output file in Markdown format.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>Since September of 2020 I have been blogging heavily on PowerShell. In a few posts I'm going to start a new series on a different subject, but first I wanted to provide a wrap up post with links to all my recent PowerShell posts.</p>
<p>Extracting all of those titles and links by hand seemed like a labor intensive task, so of course I wanted to automate it. In addition, I'll be able to reuse the code when I'm ready to wrap up my next, or a future, series.</p>
<p>My blog is hosted on Wordpress.com, which provides an export function. In this post I'll cover the code I created to extract all my links, and how I generated HTML from it. In my next post I'll show the same methodology for generating Markdown, and in the next post will do the PowerShell roundup.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Extracting Data from Wordpress</h2>
<p>One of the administrator tools in the Wordpress.com site is the ability to extract your blog. You can generate an XML file with the entire contents of your blog. This includes all of the data including the post itself, comments, and associated metadata. They do provide the ability to limit the extract by by date range and subjects.</p>
<p>As you can guess this extract file is large, far too much to sift through by hand. That's where PowerShell came to my rescue!</p>
<p>For each post, the exported XML file has three lines we are interested in, the tags with <code>&lt;title&gt;</code>, <code>&lt;pubDate&gt;</code> and <code>&lt;link&gt;</code>. I tackled this in stages.</p>
<p>As the first stage, I simply loop over the data in the file, looking for the XML tags I need. When I've found all three, I have a small function that creates a PowerShell custom object. After each object is created, it is added into an array. I needed to do a little filtering, as over the last year I've added a few more blog posts on other topics. I did not want these to be included in my future &quot;Fun With PowerShell Roundup&quot; post.</p>
<p>Once I have an array of custom objects, I can easily use them in multiple scenarios. For generating HTML I created a function that takes each object and generates a line of HTML code. It also has a way to generate the line as an HTML row instead of a series of paragraphs.</p>
<p>For my purposes, this was all I needed. However there may be times when you wish to generate a complete, but basic, web page. There is one more function I created that will take the output of the HTML rows and add the lines needed to make it a valid HTML page.</p>
<h2>Generating a Custom Wordpress Object</h2>
<p>I mentioned a function to create a custom object, so let's start with that.</p>
<pre><code class="language-powershell">function Get-WPObject()
{
  [CmdletBinding()]
  param (
          [Parameter( Mandatory = $true ) ]
          [string] $Title
        , [Parameter( Mandatory = $true ) ]
          [string] $Link
        , [Parameter( Mandatory = $true ) ]
          [string] $PubDate
        )

  # Build a hash table with the properties
  $properties = [ordered]@{ Title = $Title
                            Link = $Link
                            PubDate = $PubDate
                          }

  # Start by creating an object of type PSObject
  $object = New-Object –TypeName PSObject `
                       -Property $properties

  # Return the newly created object
  return $object
}
</code></pre>
<p>The function is straightforward, it takes the three passed in parameters and creates a custom object from it. This is a common technique, it allows you to easily generate a custom object. It also leverages code reuse.</p>
<p>If you want to get a more detailed explanation on creating and using custom PowerShell objects, see my post <a href="https://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/">Fun With PowerShell Objects - PSCustomObject</a>.</p>
<h2>Creating The Array</h2>
<p>Before we create the array, we need to read in the data from the Wordpress XML extract file. I create a variable to hold the location, then read it in.</p>
<pre><code class="language-powershell">$wpInput = 'D:\OneDrive\BlogPosts\Markdown\arcanecode.wordpress.2022-03-08.000.xml'

# Read the data from input file
$inData = Get-Content $wpInput
</code></pre>
<p>Now it's time to read in the data from the XML file, one line at a time.</p>
<pre><code class="language-powershell"># Setup an empty array to hold the output
$outData = @()

foreach ($line in $inData)
{

  # Extract the title. Replace the XML tags with the Markdown for a link title
  if ($line.Trim().StartsWith('&lt;title&gt;'))
  {
    $title = $line.Trim().Replace('&lt;title&gt;', '').Replace('&lt;/title&gt;', '')
  }

  # Extract the link, replacing the XML tags with the Markdown link characters
  if ($line.Trim().StartsWith('&lt;link&gt;'))
  {
    $link = $line.Trim().Replace('&lt;link&gt;', '').Replace('&lt;/link&gt;', '')

    # For some reason the Wordpress export uses http instead of https. Since the
    # blog supports https, lets fix that.
    $link = $link.Replace('http:', 'https:')
  }

  if ($line.Trim().StartsWith('&lt;pubDate&gt;'))
  {
    # Extract just the date, then covert it to a DateTime datatype
    $pubDateTemp = [DateTime]($line.Trim().Replace('&lt;pubDate&gt;', '').Replace('&lt;/pubDate&gt;', ''))

    # Now use the ToString feature of a DataTime datatype to format the date
    $pubDate = $pubDateTemp.ToString('yyyy-MM-dd')

    # In addition to links to the blog posts themselves, the exported XML file also
    # has links to images. To weed these out, we will search for posts that have PowerShell
    # in the title. The Contains method is case sensitive so it will omit the links
    # to the images.
    #
    # When a match is found, it passes the Title/Link/PubDate to our function, which will
    # generate a custom object. This object will be added to our output array.
    if ($title.Contains('PowerShell'))
    {
      $outData += Get-WPObject -Title $title -Link $link -PubDate $pubDate
    }

  }

} # End the foreach ($line in $inData) loop
</code></pre>
<p>First I create an empty array that will hold the output. To learn more about arrays, see my post <a href="https://arcanecode.com/2021/07/26/fun-with-powershell-arrays/">Fun With PowerShell Arrays</a>.</p>
<p>Now I enter a <code>foreach</code> loop, to go over each line in the array. If you don't know, when you use <code>Get-Content</code> it returns each line in the file as a row in an array. That's what I want here, but be aware if you add the <code>-Raw</code> switch to the <code>Get-Content</code> it returns the entire file as one big text string.</p>
<p>The data in the XML occurs in the order of Title, Link, then PubDate. PubDate is the Publication Date for the blog post.</p>
<p>As I find the title and link, I remove the XML tags then copy the data into a local variable. For some reason the extract uses http for the links, so I wanted to correct it to use https.</p>
<p>When I find the PubDate, I wanted to reformat it as a string in YYYY-MM-DD format. I extract just the date portion of the line by removing the XML tags. I then cast it to a <code>[DateTime]</code> and store it in a temporary variable.</p>
<p>I can then call the <code>ToString</code> method of the DataTime datatype to format it in a format I want, namely YYYY-MM-DD (Year, Month, Day).</p>
<p>Next I check to see if the title contains the word PowerShell. If so, I now have the three pieces of info I need, and call my function to generate the PSCustomObject and add it to the output array.</p>
<h2>Creating HTML</h2>
<p>To create the HTML I wrote a function, <code>Get-WPHtml</code>. Like the other functions I created this as an Advanced function. To read up on Advanced Functions, see my article <a href="https://arcanecode.com/2021/09/06/fun-with-powershell-advanced-functions/">Fun With PowerShell Advanced Functions</a>.</p>
<p>I needed this so I could pipe the data from the array containing my Wordpress PSCustomObjects into it. By doing it this way, I could reuse the <code>Get-WPHtml</code> with any array that has objects with three properties of Title, Link, and PubDate.</p>
<p>Let's look at the function.</p>
<pre><code class="language-powershell">function Get-WPHtml()
{
  [CmdletBinding()]
  param (
          [Parameter (ValuefromPipeline)] $wpObjects
        , [Parameter (Mandatory = $false)] $Indent = 0
        , [switch] $FormatAsTable
        )

  process
  {
    # Create a string with spaces to indent the code. If not used no indent is created.
    $space = ' ' * $Indent

    # Create a formatted output line
    if (!$FormatAsTable.IsPresent)
    {
      # Create each line as a paragraph
      $outLine = @&quot;
$space&lt;p&gt;$($wpObjects.PubDate) - &lt;a href=&quot;$($wpObjects.Link)&quot; target=blank&gt;$($wpObjects.Title)&lt;/a&gt;&lt;/p&gt;
&quot;@
    }
    else
    {
      # Create each line as a row in a table
      $outLine = @&quot;
$space&lt;tr&gt; &lt;td&gt;$($wpObjects.PubDate)&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;$($wpObjects.Link)&quot; target=blank&gt;$($wpObjects.Title)&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
&quot;@
    }

    # Return the formatted line
    $outLine
  }

}
</code></pre>
<p>The first parameter will accept the data from our pipeline, as I explain in my article <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a>. Next is an optional parameter that allows the user to indent each row a certain number of spaces. The final parameter toggles between formatting each row as a standard paragraph or as a table row.</p>
<p>The process block will run once for each piece of data passed in from the pipeline. It creates a variable with the number of spaces the user indicated. If the user didn't pass a value in, this will wind up being an empty string.</p>
<p>Next we check to see if the switch <code>FormatAsTable</code> was passed in, then create an output string based on the users choice. For more on switches, refer to my article <a href="https://arcanecode.com/2021/09/20/fun-with-the-powershell-switch-parameter/">Fun With the PowerShell Switch Parameter</a>.</p>
<p>As a final step we return the newly formatted line, which puts it out to the pipeline.</p>
<h2>Using the New Function</h2>
<p>Using these functions is easy. We take the array of custom objects, then pipe it into the new Get-WPHtml function using an indent of 2. The result is copied into the <code>$outHtml</code> variable which will be an array.</p>
<p>Finally we set the path for our output file, then use the <code>Out-File</code> cmdlet to write to disk.</p>
<pre><code class="language-powershell">$outHtml = $outData | Get-WPHtml -Indent 2

# Save the new array to a file. Use Force to overwrite the file if it exists
$wpOutputHtml = 'D:\OneDrive\BlogPosts\Markdown\arcanecode.wordpress2.html'
Out-File -FilePath $wpOutputHtml -InputObject $outHtml -Force
</code></pre>
<h2>Creating a Full HTML Page</h2>
<p>For my purposes, I am going to take the data in the file and copy and paste it into the Wordpress post editor when I create my roundup blog post. For testing purposes, however, it was convenient to have a full webpage. With a full webpage I can open it in a web browser, see the result, and test it out. Further, in other projects I may actually need a full webpage and not the part of one that I'll be using for my blog.</p>
<p>The version of the webpage with just paragraph tags will open OK in a browser, but the version of the table will not. So let's fix that.</p>
<p>Here is the function I created to wrap the output of the previous function, when called using the <code>-FormatAsTable</code> flag, in the necessary HTML to make it a functioning webpage.</p>
<pre><code class="language-powershell">function Add-WPHtmlHeader()
{
  [CmdletBinding()]
  param (
          [Parameter (Mandatory = $true)]
          $htmlData
        )

  # Create a new array
  $outTable = @()

  # Add the html to create a left aligned table header
  $outTable += '&lt;style&gt;th { text-align: left; } &lt;/style&gt;'
  $outTable += '&lt;table&gt;'
  $outTable += '&lt;tr&gt;'
  $outTable += '&lt;th&gt;Date&lt;/th&gt; &lt;th&gt;Post&lt;/th&gt;'
  $outTable += '&lt;/th&gt;'

  # Add the existing table row data
  foreach ($row in $htmlData) { $outTable += $row }

  # Add the closing table tag
  $outTable += '&lt;/table&gt;'

  # Return the output
  return $outTable
}
</code></pre>
<p>The one parameter is the array that was output from our <code>Get-WPHtml</code> function. While you can add rows to an array, or change values at a specific position, you can't insert new rows at specific positions. As such we have to create a new empty array, which was done with <code>$outTable</code>.</p>
<p>We then add the lines needed to create the table header. For this article I'm assuming you are familiar with basic HTML tags.</p>
<p>Once the header rows have been added we cycle through the input array, adding each row to the new output array.</p>
<p>Finally we add the closing tag to finish off the table element, then return the output.</p>
<h2>Generating the Complete Webpage</h2>
<p>Now that the hard part is done, all we have to do is call the function, passing in the output of the previous function, stored in <code>$outHtml</code>. This will then be written to a file using the <code>Out-File</code> cmdlet.</p>
<pre><code class="language-powershell">$outTable = Add-WPHtmlHeader $outHtml

# Save the new array to a file. Use Force to overwrite the file if it exists
Out-File -FilePath $wpOutputHtml -InputObject $outTable -Force
</code></pre>
<h2>The Output</h2>
<p>Here is a sample of the output of our hard work. Note I've only included a few rows of blog posts to keep it brief.</p>
<pre><code>&lt;style&gt;th { text-align: left; } &lt;/style&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Date&lt;/th&gt; &lt;th&gt;Post&lt;/th&gt;
&lt;/th&gt;
  &lt;tr&gt; &lt;td&gt;2020-09-29&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://arcanecode.com/2020/09/29/vscode-user-snippets-for-powershell-and-markdown/&quot; target=blank&gt;VSCode User Snippets for PowerShell and MarkDown&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
  &lt;tr&gt; &lt;td&gt;2020-12-05&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://arcanecode.com/2020/12/05/two-new-powershell-courses-for-developers-on-pluralsight/&quot; target=blank&gt;Two New PowerShell Courses for Developers on Pluralsight&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
  &lt;tr&gt; &lt;td&gt;2020-12-14&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;https://arcanecode.com/2020/12/14/iterate-over-a-hashtable-in-powershell/&quot; target=blank&gt;Iterate Over A Hashtable in PowerShell&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;/table&gt;
</code></pre>
<h2>Conclusion</h2>
<p>In this post we tackled a project to create an HTML page based on the export of a Wordpress blog. In the process we used many of the techniques I've blogged about over the last year and a half.</p>
<p>For the next post we'll use these same techniques to create an output file in Markdown format.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4445</wp:post_id>
  <wp:post_date>2022-03-24 10:00:00</wp:post_date>
  <wp:post_date_gmt>2022-03-24 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-03-23 18:19:42</wp:post_modified>
  <wp:post_modified_gmt>2022-03-24 00:19:42</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4448]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[70571478550]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1648137607]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1507024467993796612";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_417010276896557";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167499</wp:comment_id>
    <wp:comment_author><![CDATA[Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Generating Markdown &#8211; Arcane Code]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://arcanecode.com/2022/03/28/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell-generating-markdown/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.68</wp:comment_author_IP>
    <wp:comment_date>2022-03-28 10:00:12</wp:comment_date>
    <wp:comment_date_gmt>2022-03-28 16:00:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] my previous blogpost, Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell, I described how I extracted the title, link, and publication date for posts in my WordPress blog [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648483212.659271;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_as_submitted</wp:meta_key>
      <wp:meta_value><![CDATA[a:13:{s:14:"comment_author";s:146:"Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell &#8211; Generating Markdown &#8211; Arcane Code";s:18:"comment_author_url";s:144:"http://arcanecode.com/2022/03/28/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell-generating-markdown/";s:20:"comment_author_email";s:0:"";s:15:"comment_content";s:238:"[&#8230;] my previous blogpost, Fun With PowerShell &#8211; Extracting Blog Titles and Links from a WordPress Blog with PowerShell, I described how I extracted the title, link, and publication date for posts in my WordPress blog [&#8230;]";s:12:"comment_type";s:8:"pingback";s:17:"comment_author_IP";s:11:"192.0.86.68";s:13:"comment_agent";s:33:"WordPress.com Pingback of Awesome";s:7:"user_ip";s:11:"192.0.86.68";s:10:"user_agent";s:33:"WordPress.com Pingback of Awesome";s:4:"blog";s:22:"https://arcanecode.com";s:9:"blog_lang";s:2:"en";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:124:"http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1648488375.787651;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Fun With PowerShell - Extracting Blog Titles and Links from a Wordpress Blog with PowerShell - Generating Markdown]]></title>
  <link>http://arcanecode.com/2022/03/28/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell-generating-markdown/</link>
  <pubDate>Mon, 28 Mar 2022 16:00:00 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">https://arcanecode.com/?p=4449</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:jetpack/markdown {"source":"## Introduction\n\nIn my previous blogpost, [Fun With PowerShell - Extracting Blog Titles and Links from a Wordpress Blog with PowerShell](https://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/), I described how I extracted the title, link, and publication date for posts in my Wordpress blog using PowerShell. I then went on to use PowerShell to generate HTML code that I could insert into a post, or create a basic webpage.\n\nIt would also be useful to generate Markdown, instead of HTML, in case I want to use it somewhere such as my [GitHub page](https://github.com/arcanecode). In this post we'll see how to do just that, and create Markdown from the output array of PSCustomObjects.\n\nFor all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.\n\nAdditionally, be on the lookout for the backtick \\` , PowerShell's _line continuation_ character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post [Fun With PowerShell Pipelined Functions](https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/) dedicates a section to the line continuation character if you want to learn more.\n\nTo run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.\n\n## Where to Start\n\nMuch of the work has already been done in the [previous post](https://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/). Review it, stopping at the **Creating HTML** section. The array we created will now be used in generating Markdown.\n\nThis is the reason I created an array of custom objects holding the title, link, and publication date. Just as I used it to create HTML, I can now use it to generate Markdown.\n\n## Generating Markdown\n\nLike I did with the HTML, I created a function to create Markdown. This is and advanced function that I'll pipeline the array of PSCustomObjects into.\n\n``` powershell\nfunction Get-WPMarkdown()\n{\n  [CmdletBinding()]\n  param (\n          [Parameter (ValuefromPipeline)] $wpObjects\n        , [switch] $FormatAsTable\n        )\n\n  process\n  {\n    # Create a formatted output line\n    if (!$FormatAsTable.IsPresent)\n    {\n      # Create each line as a paragraph\n      $outLine = @\u0022\n$($wpObjects.PubDate) - [$($wpObjects.Title)]($($wpObjects.Link))\n\u0022@\n    }\n    else\n    {\n      # Create each line as a row in a table\n      $outLine = @\u0022\n|$($wpObjects.PubDate)|[$($wpObjects.Title)]($($wpObjects.Link))|\n\u0022@\n    }\n\n    # Return the formatted line\n    $outLine\n  }\n\n}\n```\n\nThe first parameter accepts the custom objects we generated from the pipeline. The second is a switch that will format the output as a row in a Markdown table, as opposed to just a line of Markdown text.\n\nI then check to see if the switch was passed in, and format the line to return accordingly. Finally I send the generated line out of the function.\n\n## Using the Get-WPMarkdown Function\n\nNow all we have to do is call the function. As a reminder, the data in the `$outData` variable is the array of custom objects we generated in the previous posts.\n\n``` powershell\n$outMd = $outData | Get-WPMarkdown\n\n$wpOutputMd = 'D:\\OneDrive\\BlogPosts\\Markdown\\arcanecode.wordpress2.md'\nOut-File -FilePath $wpOutputMd -InputObject $outMd -Force\n```\n\nThis will generate our data as rows in a Markdown file. Below is a small example.\n\n```\n2020-09-29 - [VSCode User Snippets for PowerShell and MarkDown](https://arcanecode.com/2020/09/29/vscode-user-snippets-for-powershell-and-markdown/)\n2020-12-05 - [Two New PowerShell Courses for Developers on Pluralsight](https://arcanecode.com/2020/12/05/two-new-powershell-courses-for-developers-on-pluralsight/)\n2020-12-14 - [Iterate Over A Hashtable in PowerShell](https://arcanecode.com/2020/12/14/iterate-over-a-hashtable-in-powershell/)\n```\n\n## Outputting a Markdown Table\n\nIn the code there was a switch to format the output Markdown as a table.\n\n``` powershell\n$outMd = $outData | Get-WPMarkdown -FormatAsTable\n```\n\nAs I did with the HTML example, I wanted to wrap the generated data in the appropriate Markdown code to make this a complete Markdown table. I created another function to handle this.\n\n``` powershell\nfunction Add-WPMarkdownHeader()\n{\n  [CmdletBinding()]\n  param (\n          [Parameter (Mandatory = $true)]\n          $markdownData\n        )\n\n  # Create a new array\n  $outTable = @()\n\n  # Add the html to create a left aligned table header\n  $outTable += '|Date|Post|'\n  $outTable += '|:\u002d\u002d\u002d\u002d-|:\u002d\u002d\u002d\u002d-|'\n\n  # Add the existing table row data\n  foreach ($row in $markdownData) { $outTable += $row }\n\n  # Return the output\n  return $outTable\n}\n```\n\nAs you can see, it creates a new array, adding the Markdown code for a table header, one specific for our data. It then cycles through the array that was passed in and adds it to the new array. Once done this new array is returned by the function.\n\nTo call it we simply use the following sample to write it to a file.\n\n``` powershell\n$outTable = Add-WPMarkdownHeader $outMd\nOut-File -FilePath $wpOutputMd -InputObject $outTable -Force\n```\n\nHere is a sample of the output.\n\n```\n|Date|Post|\n|:\u002d\u002d\u002d\u002d-|:\u002d\u002d\u002d\u002d-|\n2020-09-29 - [VSCode User Snippets for PowerShell and MarkDown](https://arcanecode.com/2020/09/29/vscode-user-snippets-for-powershell-and-markdown/)\n2020-12-05 - [Two New PowerShell Courses for Developers on Pluralsight](https://arcanecode.com/2020/12/05/two-new-powershell-courses-for-developers-on-pluralsight/)\n2020-12-14 - [Iterate Over A Hashtable in PowerShell](https://arcanecode.com/2020/12/14/iterate-over-a-hashtable-in-powershell/)\n```\n\n## Conclusion\n\nIn this post we saw how to generate Markdown code from a Wordpress blog extract. Combined with the code in my previous post I now have a handy script I can use to generate HTML and Markdown code from my blog posts. This will be handy for both now, and when I want to create wrap up posts for future series.\n\nThese techniques can be easily adapted for any XML file that you wish to create a summary listing for, in HTML or Markdown or both.\n\nThe demos in this series of blog posts were inspired by my Pluralsight course [PowerShell 7 Quick Start for Developers on Linux, macOS and Windows](https://pluralsight.pxf.io/jWzbre), one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my [About Me](https://arcanecode.com/info/) page.\n\nIf you don't have a Pluralsight subscription, just go to [my list of courses on Pluralsight](https://pluralsight.pxf.io/kjz6jn) . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.\n"} -->
<div class="wp-block-jetpack-markdown"><h2>Introduction</h2>
<p>In my previous blogpost, <a href="https://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/">Fun With PowerShell - Extracting Blog Titles and Links from a Wordpress Blog with PowerShell</a>, I described how I extracted the title, link, and publication date for posts in my Wordpress blog using PowerShell. I then went on to use PowerShell to generate HTML code that I could insert into a post, or create a basic webpage.</p>
<p>It would also be useful to generate Markdown, instead of HTML, in case I want to use it somewhere such as my <a href="https://github.com/arcanecode">GitHub page</a>. In this post we'll see how to do just that, and create Markdown from the output array of PSCustomObjects.</p>
<p>For all of the examples we'll display the code, then (when applicable) under it the result of our code. In this article I'll be using PowerShell Core, 7.2.2, and VSCode. The examples should work in PowerShell 5.1 in the PowerShell IDE, although they've not been tested there.</p>
<p>Additionally, be on the lookout for the backtick ` , PowerShell's <em>line continuation</em> character, at the end of many lines in the code samples. The blog formatting has a limited width, so using the line continuation character makes the examples much easier to read. My post <a href="https://arcanecode.com/2021/09/13/fun-with-powershell-pipelined-functions/">Fun With PowerShell Pipelined Functions</a> dedicates a section to the line continuation character if you want to learn more.</p>
<p>To run a snippet of code highlight the lines you want to execute, then in VSCode press F8 or in the IDE F5. You can display the contents of any variable by highlighting it and using F8/F5.</p>
<h2>Where to Start</h2>
<p>Much of the work has already been done in the <a href="https://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/">previous post</a>. Review it, stopping at the <strong>Creating HTML</strong> section. The array we created will now be used in generating Markdown.</p>
<p>This is the reason I created an array of custom objects holding the title, link, and publication date. Just as I used it to create HTML, I can now use it to generate Markdown.</p>
<h2>Generating Markdown</h2>
<p>Like I did with the HTML, I created a function to create Markdown. This is and advanced function that I'll pipeline the array of PSCustomObjects into.</p>
<pre><code class="language-powershell">function Get-WPMarkdown()
{
  [CmdletBinding()]
  param (
          [Parameter (ValuefromPipeline)] $wpObjects
        , [switch] $FormatAsTable
        )

  process
  {
    # Create a formatted output line
    if (!$FormatAsTable.IsPresent)
    {
      # Create each line as a paragraph
      $outLine = @&quot;
$($wpObjects.PubDate) - [$($wpObjects.Title)]($($wpObjects.Link))
&quot;@
    }
    else
    {
      # Create each line as a row in a table
      $outLine = @&quot;
|$($wpObjects.PubDate)|[$($wpObjects.Title)]($($wpObjects.Link))|
&quot;@
    }

    # Return the formatted line
    $outLine
  }

}
</code></pre>
<p>The first parameter accepts the custom objects we generated from the pipeline. The second is a switch that will format the output as a row in a Markdown table, as opposed to just a line of Markdown text.</p>
<p>I then check to see if the switch was passed in, and format the line to return accordingly. Finally I send the generated line out of the function.</p>
<h2>Using the Get-WPMarkdown Function</h2>
<p>Now all we have to do is call the function. As a reminder, the data in the <code>$outData</code> variable is the array of custom objects we generated in the previous posts.</p>
<pre><code class="language-powershell">$outMd = $outData | Get-WPMarkdown

$wpOutputMd = 'D:\OneDrive\BlogPosts\Markdown\arcanecode.wordpress2.md'
Out-File -FilePath $wpOutputMd -InputObject $outMd -Force
</code></pre>
<p>This will generate our data as rows in a Markdown file. Below is a small example.</p>
<pre><code>2020-09-29 - [VSCode User Snippets for PowerShell and MarkDown](https://arcanecode.com/2020/09/29/vscode-user-snippets-for-powershell-and-markdown/)
2020-12-05 - [Two New PowerShell Courses for Developers on Pluralsight](https://arcanecode.com/2020/12/05/two-new-powershell-courses-for-developers-on-pluralsight/)
2020-12-14 - [Iterate Over A Hashtable in PowerShell](https://arcanecode.com/2020/12/14/iterate-over-a-hashtable-in-powershell/)
</code></pre>
<h2>Outputting a Markdown Table</h2>
<p>In the code there was a switch to format the output Markdown as a table.</p>
<pre><code class="language-powershell">$outMd = $outData | Get-WPMarkdown -FormatAsTable
</code></pre>
<p>As I did with the HTML example, I wanted to wrap the generated data in the appropriate Markdown code to make this a complete Markdown table. I created another function to handle this.</p>
<pre><code class="language-powershell">function Add-WPMarkdownHeader()
{
  [CmdletBinding()]
  param (
          [Parameter (Mandatory = $true)]
          $markdownData
        )

  # Create a new array
  $outTable = @()

  # Add the html to create a left aligned table header
  $outTable += '|Date|Post|'
  $outTable += '|:-----|:-----|'

  # Add the existing table row data
  foreach ($row in $markdownData) { $outTable += $row }

  # Return the output
  return $outTable
}
</code></pre>
<p>As you can see, it creates a new array, adding the Markdown code for a table header, one specific for our data. It then cycles through the array that was passed in and adds it to the new array. Once done this new array is returned by the function.</p>
<p>To call it we simply use the following sample to write it to a file.</p>
<pre><code class="language-powershell">$outTable = Add-WPMarkdownHeader $outMd
Out-File -FilePath $wpOutputMd -InputObject $outTable -Force
</code></pre>
<p>Here is a sample of the output.</p>
<pre><code>|Date|Post|
|:-----|:-----|
2020-09-29 - [VSCode User Snippets for PowerShell and MarkDown](https://arcanecode.com/2020/09/29/vscode-user-snippets-for-powershell-and-markdown/)
2020-12-05 - [Two New PowerShell Courses for Developers on Pluralsight](https://arcanecode.com/2020/12/05/two-new-powershell-courses-for-developers-on-pluralsight/)
2020-12-14 - [Iterate Over A Hashtable in PowerShell](https://arcanecode.com/2020/12/14/iterate-over-a-hashtable-in-powershell/)
</code></pre>
<h2>Conclusion</h2>
<p>In this post we saw how to generate Markdown code from a Wordpress blog extract. Combined with the code in my previous post I now have a handy script I can use to generate HTML and Markdown code from my blog posts. This will be handy for both now, and when I want to create wrap up posts for future series.</p>
<p>These techniques can be easily adapted for any XML file that you wish to create a summary listing for, in HTML or Markdown or both.</p>
<p>The demos in this series of blog posts were inspired by my Pluralsight course <a href="https://pluralsight.pxf.io/jWzbre">PowerShell 7 Quick Start for Developers on Linux, macOS and Windows</a>, one of many PowerShell courses I have on Pluralsight. All of my courses are linked on my <a href="https://arcanecode.com/info/">About Me</a> page.</p>
<p>If you don't have a Pluralsight subscription, just go to <a href="https://pluralsight.pxf.io/kjz6jn">my list of courses on Pluralsight</a> . At the top is a Try For Free button you can use to get a free 10 day subscription to Pluralsight, with which you can watch my courses, or any other course on the site.</p>
</div>
<!-- /wp:jetpack/markdown -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4449</wp:post_id>
  <wp:post_date>2022-03-28 10:00:00</wp:post_date>
  <wp:post_date_gmt>2022-03-28 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2022-03-27 18:41:00</wp:post_modified>
  <wp:post_modified_gmt>2022-03-28 00:41:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell-generating-markdown</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="markdown"><![CDATA[Markdown]]></category>
  <category domain="category" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="wordpress"><![CDATA[WordPress]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[4450]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_attr</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_dimensions</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_responsive_height</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_coblocks_accordion_ie_support</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>spay_email</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_podcast</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_episode</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>jetpack_anchor_spotify_show</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_is_tweetstorm</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_feature_enabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[70725059503]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1648483208]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:25585777;s:57:"https://twitter.com/arcanecode/status/1508474027504984064";}s:8:"facebook";a:1:{i:25585797;s:52:"https://facebook.com/711316812344820_419513483312903";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408952</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585777</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[arcanecode]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_23408959</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_25585797</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[more-fun-with-powershell-enums-header]]></title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/more-fun-with-powershell-enums-header-2/</link>
  <pubDate>Sat, 27 Nov 2021 03:59:33 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4264</wp:post_id>
  <wp:post_date>2021-11-26 21:59:33</wp:post_date>
  <wp:post_date_gmt>2021-11-27 03:59:33</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 21:59:33</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 03:59:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums-header-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4261</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/more-fun-with-powershell-enums-header-1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:271;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/more-fun-with-powershell-enums-header-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:29190;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[more-fun-with-powershell-enums-header]]></title>
  <link>http://arcanecode.com/2021/11/29/more-fun-with-powershell-enums/more-fun-with-powershell-enums-header-3/</link>
  <pubDate>Sat, 27 Nov 2021 04:00:37 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4265</wp:post_id>
  <wp:post_date>2021-11-26 22:00:37</wp:post_date>
  <wp:post_date_gmt>2021-11-27 04:00:37</wp:post_date_gmt>
  <wp:post_modified>2021-11-26 22:00:37</wp:post_modified>
  <wp:post_modified_gmt>2021-11-27 04:00:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>more-fun-with-powershell-enums-header-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4261</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/11/more-fun-with-powershell-enums-header-2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/more-fun-with-powershell-enums-header-2.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:700;s:6:"height";i:271;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/11/more-fun-with-powershell-enums-header-2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:28763;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-classes-the-basics-header]]></title>
  <link>http://arcanecode.com/2021/12/14/fun-with-powershell-classes-the-basics/fun-with-powershell-classes-the-basics-header/</link>
  <pubDate>Mon, 13 Dec 2021 22:57:54 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/fun-with-powershell-classes-the-basics-header.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4279</wp:post_id>
  <wp:post_date>2021-12-13 16:57:54</wp:post_date>
  <wp:post_date_gmt>2021-12-13 22:57:54</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 16:57:54</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 22:57:54</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-the-basics-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4276</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/fun-with-powershell-classes-the-basics-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/fun-with-powershell-classes-the-basics-header.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:750;s:6:"height";i:430;s:4:"file";s:119:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/fun-with-powershell-classes-the-basics-header.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:38793;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-history-header]]></title>
  <link>http://arcanecode.com/2021/12/20/fun-with-history-the-history-guy/fun-with-history-header/</link>
  <pubDate>Mon, 13 Dec 2021 23:23:27 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/fun-with-history-header.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4285</wp:post_id>
  <wp:post_date>2021-12-13 17:23:27</wp:post_date>
  <wp:post_date_gmt>2021-12-13 23:23:27</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 17:23:27</wp:post_modified>
  <wp:post_modified_gmt>2021-12-13 23:23:27</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-history-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4280</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/fun-with-history-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/fun-with-history-header.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:663;s:6:"height";i:374;s:4:"file";s:97:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/fun-with-history-header.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:270039;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-preparedness-header]]></title>
  <link>http://arcanecode.com/2021/12/27/fun-with-preparedness/fun-with-preparedness-header/</link>
  <pubDate>Tue, 14 Dec 2021 00:40:13 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/fun-with-preparedness-header.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4297</wp:post_id>
  <wp:post_date>2021-12-13 18:40:13</wp:post_date>
  <wp:post_date_gmt>2021-12-14 00:40:13</wp:post_date_gmt>
  <wp:post_modified>2021-12-13 18:40:13</wp:post_modified>
  <wp:post_modified_gmt>2021-12-14 00:40:13</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-preparedness-header</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4287</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/fun-with-preparedness-header.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/fun-with-preparedness-header.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:754;s:6:"height";i:256;s:4:"file";s:102:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/fun-with-preparedness-header.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:390199;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[IMG_0965]]></title>
  <link>http://arcanecode.com/2022/01/03/happy-new-year-now-go-make-your-bed/img_0965/</link>
  <pubDate>Fri, 31 Dec 2021 22:39:24 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/img_0965.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4302</wp:post_id>
  <wp:post_date>2021-12-31 16:39:24</wp:post_date>
  <wp:post_date_gmt>2021-12-31 22:39:24</wp:post_date_gmt>
  <wp:post_modified>2021-12-31 16:39:24</wp:post_modified>
  <wp:post_modified_gmt>2021-12-31 22:39:24</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_0965</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4299</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/img_0965.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/img_0965.jpg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:3024;s:6:"height";i:4032;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/img_0965.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"1.5";s:6:"credit";s:0:"";s:6:"camera";s:17:"iPhone 13 Pro Max";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1639472529";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"5.7";s:3:"iso";s:3:"125";s:13:"shutter_speed";s:17:"0.013157894736842";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:8:"filesize";i:4637771;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[IMG_0965]]></title>
  <link>http://arcanecode.com/2022/01/03/happy-new-year-now-go-make-your-bed/img_0965-2/</link>
  <pubDate>Fri, 31 Dec 2021 22:49:09 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2021/12/img_0965-1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4307</wp:post_id>
  <wp:post_date>2021-12-31 16:49:09</wp:post_date>
  <wp:post_date_gmt>2021-12-31 22:49:09</wp:post_date_gmt>
  <wp:post_modified>2021-12-31 16:49:09</wp:post_modified>
  <wp:post_modified_gmt>2021-12-31 22:49:09</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_0965-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4299</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2021/12/img_0965-1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/img_0965-1.jpg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:1024;s:6:"height";i:562;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2021/12/img_0965-1.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"1.5";s:6:"credit";s:0:"";s:6:"camera";s:17:"iPhone 13 Pro Max";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1639472529";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"5.7";s:3:"iso";s:3:"125";s:13:"shutter_speed";s:17:"0.013157894736842";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:471702;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun-With-PowerShell-Objects-01-PSCustomObject]]></title>
  <link>http://arcanecode.com/2022/01/10/fun-with-powershell-objects-pscustomobject/fun-with-powershell-objects-01-pscustomobject/</link>
  <pubDate>Mon, 10 Jan 2022 01:12:37 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-01-pscustomobject.png</guid>
  <description/>
  <content:encoded><![CDATA[PSCustomObject Code Sample]]></content:encoded>
  <excerpt:encoded><![CDATA[PSCustomObject Code Sample]]></excerpt:encoded>
  <wp:post_id>4313</wp:post_id>
  <wp:post_date>2022-01-09 19:12:37</wp:post_date>
  <wp:post_date_gmt>2022-01-10 01:12:37</wp:post_date_gmt>
  <wp:post_modified>2022-01-09 19:13:04</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 01:13:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-01-pscustomobject</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4310</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-01-pscustomobject.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-objects-01-pscustomobject.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:700;s:6:"height";i:478;s:4:"file";s:119:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-objects-01-pscustomobject.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:155105;}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[PSCustomObject Sample]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun-With-PowerShell-Objects-02-PSCustomObject-Methods]]></title>
  <link>http://arcanecode.com/2022/01/17/fun-with-powershell-objects-adding-methods-to-pscustomobject/fun-with-powershell-objects-02-pscustomobject-methods/</link>
  <pubDate>Mon, 10 Jan 2022 20:58:30 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-02-pscustomobject-methods.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4318</wp:post_id>
  <wp:post_date>2022-01-10 14:58:30</wp:post_date>
  <wp:post_date_gmt>2022-01-10 20:58:30</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 14:58:30</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 20:58:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-02-pscustomobject-methods</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4317</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-02-pscustomobject-methods.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-objects-02-pscustomobject-methods.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:700;s:6:"height";i:315;s:4:"file";s:127:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-objects-02-pscustomobject-methods.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:31988;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun-With-PowerShell-Objects-03-Custom-Objects-From-CSharp]]></title>
  <link>http://arcanecode.com/2022/01/24/fun-with-powershell-objects-creating-objects-from-c/fun-with-powershell-objects-03-custom-objects-from-csharp/</link>
  <pubDate>Mon, 10 Jan 2022 21:56:08 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-03-custom-objects-from-csharp.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4322</wp:post_id>
  <wp:post_date>2022-01-10 15:56:08</wp:post_date>
  <wp:post_date_gmt>2022-01-10 21:56:08</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 15:56:08</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 21:56:08</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-03-custom-objects-from-csharp</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4321</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-03-custom-objects-from-csharp.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-objects-03-custom-objects-from-csharp.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:704;s:6:"height";i:326;s:4:"file";s:131:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-objects-03-custom-objects-from-csharp.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:23281;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Fun-With-PowerShell-Objects-04-Modifying-Existing-Objects]]></title>
  <link>http://arcanecode.com/2022/01/31/fun-with-powershell-objects-modifying-existing-objects/fun-with-powershell-objects-04-modifying-existing-objects/</link>
  <pubDate>Mon, 10 Jan 2022 22:49:20 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-04-modifying-existing-objects.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4326</wp:post_id>
  <wp:post_date>2022-01-10 16:49:20</wp:post_date>
  <wp:post_date_gmt>2022-01-10 22:49:20</wp:post_date_gmt>
  <wp:post_modified>2022-01-10 16:49:20</wp:post_modified>
  <wp:post_modified_gmt>2022-01-10 22:49:20</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-objects-04-modifying-existing-objects</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4325</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-objects-04-modifying-existing-objects.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-objects-04-modifying-existing-objects.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:704;s:6:"height";i:388;s:4:"file";s:131:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-objects-04-modifying-existing-objects.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:45654;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-classes-02-static]]></title>
  <link>http://arcanecode.com/2022/02/07/fun-with-powershell-classes-static-properties-and-methods/fun-with-powershell-classes-02-static/</link>
  <pubDate>Tue, 11 Jan 2022 21:31:14 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-02-static.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4332</wp:post_id>
  <wp:post_date>2022-01-11 15:31:14</wp:post_date>
  <wp:post_date_gmt>2022-01-11 21:31:14</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 15:31:14</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 21:31:14</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-02-static</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4330</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-02-static.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-classes-02-static.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:700;s:6:"height";i:296;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-classes-02-static.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:30925;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-classes-03-overload]]></title>
  <link>http://arcanecode.com/2022/02/14/fun-with-powershell-classes-overloading/fun-with-powershell-classes-03-overload/</link>
  <pubDate>Tue, 11 Jan 2022 23:32:04 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-03-overload.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4338</wp:post_id>
  <wp:post_date>2022-01-11 17:32:04</wp:post_date>
  <wp:post_date_gmt>2022-01-11 23:32:04</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 17:32:04</wp:post_modified>
  <wp:post_modified_gmt>2022-01-11 23:32:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-03-overload</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4336</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-03-overload.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-classes-03-overload.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:704;s:6:"height";i:289;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-classes-03-overload.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:27058;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[fun-with-powershell-classes-04-constructor]]></title>
  <link>http://arcanecode.com/2022/02/21/fun-with-powershell-classes-constructors/fun-with-powershell-classes-04-constructor/</link>
  <pubDate>Wed, 12 Jan 2022 00:06:37 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-04-constructor.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4344</wp:post_id>
  <wp:post_date>2022-01-11 18:06:37</wp:post_date>
  <wp:post_date_gmt>2022-01-12 00:06:37</wp:post_date_gmt>
  <wp:post_modified>2022-01-11 18:06:37</wp:post_modified>
  <wp:post_modified_gmt>2022-01-12 00:06:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>fun-with-powershell-classes-04-constructor</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4342</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/01/fun-with-powershell-classes-04-constructor.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-classes-04-constructor.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:700;s:6:"height";i:369;s:4:"file";s:116:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/01/fun-with-powershell-classes-04-constructor.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:31683;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[extract-title-and-link]]></title>
  <link>http://arcanecode.com/2022/03/24/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell/extract-title-and-link/</link>
  <pubDate>Thu, 24 Mar 2022 00:17:51 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/03/extract-title-and-link.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4448</wp:post_id>
  <wp:post_date>2022-03-23 18:17:51</wp:post_date>
  <wp:post_date_gmt>2022-03-24 00:17:51</wp:post_date_gmt>
  <wp:post_modified>2022-03-23 18:17:51</wp:post_modified>
  <wp:post_modified_gmt>2022-03-24 00:17:51</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>extract-title-and-link</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4445</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/03/extract-title-and-link.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/03/extract-title-and-link.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:701;s:6:"height";i:484;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/03/extract-title-and-link.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:47407;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[extract-title-and-link-md]]></title>
  <link>http://arcanecode.com/2022/03/28/fun-with-powershell-extracting-blog-titles-and-links-from-a-wordpress-blog-with-powershell-generating-markdown/extract-title-and-link-md/</link>
  <pubDate>Mon, 28 Mar 2022 00:36:56 +0000</pubDate>
  <dc:creator>arcanecode</dc:creator>
  <guid isPermaLink="false">http://arcanecode.files.wordpress.com/2022/03/extract-title-and-link-md.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4450</wp:post_id>
  <wp:post_date>2022-03-27 18:36:56</wp:post_date>
  <wp:post_date_gmt>2022-03-28 00:36:56</wp:post_date_gmt>
  <wp:post_modified>2022-03-27 18:36:56</wp:post_modified>
  <wp:post_modified_gmt>2022-03-28 00:36:56</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>extract-title-and-link-md</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>4449</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://arcanecode.files.wordpress.com/2022/03/extract-title-and-link-md.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/03/extract-title-and-link-md.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{s:5:"width";i:751;s:6:"height";i:408;s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/df0/340781/files/2022/03/extract-title-and-link-md.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:38682;}]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
